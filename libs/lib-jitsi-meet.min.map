{"version":3,"file":"lib-jitsi-meet.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAqB,YAAID,IAEzBD,EAAkB,YAAIC,IARxB,CASGK,MAAM,WACT,iFCVA,mCASA,WACE,aAEA,IAAIC,MAAQ,wBACRC,OAA2B,iBAAXC,OAChBT,KAAOQ,OAASC,OAAS,GACzBT,KAAKU,mBACPF,QAAS,GAEX,IAAIG,YAAcH,QAA0B,iBAATF,KAC/BM,SAAWZ,KAAKa,mBAAwC,iBAAZC,SAAwBA,QAAQC,UAAYD,QAAQC,SAASC,KACzGJ,QACFZ,KAAOiB,oBAAAA,EACEN,aACTX,KAAOM,MAET,IAAIY,WAAalB,KAAKmB,qBAAqDhB,OAAOD,QAC9EkB,IAAsChB,oBAAAA,KACtCiB,cAAgBrB,KAAKsB,wBAAiD,oBAAhBC,YACtDC,UAAY,mBAAmBC,MAAM,IACrCC,MAAQ,CAAC,IAAK,MAAO,SAAU,YAC/BC,MAAQ,CAAC,EAAG,EAAG,GAAI,IACnBC,aAAe,CAAC,MAAO,QAAS,SAAU,SAAU,cAAe,UACnEC,mBAAqB,mEAAmEJ,MAAM,IAE9FK,OAAS,GAAIC,QACjB,GAAIV,aAAc,CAChB,IAAIW,OAAS,IAAIT,YAAY,IAC7BQ,QAAU,IAAIE,WAAWD,QACzBF,OAAS,IAAII,YAAYF,SAGvBhC,KAAKa,mBAAsBsB,MAAMC,UACnCD,MAAMC,QAAU,SAAUC,GACxB,MAA+C,mBAAxCC,OAAOC,UAAUC,SAASC,KAAKJ,MAItChB,eAAiBrB,KAAK0C,gCAAmCnB,YAAYoB,SACvEpB,YAAYoB,OAAS,SAAUN,GAC7B,MAAsB,iBAARA,GAAoBA,EAAIL,QAAUK,EAAIL,OAAOY,cAAgBrB,cA6D/E,IAAIsB,mBAAqB,SAAUC,GACjC,OAAO,SAAUC,GACf,OAAO,IAAIC,KAAI,GAAMC,OAAOF,GAASD,OAwBrCI,aAAe,WACjB,IAAIC,EAASN,mBAAmB,OAC5BjC,UACFuC,EAASC,SAASD,IAEpBA,EAAOE,OAAS,WACd,OAAO,IAAIL,KAEbG,EAAOF,OAAS,SAAUF,GACxB,OAAOI,EAAOE,SAASJ,OAAOF,IAEhC,IAAK,IAAIO,EAAI,EAAGA,EAAI1B,aAAa2B,SAAUD,EAAG,CAC5C,IAAIE,EAAO5B,aAAa0B,GACxBH,EAAOK,GAAQX,mBAAmBW,GAEpC,OAAOL,GAGLC,SAAW,SAAUD,QACvB,IAAIM,OAASC,KAAK,qBACdC,OAASD,KAAK,4BACdE,WAAa,SAAUb,GACzB,GAAuB,iBAAZA,EACT,OAAOU,OAAOI,WAAW,OAAOZ,OAAOF,EAAS,QAAQe,OAAO,OAE/D,GAAIf,MAAAA,EACF,MAAMxC,MAKV,OAJawC,EAAQH,cAAgBrB,cACjCwB,EAAU,IAAId,WAAWc,IAGzBZ,MAAMC,QAAQW,IAAYxB,YAAYoB,OAAOI,IAC/CA,EAAQH,cAAgBe,OACjBF,OAAOI,WAAW,OAAOZ,OAAO,IAAIU,OAAOZ,IAAUe,OAAO,OAE5DX,OAAOJ,IAGlB,OAAOa,YAST,SAASZ,IAAIe,GACX,GAAIA,EACFjC,OAAO,GAAKA,OAAO,IAAMA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GACxDA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAAKA,OAAO,GAC3CA,OAAO,GAAKA,OAAO,GAAKA,OAAO,IAAMA,OAAO,IAC5CA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAMA,OAAO,IAAM,EACpDkC,KAAKlC,OAASA,OACdkC,KAAKjC,QAAUA,aAEf,GAAIV,aAAc,CAChB,IAAIW,EAAS,IAAIT,YAAY,IAC7ByC,KAAKjC,QAAU,IAAIE,WAAWD,GAC9BgC,KAAKlC,OAAS,IAAII,YAAYF,QAE9BgC,KAAKlC,OAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGnEkC,KAAKC,GAAKD,KAAKE,GAAKF,KAAKG,GAAKH,KAAKI,GAAKJ,KAAKK,MAAQL,KAAKM,MAAQN,KAAKO,OAAS,EAChFP,KAAKQ,UAAYR,KAAKS,QAAS,EAC/BT,KAAKU,OAAQ,EAYf1B,IAAIT,UAAUU,OAAS,SAAUF,GAC/B,IAAIiB,KAAKQ,UAAT,CAIA,IAAIG,EAAWnB,SAAcT,EAC7B,GAAa,WAATS,EAAmB,CACrB,GAAa,WAATA,EAWF,MAAMjD,MAVN,GAAgB,OAAZwC,EACF,MAAMxC,MACD,GAAIc,cAAgB0B,EAAQH,cAAgBrB,YACjDwB,EAAU,IAAId,WAAWc,QACpB,KAAKZ,MAAMC,QAAQW,IACnB1B,cAAiBE,YAAYoB,OAAOI,IACvC,MAAMxC,MAMZoE,GAAY,EAKd,IAHA,IAAIC,EAAiBtB,EAAXuB,EAAQ,EAAMtB,EAASR,EAAQQ,OAAQzB,EAASkC,KAAKlC,OAC3DC,EAAUiC,KAAKjC,QAEZ8C,EAAQtB,GAAQ,CAUrB,GATIS,KAAKS,SACPT,KAAKS,QAAS,EACd3C,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAGlD6C,EACF,GAAItD,aACF,IAAKiC,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,EAC/C9C,EAAQuB,KAAOP,EAAQ8B,QAGzB,IAAKvB,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,EAC/C/C,EAAOwB,GAAK,IAAMP,EAAQ8B,IAAUlD,MAAY,EAAN2B,UAI9C,GAAIjC,aACF,IAAKiC,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,GAC/CD,EAAO7B,EAAQ+B,WAAWD,IACf,IACT9C,EAAQuB,KAAOsB,EACNA,EAAO,MAChB7C,EAAQuB,KAAO,IAAQsB,GAAQ,EAC/B7C,EAAQuB,KAAO,IAAe,GAAPsB,GACdA,EAAO,OAAUA,GAAQ,OAClC7C,EAAQuB,KAAO,IAAQsB,GAAQ,GAC/B7C,EAAQuB,KAAO,IAASsB,GAAQ,EAAK,GACrC7C,EAAQuB,KAAO,IAAe,GAAPsB,IAEvBA,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9B7B,EAAQ+B,aAAaD,IACjE9C,EAAQuB,KAAO,IAAQsB,GAAQ,GAC/B7C,EAAQuB,KAAO,IAASsB,GAAQ,GAAM,GACtC7C,EAAQuB,KAAO,IAASsB,GAAQ,EAAK,GACrC7C,EAAQuB,KAAO,IAAe,GAAPsB,QAI3B,IAAKtB,EAAIU,KAAKK,MAAOQ,EAAQtB,GAAUD,EAAI,KAAMuB,GAC/CD,EAAO7B,EAAQ+B,WAAWD,IACf,IACT/C,EAAOwB,GAAK,IAAMsB,GAAQjD,MAAY,EAAN2B,KACvBsB,EAAO,MAChB9C,EAAOwB,GAAK,KAAO,IAAQsB,GAAQ,IAAOjD,MAAY,EAAN2B,KAChDxB,EAAOwB,GAAK,KAAO,IAAe,GAAPsB,IAAiBjD,MAAY,EAAN2B,MACzCsB,EAAO,OAAUA,GAAQ,OAClC9C,EAAOwB,GAAK,KAAO,IAAQsB,GAAQ,KAAQjD,MAAY,EAAN2B,KACjDxB,EAAOwB,GAAK,KAAO,IAASsB,GAAQ,EAAK,KAAUjD,MAAY,EAAN2B,KACzDxB,EAAOwB,GAAK,KAAO,IAAe,GAAPsB,IAAiBjD,MAAY,EAAN2B,OAElDsB,EAAO,QAAoB,KAAPA,IAAiB,GAAqC,KAA9B7B,EAAQ+B,aAAaD,IACjE/C,EAAOwB,GAAK,KAAO,IAAQsB,GAAQ,KAAQjD,MAAY,EAAN2B,KACjDxB,EAAOwB,GAAK,KAAO,IAASsB,GAAQ,GAAM,KAAUjD,MAAY,EAAN2B,KAC1DxB,EAAOwB,GAAK,KAAO,IAASsB,GAAQ,EAAK,KAAUjD,MAAY,EAAN2B,KACzDxB,EAAOwB,GAAK,KAAO,IAAe,GAAPsB,IAAiBjD,MAAY,EAAN2B,MAK1DU,KAAKe,cAAgBzB,EACrBU,KAAKM,OAAShB,EAAIU,KAAKK,MACnBf,GAAK,IACPU,KAAKK,MAAQf,EAAI,GACjBU,KAAKgB,OACLhB,KAAKS,QAAS,GAEdT,KAAKK,MAAQf,EAOjB,OAJIU,KAAKM,MAAQ,aACfN,KAAKO,QAAUP,KAAKM,MAAQ,YAAc,EAC1CN,KAAKM,MAAQN,KAAKM,MAAQ,YAErBN,OAGThB,IAAIT,UAAU0C,SAAW,WACvB,IAAIjB,KAAKQ,UAAT,CAGAR,KAAKQ,WAAY,EACjB,IAAI1C,EAASkC,KAAKlC,OAAQwB,EAAIU,KAAKe,cACnCjD,EAAOwB,GAAK,IAAM5B,MAAU,EAAJ4B,GACpBA,GAAK,KACFU,KAAKS,QACRT,KAAKgB,OAEPlD,EAAO,GAAKA,EAAO,IACnBA,EAAO,IAAMA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC5CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAC3CA,EAAO,GAAKA,EAAO,GAAKA,EAAO,IAAMA,EAAO,IAC5CA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAMA,EAAO,IAAM,GAEtDA,EAAO,IAAMkC,KAAKM,OAAS,EAC3BxC,EAAO,IAAMkC,KAAKO,QAAU,EAAIP,KAAKM,QAAU,GAC/CN,KAAKgB,SAGPhC,IAAIT,UAAUyC,KAAO,WACnB,IAAIE,EAAGC,EAAGC,EAAGC,EAAGC,EAAIC,EAAIzD,EAASkC,KAAKlC,OAElCkC,KAAKU,MAQPS,IADAA,IALAD,IADAA,EAAIpD,EAAO,GAAK,YACN,EAAIoD,IAAM,IAAM,WAAa,IAIvCE,IADAA,IAAM,WADNC,IADAA,IAAM,WAAiB,WAAJH,GAAkBpD,EAAO,GAAK,YACvC,GAAKuD,IAAM,IAAMH,GAAK,KACH,UAALA,IAAoBpD,EAAO,GAAK,aAC9C,GAAKsD,IAAM,IAAMC,GAAK,IACjBA,EAAIH,IAAOpD,EAAO,GAAK,aAC5B,GAAKqD,IAAM,IAAMC,GAAK,GAEhCF,EAAIlB,KAAKC,GACTkB,EAAInB,KAAKE,GACTkB,EAAIpB,KAAKG,GASTgB,IADAA,KALAD,IADAA,KADAG,EAAIrB,KAAKI,IACEe,GAAKC,EAAIC,IAAOvD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,GAAK,YAC7B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,GAAK,aAC7B,GAAKqD,IAAM,IAAMC,GAAK,GAUlCD,IADAA,KALAD,IADAA,IAAMG,EAAKF,GAAKC,EAAIC,IAAOvD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,GAAK,aAC7B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,GAAK,aAC7B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,GAAK,WAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KALAD,IADAA,IAAMG,EAAKF,GAAKC,EAAIC,IAAOvD,EAAO,GAAK,aAC7B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,GAAK,aAC7B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,IAAM,QAC9B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,IAAM,aAC9B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KALAD,IADAA,IAAMG,EAAKF,GAAKC,EAAIC,IAAOvD,EAAO,IAAM,aAC9B,EAAIoD,IAAM,IAAMC,GAAK,IAI/BC,IADAA,IAAMD,GADNE,IADAA,IAAMD,EAAKF,GAAKC,EAAIC,IAAOtD,EAAO,IAAM,WAC9B,GAAKuD,IAAM,IAAMH,GAAK,IAChBA,EAAIC,IAAOrD,EAAO,IAAM,aAC9B,GAAKsD,IAAM,IAAMC,GAAK,IAChBA,EAAIH,IAAOpD,EAAO,IAAM,aAC9B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,GAAK,aAC7B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,IAAM,YAC9B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,GAAK,YAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,IAAM,WAC9B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,IAAM,YAC9B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,GAAK,YAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,GAAK,YAC7B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,IAAM,aAC9B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,GAAK,YAC7B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,GAAK,aAC7B,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,EAAKC,IADXF,IADAA,IAAME,EAAKC,GAAKF,EAAIC,IAAOtD,EAAO,IAAM,aAC9B,EAAIoD,IAAM,IAAMC,GAAK,GACXA,IAAOrD,EAAO,GAAK,WAC7B,EAAIuD,IAAM,IAAMH,GAAK,GAGpBA,IADXE,IADAA,IAAMF,EAAKC,GAAKE,EAAIH,IAAOpD,EAAO,GAAK,aAC7B,GAAKsD,IAAM,IAAMC,GAAK,GACZA,IAAOvD,EAAO,IAAM,aAC9B,GAAKqD,IAAM,IAAMC,GAAK,EAUhCD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,GAAK,SAClB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,GAAK,aAClB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,IAAM,aACnB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,IAAM,WACnB,GAAKqD,IAAM,GAAKC,GAAK,EAU/BD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,GAAK,aAClB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,GAAK,aAClB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,GAAK,YAClB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,IAAM,aACnB,GAAKqD,IAAM,GAAKC,GAAK,EAU/BD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,IAAM,YACnB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,GAAK,YAClB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,GAAK,YAClB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,GAAK,WAClB,GAAKqD,IAAM,GAAKC,GAAK,EAU/BD,IADAA,KAHAI,GADAF,IADAA,KAHAC,EAAKH,EAAIC,IAETF,IADAA,IAAMI,EAAKD,GAAKvD,EAAO,GAAK,YAClB,EAAIoD,IAAM,IAAMC,GAAK,IACfrD,EAAO,IAAM,YACnB,GAAKuD,IAAM,IAAMH,GAAK,GACvBA,IAETE,IADAA,IAAMG,EAAKJ,GAAKrD,EAAO,IAAM,YACnB,GAAKsD,IAAM,IAAMC,GAAK,IAChBvD,EAAO,GAAK,YAClB,GAAKqD,IAAM,GAAKC,GAAK,EAQ/BD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,GAAK,YACxB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,GAAK,aACxB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,IAAM,aACzB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,GAAK,WACxB,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,IAAM,aACzB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,GAAK,aACxB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,IAAM,UACzB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,GAAK,aACxB,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,GAAK,aACxB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,IAAM,WACzB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,GAAK,aACxB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,IAAM,aACzB,GAAKqD,IAAM,IAAMC,GAAK,EAQhCD,IADAA,KAHAE,IADAA,IAAMF,IADND,IADAA,IAAME,GAAKD,GAAKE,IAAMvD,EAAO,GAAK,YACxB,EAAIoD,IAAM,IAAMC,GAAK,IACfC,IAAMtD,EAAO,IAAM,aACzB,GAAKuD,IAAM,IAAMH,GAAK,KAEhCE,IADAA,IAAMF,GAAKG,GAAKF,IAAMrD,EAAO,GAAK,YACxB,GAAKsD,IAAM,IAAMC,GAAK,IAChBH,IAAMpD,EAAO,GAAK,YACxB,GAAKqD,IAAM,IAAMC,GAAK,EAE5BpB,KAAKU,OACPV,KAAKC,GAAKiB,EAAI,YAAc,EAC5BlB,KAAKE,GAAKiB,EAAI,WAAa,EAC3BnB,KAAKG,GAAKiB,EAAI,YAAc,EAC5BpB,KAAKI,GAAKiB,EAAI,WAAa,EAC3BrB,KAAKU,OAAQ,IAEbV,KAAKC,GAAKD,KAAKC,GAAKiB,GAAK,EACzBlB,KAAKE,GAAKF,KAAKE,GAAKiB,GAAK,EACzBnB,KAAKG,GAAKH,KAAKG,GAAKiB,GAAK,EACzBpB,KAAKI,GAAKJ,KAAKI,GAAKiB,GAAK,IAc7BrC,IAAIT,UAAUiD,IAAM,WAClBxB,KAAKiB,WAEL,IAAIhB,EAAKD,KAAKC,GAAIC,EAAKF,KAAKE,GAAIC,EAAKH,KAAKG,GAAIC,EAAKJ,KAAKI,GAExD,OAAO5C,UAAWyC,GAAM,EAAK,IAAQzC,UAAe,GAALyC,GAC7CzC,UAAWyC,GAAM,GAAM,IAAQzC,UAAWyC,GAAM,EAAK,IACrDzC,UAAWyC,GAAM,GAAM,IAAQzC,UAAWyC,GAAM,GAAM,IACtDzC,UAAWyC,GAAM,GAAM,IAAQzC,UAAWyC,GAAM,GAAM,IACtDzC,UAAW0C,GAAM,EAAK,IAAQ1C,UAAe,GAAL0C,GACxC1C,UAAW0C,GAAM,GAAM,IAAQ1C,UAAW0C,GAAM,EAAK,IACrD1C,UAAW0C,GAAM,GAAM,IAAQ1C,UAAW0C,GAAM,GAAM,IACtD1C,UAAW0C,GAAM,GAAM,IAAQ1C,UAAW0C,GAAM,GAAM,IACtD1C,UAAW2C,GAAM,EAAK,IAAQ3C,UAAe,GAAL2C,GACxC3C,UAAW2C,GAAM,GAAM,IAAQ3C,UAAW2C,GAAM,EAAK,IACrD3C,UAAW2C,GAAM,GAAM,IAAQ3C,UAAW2C,GAAM,GAAM,IACtD3C,UAAW2C,GAAM,GAAM,IAAQ3C,UAAW2C,GAAM,GAAM,IACtD3C,UAAW4C,GAAM,EAAK,IAAQ5C,UAAe,GAAL4C,GACxC5C,UAAW4C,GAAM,GAAM,IAAQ5C,UAAW4C,GAAM,EAAK,IACrD5C,UAAW4C,GAAM,GAAM,IAAQ5C,UAAW4C,GAAM,GAAM,IACtD5C,UAAW4C,GAAM,GAAM,IAAQ5C,UAAW4C,GAAM,GAAM,KAa1DpB,IAAIT,UAAUC,SAAWQ,IAAIT,UAAUiD,IAYvCxC,IAAIT,UAAUuB,OAAS,WACrBE,KAAKiB,WAEL,IAAIhB,EAAKD,KAAKC,GAAIC,EAAKF,KAAKE,GAAIC,EAAKH,KAAKG,GAAIC,EAAKJ,KAAKI,GACxD,MAAO,CACA,IAALH,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,IACxD,IAALC,EAAYA,GAAM,EAAK,IAAOA,GAAM,GAAM,IAAOA,GAAM,GAAM,MAcjEpB,IAAIT,UAAUkD,MAAQzC,IAAIT,UAAUuB,OAYpCd,IAAIT,UAAUmD,YAAc,WAC1B1B,KAAKiB,WAEL,IAAIjD,EAAS,IAAIT,YAAY,IACzBO,EAAS,IAAII,YAAYF,GAK7B,OAJAF,EAAO,GAAKkC,KAAKC,GACjBnC,EAAO,GAAKkC,KAAKE,GACjBpC,EAAO,GAAKkC,KAAKG,GACjBrC,EAAO,GAAKkC,KAAKI,GACVpC,GAcTgB,IAAIT,UAAUP,OAASgB,IAAIT,UAAUmD,YAYrC1C,IAAIT,UAAUoD,OAAS,WAErB,IADA,IAAIC,EAAIC,EAAIC,EAAIC,EAAY,GAAIzB,EAAQN,KAAKyB,QACpCnC,EAAI,EAAGA,EAAI,IAClBsC,EAAKtB,EAAMhB,KACXuC,EAAKvB,EAAMhB,KACXwC,EAAKxB,EAAMhB,KACXyC,GAAalE,mBAAmB+D,IAAO,GACrC/D,mBAA0C,IAAtB+D,GAAM,EAAIC,IAAO,IACrChE,mBAA0C,IAAtBgE,GAAM,EAAIC,IAAO,IACrCjE,mBAAwB,GAALiE,GAMvB,OAJAF,EAAKtB,EAAMhB,GACXyC,GAAalE,mBAAmB+D,IAAO,GACrC/D,mBAAoB+D,GAAM,EAAK,IAC/B,OAIJ,IAAI1F,QAAUgD,eAEVhC,UACFf,OAAOD,QAAUA,SAmBjBF,KAAKgG,IAAM9F,QACPkB,MACFhB,8BAAAA,WACE,OAAOF,SADH,2IA5pBZ,aCTA,IAAI+F,EAAU9F,EAAOD,QAAU,CAC7BgG,EAAG,CAAC,CACFC,KAAM,UACNC,IAAK,YAEPC,EAAG,CAAC,CAGFF,KAAM,SACNC,IAAK,wCACLE,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEC,OAAQ,wBAGVC,EAAG,CAAC,CAAEL,KAAM,SACZ7C,EAAG,CAAC,CAAE6C,KAAM,gBACZM,EAAG,CAAC,CAAEN,KAAM,QACZO,EAAG,CAAC,CAAEP,KAAM,UACZQ,EAAG,CAAC,CAAER,KAAM,UACZS,EAAG,CAAC,CAAET,KAAM,cACZU,EAAG,CAAC,CAAEV,KAAM,YAEZW,EAAG,CAAC,CAEFX,KAAM,SACNC,IAAK,eACLE,MAAO,CAAC,QAAS,QACjBC,OAAQ,UAEVnB,EAAG,CAAC,CAEFe,KAAM,aACNC,IAAK,mBACLE,MAAO,CAAC,UAAW,MACnBC,OAAQ,eAEVpB,EAAG,CAAC,CAEF4B,KAAM,YACNX,IAAK,4BACLE,MAAO,CAAC,OAAQ,SAChBC,OAAQ,UAEVS,EAAG,CAAC,CAIFZ,IAAK,kCACLE,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCC,OAAQ,gBAEVrB,EAAG,CACD,CAEE6B,KAAM,MACNX,IAAK,yDACLE,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCC,OAAQ,SAAUF,GAChB,OAAQA,EAAEY,SACN,qBACAZ,EAAEa,KACA,kBACA,iBAGV,CAGEH,KAAM,OACNX,IAAK,wBACLE,MAAO,CAAC,UAAW,UACnBC,OAAQ,cAEV,CAEEJ,KAAM,UACNC,IAAK,gBACLG,OAAQ,cAEV,CAEEJ,KAAM,OACNC,IAAK,sCACLE,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEc,QACN,qBACA,YAGR,CAEEJ,KAAM,eACNX,IAAK,kCACLE,MAAO,CAAC,UAAW,SACnBC,OAAQ,yBAEV,CAEEQ,KAAM,SACNX,IAAK,6CACLE,MAAO,CAAC,UAAW,OAAQ,WAC3BC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEe,QACN,mBACA,kBAGR,CAIEL,KAAM,MACNX,IAAK,uFACLE,MAAO,CAAC,QAAS,YAAa,cAAe,MAAO,UACpDC,OAAQ,SAAUF,GAChB,MACE,aACCA,EAAEgB,UAAY,MAAQ,OACtBhB,EAAE,eAAiB,MAAQ,MAC5B,OACCA,EAAEiB,OAAS,MAAQ,MAI1B,CAEEnB,KAAM,mBACNC,IAAK,yBAEP,CAEEW,KAAM,SACNX,IAAK,0CACLE,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCC,OAAQ,SAAUF,GAChB,OAA2B,MAAnBA,EAAEkB,cACN,qBACA,oBAGR,CAEEpB,KAAM,QACNC,IAAK,eACLG,OAAQ,YAEV,CAEEJ,KAAM,iBACNC,IAAK,6BACLG,OAAQ,iBAEV,CAEEJ,KAAM,MACNC,IAAK,gBACLG,OAAQ,UAEV,CAEEJ,KAAM,OACNC,IAAK,aACLG,OAAQ,WAEV,CAEEJ,KAAM,QACNC,IAAK,yBACLG,OAAQ,YAEV,CAEEJ,KAAM,WACNC,IAAK,4BACLG,OAAQ,eAEV,CAEEJ,KAAM,YACNC,IAAK,0CAEP,CAEED,KAAM,UACNC,IAAK,eAEP,CAEED,KAAM,WACNC,IAAK,mBACLG,OAAQ,gBAEV,CAEEJ,KAAM,SACNC,IAAK,iBACLG,OAAQ,cAEV,CAEEJ,KAAM,cACNC,IAAK,2BACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,qBAEV,CAMEQ,KAAK,aACLX,IAAK,+KACLE,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IC,OAAQ,SAAUF,GAChB,IAAImB,EAAM,qCAaV,OAXAA,GAAmB,MAAXnB,EAAEoB,MAAiB,qBAAuB,OAGlDD,GAAqB,MAAbnB,EAAEqB,QAAmB,cAAgB,KAEzB,MAAhBrB,EAAEsB,aACJH,GAAO,mBAGTA,GAA2B,MAAnBnB,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,QAI9D,CAEEF,KAAM,kBACNC,IAAK,wBAEP,CAEED,KAAM,mBACNC,IAAK,0BACLG,OAAQ,wBAEV,CAEEJ,KAAM,aACNC,IAAK,qBACLG,OAAQ,kBAEV,CAEEQ,KAAM,QACNX,IAAK,kCACLE,MAAO,CAAC,KAAM,YAAa,SAC3BC,OAAQ,SAAUF,GAChB,IAAImB,EAAM,UAOV,OANmB,MAAfnB,EAAEuB,YACJJ,GAAO,MACQ,MAAXnB,EAAEwB,QACJL,GAAO,QAGJA,IAGX,CAGET,KAAM,aAENX,IAAK,mEACLE,MAAO,CAAC,YAAa,SACrBC,OAAQ,oBAEV,CAEEJ,KAAM,eACNC,IAAK,gCACLE,MAAO,CAAC,WAAY,SACpBC,OAAQ,wBAEV,CAEEQ,KAAM,SACNX,IAAK,oBACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,eAEV,CAEEJ,KAAM,UACNC,IAAK,eAEP,CAEED,KAAM,YACNC,IAAK,iBAEP,CAEED,KAAM,UACNC,IAAK,sCACLE,MAAO,CAAC,gBAAiB,MAAO,kBAChCC,OAAQ,SAAUF,GAChB,OAA4B,MAApBA,EAAEyB,eACN,mBACA,kBAGR,CAEE3B,KAAM,cACNC,IAAK,0BACLG,OAAQ,oBAEV,CAEEQ,KAAM,OACNX,IAAK,sCACLE,MAAO,CAAC,KAAM,YAAa,UAC3BC,OAAQ,SAAUF,GAChB,OAAQA,EAAE0B,OAAU,eAAiB,cAGzC,CAIEhB,KAAM,aACNX,IAAK,IAAI4B,OAEP,wKAMF1B,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCC,OAAQ,SAAUF,GAChB,MAAO,sBAAwBA,EAAE4B,KAAO,SAAW,MAGvD,CAGE9B,KAAM,YACNC,IAAK,IAAI4B,OAEP,2FAQF1B,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCC,OAAQ,SAAUF,GAChB,MAAO,mBAAqBA,EAAE4B,KAAO,SAAW,MAGpD,CAKE9B,KAAM,eACNC,IAAK,kCACLE,MAAO,CAAC,SACRC,OAAQ,iBAEV,CAGEJ,KAAM,YACNC,IAAK,8BACLG,OAAQ,gBAEV,CAGEJ,KAAM,eACNC,IAAK,6DACLE,MAAO,CAAC,aAAc,UAAW,eAAgB,cAAe,WAChEC,OAAQ,iCAEV,CAEEJ,KAAM,aACNC,IAAK,kBAEP,CAEED,KAAM,QACNC,IAAK,cACLG,OAAQ,YAEV,CAGEJ,KAAM,WACNC,IAAK,oBACLG,OAAQ,gBAEV,CAGEJ,KAAM,iBACNC,IAAK,2BACLG,OAAQ,uBAEV,CAGEQ,KAAK,cACLX,IAAK,kCACLE,MAAO,CAAC,SAAU,aAClBC,OAAQ,SAAUF,GAChB,MAAO,gBAAiC,MAAfA,EAAE6B,UAAoB,MAAQ,MAG3D,CAGE/B,KAAK,WACLC,IAAK,wEACLE,MAAO,CAAC,KAAM,iBAAkB,kBAAmB,gBAAiB,mBACpEC,OAAQ,SAAUF,GAChB,IAAImB,EAAM,YAKV,OAJAA,GAAgB,MAARnB,EAAE8B,GAAa,WAAa,OACpCX,GAA6B,MAArBnB,EAAE+B,gBAA0B,MAAQ,IAC5CZ,GAA2B,MAAnBnB,EAAEgC,cAAwB,WAAa,KAClB,MAArBhC,EAAEiC,gBAA0B,MAAQ,MAIhD,CAEEnC,KAAM,WACNC,IAAK,gBACLG,OAAQ,aAEV,CAEEJ,KAAM,UACNC,IAAK,gBACLG,OAAQ,cAGV,CAEEJ,KAAM,gBACNC,IAAK,iCACLG,OAAQ,gBAEV,CAEEJ,KAAM,aACNC,IAAK,gBACLG,OAAQ,aAEV,CAEEJ,KAAM,aACNC,IAAK,gBACLG,OAAQ,aAEV,CAEEJ,KAAM,cACNC,IAAK,wCACLE,MAAO,CAAC,KAAM,WACdC,OAAQ,uBAEV,CAEEQ,KAAM,UACNT,MAAO,CAAC,YAMdhE,OAAOiG,KAAKtC,GAASuC,SAAQ,SAAUC,GAC1BxC,EAAQwC,GACdD,SAAQ,SAAUnG,GAChBA,EAAI+D,MACP/D,EAAI+D,IAAM,QAEP/D,EAAIkE,SACPlE,EAAIkE,OAAS,4BC1enB,IAAImC,EAASC,EAAQ,MACjBC,EAASD,EAAQ,MAErBzI,EAAQ2I,MAAQD,EAChB1I,EAAQ4I,MAAQJ,EAAOI,MACvB5I,EAAQ6I,YAAcL,EAAOK,YAC7B7I,EAAQ8I,gBAAkBN,EAAOM,gBACjC9I,EAAQ+I,cAAgBP,EAAOO,cAC/B/I,EAAQgJ,sBAAwBR,EAAOQ,sBACvChJ,EAAQiJ,qBAAuBT,EAAOS,qBACtCjJ,EAAQkJ,yBAA2BV,EAAOU,yCCV1C,IAAIC,EAAa,SAAUnD,GACzB,OAAOoD,OAAOC,OAAOrD,MAAQA,EAAIqD,OAAOrD,GAAKA,GAgB3CsD,EAAW,SAAUnH,EAAKoH,EAAUC,GACtC,IAAIC,EAAatH,EAAI8D,MAAQ9D,EAAIiE,MAC7BjE,EAAI0E,OAAS0C,EAASpH,EAAI0E,MAC5B0C,EAASpH,EAAI0E,MAAQ,GAEd4C,IAAeF,EAASpH,EAAI8D,QACnCsD,EAASpH,EAAI8D,MAAQ,IAEvB,IAAIyD,EAAcvH,EAAI0E,KACpB,GACA4C,EAAaF,EAASpH,EAAI8D,MAAQsD,GAvBf,SAAUI,EAAOJ,EAAUnD,EAAOwD,GACvD,GAAIA,IAAYxD,EACdmD,EAASK,GAAWT,EAAWQ,EAAM,SAGrC,IAAK,IAAIvG,EAAI,EAAGA,EAAIgD,EAAM/C,OAAQD,GAAK,EACnB,MAAduG,EAAMvG,EAAE,KACVmG,EAASnD,EAAMhD,IAAM+F,EAAWQ,EAAMvG,EAAE,KAkB9CyG,CAAiBL,EAAQG,MAAMxH,EAAI+D,KAAMwD,EAAavH,EAAIiE,MAAOjE,EAAI8D,MAEjE9D,EAAI0E,MACN0C,EAASpH,EAAI0E,MAAMA,KAAK6C,IAIxB3D,EAAU0C,EAAQ,MAClBqB,EAAYhC,OAAOzF,UAAU0H,KAAKC,KAAK,iBAE3ChK,EAAQ4I,MAAQ,SAAUqB,GACxB,IAAIC,EAAU,GACVC,EAAQ,GACRZ,EAAWW,EAoBf,OAjBAD,EAAI1I,MAAM,gBAAgB6I,OAAON,GAAWxB,SAAQ,SAAU+B,GAC5D,IAAI/G,EAAO+G,EAAE,GACTb,EAAUa,EAAEC,MAAM,GACT,MAAThH,IACF6G,EAAMtD,KAAK,CAAC0D,IAAK,GAAIC,KAAM,KAC3BjB,EAAWY,EAAMA,EAAM9G,OAAO,IAGhC,IAAK,IAAIoH,EAAI,EAAGA,GAAK1E,EAAQzC,IAAS,IAAID,OAAQoH,GAAK,EAAG,CACxD,IAAItI,EAAM4D,EAAQzC,GAAMmH,GACxB,GAAItI,EAAI+D,IAAI6D,KAAKP,GACf,OAAOF,EAASnH,EAAKoH,EAAUC,OAKrCU,EAAQC,MAAQA,EACTD,GAGT,IAAIQ,EAAe,SAAUC,EAAKC,GAChC,IAAItE,EAAIsE,EAAKrJ,MAAM,QAAS,GAM5B,OALiB,IAAb+E,EAAEjD,OACJsH,EAAIrE,EAAE,IAAM6C,EAAW7C,EAAE,IACH,IAAbA,EAAEjD,QAAgBuH,EAAKvH,OAAS,IACzCsH,EAAIrE,EAAE,SAAMuE,GAEPF,GAGT3K,EAAQ6I,YAAc,SAAUvB,GAC9B,OAAOA,EAAI/F,MAAM,QAAQuJ,OAAOJ,EAAc,KAIhD1K,EAAQ8I,gBAAkB9I,EAAQ6I,YAElC7I,EAAQ+I,cAAgB,SAAUzB,GAChC,OAAOA,EAAIhF,WAAWf,MAAM,KAAKwJ,IAAI1B,SAGvCrJ,EAAQgJ,sBAAwB,SAAU1B,GAGxC,IAFA,IAAI0D,EAAa,GACbC,EAAQ3D,EAAI/F,MAAM,KAAKwJ,IAAI5B,GACtB/F,EAAI,EAAGA,EAAI6H,EAAM5H,OAAQD,GAAK,EACrC4H,EAAWnE,KAAK,CACdqE,UAAWD,EAAM7H,GACjB+H,GAAIF,EAAM7H,EAAI,GACdgI,KAAMH,EAAM7H,EAAI,KAGpB,OAAO4H,GAGThL,EAAQiJ,qBAAuB,SAAU3B,GACvC,OAAOA,EAAI/F,MAAM,KAAKwJ,KAAI,SAAUM,GAClC,OAAOA,EAAKC,UAAU,EAAGD,EAAKhI,OAAO,GAAG9B,MAAM,KAAKuJ,OAAOJ,EAAc,QAI5E1K,EAAQkJ,yBAA2B,SAAU5B,GAC3C,OAAOA,EAAI/F,MAAM,KAAKwJ,KAAI,SAAUQ,GAClC,OAAOA,EAAOhK,MAAM,KAAKwJ,KAAI,SAAU1E,GACrC,IAAImF,EAAMC,GAAS,EASnB,MAPkB,MAAdpF,EAAO,GACTmF,EAAOrC,EAAW9C,IAElBmF,EAAOrC,EAAW9C,EAAOiF,UAAU,EAAGjF,EAAOhD,SAC7CoI,GAAS,GAGJ,CACLD,KAAMA,EACNC,OAAQA,0BCvHhB,IAAI1F,EAAU0C,EAAQ,MAGlBiD,EAAe,WACfrF,EAAS,SAAUsF,GACrB,IAAIvI,EAAI,EACJwI,EAAOC,UACPC,EAAMF,EAAKvI,OACf,OAAOsI,EAAUI,QAAQL,GAAc,SAAUM,GAC/C,GAAI5I,GAAK0I,EACP,OAAOE,EAET,IAAIC,EAAML,EAAKxI,GAEf,OADAA,GAAK,EACG4I,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAO5C,OAAO6C,GAChB,IAAK,KACH,OAAO5C,OAAO4C,GAChB,IAAK,KACH,MAAO,QAMTC,EAAW,SAAU5I,EAAMnB,EAAKoH,GAClC,IAIIqC,EAAO,CAACtI,EAAO,KAJTnB,EAAIkE,kBAAkB8F,SAC7BhK,EAAIkE,OAAOlE,EAAI0E,KAAO0C,EAAWA,EAASpH,EAAI8D,OAC/C9D,EAAIkE,SAGN,GAAIlE,EAAIiE,MACN,IAAK,IAAIhD,EAAI,EAAGA,EAAIjB,EAAIiE,MAAM/C,OAAQD,GAAK,EAAG,CAC5C,IAAIgJ,EAAIjK,EAAIiE,MAAMhD,GACdjB,EAAI8D,KACN2F,EAAK/E,KAAK0C,EAASpH,EAAI8D,MAAMmG,IAG7BR,EAAK/E,KAAK0C,EAASpH,EAAIiE,MAAMhD,UAKjCwI,EAAK/E,KAAK0C,EAASpH,EAAI8D,OAEzB,OAAOI,EAAOgG,MAAM,KAAMT,IAKxBU,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCtM,EAAOD,QAAU,SAAUkK,EAASsC,GAClCA,EAAOA,GAAQ,GAEQ,MAAnBtC,EAAQuC,UACVvC,EAAQuC,QAAU,GAEA,MAAhBvC,EAAQjE,OACViE,EAAQjE,KAAO,KAEjBiE,EAAQC,MAAM7B,SAAQ,SAAUoE,GACR,MAAlBA,EAAMC,WACRD,EAAMC,SAAW,OAIrB,IAAIC,EAAaJ,EAAKI,YAAcN,EAChCO,EAAaL,EAAKK,YAAcN,EAChCtC,EAAM,GAkCV,OA/BA2C,EAAWtE,SAAQ,SAAUhF,GAC3ByC,EAAQzC,GAAMgF,SAAQ,SAAUnG,GAC1BA,EAAI8D,QAAQiE,GAAgC,MAArBA,EAAQ/H,EAAI8D,MACrCgE,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAK+H,IAEtB/H,EAAI0E,QAAQqD,GAAgC,MAArBA,EAAQ/H,EAAI0E,OAC1CqD,EAAQ/H,EAAI0E,MAAMyB,SAAQ,SAAUwE,GAClC7C,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAK2K,aAOrC5C,EAAQC,MAAM7B,SAAQ,SAAUoE,GAC9BzC,EAAIpD,KAAKqF,EAAS,IAAKnG,EAAQe,EAAE,GAAI4F,IAErCG,EAAWvE,SAAQ,SAAUhF,GAC3ByC,EAAQzC,GAAMgF,SAAQ,SAAUnG,GAC1BA,EAAI8D,QAAQyG,GAA4B,MAAnBA,EAAMvK,EAAI8D,MACjCgE,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAKuK,IAEtBvK,EAAI0E,QAAQ6F,GAA4B,MAAnBA,EAAMvK,EAAI0E,OACtC6F,EAAMvK,EAAI0E,MAAMyB,SAAQ,SAAUwE,GAChC7C,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAK2K,gBAOhC7C,EAAI8C,KAAK,QAAU,wBCjG5B,IAAIC,EAAYvE,EAAQ,MACpBwE,EAAiBxE,EAAQ,MACzByE,EAAaD,EAAeC,WAC5BC,EAAaF,EAAeE,WAQhC,SAASC,EAAkBV,EAAOW,EAAMC,GACpC,OAAOZ,EACFa,MACAnD,QAAO,SAASoD,GAAY,OAAOA,EAASvF,KAAOoF,KACnDjD,QAAO,SAASoD,GAAY,OAAOA,EAAS9F,YAAc4F,KAC1DvC,KAAI,SAASyC,GAAY,OAAOA,EAAS7F,SAAU,GAK5D,SAAS8F,EAAUC,GAEf5J,KAAK4J,QAAUA,GAAoB,GAE9B5J,KAAK4J,QAAQC,cACd7J,KAAK4J,QAAQC,YAnBO,GAqBxBC,QAAQC,IAAI,uBAAyB/J,KAAK4J,QAAQC,YAAc,WAMhE7J,KAAKgK,UAAY,GAiBrB,SAASC,EAAa7D,EAAS8D,GACZ,MAAX9D,GAAoBjI,MAAMC,QAAQgI,EAAQC,QAI9CD,EAAQC,MAAM7B,SAAQ,SAAUoE,GACT,UAAfA,EAAMpJ,MACN0K,EAAOtB,MAKnB,SAASuB,EAAoBC,GAEzB,OAAOA,GAAgB,MAARA,GACRA,EAAK5K,MAAqB,IAAb4K,EAAK5K,MAClB4K,EAAKjE,KAAmB,IAAZiE,EAAKjE,IAkJ5BwD,EAAUpL,UAAU8L,eAAiB,WACjCrK,KAAKgK,UAAY,IAWrBL,EAAUpL,UAAU+L,aAAe,SAASb,GACxCzJ,KAAKgK,UAAYP,GAYrBE,EAAUpL,UAAUgM,gBAAkB,SAAU3B,GAC5C,IAAI4B,EAAW5B,EAAM6B,YACjB7B,EAAM6B,WAAWC,MAAK,SAASC,GAAS,MAA2B,QAApBA,EAAMC,aACzD,OAAIJ,EACOA,EAASf,MACXhM,MAAM,KACNwJ,KAAI,SAAS4D,GAAW,OAAOC,SAASD,MAEtC,CAACjC,EAAMa,MAAM,GAAGtF,KAI/BwF,EAAUpL,UAAUwM,sBAAwB,SAAUC,EAAaC,GAE/D,IADA,IAAIC,EAAU,GACL5L,EAAI,EAAGA,EAAI0L,EAAYzL,SAAUD,EAAG,CACzC,IAAI6L,EAAUH,EAAY1L,GACtB8L,EAAUH,EAAY3L,IAAM,KAChC4L,EAAQC,GAAWC,EAEvB,OAAOF,GAGXvB,EAAUpL,UAAU8M,2BAA6B,SAASzC,GACtDkB,QAAQC,IAAI,sCAAuC/J,KAAKgK,WACxD,IAAIsB,EAActL,KAAKuK,gBAAgB3B,GACvCkB,QAAQC,IAAI,sCAAuCuB,GACnD,IAAIC,EAAUjC,EAAiBV,EAAO0C,EAAY,GAAI,QAClDE,EAAWlC,EAAiBV,EAAO0C,EAAY,GAAI,SACnDG,EAAiBzL,KAAK+K,sBAAsBO,EAAatL,KAAKgK,WAClEF,QAAQC,IAAI,uCAAwC0B,GAGpD,IAAIC,EAAa1L,KAAKgK,UACjB1D,QAAO,SAASiD,GAAQ,OAAwD,IAAjDjL,OAAOqN,OAAOF,GAAgBG,QAAQrC,MA2B1E,OA1BAO,QAAQC,IAAI,oCAAqC2B,GAGjD9C,EAAMa,MAAMjF,SAAQ,SAAS+E,GACrBkC,EAAelC,EAAKpF,MACpBoF,EAAKpF,GAAKsH,EAAelC,EAAKpF,QAItCuH,EAAWlH,SAAQ,SAAS+E,GACxBX,EAAMa,MAAM1G,KAAK,CACboB,GAAIoF,EACJ3F,UAAW,OACXC,MAAO0H,IAEX3C,EAAMa,MAAM1G,KAAK,CACboB,GAAIoF,EACJ3F,UAAW,QACXC,MAAO2H,OAGf5C,EAAM6B,WAAa7B,EAAM6B,YAAc,GACvC7B,EAAM6B,WAAW1H,KAAK,CAClB6H,UAAW,MACXnB,MAAOzJ,KAAKgK,UAAUf,KAAK,OAExBL,GAGXe,EAAUpL,UAAUsN,oBAAsB,SAASjD,EAAOkD,GACtD,IAAIC,EAAsB,SAASnD,EAAOW,GACtCX,EAAMa,MAAM1G,KAAK,CACboB,GAAIoF,EACJ3F,UAAW,QACXC,MAAOmI,IAEXpD,EAAMa,MAAM1G,KAAK,CACboB,GAAIoF,EACJ3F,UAAW,OACXC,MAAOoI,KAGXA,EAAkB3C,EAAiBV,EAAOkD,EAAa,QACvDE,EAAmB1C,EAAiBV,EAAOkD,EAAa,SAKxD9L,KAAK4J,QAAQsC,kBAAoBD,IACjCA,EAAkBrD,EAAMuD,KACLvD,EAAMa,MACZjF,SAAQ+E,IACjBX,EAAMa,MAAM1G,KAAK,CACboB,GAAIoF,EAAKpF,GACTP,UAAW,OACXC,MAAOoI,QAOnB,IADA,IAAIG,EAAW,GACN9M,EAAI,EAAGA,EAAIU,KAAK4J,QAAQC,YAAc,IAAKvK,EAAG,CACnD,IAAI+M,EA/RDC,KAAKC,MAAM,WAAAD,KAAKE,UADb,EAiSNT,EAAoBnD,EAAOyD,GAC3BD,EAASrJ,KAAKsJ,GAOlB,OALAzD,EAAM6B,WAAa7B,EAAM6B,YAAc,GACvC7B,EAAM6B,WAAW1H,KAAK,CAClB6H,UAAW,MACXnB,MAAOqC,EAAc,IAAMM,EAASnD,KAAK,OAEtCL,GAoBXe,EAAUpL,UAAUkO,kBAAoB,SAAS7D,GAG7C,IAAIkD,EACAY,EAAW9D,EAAMa,OAASb,EAAMa,MAC/BxC,KAAI,SAASyC,GAAY,OAAOA,EAASvF,MACzCmC,QAAO,SAASiD,EAAM1I,EAAOY,GAC1B,OAAOA,EAAMmK,QAAQrC,KAAU1I,KAElCtB,QAAU,EACXoN,EAAa/D,EAAM6B,YAAc7B,EAAM6B,WAAWlL,QAAW,EAEjE,GAAiB,IAAbmN,GAAkBA,EAAW,EAE7B,OAAO9D,EAEX,GAAgB,GAAZ8D,GAA+B,IAAdC,EAEjB,OAAO/D,EAGX,GAAiB,IAAb8D,EACAZ,EAAclD,EAAMa,MAAM,GAAGtF,OAC1B,CAGH,IAAIyI,EAAWhE,EAAM6B,WAAWnE,QAAO,SAASqE,GAAS,MAA2B,QAApBA,EAAMC,aAAwB,GAC9F,IAAIgC,EAIA,OAAOhE,EAHPkD,EAAchB,SAAS8B,EAASnD,MAAMhM,MAAM,KAAK,IAsBzD,OAhBAqM,QAAQC,IAAI,qCAAsC/J,KAAKgK,WACvDF,QAAQC,IAAI,qCAAuC+B,IAEY,IAAzC9L,KAAKgK,UAAU4B,QAAQE,IAGzChC,QAAQC,IAAI,2EAEZnB,EAAQ5I,KAAKqL,2BAA2BzC,KAExCkB,QAAQC,IAAI,2EAEZnB,EAAQ5I,KAAK6L,oBAAoBjD,EAAOkD,IAG5C9L,KAAKgK,UAAYhK,KAAKuK,gBAAgB3B,GAC/BA,GAaXe,EAAUpL,UAAUsO,uBAAyB,SAAUzC,EAAM0C,GAEzD,IAAK3C,EAAoBC,GACrB,OAAOA,EAGX,IAAIhE,EAAU8C,EAAUpE,MAAMsF,EAAKjE,KAE/B7J,EAAO0D,KAqBX,OApBAiK,EAAa7D,GAAS,SAAUwC,GAGxBtM,EAAKsN,QAAQmD,uBAjXzB,SAAgCnE,GAE5B,GAAKA,GAAUzK,MAAMC,QAAQwK,EAAM6B,YASnC,IALA,IAAIuC,EAAU5D,EAAWR,GACrBqE,EAAQ,GAGRtG,EAAIiC,EAAM6B,WAAWlL,OAClBoH,KAEH,GAAsC,QAAlCiC,EAAM6B,WAAW9D,GAAGiE,UAAxB,CAMA,IAFA,IAAIsC,EAAiBtE,EAAM6B,WAAW9D,GAAG8C,MAAMhM,MAAM,KAE5C6B,EAAI,EAAGA,EAAI4N,EAAe3N,OAAQD,IAAK,CAE5C,IAAIiK,EAAO2D,EAAe5N,GAC1B2N,EAAMlK,KAAKwG,GAEX,IAAIpC,EAAQ6F,EAAQzD,GAAM4C,KAAK1O,MAAM,KACrCuP,EAAQzD,GAAM4C,KAAO,CAAChF,EAAM,GAAI,IAAK7H,EAAG,IAAK6H,EAAM,GAAI,IAAK7H,GAAG2J,KAAK,IACpE+D,EAAQzD,GAAM4D,MAAQ,CAACH,EAAQzD,GAAM4D,MAAO,IAAK7N,GAAG2J,KAAK,IAGzDL,EAAM6B,WAAWjG,SAAQ,SAAU4I,GAC/B,GAA+B,QAA3BA,EAAaxC,UAAjB,CAIA,IAAIyC,EAAeD,EAAa3D,MAAMhM,MAAM,MACR,IAAhC4P,EAAazB,QAAQrC,IAKzB8D,EAAa7I,SAAQ,SAAU8I,GAC3BN,EAAQM,GAAanB,KAAOa,EAAQzD,GAAM4C,KAC1Ca,EAAQM,GAAaH,MAAQH,EAAQzD,GAAM4D,MACvCG,IAAgB/D,GAChB0D,EAAMlK,KAAKuK,UAQ3B1E,EAAMa,MAAQJ,EAAW2D,EAASC,GAClCrE,EAAM6B,WAAW8C,OAAO5G,EAAG,IA6TvBoG,CAAuBnE,GAzTnC,SAAgCA,GAE5B,GAAKA,GAAUzK,MAAMC,QAAQwK,EAAM6B,YAAnC,CAMA,IAAIuC,EAAU5D,EAAWR,GAGzBA,EAAM6B,WAAWjG,SAAQ,SAAUgJ,GAC/B,GAAiC,QAA7BA,EAAe5C,UAAnB,CAIAd,QAAQ2D,KAAK,wBAA0BD,EAAe/D,OAEtD+D,EAAeE,MAAO,EAKtB,IAHA,IAAIR,EAAiBM,EAAe/D,MAAMhM,MAAM,KAGvC6B,EAAI,EAAGA,EAAI4N,EAAe3N,OAAQD,IAAK,CAE5C,IAAIiK,EAAO2D,EAAe5N,UACnB0N,EAAQzD,GAGfX,EAAM6B,WAAWjG,SAAQ,SAAU4I,GAC/B,GAA+B,QAA3BA,EAAaxC,UAAjB,CAIA,IAAIyC,EAAeD,EAAa3D,MAAMhM,MAAM,MACR,IAAhC4P,EAAazB,QAAQrC,KAKzB8D,EAAa7I,SAAQ,SAAU8I,UACpBN,EAAQM,MAInBF,EAAaM,MAAO,YAOhC9E,EAAMa,MAAQJ,EAAW2D,GAIzB,IADA,IAAI1N,EAAIsJ,EAAM6B,WAAWlL,OAClBD,KACCsJ,EAAM6B,WAAWnL,GAAGoO,MACpB9E,EAAM6B,WAAW8C,OAAOjO,EAAG,QAvD/BwK,QAAQ2D,KAAK,6DAwTTE,CAAuB/E,IAOtBtM,EAAKsN,QAAQsC,iBAAmBY,EA3P7C,SAA8BlE,GACrBA,IAIAzK,MAAMC,QAAQwK,EAAMgF,WACrBhF,EAAMgF,QAAU,IAGfhF,EAAMgF,QAAQC,MACX,SAAUvO,GAAK,MAAmB,6BAAZA,EAAEuE,UAC5B+E,EAAMgF,QAAQ7K,KAAK,CAAC,MAAS,8BAiPzB+K,CAAqBlF,GApQjC,SAA8BA,GACrBA,QAAsC,IAAtBA,EAAMmF,cAI3BnF,EAAMmF,iBAAchH,GAiQZiH,CAAqBpF,MAItB,IAAIqF,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAK+C,EAAUrE,MAAMuB,MAW7BuD,EAAUpL,UAAU2P,sBAAwB,SAAU9D,GAElD,IAAKD,EAAoBC,GACrB,OAAOA,EAGX,IAAIhE,EAAU8C,EAAUpE,MAAMsF,EAAKjE,KAE/B7J,EAAO0D,KASX,OARAiK,EAAa7D,GAAS,SAAUwC,GACL,YAAnBA,EAAMvF,WAA8C,YAAnBuF,EAAMvF,WAI3C/G,EAAKmQ,kBAAkB7D,MAGpB,IAAIqF,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAK+C,EAAUrE,MAAMuB,MAM7BjK,EAAOD,QAAUyN,gBCrejBzN,EAAQmN,WAAa,SAAS2D,EAASC,GACrC,IAAIxD,EAAQ,GAGZ,QAAuB,IAAZuD,GACyB,IAAhC1O,OAAOiG,KAAKyI,GAASzN,OAAc,CAEhCpB,MAAMC,QAAQ6O,KACjBA,EAAQ,IAIV,IAAK,IAAI3N,EAAI,EAAGA,EAAI2N,EAAM1N,OAAQD,IAAK,CACrC,IAAIiK,EAAO0D,EAAM3N,GACb6O,EAASnB,EAAQzD,GACrBjL,OAAOiG,KAAK4J,GAAQ3J,SAAQ,SAAUZ,GACpC6F,EAAM1G,KAAK,CACToB,GAAIoF,EACJ3F,UAAWA,EACXC,MAAOsK,EAAOvK,QAMpBtF,OAAOiG,KAAKyI,GAASxI,SAAQ,SAAU+E,GAErC,GADAA,EAAOuB,SAASvB,KACZ0D,EAAMrB,QAAQrC,IAAS,GAA3B,CAKA,IAAI4E,EAASnB,EAAQzD,GACrBjL,OAAOiG,KAAK4J,GAAQ3J,SAAQ,SAAUZ,GACpC6F,EAAM1G,KAAK,CACToB,GAAIoF,EACJ3F,UAAWA,EACXC,MAAOsK,EAAOvK,YAMtB,OAAO6F,GAGTvN,EAAQkN,WAAa,SAAUR,GAC7B,IAAIoE,EAAU,GASd,YAP2B,IAAhBpE,EAAMa,OAAyBtL,MAAMC,QAAQwK,EAAMa,QAC5Db,EAAMa,MAAMjF,SAAQ,SAAU+E,GACvByD,EAAQzD,EAAKpF,MAChB6I,EAAQzD,EAAKpF,IAAM,IACrB6I,EAAQzD,EAAKpF,IAAIoF,EAAK3F,WAAa2F,EAAK1F,SAGrCmJ,iBChFT,OASC,WAEG,IAGIhR,EAAMoS,EAHNC,EAAQ,GAeZ,SAASC,EAAUC,GACf,IAAIC,GAAS,EACb,OAAO,WACH,GAAIA,EAAQ,MAAM,IAAIC,MAAM,gCAC5BD,GAAS,EACTD,EAAGhG,MAAMvM,EAAM+L,YAdX,OADZ/L,EAAOgE,QAELoO,EAAiBpS,EAAKqS,OAGxBA,EAAMK,WAAa,WAEf,OADA1S,EAAKqS,MAAQD,EACNC,GAcX,IAAIM,EAAYrQ,OAAOC,UAAUC,SAE7BoQ,EAAWzQ,MAAMC,SAAW,SAAUC,GACtC,MAA+B,mBAAxBsQ,EAAUlQ,KAAKJ,IAGtBwQ,EAAQ,SAAUC,EAAKC,GACvB,GAAID,EAAItK,QACJ,OAAOsK,EAAItK,QAAQuK,GAEvB,IAAK,IAAIzP,EAAI,EAAGA,EAAIwP,EAAIvP,OAAQD,GAAK,EACjCyP,EAASD,EAAIxP,GAAIA,EAAGwP,IAIxBE,EAAO,SAAUF,EAAKC,GACtB,GAAID,EAAI7H,IACJ,OAAO6H,EAAI7H,IAAI8H,GAEnB,IAAIE,EAAU,GAId,OAHAJ,EAAMC,GAAK,SAAU5G,EAAG5I,EAAG4B,GACvB+N,EAAQlM,KAAKgM,EAAS7G,EAAG5I,EAAG4B,OAEzB+N,GAaPC,EAAQ,SAAU7Q,GAClB,GAAIC,OAAOiG,KACP,OAAOjG,OAAOiG,KAAKlG,GAEvB,IAAIkG,EAAO,GACX,IAAK,IAAI4K,KAAK9Q,EACNA,EAAI+Q,eAAeD,IACnB5K,EAAKxB,KAAKoM,GAGlB,OAAO5K,GAMY,oBAAZzH,SAA6BA,QAAQuS,UAgB5ChB,EAAMgB,SAAWvS,QAAQuS,SACG,oBAAjBC,aACPjB,EAAMiB,aAAe,SAAUf,GAE7Be,aAAaf,IAIfF,EAAMiB,aAAejB,EAAMgB,UAvBH,mBAAjBC,cACPjB,EAAMgB,SAAW,SAAUd,GAEvBe,aAAaf,IAEjBF,EAAMiB,aAAejB,EAAMgB,WAG3BhB,EAAMgB,SAAW,SAAUd,GACvBgB,WAAWhB,EAAI,IAEnBF,EAAMiB,aAAejB,EAAMgB,UAgBnChB,EAAMmB,KAAO,SAAUV,EAAKC,EAAUU,GAElC,GADAA,EAAWA,GAAY,cAClBX,EAAIvP,OACL,OAAOkQ,IAEX,IAAIC,EAAY,EAIhB,SAASC,EAAKC,GACRA,GACAH,EAASG,GACTH,EAAW,eAGXC,GAAa,IACIZ,EAAIvP,QACjBkQ,IAXVZ,EAAMC,GAAK,SAAU5G,GACjB6G,EAAS7G,EAAGoG,EAAUqB,QAe9BtB,EAAM7J,QAAU6J,EAAMmB,KAEtBnB,EAAMwB,WAAa,SAAUf,EAAKC,EAAUU,GAExC,GADAA,EAAWA,GAAY,cAClBX,EAAIvP,OACL,OAAOkQ,IAEX,IAAIC,EAAY,EACZI,EAAU,WACVf,EAASD,EAAIY,IAAY,SAAUE,GAC3BA,GACAH,EAASG,GACTH,EAAW,eAGXC,GAAa,IACIZ,EAAIvP,OACjBkQ,IAGAK,QAKhBA,KAEJzB,EAAM0B,cAAgB1B,EAAMwB,WAE5BxB,EAAM2B,UAAY,SAAUlB,EAAKmB,EAAOlB,EAAUU,GACrCS,EAAWD,GACjB1H,MAAM,KAAM,CAACuG,EAAKC,EAAUU,KAEnCpB,EAAM8B,aAAe9B,EAAM2B,UAE3B,IAAIE,EAAa,SAAUD,GAEvB,OAAO,SAAUnB,EAAKC,EAAUU,GAE5B,GADAA,EAAWA,GAAY,cAClBX,EAAIvP,QAAU0Q,GAAS,EACxB,OAAOR,IAEX,IAAIC,EAAY,EACZU,EAAU,EACVC,EAAU,GAEd,SAAUC,IACN,GAAIZ,GAAaZ,EAAIvP,OACjB,OAAOkQ,IAGX,KAAOY,EAAUJ,GAASG,EAAUtB,EAAIvP,QAEpC8Q,GAAW,EACXtB,EAASD,GAFTsB,GAAW,GAEY,IAAI,SAAUR,GAC7BA,GACAH,EAASG,GACTH,EAAW,eAIXY,GAAW,GADXX,GAAa,IAEIZ,EAAIvP,OACjBkQ,IAGAa,QApBpB,KA8BJC,EAAa,SAAUhC,GACvB,OAAO,WACH,IAAIzG,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,WACtC,OAAOwG,EAAGhG,MAAM,KAAM,CAAC8F,EAAMmB,MAAMgB,OAAO1I,MAS9C2I,EAAW,SAAUlC,GACrB,OAAO,WACH,IAAIzG,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,WACtC,OAAOwG,EAAGhG,MAAM,KAAM,CAAC8F,EAAMwB,YAAYW,OAAO1I,MAKpD4I,EAAY,SAAUC,EAAQ7B,EAAKC,EAAUU,GAI7C,GAHAX,EAAME,EAAKF,GAAK,SAAU5G,EAAG5I,GACzB,MAAO,CAACuB,MAAOvB,EAAGuE,MAAOqE,MAExBuH,EAME,CACH,IAAIR,EAAU,GACd0B,EAAO7B,GAAK,SAAU5G,EAAGuH,GACrBV,EAAS7G,EAAErE,OAAO,SAAU+L,EAAK1N,GAC7B+M,EAAQ/G,EAAErH,OAASqB,EACnBuN,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKX,WAblB0B,EAAO7B,GAAK,SAAU5G,EAAGuH,GACrBV,EAAS7G,EAAErE,OAAO,SAAU+L,GACxBH,EAASG,UAezBvB,EAAMpH,IAAMsJ,EAAWG,GACvBrC,EAAMuC,UAAYH,EAASC,GAC3BrC,EAAMwC,SAAW,SAAU/B,EAAKmB,EAAOlB,EAAUU,GAC7C,OAAOqB,EAAUb,EAAVa,CAAiBhC,EAAKC,EAAUU,IAG3C,IAAIqB,EAAY,SAASb,GACrB,OA3CkB,SAASA,EAAO1B,GAClC,OAAO,WACH,IAAIzG,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,WACtC,OAAOwG,EAAGhG,MAAM,KAAM,CAAC2H,EAAWD,IAAQO,OAAO1I,KAwC9CiJ,CAAgBd,EAAOS,IAKlCrC,EAAMrH,OAAS,SAAU8H,EAAKkC,EAAMjC,EAAUU,GAC1CpB,EAAMwB,WAAWf,GAAK,SAAU5G,EAAGuH,GAC/BV,EAASiC,EAAM9I,GAAG,SAAU0H,EAAK1N,GAC7B8O,EAAO9O,EACPuN,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKoB,OAItB3C,EAAM4C,OAAS5C,EAAMrH,OAErBqH,EAAM6C,MAAQ7C,EAAMrH,OAEpBqH,EAAM8C,YAAc,SAAUrC,EAAKkC,EAAMjC,EAAUU,GAC/C,IAAI2B,EAAWpC,EAAKF,GAAK,SAAU5G,GAC/B,OAAOA,KACRmJ,UACHhD,EAAMrH,OAAOoK,EAAUJ,EAAMjC,EAAUU,IAG3CpB,EAAMiD,MAAQjD,EAAM8C,YAEpB,IAAII,EAAU,SAAUZ,EAAQ7B,EAAKC,EAAUU,GAC3C,IAAIR,EAAU,GAId0B,EAHA7B,EAAME,EAAKF,GAAK,SAAU5G,EAAG5I,GACzB,MAAO,CAACuB,MAAOvB,EAAGuE,MAAOqE,OAEjB,SAAUA,EAAGuH,GACrBV,EAAS7G,EAAErE,OAAO,SAAU3B,GACpBA,GACA+M,EAAQlM,KAAKmF,GAEjBuH,UAEL,SAAUG,GACTH,EAAST,EAAKC,EAAQuC,MAAK,SAAUtQ,EAAGC,GACpC,OAAOD,EAAEL,MAAQM,EAAEN,UACnB,SAAUqH,GACV,OAAOA,EAAErE,cAIrBwK,EAAM/H,OAASiK,EAAWgB,GAC1BlD,EAAMoD,aAAehB,EAASc,GAE9BlD,EAAMqD,OAASrD,EAAM/H,OACrB+H,EAAMsD,aAAetD,EAAMoD,aAE3B,IAAIG,EAAU,SAAUjB,EAAQ7B,EAAKC,EAAUU,GAC3C,IAAIR,EAAU,GAId0B,EAHA7B,EAAME,EAAKF,GAAK,SAAU5G,EAAG5I,GACzB,MAAO,CAACuB,MAAOvB,EAAGuE,MAAOqE,OAEjB,SAAUA,EAAGuH,GACrBV,EAAS7G,EAAErE,OAAO,SAAU3B,GACnBA,GACD+M,EAAQlM,KAAKmF,GAEjBuH,UAEL,SAAUG,GACTH,EAAST,EAAKC,EAAQuC,MAAK,SAAUtQ,EAAGC,GACpC,OAAOD,EAAEL,MAAQM,EAAEN,UACnB,SAAUqH,GACV,OAAOA,EAAErE,cAIrBwK,EAAMwD,OAAStB,EAAWqB,GAC1BvD,EAAMyD,aAAerB,EAASmB,GAE9B,IAAIG,EAAU,SAAUpB,EAAQ7B,EAAKC,EAAUiD,GAC3CrB,EAAO7B,GAAK,SAAU5G,EAAGuH,GACrBV,EAAS7G,GAAG,SAAU+J,GACdA,GACAD,EAAc9J,GACd8J,EAAgB,cAGhBvC,UAGT,SAAUG,GACToC,QAGR3D,EAAM6D,OAAS3B,EAAWwB,GAC1B1D,EAAM8D,aAAe1B,EAASsB,GAE9B1D,EAAMR,KAAO,SAAUiB,EAAKC,EAAUiD,GAClC3D,EAAMmB,KAAKV,GAAK,SAAU5G,EAAGuH,GACzBV,EAAS7G,GAAG,SAAUhG,GACdA,IACA8P,GAAc,GACdA,EAAgB,cAEpBvC,UAEL,SAAUG,GACToC,GAAc,OAItB3D,EAAM+D,IAAM/D,EAAMR,KAElBQ,EAAMgE,MAAQ,SAAUvD,EAAKC,EAAUiD,GACnC3D,EAAMmB,KAAKV,GAAK,SAAU5G,EAAGuH,GACzBV,EAAS7G,GAAG,SAAUhG,GACbA,IACD8P,GAAc,GACdA,EAAgB,cAEpBvC,UAEL,SAAUG,GACToC,GAAc,OAItB3D,EAAMiE,IAAMjE,EAAMgE,MAElBhE,EAAMkE,OAAS,SAAUzD,EAAKC,EAAUU,GACpCpB,EAAMpH,IAAI6H,GAAK,SAAU5G,EAAGuH,GACxBV,EAAS7G,GAAG,SAAU0H,EAAK4C,GACnB5C,EACAH,EAASG,GAGTH,EAAS,KAAM,CAAC5L,MAAOqE,EAAGsK,SAAUA,UAG7C,SAAU5C,EAAKX,GACd,GAAIW,EACA,OAAOH,EAASG,GAOhBH,EAAS,KAAMT,EAAKC,EAAQuC,MAJnB,SAAUiB,EAAMC,GACrB,IAAIxR,EAAIuR,EAAKD,SAAUrR,EAAIuR,EAAMF,SACjC,OAAOtR,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAI,MAEE,SAAU+G,GAC5C,OAAOA,EAAErE,cAMzBwK,EAAMsE,KAAO,SAAUC,EAAOnD,GAC1BA,EAAWA,GAAY,aACvB,IAAIlL,EAAO2K,EAAM0D,GACbC,EAAiBtO,EAAKhF,OAC1B,IAAKsT,EACD,OAAOpD,IAGX,IAAIR,EAAU,GAEV6D,EAAY,GACZC,EAAc,SAAUxE,GACxBuE,EAAUE,QAAQzE,IAUlB0E,EAAe,WACfJ,IACAhE,EAAMiE,EAAUtM,MAAM,IAAI,SAAU+H,GAChCA,QAIRwE,GAAY,WACR,IAAKF,EAAgB,CACjB,IAAIK,EAAczD,EAElBA,EAAW,aAEXyD,EAAY,KAAMjE,OAI1BJ,EAAMtK,GAAM,SAAU4K,GAClB,IAAIgE,EAAOvE,EAASgE,EAAMzD,IAAMyD,EAAMzD,GAAI,CAACyD,EAAMzD,IAC7CiE,EAAe,SAAUxD,GACzB,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAIjD,GAHID,EAAKvI,QAAU,IACfuI,EAAOA,EAAK,IAEZ8H,EAAK,CACL,IAAIyD,EAAc,GAClBxE,EAAMK,EAAMD,IAAU,SAASqE,GAC3BD,EAAYC,GAAQrE,EAAQqE,MAEhCD,EAAYlE,GAAKrH,EACjB2H,EAASG,EAAKyD,GAEd5D,EAAW,kBAGXR,EAAQE,GAAKrH,EACbuG,EAAMiB,aAAa2D,IAGvBM,EAAWJ,EAAK3M,MAAM,EAAG8F,KAAKkH,IAAIL,EAAK5T,OAAS,KAAO,GACvDkU,EAAQ,WACR,OAlaiB1E,EAkaQ,SAAU7N,EAAGgH,GAClC,OAAQhH,GAAK+N,EAAQG,eAAelH,IAnab8I,GAoaxB,IApaSlC,EAkaGyE,GAjafvM,OACG8H,EAAI9H,OAAO+H,EAAUiC,IAEhCnC,EAAMC,GAAK,SAAU5G,EAAG5I,EAAG4B,GACvB8P,EAAOjC,EAASiC,EAAM9I,MAEnB8I,MA6Zc/B,EAAQG,eAAeD,GApalC,IAAUL,EAAKC,EAAUiC,GAsa/B,GAAIyC,IACAN,EAAKA,EAAK5T,OAAS,GAAG6T,EAAcnE,OAEnC,CACD,IAAIyE,EAAW,WACPD,MA1DK,SAAUlF,GAC3B,IAAK,IAAIjP,EAAI,EAAGA,EAAIwT,EAAUvT,OAAQD,GAAK,EACvC,GAAIwT,EAAUxT,KAAOiP,EAEjB,YADAuE,EAAUvF,OAAOjO,EAAG,GAwDhBqU,CAAeD,GACfP,EAAKA,EAAK5T,OAAS,GAAG6T,EAAcnE,KAG5C8D,EAAYW,QAKxBrF,EAAMuF,MAAQ,SAASC,EAAOV,EAAM1D,GAChC,IACIqE,EAAW,GAEM,mBAAVD,IACPpE,EAAW0D,EACXA,EAAOU,EACPA,EANgB,GASpBA,EAAQ/I,SAAS+I,EAAO,KATJ,EAUpB,IAAIE,EAAc,SAASC,EAAiBC,GAQxC,IAPA,IAAIC,EAAe,SAASf,EAAMgB,GAC9B,OAAO,SAASC,GACZjB,GAAK,SAASvD,EAAKqC,GACfmC,GAAgBxE,GAAOuE,EAAc,CAACvE,IAAKA,EAAKqC,OAAQA,MACzDgC,KAGJJ,GACHC,EAAS/Q,KAAKmR,EAAaf,IAAQU,GAAO,KAE9CxF,EAAMgG,OAAOP,GAAU,SAASnE,EAAM2E,GAClCA,EAAOA,EAAKA,EAAK/U,OAAS,IACzByU,GAAmBvE,GAAU6E,EAAK1E,IAAK0E,EAAKrC,YAIrD,OAAOxC,EAAWsE,IAAgBA,GAGtC1F,EAAMkG,UAAY,SAAU3B,EAAOnD,GAE/B,GADAA,EAAWA,GAAY,cAClBb,EAASgE,GAAQ,CACpB,IAAIhD,EAAM,IAAInB,MAAM,6DACpB,OAAOgB,EAASG,GAElB,IAAKgD,EAAMrT,OACP,OAAOkQ,IAEX,IAAI+E,EAAe,SAAUzF,GACzB,OAAO,SAAUa,GACb,GAAIA,EACAH,EAASlH,MAAM,KAAMR,WACrB0H,EAAW,iBAEV,CACD,IAAI3H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC7C0M,EAAO1F,EAAS0F,OAChBA,EACA3M,EAAK/E,KAAKyR,EAAaC,IAGvB3M,EAAK/E,KAAK0M,GAEdpB,EAAMiB,cAAa,WACfP,EAASxG,MAAM,KAAMT,SAKrC0M,EAAanG,EAAMU,SAAS6D,GAA5B4B,IAGJ,IAAIE,EAAY,SAAS/D,EAAQiC,EAAOnD,GAEpC,GADAA,EAAWA,GAAY,aACnBb,EAASgE,GACTjC,EAAO1J,IAAI2L,GAAO,SAAUrE,EAAIkB,GACxBlB,GACAA,GAAG,SAAUqB,GACT,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC7CD,EAAKvI,QAAU,IACfuI,EAAOA,EAAK,IAEhB2H,EAAShR,KAAK,KAAMmR,EAAK9H,QAGlC2H,OAEF,CACD,IAAIR,EAAU,GACd0B,EAAOnB,KAAKN,EAAM0D,IAAQ,SAAUzD,EAAGM,GACnCmD,EAAMzD,IAAG,SAAUS,GACf,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC7CD,EAAKvI,QAAU,IACfuI,EAAOA,EAAK,IAEhBmH,EAAQE,GAAKrH,EACb2H,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKX,QAK1BZ,EAAMsG,SAAW,SAAU/B,EAAOnD,GAC9BiF,EAAU,CAAEzN,IAAKoH,EAAMpH,IAAKuI,KAAMnB,EAAMmB,MAAQoD,EAAOnD,IAG3DpB,EAAMuG,cAAgB,SAAShC,EAAO3C,EAAOR,GACzCiF,EAAU,CAAEzN,IAAK6J,EAAUb,GAAQT,KAAMU,EAAWD,IAAU2C,EAAOnD,IAGzEpB,EAAMgG,OAAS,SAAUzB,EAAOnD,GAE5B,GADAA,EAAWA,GAAY,aACnBb,EAASgE,GACTvE,EAAMuC,UAAUgC,GAAO,SAAUrE,EAAIkB,GAC7BlB,GACAA,GAAG,SAAUqB,GACT,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC7CD,EAAKvI,QAAU,IACfuI,EAAOA,EAAK,IAEhB2H,EAAShR,KAAK,KAAMmR,EAAK9H,QAGlC2H,OAEF,CACD,IAAIR,EAAU,GACdZ,EAAMwB,WAAWX,EAAM0D,IAAQ,SAAUzD,EAAGM,GACxCmD,EAAMzD,IAAG,SAAUS,GACf,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC7CD,EAAKvI,QAAU,IACfuI,EAAOA,EAAK,IAEhBmH,EAAQE,GAAKrH,EACb2H,EAASG,SAEd,SAAUA,GACTH,EAASG,EAAKX,QAK1BZ,EAAMU,SAAW,SAAU6D,GACvB,IAAIiC,EAAe,SAAUhU,GACzB,IAAI0N,EAAK,WAIL,OAHIqE,EAAMrT,QACNqT,EAAM/R,GAAO0H,MAAM,KAAMR,WAEtBwG,EAAGkG,QAKd,OAHAlG,EAAGkG,KAAO,WACN,OAAQ5T,EAAQ+R,EAAMrT,OAAS,EAAKsV,EAAahU,EAAQ,GAAI,MAE1D0N,GAEX,OAAOsG,EAAa,IAGxBxG,EAAM9F,MAAQ,SAAUgG,GACpB,IAAIzG,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GACjD,OAAO,WACH,OAAOwG,EAAGhG,MACN,KAAMT,EAAK0I,OAAOrS,MAAMI,UAAUiI,MAAM/H,KAAKsJ,eAKzD,IAAI+M,EAAU,SAAUnE,EAAQ7B,EAAKP,EAAIkB,GACrC,IAAI5M,EAAI,GACR8N,EAAO7B,GAAK,SAAU5G,EAAG6M,GACrBxG,EAAGrG,GAAG,SAAU0H,EAAKoF,GACjBnS,EAAIA,EAAE2N,OAAOwE,GAAK,IAClBD,EAAGnF,SAER,SAAUA,GACTH,EAASG,EAAK/M,OAGtBwL,EAAMmC,OAASD,EAAWuE,GAC1BzG,EAAM4G,aAAexE,EAASqE,GAE9BzG,EAAM6G,OAAS,SAAUjP,EAAM8I,EAAUU,GACjCxJ,IACA8I,GAAS,SAAUa,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpBvB,EAAM6G,OAAOjP,EAAM8I,EAAUU,MAIjCA,KAIRpB,EAAM8G,SAAW,SAAUpG,EAAU9I,EAAMwJ,GACvCV,GAAS,SAAUa,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpB,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC7C9B,EAAKsC,MAAM,KAAMT,GACjBuG,EAAM8G,SAASpG,EAAU9I,EAAMwJ,GAG/BA,QAKZpB,EAAM+G,MAAQ,SAAUnP,EAAM8I,EAAUU,GAC/BxJ,IASDwJ,IARAV,GAAS,SAAUa,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpBvB,EAAM+G,MAAMnP,EAAM8I,EAAUU,OAQxCpB,EAAMgH,QAAU,SAAUtG,EAAU9I,EAAMwJ,GACtCV,GAAS,SAAUa,GACf,GAAIA,EACA,OAAOH,EAASG,GAEpB,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC5C9B,EAAKsC,MAAM,KAAMT,GAIlB2H,IAHApB,EAAMgH,QAAQtG,EAAU9I,EAAMwJ,OAQ1CpB,EAAMiH,MAAQ,SAAUC,EAAQC,GAI5B,SAASC,EAAQC,EAAGpB,EAAMqB,EAAKlG,GAO7B,GANKiG,EAAEtF,UACLsF,EAAEtF,SAAU,GAETxB,EAAS0F,KACVA,EAAO,CAACA,IAEM,GAAfA,EAAK/U,OAEL,OAAO8O,EAAMiB,cAAa,WAClBoG,EAAEE,OACFF,EAAEE,WAIb/G,EAAMyF,GAAM,SAASnB,GACjB,IAAI5L,EAAO,CACP+M,KAAMnB,EACN1D,SAA8B,mBAAbA,EAA0BA,EAAW,MAGtDkG,EACFD,EAAE9C,MAAMI,QAAQzL,GAEhBmO,EAAE9C,MAAM7P,KAAKwE,GAGXmO,EAAEG,WAAaH,EAAE9C,MAAMrT,SAAWmW,EAAEF,aACpCE,EAAEG,YAENxH,EAAMiB,aAAaoG,EAAE5Y,iBAjCPiK,IAAhByO,IACAA,EAAc,GAoClB,IAAIM,EAAU,EACVJ,EAAI,CACJ9C,MAAO,GACP4C,YAAaA,EACbK,UAAW,KACXE,MAAO,KACPH,MAAO,KACPxF,SAAS,EACTzI,QAAQ,EACR5E,KAAM,SAAUuR,EAAM7E,GACpBgG,EAAQC,EAAGpB,GAAM,EAAO7E,IAE1BuG,KAAM,WACJN,EAAEE,MAAQ,KACVF,EAAE9C,MAAQ,IAEZI,QAAS,SAAUsB,EAAM7E,GACvBgG,EAAQC,EAAGpB,GAAM,EAAM7E,IAEzB3S,QAAS,WACL,IAAK4Y,EAAE/N,QAAUmO,EAAUJ,EAAEF,aAAeE,EAAE9C,MAAMrT,OAAQ,CACxD,IAAI4T,EAAOuC,EAAE9C,MAAMqD,QACfP,EAAEK,OAA4B,IAAnBL,EAAE9C,MAAMrT,QACnBmW,EAAEK,QAEND,GAAW,EACX,IAUIf,EAAKzG,GAVE,WACPwH,GAAW,EACP3C,EAAK1D,UACL0D,EAAK1D,SAASlH,MAAM4K,EAAMpL,WAE1B2N,EAAEE,OAASF,EAAE9C,MAAMrT,OAASuW,IAAY,GACxCJ,EAAEE,QAENF,EAAE5Y,aAGNyY,EAAOpC,EAAKmB,KAAMS,KAG1BxV,OAAQ,WACJ,OAAOmW,EAAE9C,MAAMrT,QAEnB8Q,QAAS,WACL,OAAOyF,GAEXI,KAAM,WACF,OAAOR,EAAE9C,MAAMrT,OAASuW,IAAY,GAExCK,MAAO,YACc,IAAbT,EAAE/N,SACN+N,EAAE/N,QAAS,EACX+N,EAAE5Y,YAENsZ,OAAQ,YACa,IAAbV,EAAE/N,SACN+N,EAAE/N,QAAS,EACX+N,EAAE5Y,aAGV,OAAO4Y,GAGXrH,EAAMgI,cAAgB,SAAUd,EAAQC,GAEpC,SAASc,EAAcpV,EAAGC,GACxB,OAAOD,EAAEqV,SAAWpV,EAAEoV,SAiDxB,IAAIb,EAAIrH,EAAMiH,MAAMC,EAAQC,GAU5B,OAPAE,EAAE3S,KAAO,SAAUuR,EAAMiC,EAAU9G,IAnCnC,SAAiBiG,EAAGpB,EAAMiC,EAAU9G,GAOlC,GANKiG,EAAEtF,UACLsF,EAAEtF,SAAU,GAETxB,EAAS0F,KACVA,EAAO,CAACA,IAEM,GAAfA,EAAK/U,OAEL,OAAO8O,EAAMiB,cAAa,WAClBoG,EAAEE,OACFF,EAAEE,WAIb/G,EAAMyF,GAAM,SAASnB,GACjB,IAAI5L,EAAO,CACP+M,KAAMnB,EACNoD,SAAUA,EACV9G,SAA8B,mBAAbA,EAA0BA,EAAW,MAG1DiG,EAAE9C,MAAMrF,OApCd,SAAuBiJ,EAAUjP,EAAMkP,GAGrC,IAFA,IAAIC,GAAO,EACPC,EAAMH,EAASjX,OAAS,EACrBmX,EAAMC,GAAK,CAChB,IAAIC,EAAMF,GAAQC,EAAMD,EAAM,IAAO,GACjCD,EAAQlP,EAAMiP,EAASI,KAAS,EAClCF,EAAME,EAEND,EAAMC,EAAM,EAGhB,OAAOF,EAyBYG,CAAcnB,EAAE9C,MAAOrL,EAAM+O,GAAiB,EAAG,EAAG/O,GAE/DmO,EAAEG,WAAaH,EAAE9C,MAAMrT,SAAWmW,EAAEF,aACpCE,EAAEG,YAENxH,EAAMiB,aAAaoG,EAAE5Y,YASzB2Y,CAAQC,EAAGpB,EAAMiC,EAAU9G,WAItBiG,EAAE1C,QAEF0C,GAGXrH,EAAMyI,MAAQ,SAAUvB,EAAQwB,GAC5B,IAAIC,GAAc,EACdpE,EAAc,GAEdkE,EAAQ,CACRlE,MAAOA,EACPmE,QAASA,EACTlB,UAAW,KACXE,MAAO,KACPH,MAAO,KACPqB,SAAS,EACTlU,KAAM,SAAUuR,EAAM7E,GACbb,EAAS0F,KACVA,EAAO,CAACA,IAEZzF,EAAMyF,GAAM,SAASnB,GACjBP,EAAM7P,KAAK,CACPuR,KAAMnB,EACN1D,SAA8B,mBAAbA,EAA0BA,EAAW,OAE1DqH,EAAMG,SAAU,EACZH,EAAMjB,WAAajD,EAAMrT,SAAWwX,GACpCD,EAAMjB,eAGdxH,EAAMiB,aAAawH,EAAMha,UAE7BA,QAAS,SAASA,IACd,IAAIka,EAAJ,CACA,GAAqB,IAAjBpE,EAAMrT,OAGN,OAFGuX,EAAMlB,QAAUkB,EAAMG,SAASH,EAAMlB,aACxCkB,EAAMG,SAAU,GAIpB,IAAIC,EAAwB,iBAAZH,EACFnE,EAAMrF,OAAO,EAAGwJ,GAChBnE,EAAMrF,OAAO,EAAGqF,EAAMrT,QAEhC4X,EAAKnI,EAAKkI,GAAI,SAAU/D,GACxB,OAAOA,EAAKmB,QAGbwC,EAAMf,OAAOe,EAAMf,QACtBiB,GAAU,EACVzB,EAAO4B,GAAI,WACPH,GAAU,EAEV,IAAIlP,EAAOC,UACX8G,EAAMqI,GAAI,SAAU5C,GACZA,EAAK7E,UACL6E,EAAK7E,SAASlH,MAAM,KAAMT,MAIlChL,SAGRyC,OAAQ,WACJ,OAAOqT,EAAMrT,QAEjB8Q,QAAS,WACL,OAAO2G,IAGf,OAAOF,GAGX,IAAIM,EAAc,SAAUjV,GACxB,OAAO,SAAUoM,GACb,IAAIzG,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GACjDwG,EAAGhG,MAAM,KAAMT,EAAK0I,OAAO,CAAC,SAAUZ,GAClC,IAAI9H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GAC1B,oBAAZ+B,UACH8F,EACI9F,QAAQuN,OACRvN,QAAQuN,MAAMzH,GAGb9F,QAAQ3H,IACb0M,EAAM/G,GAAM,SAAUI,GAClB4B,QAAQ3H,GAAM+F,aAOtCmG,EAAMtE,IAAMqN,EAAY,OACxB/I,EAAMiJ,IAAMF,EAAY,OAKxB/I,EAAMkJ,QAAU,SAAUhJ,EAAIiJ,GAC1B,IAAIxG,EAAO,GACPyG,EAAS,GACbD,EAASA,GAAU,SAAUtP,GACzB,OAAOA,GAEX,IAAIwP,EAAW,WACX,IAAI5P,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,WAClC0H,EAAW3H,EAAK6P,MAChBlT,EAAM+S,EAAOjP,MAAM,KAAMT,GACzBrD,KAAOuM,EACP3C,EAAMgB,UAAS,WACXI,EAASlH,MAAM,KAAMyI,EAAKvM,OAGzBA,KAAOgT,EACZA,EAAOhT,GAAK1B,KAAK0M,IAGjBgI,EAAOhT,GAAO,CAACgL,GACflB,EAAGhG,MAAM,KAAMT,EAAK0I,OAAO,CAAC,WACxBQ,EAAKvM,GAAOsD,UACZ,IAAI2N,EAAI+B,EAAOhT,UACRgT,EAAOhT,GACd,IAAK,IAAInF,EAAI,EAAGiH,EAAImP,EAAEnW,OAAQD,EAAIiH,EAAGjH,IACnCoW,EAAEpW,GAAGiJ,MAAM,KAAMR,iBAO/B,OAFA2P,EAAS1G,KAAOA,EAChB0G,EAASE,WAAarJ,EACfmJ,GAGXrJ,EAAMwJ,UAAY,SAAUtJ,GAC1B,OAAO,WACL,OAAQA,EAAGqJ,YAAcrJ,GAAIhG,MAAM,KAAMR,aAI7CsG,EAAMwF,MAAQ,SAAUiE,EAAO/I,EAAUU,GAErC,IADA,IAAIsI,EAAU,GACLzY,EAAI,EAAGA,EAAIwY,EAAOxY,IACvByY,EAAQhV,KAAKzD,GAEjB,OAAO+O,EAAMpH,IAAI8Q,EAAShJ,EAAUU,IAGxCpB,EAAM2J,YAAc,SAAUF,EAAO/I,EAAUU,GAE3C,IADA,IAAIsI,EAAU,GACLzY,EAAI,EAAGA,EAAIwY,EAAOxY,IACvByY,EAAQhV,KAAKzD,GAEjB,OAAO+O,EAAMuC,UAAUmH,EAAShJ,EAAUU,IAG9CpB,EAAM4J,IAAM,WACR,IAAIC,EAAMnQ,UACV,OAAO,WACH,IAAIoQ,EAAOnY,KACP8H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,WAClC0H,EAAW3H,EAAK6P,MACpBtJ,EAAMrH,OAAOkR,EAAKpQ,GAAM,SAAUsQ,EAAS7J,EAAIwG,GAC3CxG,EAAGhG,MAAM4P,EAAMC,EAAQ5H,OAAO,CAAC,WAC3B,IAAIZ,EAAM7H,UAAU,GAChBsQ,EAAWla,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GACrDgN,EAAGnF,EAAKyI,UAGhB,SAAUzI,EAAKX,GACXQ,EAASlH,MAAM4P,EAAM,CAACvI,GAAKY,OAAOvB,SAK9CZ,EAAMiK,QAAU,WACd,OAAOjK,EAAM4J,IAAI1P,MAAM,KAAMpK,MAAMI,UAAU8S,QAAQ5S,KAAKsJ,aAG5D,IAAIwQ,EAAa,SAAU5H,EAAQuH,GAC/B,IAAIM,EAAK,WACL,IAAIL,EAAOnY,KACP8H,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,WAClC0H,EAAW3H,EAAK6P,MACpB,OAAOhH,EAAOuH,GAAK,SAAU3J,EAAIwG,GAC7BxG,EAAGhG,MAAM4P,EAAMrQ,EAAK0I,OAAO,CAACuE,OAEhCtF,IAEJ,GAAI1H,UAAUxI,OAAS,EAAG,CACtB,IAAIuI,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GACjD,OAAOyQ,EAAGjQ,MAAMvI,KAAM8H,GAGtB,OAAO0Q,GAGfnK,EAAMoK,UAAYlI,EAAWgI,GAC7BlK,EAAMqK,gBAAkBjI,EAAS8H,GAEjClK,EAAMsK,QAAU,SAAUpK,EAAIkB,IAC1B,SAASgF,EAAK7E,GACV,GAAIA,EAAK,CACL,GAAIH,EACA,OAAOA,EAASG,GAEpB,MAAMA,EAEVrB,EAAGkG,GAEPA,IAIiCtY,EAAOD,QACxCC,EAAOD,QAAUmS,OAIX,kBACF,OAAOA,GADL,QAAC,OAAD,aAhlCb,6BCPDnS,EAAQ0c,WAuCR,SAAqBC,GACnB,IAAIC,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAC3B,OAAuC,GAA9BE,EAAWC,GAAuB,EAAKA,GA1ClD/c,EAAQgd,YAiDR,SAAsBL,GACpB,IAAIM,EAcA7Z,EAbAwZ,EAAOC,EAAQF,GACfG,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvBhK,EAAM,IAAIsK,EAVhB,SAAsBP,EAAKG,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,EAS9BI,CAAYR,EAAKG,EAAUC,IAEzCK,EAAU,EAGVtR,EAAMiR,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAK1Z,EAAI,EAAGA,EAAI0I,EAAK1I,GAAK,EACxB6Z,EACGI,EAAUV,EAAI/X,WAAWxB,KAAO,GAChCia,EAAUV,EAAI/X,WAAWxB,EAAI,KAAO,GACpCia,EAAUV,EAAI/X,WAAWxB,EAAI,KAAO,EACrCia,EAAUV,EAAI/X,WAAWxB,EAAI,IAC/BwP,EAAIwK,KAAcH,GAAO,GAAM,IAC/BrK,EAAIwK,KAAcH,GAAO,EAAK,IAC9BrK,EAAIwK,KAAmB,IAANH,EAmBnB,OAhBwB,IAApBF,IACFE,EACGI,EAAUV,EAAI/X,WAAWxB,KAAO,EAChCia,EAAUV,EAAI/X,WAAWxB,EAAI,KAAO,EACvCwP,EAAIwK,KAAmB,IAANH,GAGK,IAApBF,IACFE,EACGI,EAAUV,EAAI/X,WAAWxB,KAAO,GAChCia,EAAUV,EAAI/X,WAAWxB,EAAI,KAAO,EACpCia,EAAUV,EAAI/X,WAAWxB,EAAI,KAAO,EACvCwP,EAAIwK,KAAcH,GAAO,EAAK,IAC9BrK,EAAIwK,KAAmB,IAANH,GAGZrK,GA3FT5S,EAAQsd,cAkHR,SAAwBC,GAQtB,IAPA,IAAIN,EACAnR,EAAMyR,EAAMla,OACZma,EAAa1R,EAAM,EACnBb,EAAQ,GACRwS,EAAiB,MAGZra,EAAI,EAAGsa,EAAO5R,EAAM0R,EAAYpa,EAAIsa,EAAMta,GAAKqa,EACtDxS,EAAMpE,KAAK8W,EACTJ,EAAOna,EAAIA,EAAIqa,EAAkBC,EAAOA,EAAQta,EAAIqa,IAsBxD,OAjBmB,IAAfD,GACFP,EAAMM,EAAMzR,EAAM,GAClBb,EAAMpE,KACJ+W,EAAOX,GAAO,GACdW,EAAQX,GAAO,EAAK,IACpB,OAEsB,IAAfO,IACTP,GAAOM,EAAMzR,EAAM,IAAM,GAAKyR,EAAMzR,EAAM,GAC1Cb,EAAMpE,KACJ+W,EAAOX,GAAO,IACdW,EAAQX,GAAO,EAAK,IACpBW,EAAQX,GAAO,EAAK,IACpB,MAIGhS,EAAM8B,KAAK,KA3IpB,IALA,IAAI6Q,EAAS,GACTP,EAAY,GACZH,EAA4B,oBAAfnb,WAA6BA,WAAaE,MAEvDyC,EAAO,mEACFtB,EAAI,EAAG0I,EAAMpH,EAAKrB,OAAQD,EAAI0I,IAAO1I,EAC5Cwa,EAAOxa,GAAKsB,EAAKtB,GACjBia,EAAU3Y,EAAKE,WAAWxB,IAAMA,EAQlC,SAASyZ,EAASF,GAChB,IAAI7Q,EAAM6Q,EAAItZ,OAEd,GAAIyI,EAAM,EAAI,EACZ,MAAM,IAAIyG,MAAM,kDAKlB,IAAIuK,EAAWH,EAAIjN,QAAQ,KAO3B,OANkB,IAAdoN,IAAiBA,EAAWhR,GAMzB,CAACgR,EAJcA,IAAahR,EAC/B,EACA,EAAKgR,EAAW,GAsEtB,SAASa,EAAaJ,EAAOpZ,EAAOsW,GAGlC,IAFA,IAAIwC,EARoBY,EASpBC,EAAS,GACJ1a,EAAIe,EAAOf,EAAIqX,EAAKrX,GAAK,EAChC6Z,GACIM,EAAMna,IAAM,GAAM,WAClBma,EAAMna,EAAI,IAAM,EAAK,QACP,IAAfma,EAAMna,EAAI,IACb0a,EAAOjX,KAdF+W,GADiBC,EAeMZ,IAdT,GAAK,IACxBW,EAAOC,GAAO,GAAK,IACnBD,EAAOC,GAAO,EAAI,IAClBD,EAAa,GAANC,IAaT,OAAOC,EAAO/Q,KAAK,IAjGrBsQ,EAAU,IAAIzY,WAAW,IAAM,GAC/ByY,EAAU,IAAIzY,WAAW,IAAM,qBCnBkC3E,EAAOD,QAAiJ,SAASwG,GAAG,IAAII,EAAE,GAAG,SAASD,EAAEvD,GAAG,GAAGwD,EAAExD,GAAG,OAAOwD,EAAExD,GAAGpD,QAAQ,IAAIoM,EAAExF,EAAExD,GAAG,CAACA,EAAIiH,GAAE,EAAGrK,QAAQ,IAAI,OAAOwG,EAAEpD,GAAGb,KAAK6J,EAAEpM,QAAQoM,EAAEA,EAAEpM,QAAQ2G,GAAGyF,EAAE/B,GAAE,EAAG+B,EAAEpM,QAAQ,OAAO2G,EAAEG,EAAEN,EAAEG,EAAEzB,EAAE0B,EAAED,EAAExB,EAAE,SAASqB,EAAEI,EAAExD,GAAGuD,EAAER,EAAEK,EAAEI,IAAIxE,OAAO2b,eAAevX,EAAEI,EAAE,CAACoX,YAAW,EAAGC,IAAI7a,KAAKuD,EAAEA,EAAE,SAASH,GAAG,oBAAoB0X,QAAQA,OAAOC,aAAa/b,OAAO2b,eAAevX,EAAE0X,OAAOC,YAAY,CAACxW,MAAM,WAAWvF,OAAO2b,eAAevX,EAAE,aAAa,CAACmB,OAAM,KAAMhB,EAAEC,EAAE,SAASJ,EAAEI,GAAG,GAAG,EAAEA,IAAIJ,EAAEG,EAAEH,IAAI,EAAEI,EAAE,OAAOJ,EAAE,GAAG,EAAEI,GAAG,iBAAiBJ,GAAGA,GAAGA,EAAE4X,WAAW,OAAO5X,EAAE,IAAIpD,EAAEhB,OAAOe,OAAO,MAAM,GAAGwD,EAAEA,EAAEvD,GAAGhB,OAAO2b,eAAe3a,EAAE,UAAU,CAAC4a,YAAW,EAAGrW,MAAMnB,IAAI,EAAEI,GAAG,iBAAiBJ,EAAE,IAAI,IAAI4F,KAAK5F,EAAEG,EAAExB,EAAE/B,EAAEgJ,EAAE,SAASxF,GAAG,OAAOJ,EAAEI,IAAIoD,KAAK,KAAKoC,IAAI,OAAOhJ,GAAGuD,EAAEyF,EAAE,SAAS5F,GAAG,IAAII,EAAEJ,GAAGA,EAAE4X,WAAW,WAAW,OAAO5X,EAAE6X,SAAS,WAAW,OAAO7X,GAAG,OAAOG,EAAExB,EAAEyB,EAAE,IAAIA,GAAGA,GAAGD,EAAER,EAAE,SAASK,EAAEI,GAAG,OAAOxE,OAAOC,UAAU6Q,eAAe3Q,KAAKiE,EAAEI,IAAID,EAAEF,EAAE,GAAGE,EAAEA,EAAEL,EAAE,IAAj5B,CAAs5B,CAAC,GAAG,SAASE,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEuD,EAAE,IAAIyF,EAAE,WAAW,SAAS5F,KAAK,OAAOA,EAAE8X,cAAc,SAAS9X,EAAEI,GAAG,IAAID,EAAEC,EAAE+C,MAAMnD,GAAG,OAAOG,GAAGA,EAAEtD,OAAO,GAAGsD,EAAE,IAAI,IAAIH,EAAE+X,eAAe,SAAS/X,EAAEI,GAAG,IAAID,EAAEC,EAAE+C,MAAMnD,GAAG,OAAOG,GAAGA,EAAEtD,OAAO,GAAGsD,EAAE,IAAI,IAAIH,EAAEgY,oBAAoB,SAAShY,EAAEI,EAAED,GAAG,GAAGH,EAAEuD,KAAKnD,GAAG,OAAOD,GAAGH,EAAEiY,sBAAsB,SAASjY,GAAG,OAAOA,GAAG,IAAI,KAAK,MAAM,KAAK,IAAI,KAA0C,IAAI,SAAS,MAAM,KAA7C,IAAI,SAAS,MAAM,OAA+B,IAAI,SAAS,MAAM,OAAO,IAAI,SAAS,MAAM,QAAQ,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,IAAI,IAAI,SAAS,MAAM,MAAM,IAAI,UAAU,MAAM,KAAK,QAAQ,SAASA,EAAEkY,oBAAoB,SAASlY,GAAG,IAAII,EAAEJ,EAAEjF,MAAM,KAAK8P,OAAO,EAAE,GAAGtG,KAAK,SAASvE,GAAG,OAAOoI,SAASpI,EAAE,KAAK,KAAK,GAAGI,EAAEC,KAAK,GAAG,KAAKD,EAAE,GAAG,OAAOA,EAAE,IAAI,KAAK,EAAE,MAAM,UAAU,KAAK,EAAE,MAAM,eAAe,KAAK,EAAE,MAAM,OAAO,KAAK,EAAE,MAAM,gBAAgB,KAAK,EAAE,MAAM,YAAY,KAAK,GAAG,MAAM,WAAW,KAAK,GAAG,MAAM,aAAa,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,cAAc,KAAK,GAAG,MAAM,SAAS,KAAK,GAAG,MAAM,WAAW,QAAQ,SAASJ,EAAEmY,sBAAsB,SAASnY,GAAG,IAAII,EAAEJ,EAAEjF,MAAM,KAAK8P,OAAO,EAAE,GAAGtG,KAAK,SAASvE,GAAG,OAAOoI,SAASpI,EAAE,KAAK,KAAK,GAAGI,EAAEC,KAAK,KAAK,IAAID,EAAE,IAAIA,EAAE,GAAG,GAAG,OAAO,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,UAAU,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,SAAS,IAAIA,EAAE,IAAI,IAAIA,EAAE,GAAG,QAAQ,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,cAAc,IAAIA,EAAE,GAAG,YAAY,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,qBAAqB,IAAIA,EAAE,IAAIA,EAAE,GAAG,EAAE,aAAa,IAAIA,EAAE,IAAIA,EAAE,IAAI,EAAE,SAAS,IAAIA,EAAE,GAAG,WAAW,IAAIA,EAAE,GAAG,cAAc,IAAIA,EAAE,GAAG,SAAS,IAAIA,EAAE,GAAG,OAAO,IAAIA,EAAE,GAAG,WAAM,GAAQJ,EAAEoY,oBAAoB,SAASpY,GAAG,OAAOA,EAAEjF,MAAM,KAAK8B,QAAQmD,EAAEqY,gBAAgB,SAASjY,EAAED,EAAEvD,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAIgJ,EAAE5F,EAAEoY,oBAAoBhY,GAAGN,EAAEE,EAAEoY,oBAAoBjY,GAAGR,EAAEiK,KAAK0O,IAAI1S,EAAE9F,GAAGtB,EAAE,EAAEuB,EAAEC,EAAEuE,IAAI,CAACnE,EAAED,IAAI,SAASC,GAAG,IAAID,EAAER,EAAEK,EAAEoY,oBAAoBhY,GAAGxD,EAAEwD,EAAE,IAAI3E,MAAM0E,EAAE,GAAGoG,KAAK,MAAM,OAAOvG,EAAEuE,IAAI3H,EAAE7B,MAAM,MAAM,SAASiF,GAAG,OAAO,IAAIvE,MAAM,GAAGuE,EAAEnD,QAAQ0J,KAAK,KAAKvG,KAAK2O,aAAa,IAAI/R,IAAI4B,EAAEmB,EAAEiK,KAAK2O,IAAI3S,EAAE9F,IAAIH,GAAG,EAAEA,GAAGnB,GAAG,CAAC,GAAGuB,EAAE,GAAGJ,GAAGI,EAAE,GAAGJ,GAAG,OAAO,EAAE,GAAGI,EAAE,GAAGJ,KAAKI,EAAE,GAAGJ,GAAG,CAAC,GAAGA,IAAInB,EAAE,OAAO,EAAEmB,GAAG,OAAO,GAAGI,EAAE,GAAGJ,GAAGI,EAAE,GAAGJ,GAAG,OAAO,IAAIK,EAAEuE,IAAI,SAASvE,EAAEI,GAAG,IAAID,EAAEvD,EAAE,GAAG,GAAGnB,MAAMI,UAAU0I,IAAI,OAAO9I,MAAMI,UAAU0I,IAAIxI,KAAKiE,EAAEI,GAAG,IAAID,EAAE,EAAEA,EAAEH,EAAEnD,OAAOsD,GAAG,EAAEvD,EAAEyD,KAAKD,EAAEJ,EAAEG,KAAK,OAAOvD,GAAGoD,EAAEwY,gBAAgB,SAASxY,GAAG,OAAOpD,EAAE6b,oBAAoBzY,IAAIA,EAAE0Y,sBAAsB,SAAS1Y,GAAG,OAAOpD,EAAE+b,YAAY3Y,IAAI,IAAIA,EAAtvE,GAA2vEI,EAAEyX,QAAQjS,EAAE5F,EAAExG,QAAQ4G,EAAEyX,SAAS,GAAG,SAAS7X,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEwY,WAAWxY,EAAEyY,OAAOzY,EAAE0Y,cAAc1Y,EAAEuY,YAAYvY,EAAEqY,yBAAoB,EAAOrY,EAAEqY,oBAAoB,CAAC,cAAc,cAAc,kBAAkB,UAAUM,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAU,gBAAgB,gBAAgBC,UAAU,YAAY,oBAAoB,KAAK,WAAW,WAAWC,QAAQ,UAAU,iBAAiB,OAAO,aAAa,KAAK,sBAAsB,QAAQC,MAAM,QAAQ,cAAc,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,KAAKC,OAAO,SAASC,OAAO,SAASC,SAAS,WAAW,+BAA+B,mBAAmBC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQ,aAAa,KAAKC,QAAQ,UAAU,gBAAgB,QAAQC,OAAO,SAAS,iBAAiB,SAASC,KAAK,QAAQna,EAAEuY,YAAY,CAAC6B,YAAY,cAAcC,QAAQ,kBAAkBC,KAAK,OAAOC,WAAW,aAAaC,OAAO,SAASC,SAAS,WAAWC,SAAS,WAAWC,QAAQ,UAAUC,MAAM,QAAQC,QAAQ,UAAUC,UAAU,YAAYC,cAAc,gBAAgBC,GAAG,oBAAoBC,SAAS,WAAWC,QAAQ,UAAUC,KAAK,iBAAiBC,GAAG,aAAaC,MAAM,sBAAsBC,MAAM,QAAQC,YAAY,cAAcC,UAAU,YAAYC,OAAO,SAASC,SAAS,WAAWC,GAAG,aAAaC,OAAO,kBAAkBC,OAAO,SAASC,SAAS,WAAWC,iBAAiB,+BAA+BC,UAAU,YAAYC,SAAS,WAAWC,MAAM,QAAQC,MAAM,QAAQC,GAAG,aAAaC,QAAQ,UAAUC,MAAM,gBAAgBC,OAAO,SAASC,OAAO,kBAAkBxc,EAAE0Y,cAAc,CAAC+D,OAAO,SAASC,OAAO,SAASC,QAAQ,UAAUC,GAAG,MAAM5c,EAAEyY,OAAO,CAACoE,aAAa,gBAAgBC,QAAQ,UAAUC,MAAM,QAAQC,IAAI,MAAMC,QAAQ,UAAUC,MAAM,QAAQtE,WAAW,aAAaD,KAAK,OAAOqB,MAAM,QAAQmD,MAAM,QAAQC,SAAS,YAAYC,aAAa,gBAAgBlD,KAAK,QAAQna,EAAEwY,WAAW,CAAC8E,SAAS,WAAWC,MAAM,QAAQC,QAAQ,UAAUC,OAAO,SAASC,MAAM,QAAQC,OAAO,WAAW,GAAG,SAAS/d,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEgJ,GAAGhJ,EAAEuD,EAAE,MAAMvD,EAAEgb,WAAWhb,EAAE,CAACib,QAAQjb,GAAGkD,EAAEK,EAAE,IAAI,SAASR,EAAEK,EAAEI,GAAG,IAAI,IAAID,EAAE,EAAEA,EAAEC,EAAEvD,OAAOsD,IAAI,CAAC,IAAIvD,EAAEwD,EAAED,GAAGvD,EAAE4a,WAAW5a,EAAE4a,aAAY,EAAG5a,EAAEohB,cAAa,EAAG,UAAUphB,IAAIA,EAAEqhB,UAAS,GAAIriB,OAAO2b,eAAevX,EAAEpD,EAAEmF,IAAInF,IAAI,IAAI4B,EAAE,WAAW,SAASwB,KAAK,IAAII,EAAIxD,EAAE,OAAOoD,EAAEke,UAAU,SAASle,EAAEI,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,iBAAiBJ,EAAE,MAAM,IAAI+L,MAAM,gCAAgC,OAAO,IAAInG,EAAEiS,QAAQ7X,EAAEI,IAAIJ,EAAEoC,MAAM,SAASpC,GAAG,OAAO,IAAI4F,EAAEiS,QAAQ7X,GAAGme,aAAa/d,EAAEJ,EAAEpD,EAAE,CAAC,CAACmF,IAAI,cAAc0V,IAAI,WAAW,OAAO3X,EAAE6Y,cAAc,CAAC5W,IAAI,aAAa0V,IAAI,WAAW,OAAO3X,EAAE8Y,aAAa,CAAC7W,IAAI,SAAS0V,IAAI,WAAW,OAAO3X,EAAE+Y,SAAS,CAAC9W,IAAI,gBAAgB0V,IAAI,WAAW,OAAO3X,EAAEgZ,iBAAoB,MAAOnZ,EAAES,EAAEvE,UAAX,MAAwBe,GAAG+C,EAAES,EAAExD,GAAGoD,EAA1f,GAA+fI,EAAEyX,QAAQrZ,EAAEwB,EAAExG,QAAQ4G,EAAEyX,SAAS,GAAG,SAAS7X,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEmD,EAAEI,EAAE,KAAKyF,EAAE7F,EAAEI,EAAE,KAAKL,EAAEC,EAAEI,EAAE,KAAKR,EAAEI,EAAEI,EAAE,KAAK3B,EAAEuB,EAAEI,EAAE,KAAK,SAASJ,EAAEC,GAAG,OAAOA,GAAGA,EAAE4X,WAAW5X,EAAE,CAAC6X,QAAQ7X,GAAG,IAAIrB,EAAE,WAAW,SAASqB,EAAEA,EAAEI,GAAG,QAAG,IAASA,IAAIA,GAAE,GAAI,MAAMJ,GAAG,KAAKA,EAAE,MAAM,IAAI+L,MAAM,sCAAsCzO,KAAK8gB,IAAIpe,EAAE1C,KAAK+gB,aAAa,IAAG,IAAKje,GAAG9C,KAAK8E,QAAQ,IAAIhC,EAAEJ,EAAEnE,UAAU,OAAOuE,EAAEke,MAAM,WAAW,OAAOhhB,KAAK8gB,KAAKhe,EAAEmD,KAAK,SAASvD,GAAG,OAAOA,EAAEuD,KAAKjG,KAAK8gB,MAAMhe,EAAEme,aAAa,WAAW,IAAIve,EAAE1C,KAAKA,KAAK+gB,aAAaG,QAAQ,GAAG,IAAIpe,EAAExD,EAAEib,QAAQ7P,MAAM,SAAS5H,GAAG,GAAG,mBAAmBA,EAAEmD,KAAK,OAAOnD,EAAEmD,KAAKvD,GAAG,GAAGI,EAAEmD,gBAAgB9H,MAAM,OAAO2E,EAAEmD,KAAK4H,MAAM,SAAS/K,GAAG,OAAOJ,EAAEuD,KAAKnD,MAAM,MAAM,IAAI2L,MAAM,2CAA2C,OAAO3L,IAAI9C,KAAK+gB,aAAaG,QAAQpe,EAAEqe,SAASnhB,KAAKghB,UAAUhhB,KAAK+gB,aAAaG,SAASpe,EAAEse,WAAW,WAAW,OAAOphB,KAAK+gB,aAAaG,QAAQlhB,KAAK+gB,aAAaG,QAAQlhB,KAAKihB,gBAAgBne,EAAEue,eAAe,SAAS3e,GAAG,OAAOA,EAAE4C,OAAOtF,KAAKohB,aAAajf,MAAMmf,eAAe,GAAGthB,KAAKohB,aAAajf,MAAM,IAAIW,EAAEye,kBAAkB,WAAW,OAAOvhB,KAAKohB,aAAazY,SAAS7F,EAAE0e,MAAM,WAAW,OAAOxhB,KAAK+gB,aAAaU,GAAGzhB,KAAK+gB,aAAaU,GAAGzhB,KAAK0hB,WAAW5e,EAAE4e,QAAQ,WAAW,IAAIhf,EAAE1C,KAAKA,KAAK+gB,aAAaU,GAAG,GAAG,IAAI3e,EAAEwF,EAAEiS,QAAQ7P,MAAM,SAAS5H,GAAG,GAAG,mBAAmBA,EAAEmD,KAAK,OAAOnD,EAAEmD,KAAKvD,GAAG,GAAGI,EAAEmD,gBAAgB9H,MAAM,OAAO2E,EAAEmD,KAAK4H,MAAM,SAAS/K,GAAG,OAAOJ,EAAEuD,KAAKnD,MAAM,MAAM,IAAI2L,MAAM,2CAA2C,OAAO3L,IAAI9C,KAAK+gB,aAAaU,GAAG3e,EAAEqe,SAASnhB,KAAKghB,UAAUhhB,KAAK+gB,aAAaU,IAAI3e,EAAE6e,UAAU,SAASjf,GAAG,IAAII,EAAE9C,KAAKwhB,QAAQrf,KAAK,OAAOO,EAAE4C,OAAOxC,GAAGwe,eAAe,GAAGxe,GAAG,IAAIA,EAAE8e,aAAa,WAAW,OAAO5hB,KAAKwhB,QAAQ7Y,SAAS7F,EAAE+e,YAAY,WAAW,OAAO7hB,KAAK+gB,aAAae,SAAS9hB,KAAK+gB,aAAae,SAAS9hB,KAAK+hB,iBAAiBjf,EAAEkf,gBAAgB,SAAStf,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAII,EAAE9C,KAAK6hB,cAAcriB,KAAK,OAAOkD,EAAE4C,OAAOxC,GAAGwe,eAAe,GAAGxe,GAAG,IAAIA,EAAEif,cAAc,WAAW,IAAIrf,EAAE1C,KAAKA,KAAK+gB,aAAae,SAAS,GAAG,IAAIhf,EAAEN,EAAE+X,QAAQ7P,MAAM,SAAS5H,GAAG,GAAG,mBAAmBA,EAAEmD,KAAK,OAAOnD,EAAEmD,KAAKvD,GAAG,GAAGI,EAAEmD,gBAAgB9H,MAAM,OAAO2E,EAAEmD,KAAK4H,MAAM,SAAS/K,GAAG,OAAOJ,EAAEuD,KAAKnD,MAAM,MAAM,IAAI2L,MAAM,2CAA2C,OAAO3L,IAAI9C,KAAK+gB,aAAae,SAAShf,EAAEqe,SAASnhB,KAAKghB,UAAUhhB,KAAK+gB,aAAae,UAAUhf,EAAEmf,UAAU,WAAW,OAAOjiB,KAAK+gB,aAAamB,OAAOliB,KAAK+gB,aAAamB,OAAOliB,KAAKmiB,eAAerf,EAAEsf,cAAc,SAAS1f,GAAG,OAAOA,EAAE4C,OAAOtF,KAAKiiB,YAAY9f,MAAMmf,eAAe,GAAGthB,KAAKiiB,YAAY9f,MAAM,IAAIW,EAAEqf,YAAY,WAAW,IAAIzf,EAAE1C,KAAKA,KAAK+gB,aAAamB,OAAO,GAAG,IAAIpf,EAAET,EAAEkY,QAAQ7P,MAAM,SAAS5H,GAAG,GAAG,mBAAmBA,EAAEmD,KAAK,OAAOnD,EAAEmD,KAAKvD,GAAG,GAAGI,EAAEmD,gBAAgB9H,MAAM,OAAO2E,EAAEmD,KAAK4H,MAAM,SAAS/K,GAAG,OAAOJ,EAAEuD,KAAKnD,MAAM,MAAM,IAAI2L,MAAM,2CAA2C,OAAO3L,IAAI9C,KAAK+gB,aAAamB,OAAOpf,EAAEqe,SAASnhB,KAAKghB,UAAUhhB,KAAK+gB,aAAamB,QAAQpf,EAAEgC,MAAM,WAAW,OAAO9E,KAAKihB,eAAejhB,KAAK0hB,UAAU1hB,KAAK+hB,gBAAgB/hB,KAAKmiB,cAAcniB,MAAM8C,EAAE+d,UAAU,WAAW,OAAOviB,OAAO+jB,OAAO,GAAGriB,KAAK+gB,eAAeje,EAAEwf,UAAU,SAAS5f,GAAG,IAAII,EAAE9C,KAAK6C,EAAE,GAAGvD,EAAE,EAAEgJ,EAAE,GAAG9F,EAAE,EAAE,GAAGlE,OAAOiG,KAAK7B,GAAG8B,SAAS,SAAS1B,GAAG,IAAIT,EAAEK,EAAEI,GAAG,iBAAiBT,GAAGiG,EAAExF,GAAGT,EAAEG,GAAG,GAAG,iBAAiBH,IAAIQ,EAAEC,GAAGT,EAAE/C,GAAG,MAAMA,EAAE,EAAE,CAAC,IAAI+C,EAAE/D,OAAOiG,KAAK1B,GAAG3B,EAAEmB,EAAEqI,MAAM,SAAShI,GAAG,OAAOI,EAAEyf,KAAK7f,MAAM,GAAGxB,EAAE,CAAC,IAAIuB,EAAEzC,KAAKsiB,UAAUzf,EAAE3B,IAAI,QAAG,IAASuB,EAAE,OAAOA,EAAE,IAAIpB,EAAEgB,EAAEqI,MAAM,SAAShI,GAAG,OAAOI,EAAE0f,WAAW9f,MAAM,GAAGrB,EAAE,CAAC,IAAID,EAAEpB,KAAKsiB,UAAUzf,EAAExB,IAAI,QAAG,IAASD,EAAE,OAAOA,GAAG,GAAGoB,EAAE,EAAE,CAAC,IAAIigB,EAAEnkB,OAAOiG,KAAK+D,GAAGoC,MAAM,SAAShI,GAAG,OAAOI,EAAE4f,UAAUhgB,GAAE,MAAO,QAAG,IAAS+f,EAAE,OAAOziB,KAAK2iB,eAAera,EAAEma,MAAM3f,EAAE4f,UAAU,SAAShgB,EAAEI,QAAG,IAASA,IAAIA,GAAE,GAAI,IAAID,EAAE7C,KAAKqhB,iBAAiBC,cAAchiB,EAAEoD,EAAE4e,cAAchZ,EAAEpH,EAAEqZ,QAAQa,sBAAsB9b,GAAG,OAAOwD,GAAGwF,IAAIhJ,EAAEgJ,EAAEgZ,eAAehiB,IAAIuD,GAAGC,EAAE6f,eAAe,SAASjgB,GAAG,IAAII,EAAE,CAAC,GAAGD,EAAEH,EAAEpD,GAAE,EAAGgJ,EAAEtI,KAAKuhB,oBAAoB,GAAG,iBAAiBjZ,EAAE,MAAM,MAAM5F,EAAE,IAAI,MAAMA,EAAE,IAAIG,EAAEH,EAAEkgB,OAAO,GAAG,MAAMlgB,EAAE,IAAIpD,GAAE,EAAGuD,EAAEH,EAAEkgB,OAAO,IAAI9f,EAAE,GAAG,MAAMJ,EAAE,GAAGI,EAAEC,KAAK,GAAGD,EAAEC,MAAM,IAAI,MAAML,EAAE,GAAGG,EAAEH,EAAEkgB,OAAO,GAAG,MAAMlgB,EAAE,KAAKpD,GAAE,EAAGuD,EAAEH,EAAEkgB,OAAO,IAAI9f,EAAE8I,QAAQ1K,EAAEqZ,QAAQQ,gBAAgBzS,EAAEzF,EAAEvD,KAAK,GAAGwD,EAAEyf,KAAK,SAAS7f,GAAG,OAAO1C,KAAK2hB,WAAU,KAAMrc,OAAO5C,GAAG4e,eAAexe,EAAE0f,WAAW,SAAS9f,GAAG,OAAO1C,KAAKgiB,iBAAgB,KAAM1c,OAAO5C,GAAG4e,eAAexe,EAAE+f,SAAS,SAASngB,GAAG,OAAO1C,KAAKoiB,eAAc,KAAM9c,OAAO5C,GAAG4e,eAAexe,EAAEggB,GAAG,SAASpgB,GAAG,OAAO1C,KAAK0iB,UAAUhgB,IAAI1C,KAAKuiB,KAAK7f,IAAI1C,KAAKwiB,WAAW9f,IAAII,EAAE+K,KAAK,SAASnL,GAAG,IAAII,EAAE9C,KAAK,YAAO,IAAS0C,IAAIA,EAAE,IAAIA,EAAEmL,MAAM,SAASnL,GAAG,OAAOI,EAAEggB,GAAGpgB,OAAOA,EAAluI,GAAuuII,EAAEyX,QAAQlZ,EAAEqB,EAAExG,QAAQ4G,EAAEyX,SAAS,GAAG,SAAS7X,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEgJ,GAAGhJ,EAAEuD,EAAE,MAAMvD,EAAEgb,WAAWhb,EAAE,CAACib,QAAQjb,GAAOkD,EAAE,6BAA6BH,EAAE,CAAC,CAAC4D,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,aAAaU,EAAEyF,EAAEiS,QAAQC,cAAc,2BAA2B9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,SAASU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,kCAAkC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,gBAAgBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,SAASU,EAAEyF,EAAEiS,QAAQC,cAAc,2BAA2B9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,mBAAmBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,gCAAgCU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,2CAA2C9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,uBAAuBU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,iCAAiC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,cAAcU,EAAEyF,EAAEiS,QAAQC,cAAc,qCAAqC9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,SAASU,EAAEyF,EAAEiS,QAAQC,cAAc,iCAAiC9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,SAASU,EAAEyF,EAAEiS,QAAQC,cAAc,iCAAiC9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,eAAeU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,kCAAkC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,kBAAkBU,EAAEyF,EAAEiS,QAAQC,cAAc,sCAAsC9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,cAAcU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,sCAAsC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,kBAAkBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,WAAWU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,0CAA0C9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,qCAAqC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,WAAWkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,UAAUU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,mCAAmC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,qCAAqC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,qCAAqC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,mBAAmBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,UAAUU,EAAEyF,EAAEiS,QAAQC,cAAc,2CAA2C9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,iBAAiB8D,KAAKvD,GAAG,kBAAkB,cAAcG,EAAEyF,EAAEiS,QAAQC,cAAc,kDAAkD9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,iBAAiBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,qBAAqBU,EAAEyF,EAAEiS,QAAQC,cAAc,iCAAiC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,YAAYkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,kBAAkBU,EAAEyF,EAAEiS,QAAQC,cAAc,2BAA2B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,kBAAkBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,kBAAkBU,EAAEyF,EAAEiS,QAAQE,eAAe,mCAAmC/X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,YAAYkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,WAAWU,EAAEyF,EAAEiS,QAAQC,cAAc,6BAA6B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,aAAaU,EAAEyF,EAAEiS,QAAQC,cAAc,+BAA+B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAc,qCAAqC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,SAASkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,eAAeU,EAAEyF,EAAEiS,QAAQC,cAAc,0BAA0B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,YAAYkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,aAAaU,EAAEyF,EAAEiS,QAAQC,cAAc,+BAA+B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAc,8BAA8B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,sBAAsB,gBAAgBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,cAAcU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,qCAAqC9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,mBAAmBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,iBAAiBU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,IAAI4F,EAAEiS,QAAQC,cAAc,0CAA0C9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,SAASkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,QAAQU,EAAEyF,EAAEiS,QAAQC,cAAc,4BAA4B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,SAASU,EAAEyF,EAAEiS,QAAQC,cAAc,0CAA0C9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAc,qCAAqC9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,4BAA4Bkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,WAAWU,EAAEyF,EAAEiS,QAAQC,cAAc,oDAAoD9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,YAAYU,EAAEyF,EAAEiS,QAAQC,cAAc,qCAAqC9X,IAAI4F,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,sBAAsBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,UAAUU,EAAEyF,EAAEiS,QAAQC,cAAc,2CAA2C9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,QAAQkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,iBAAiBU,EAAEyF,EAAEiS,QAAQC,cAAc,6BAA6B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,SAASvD,GAAG,IAAII,GAAGJ,EAAEuD,KAAK,iBAAiBpD,EAAEH,EAAEuD,KAAK,YAAY,OAAOnD,GAAGD,GAAGse,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,mBAAmBU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,kBAAkBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,iBAAiBU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,uBAAuBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAK,UAAUU,EAAEyF,EAAEiS,QAAQC,cAAchY,EAAEE,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,OAAOkb,SAAS,SAASze,GAAG,IAAII,GAAG,IAAIJ,EAAEqgB,OAAO,OAAO,yBAAyB,eAAe,MAAM,CAAC5gB,KAAKmG,EAAEiS,QAAQC,cAAc1X,EAAEJ,GAAGiG,QAAQL,EAAEiS,QAAQE,eAAe3X,EAAEJ,OAAOI,EAAEyX,QAAQlY,EAAEK,EAAExG,QAAQ4G,EAAEyX,SAAS,GAAG,SAAS7X,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEgJ,GAAGhJ,EAAEuD,EAAE,MAAMvD,EAAEgb,WAAWhb,EAAE,CAACib,QAAQjb,GAAGkD,EAAEK,EAAE,IAAQR,EAAE,CAAC,CAAC4D,KAAK,CAAC,aAAakb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,wBAAwB9X,GAAG,MAAM,CAACP,KAAKK,EAAE+Y,OAAO0B,KAAKtU,QAAQ7F,KAAK,CAACmD,KAAK,CAAC,kBAAkBkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,yCAAyC9X,GAAG,MAAM,CAACP,KAAKK,EAAE+Y,OAAOoE,aAAahX,QAAQ7F,KAAK,CAACmD,KAAK,CAAC,YAAYkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,iCAAiC9X,GAAGG,EAAEyF,EAAEiS,QAAQI,sBAAsB7X,GAAG,MAAM,CAACX,KAAKK,EAAE+Y,OAAOqE,QAAQjX,QAAQ7F,EAAEkgB,YAAYngB,KAAK,CAACoD,KAAK,CAAC,cAAckb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,6BAA6B9X,GAAGuF,QAAQ,SAAS,KAAKpF,EAAEyF,EAAEiS,QAAQK,oBAAoB9X,GAAGxD,EAAE,CAAC6C,KAAKK,EAAE+Y,OAAOsE,MAAMlX,QAAQ7F,GAAG,OAAOD,IAAIvD,EAAE0jB,YAAYngB,GAAGvD,IAAI,CAAC2G,KAAK,CAAC,uBAAuBkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,qCAAqC9X,GAAGuF,QAAQ,SAAS,KAAK,MAAM,CAAC9F,KAAKK,EAAE+Y,OAAOuE,IAAInX,QAAQ7F,KAAK,CAACmD,KAAK,SAASvD,GAAG,IAAII,GAAGJ,EAAEuD,KAAK,iBAAiBpD,EAAEH,EAAEuD,KAAK,YAAY,OAAOnD,GAAGD,GAAGse,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,8BAA8B9X,GAAGG,EAAEyF,EAAEiS,QAAQM,sBAAsB/X,GAAGxD,EAAE,CAAC6C,KAAKK,EAAE+Y,OAAOwE,QAAQpX,QAAQ7F,GAAG,OAAOD,IAAIvD,EAAE0jB,YAAYngB,GAAGvD,IAAI,CAAC2G,KAAK,CAAC,mBAAmBkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,mCAAmC9X,GAAGG,EAAE,CAACV,KAAKK,EAAE+Y,OAAOyE,OAAO,OAAOld,GAAGA,EAAEvD,SAASsD,EAAE8F,QAAQ7F,GAAGD,IAAI,CAACoD,KAAK,CAAC,sBAAsB,gBAAgBkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,kCAAkC9X,IAAI4F,EAAEiS,QAAQC,cAAc,mCAAmC9X,IAAI4F,EAAEiS,QAAQC,cAAc,aAAa9X,GAAG,MAAM,CAACP,KAAKK,EAAE+Y,OAAOG,WAAW/S,QAAQ7F,KAAK,CAACmD,KAAK,CAAC,SAASkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,uBAAuB9X,GAAG,MAAM,CAACP,KAAKK,EAAE+Y,OAAOE,KAAK9S,QAAQ7F,KAAK,CAACmD,KAAK,CAAC,UAAUkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,2BAA2B9X,GAAG,MAAM,CAACP,KAAKK,EAAE+Y,OAAOuB,MAAMnU,QAAQ7F,KAAK,CAACmD,KAAK,CAAC,UAAUkb,SAAS,WAAW,MAAM,CAAChf,KAAKK,EAAE+Y,OAAO0E,SAAS,CAACha,KAAK,CAAC,QAAQkb,SAAS,WAAW,MAAM,CAAChf,KAAKK,EAAE+Y,OAAO2E,YAAY,CAACja,KAAK,CAAC,iBAAiBkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,mCAAmC9X,GAAG,MAAM,CAACP,KAAKK,EAAE+Y,OAAO4E,aAAaxX,QAAQ7F,MAAMA,EAAEyX,QAAQlY,EAAEK,EAAExG,QAAQ4G,EAAEyX,SAAS,GAAG,SAAS7X,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEgJ,GAAGhJ,EAAEuD,EAAE,MAAMvD,EAAEgb,WAAWhb,EAAE,CAACib,QAAQjb,GAAGkD,EAAEK,EAAE,IAAQR,EAAE,CAAC,CAAC4D,KAAK,CAAC,cAAckb,SAAS,WAAW,MAAM,CAAC3hB,KAAK,MAAMyjB,OAAO,YAAY,CAAChd,KAAK,CAAC,WAAWkb,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,aAAa9X,IAAI,OAAOG,EAAE,CAACrD,KAAKgD,EAAEgZ,cAAcgE,OAAOyD,OAAO,UAAU,OAAOngB,IAAID,EAAEqgB,MAAMpgB,GAAGD,IAAI,CAACoD,KAAK,CAAC,2BAA2Bkb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAc+D,OAAO0D,OAAO,WAAW,CAAChd,KAAK,CAAC,SAASkb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAc+D,OAAO0D,OAAO,QAAQC,MAAM,UAAU,CAACjd,KAAK,CAAC,eAAekb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAc+D,OAAO0D,OAAO,SAASC,MAAM,sBAAsB,CAACjd,KAAK,CAAC,SAASkb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAc+D,OAAO0D,OAAO,YAAY,CAAChd,KAAK,CAAC,kBAAkBkb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAc+D,UAAU,CAACtZ,KAAK,SAASvD,GAAG,IAAII,EAAEJ,EAAEuD,KAAK,gBAAgBpD,EAAEH,EAAEuD,KAAK,uBAAuB,OAAOnD,IAAID,GAAGse,SAAS,SAASze,GAAG,IAAII,EAAEwF,EAAEiS,QAAQC,cAAc,iBAAiB9X,GAAG,MAAM,CAAClD,KAAKgD,EAAEgZ,cAAcgE,OAAOyD,OAAO,QAAQC,MAAMpgB,KAAK,CAACmD,KAAK,CAAC,mBAAmB,iBAAiBkb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAcgE,OAAOyD,OAAO,WAAW,CAAChd,KAAK,CAAC,aAAakb,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAcgE,UAAU,CAACvZ,KAAK,SAASvD,GAAG,MAAM,eAAeA,EAAE2e,gBAAe,IAAKF,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAcgE,OAAOyD,OAAO,gBAAgB,CAAChd,KAAK,SAASvD,GAAG,MAAM,SAASA,EAAE2e,gBAAe,IAAKF,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAcgE,UAAU,CAACvZ,KAAK,SAASvD,GAAG,MAAM,kBAAkBA,EAAE2e,kBAAkBF,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAcgE,OAAOyD,OAAO,eAAe,CAAChd,KAAK,SAASvD,GAAG,IAAII,EAAEyC,OAAOD,OAAO5C,EAAEkf,gBAAgBnkB,MAAM,KAAK,IAAI,MAAM,YAAYiF,EAAEif,WAAU,IAAK7e,GAAG,GAAGqe,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAc+D,UAAU,CAACtZ,KAAK,SAASvD,GAAG,MAAM,YAAYA,EAAEif,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAcgE,UAAU,CAACvZ,KAAK,SAASvD,GAAG,MAAM,UAAUA,EAAEif,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAciE,QAAQwD,OAAO,WAAW,CAAChd,KAAK,SAASvD,GAAG,MAAM,YAAYA,EAAEif,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAciE,WAAW,CAACxZ,KAAK,SAASvD,GAAG,MAAM,UAAUA,EAAEif,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAciE,WAAW,CAACxZ,KAAK,SAASvD,GAAG,MAAM,kBAAkBA,EAAEif,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAckE,MAAM,CAACzZ,KAAK,SAASvD,GAAG,MAAM,SAASA,EAAEif,WAAU,IAAKR,SAAS,WAAW,MAAM,CAAC3hB,KAAKgD,EAAEgZ,cAAckE,OAAO5c,EAAEyX,QAAQlY,EAAEK,EAAExG,QAAQ4G,EAAEyX,SAAS,GAAG,SAAS7X,EAAEI,EAAED,GAAG,aAAaC,EAAEwX,YAAW,EAAGxX,EAAEyX,aAAQ,EAAO,IAAIjb,EAAEgJ,GAAGhJ,EAAEuD,EAAE,MAAMvD,EAAEgb,WAAWhb,EAAE,CAACib,QAAQjb,GAAGkD,EAAEK,EAAE,IAAQR,EAAE,CAAC,CAAC4D,KAAK,SAASvD,GAAG,MAAM,mBAAmBA,EAAE2e,gBAAe,IAAKF,SAAS,SAASze,GAAG,GAAG,WAAWuD,KAAKvD,GAAG,MAAM,CAACP,KAAKK,EAAE8Y,WAAW+E,OAAO,IAAIvd,EAAEwF,EAAEiS,QAAQC,cAAc,0BAA0B9X,GAAG,MAAM,CAACP,KAAKK,EAAE8Y,WAAW8E,SAASzX,QAAQ7F,KAAK,CAACmD,KAAK,CAAC,YAAYkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAKK,EAAE8Y,WAAWgF,SAASzd,EAAEyF,EAAEiS,QAAQC,cAAc,6BAA6B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,SAASvD,GAAG,OAAOA,EAAEuD,KAAK,YAAYkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAKK,EAAE8Y,WAAWiF,QAAQ1d,EAAEyF,EAAEiS,QAAQC,cAAc,4BAA4B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,SAASvD,GAAG,IAAII,EAAEJ,EAAEuD,KAAK,UAAUpD,EAAEH,EAAEuD,KAAK,eAAe,OAAOnD,IAAID,GAAGse,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAKK,EAAE8Y,WAAWkF,OAAO3d,EAAEyF,EAAEiS,QAAQC,cAAc,2BAA2B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,IAAI,CAACmD,KAAK,CAAC,4BAA4Bkb,SAAS,WAAW,MAAM,CAAChf,KAAKK,EAAE8Y,WAAW+E,SAAS,CAACpa,KAAK,CAAC,mBAAmBkb,SAAS,SAASze,GAAG,IAAII,EAAE,CAACX,KAAKK,EAAE8Y,WAAWmF,QAAQ5d,EAAEyF,EAAEiS,QAAQC,cAAc,4BAA4B9X,GAAG,OAAOG,IAAIC,EAAE6F,QAAQ9F,GAAGC,KAAKA,EAAEyX,QAAQlY,EAAEK,EAAExG,QAAQ4G,EAAEyX,+BCA3+vB,QAsBEva,MAAQvD,YAXA,4BAcR,WAEF,IAAI0mB,EAAmB,kCAGnBC,EAAgB3mB,OAAOgJ,SAAWhJ,OAAOgJ,SAAS4d,KAAO,KACzDC,EAAUF,GAAcA,EAAYnb,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,KAAc,KAGvFsb,EAAUC,SAASC,qBAAqB,UAGxCC,EAA2B,eAAiBH,EAAQ,IAAMC,SAASG,cAAc,WAGjFC,GAAcnnB,OAAO2hB,OAAqC,mBAA5B3hB,OAAO2hB,MAAM5f,WAG3CqlB,EAAiC,kBAAmBL,SAIpD,oBAAqB/U,OAASA,MAAMqV,kBAAoBC,EAAAA,IAC/BtV,MAAMqV,gBACjCrV,MAAMqV,gBAAkBC,EAAAA,GAO1B,IAAIC,GAAyB,EACzBC,GAAwB,EAoF5B,SAASC,EAAsBC,EAAOC,GACpC,IAAIC,EACAC,EAAM,KACNC,EAA0C,iBAAnBH,EA+B3B,OA9BAA,EAAiBG,EAAgBjY,KAAKkY,MAAMJ,GAAkB,EACzC,iBAAVD,GAAsBA,IAC3BI,EACFF,EAAUF,EAAMte,MAAM,+GAGtBwe,EAAUF,EAAMte,MAAM,kNAELwe,EAAQ,KACvBA,EAAUF,EAAMte,MAAM,kHAItBwe,GAAWA,EAAQ,KAGnBC,EAFEF,EAAiB,EAEbF,EADWC,EAAM3d,MAAM2d,EAAMvY,QAAQyY,EAAQ,IAAMA,EAAQ,GAAG9kB,QACvB6kB,EAAiB,GAGxDC,EAAQ,KAWbC,EAyHT,SAASG,IAIP,GAAuB,IAAnBlB,EAAQhkB,OACV,OAAO,KAGT,IAAID,EAAGoD,EAAGyhB,EAAOG,EAAKI,EAClBC,EAAkB,GAClBP,EAAiBK,EAAwBL,gBAAkB,EAQ/D,IAAK9kB,EAAI,EAAGA,EAAIikB,EAAQhkB,OAAQD,IAC1BskB,GAAcF,EACZP,EAAiBld,KAAKsd,EAAQjkB,GAAGslB,aACnCD,EAAgB5hB,KAAKwgB,EAAQjkB,IAI/BqlB,EAAgB5hB,KAAKwgB,EAAQjkB,IAQjC,GAJAoD,EAAI,IAAI+L,MACJuV,IACFG,EAAQzhB,EAAEyhB,QAEPA,GAASF,EACZ,IACE,MAAMvhB,EAER,MAAOkN,GAELuU,EAAQvU,EAAIuU,MAiEhB,GA7DIA,KAEFO,EAzQJ,SAA0BJ,EAAKK,GAC7B,IAAIrlB,EACAolB,EAAS,KAIb,GAFAC,EAAkBA,GAAmBpB,EAElB,iBAARe,GAAoBA,EAC7B,IAAKhlB,EAAIqlB,EAAgBplB,OAAQD,KAC/B,GAAIqlB,EAAgBrlB,GAAGulB,MAAQP,EAAK,CAGlCI,EAASC,EAAgBrlB,GACzB,MAIN,OAAOolB,EAyPII,CADTR,EAAMJ,EAAsBC,EAAOC,GACJO,KAEhBrB,GAAWgB,IAAQhB,IAK9BoB,EAhOR,SAA6BC,GAC3B,IAAIrlB,EAAG0I,EACH0c,EAAS,KAEb,IAAKplB,EAAI,EAAG0I,GADZ2c,EAAkBA,GAAmBpB,GACHhkB,OAAQD,EAAI0I,EAAK1I,IACjD,IAAKqlB,EAAgBrlB,GAAGylB,aAAa,OAAQ,CAC3C,GAAIL,EAAQ,CACVA,EAAS,KACT,MAEFA,EAASC,EAAgBrlB,GAG7B,OAAOolB,EA+NQM,CAAoBL,IAU9BD,GAK4B,IAA3BC,EAAgBplB,SAClBmlB,EAASC,EAAgB,IAIxBD,GAeCb,IACFa,EAASlB,SAASyB,gBAIjBP,GAeCd,GAAcF,EAChB,IAAKpkB,EAAIqlB,EAAgBplB,OAAQD,KAC/B,GAAsC,gBAAlCqlB,EAAgBrlB,GAAGslB,WAA8B,CACnDF,EAASC,EAAgBrlB,GACzB,MAkCR,OA5BKolB,IAyBHA,EAASC,EAAgBA,EAAgBplB,OAAS,IAAM,MAGnDmlB,GA3YT,WACE,IACE,IAAI9U,EAAM,IAAInB,MAEd,MADAuV,EAA8C,iBAAdpU,EAAIuU,SAAwBvU,EAAIuU,MAC1DvU,EAER,MAAOsV,GACLjB,EAAmD,iBAApBiB,EAAUf,SAAwBe,EAAUf,QAP/E,GA+YAM,EAAwBL,eAAiB,EAOrC,IAAIe,EAA4BV,EAShC,OARAU,EAAuBC,KAASX,EAChCU,EAAuBE,IA1R3B,WAME,OAAO,MAqRLF,EAAuBG,OArL3B,WAIE,OAAO,MAuLEH,IA9cD,UAAC,IAAD,yCCYV,IAOII,EAPAC,EAAuB,iBAAZC,QAAuBA,QAAU,KAC5CC,EAAeF,GAAwB,mBAAZA,EAAEjd,MAC7Bid,EAAEjd,MACF,SAAsBod,EAAQC,EAAU9d,GACxC,OAAOO,SAAS9J,UAAUgK,MAAM9J,KAAKknB,EAAQC,EAAU9d,IAKzDyd,EADEC,GAA0B,mBAAdA,EAAEK,QACCL,EAAEK,QACVvnB,OAAOwnB,sBACC,SAAwBH,GACvC,OAAOrnB,OAAOynB,oBAAoBJ,GAC/BnV,OAAOlS,OAAOwnB,sBAAsBH,KAGxB,SAAwBA,GACvC,OAAOrnB,OAAOynB,oBAAoBJ,IAQtC,IAAIK,EAAczgB,OAAO0gB,OAAS,SAAqBpiB,GACrD,OAAOA,GAAUA,GAGnB,SAASqiB,IACPA,EAAaC,KAAK1nB,KAAKuB,MAEzB7D,EAAOD,QAAUgqB,EACjB/pB,EAAOD,QAAQkqB,KAwYf,SAAcC,EAASlkB,GACrB,OAAO,IAAImkB,SAAQ,SAAUC,EAAS1U,GACpC,SAAS2U,EAAc5W,GACrByW,EAAQ1S,eAAexR,EAAMskB,GAC7B5U,EAAOjC,GAGT,SAAS6W,IAC+B,mBAA3BJ,EAAQ1S,gBACjB0S,EAAQ1S,eAAe,QAAS6S,GAElCD,EAAQ,GAAG/f,MAAM/H,KAAKsJ,YAGxB2e,EAA+BL,EAASlkB,EAAMskB,EAAU,CAAEL,MAAM,IACnD,UAATjkB,GAMR,SAAuCkkB,EAASM,EAASC,GAC7B,mBAAfP,EAAQQ,IACjBH,EAA+BL,EAAS,QAASM,EAPO,CAAEP,MAAM,IAA9DU,CAA8BT,EAASG,OArZ7CN,EAAaA,aAAeA,EAE5BA,EAAa3nB,UAAUwoB,aAAUhgB,EACjCmf,EAAa3nB,UAAUyoB,aAAe,EACtCd,EAAa3nB,UAAU0oB,mBAAgBlgB,EAIvC,IAAImgB,EAAsB,GAE1B,SAASC,EAAczT,GACrB,GAAwB,mBAAbA,EACT,MAAM,IAAI0T,UAAU,0EAA4E1T,GAsCpG,SAAS2T,EAAiBlP,GACxB,YAA2BpR,IAAvBoR,EAAK8O,cACAf,EAAagB,oBACf/O,EAAK8O,cAmDd,SAASK,EAAa3B,EAAQnmB,EAAMkU,EAAU6T,GAC5C,IAAIvkB,EACAwkB,EACAC,EA1HsBC,EAgJ1B,GApBAP,EAAczT,QAGC3M,KADfygB,EAAS7B,EAAOoB,UAEdS,EAAS7B,EAAOoB,QAAUzoB,OAAOe,OAAO,MACxCsmB,EAAOqB,aAAe,SAIKjgB,IAAvBygB,EAAOG,cACThC,EAAOiC,KAAK,cAAepoB,EACfkU,EAASA,SAAWA,EAASA,SAAWA,GAIpD8T,EAAS7B,EAAOoB,SAElBU,EAAWD,EAAOhoB,SAGHuH,IAAb0gB,EAEFA,EAAWD,EAAOhoB,GAAQkU,IACxBiS,EAAOqB,kBAeT,GAbwB,mBAAbS,EAETA,EAAWD,EAAOhoB,GAChB+nB,EAAU,CAAC7T,EAAU+T,GAAY,CAACA,EAAU/T,GAErC6T,EACTE,EAASzU,QAAQU,GAEjB+T,EAAS1kB,KAAK2Q,IAIhB1Q,EAAIqkB,EAAiB1B,IACb,GAAK8B,EAASloB,OAASyD,IAAMykB,EAASI,OAAQ,CACpDJ,EAASI,QAAS,EAGlB,IAAIC,EAAI,IAAIrZ,MAAM,+CACEgZ,EAASloB,OAAS,IAAM+F,OAAO9F,GADjC,qEAIlBsoB,EAAE3lB,KAAO,8BACT2lB,EAAEzB,QAAUV,EACZmC,EAAEtoB,KAAOA,EACTsoB,EAAEhQ,MAAQ2P,EAASloB,OA7KGmoB,EA8KHI,EA7KnBhe,SAAWA,QAAQie,MAAMje,QAAQie,KAAKL,GAiL1C,OAAO/B,EAcT,SAASqC,IACP,IAAKhoB,KAAKioB,MAGR,OAFAjoB,KAAK2lB,OAAOhS,eAAe3T,KAAKR,KAAMQ,KAAKkoB,QAC3CloB,KAAKioB,OAAQ,EACY,IAArBlgB,UAAUxI,OACLS,KAAK0T,SAASjV,KAAKuB,KAAK2lB,QAC1B3lB,KAAK0T,SAASnL,MAAMvI,KAAK2lB,OAAQ5d,WAI5C,SAASogB,EAAUxC,EAAQnmB,EAAMkU,GAC/B,IAAI0U,EAAQ,CAAEH,OAAO,EAAOC,YAAQnhB,EAAW4e,OAAQA,EAAQnmB,KAAMA,EAAMkU,SAAUA,GACjF2U,EAAUL,EAAY9hB,KAAKkiB,GAG/B,OAFAC,EAAQ3U,SAAWA,EACnB0U,EAAMF,OAASG,EACRA,EA0HT,SAASC,EAAW3C,EAAQnmB,EAAM+oB,GAChC,IAAIf,EAAS7B,EAAOoB,QAEpB,QAAehgB,IAAXygB,EACF,MAAO,GAET,IAAIgB,EAAahB,EAAOhoB,GACxB,YAAmBuH,IAAfyhB,EACK,GAEiB,mBAAfA,EACFD,EAAS,CAACC,EAAW9U,UAAY8U,GAAc,CAACA,GAElDD,EAsDT,SAAyBzZ,GAEvB,IADA,IAAI2Z,EAAM,IAAItqB,MAAM2Q,EAAIvP,QACfD,EAAI,EAAGA,EAAImpB,EAAIlpB,SAAUD,EAChCmpB,EAAInpB,GAAKwP,EAAIxP,GAAGoU,UAAY5E,EAAIxP,GAElC,OAAOmpB,EA1DLC,CAAgBF,GAAcG,EAAWH,EAAYA,EAAWjpB,QAoBpE,SAASqpB,EAAcppB,GACrB,IAAIgoB,EAASxnB,KAAK+mB,QAElB,QAAehgB,IAAXygB,EAAsB,CACxB,IAAIgB,EAAahB,EAAOhoB,GAExB,GAA0B,mBAAfgpB,EACT,OAAO,EACF,QAAmBzhB,IAAfyhB,EACT,OAAOA,EAAWjpB,OAItB,OAAO,EAOT,SAASopB,EAAW7Z,EAAKxG,GAEvB,IADA,IAAIugB,EAAO,IAAI1qB,MAAMmK,GACZhJ,EAAI,EAAGA,EAAIgJ,IAAKhJ,EACvBupB,EAAKvpB,GAAKwP,EAAIxP,GAChB,OAAOupB,EA4CT,SAASnC,EAA+BL,EAASlkB,EAAMuR,EAAUkT,GAC/D,GAA0B,mBAAfP,EAAQQ,GACbD,EAAMR,KACRC,EAAQD,KAAKjkB,EAAMuR,GAEnB2S,EAAQQ,GAAG1kB,EAAMuR,OAEd,IAAwC,mBAA7B2S,EAAQyC,iBAYxB,MAAM,IAAI1B,UAAU,6EAA+Ef,GATnGA,EAAQyC,iBAAiB3mB,GAAM,SAAS4mB,EAAa5gB,GAG/Cye,EAAMR,MACRC,EAAQ2C,oBAAoB7mB,EAAM4mB,GAEpCrV,EAASvL,OAhaf7J,OAAO2b,eAAeiM,EAAc,sBAAuB,CACzDhM,YAAY,EACZC,IAAK,WACH,OAAO+M,GAET+B,IAAK,SAAS9gB,GACZ,GAAmB,iBAARA,GAAoBA,EAAM,GAAK6d,EAAY7d,GACpD,MAAM,IAAI+gB,WAAW,kGAAoG/gB,EAAM,KAEjI+e,EAAsB/e,KAI1B+d,EAAaC,KAAO,gBAEGpf,IAAjB/G,KAAK+mB,SACL/mB,KAAK+mB,UAAYzoB,OAAO6qB,eAAenpB,MAAM+mB,UAC/C/mB,KAAK+mB,QAAUzoB,OAAOe,OAAO,MAC7BW,KAAKgnB,aAAe,GAGtBhnB,KAAKinB,cAAgBjnB,KAAKinB,oBAAiBlgB,GAK7Cmf,EAAa3nB,UAAU6qB,gBAAkB,SAAyB9gB,GAChE,GAAiB,iBAANA,GAAkBA,EAAI,GAAK0d,EAAY1d,GAChD,MAAM,IAAI4gB,WAAW,gFAAkF5gB,EAAI,KAG7G,OADAtI,KAAKinB,cAAgB3e,EACdtI,MASTkmB,EAAa3nB,UAAU8qB,gBAAkB,WACvC,OAAOhC,EAAiBrnB,OAG1BkmB,EAAa3nB,UAAUqpB,KAAO,SAAcpoB,GAE1C,IADA,IAAIsI,EAAO,GACFxI,EAAI,EAAGA,EAAIyI,UAAUxI,OAAQD,IAAKwI,EAAK/E,KAAKgF,UAAUzI,IAC/D,IAAIgqB,EAAoB,UAAT9pB,EAEXgoB,EAASxnB,KAAK+mB,QAClB,QAAehgB,IAAXygB,EACF8B,EAAWA,QAA4BviB,IAAjBygB,EAAOnQ,WAC1B,IAAKiS,EACR,OAAO,EAGT,GAAIA,EAAS,CACX,IAAIC,EAGJ,GAFIzhB,EAAKvI,OAAS,IAChBgqB,EAAKzhB,EAAK,IACRyhB,aAAc9a,MAGhB,MAAM8a,EAGR,IAAI3Z,EAAM,IAAInB,MAAM,oBAAsB8a,EAAK,KAAOA,EAAGxqB,QAAU,IAAM,KAEzE,MADA6Q,EAAI4Z,QAAUD,EACR3Z,EAGR,IAAI+W,EAAUa,EAAOhoB,GAErB,QAAgBuH,IAAZ4f,EACF,OAAO,EAET,GAAuB,mBAAZA,EACTjB,EAAaiB,EAAS3mB,KAAM8H,OAE5B,KAAIE,EAAM2e,EAAQpnB,OACduT,EAAY6V,EAAWhC,EAAS3e,GACpC,IAAS1I,EAAI,EAAGA,EAAI0I,IAAO1I,EACzBomB,EAAa5S,EAAUxT,GAAIU,KAAM8H,GAGrC,OAAO,GAiEToe,EAAa3nB,UAAUwU,YAAc,SAAqBvT,EAAMkU,GAC9D,OAAO4T,EAAatnB,KAAMR,EAAMkU,GAAU,IAG5CwS,EAAa3nB,UAAUsoB,GAAKX,EAAa3nB,UAAUwU,YAEnDmT,EAAa3nB,UAAUkrB,gBACnB,SAAyBjqB,EAAMkU,GAC7B,OAAO4T,EAAatnB,KAAMR,EAAMkU,GAAU,IAqBhDwS,EAAa3nB,UAAU6nB,KAAO,SAAc5mB,EAAMkU,GAGhD,OAFAyT,EAAczT,GACd1T,KAAK6mB,GAAGrnB,EAAM2oB,EAAUnoB,KAAMR,EAAMkU,IAC7B1T,MAGTkmB,EAAa3nB,UAAUmrB,oBACnB,SAA6BlqB,EAAMkU,GAGjC,OAFAyT,EAAczT,GACd1T,KAAKypB,gBAAgBjqB,EAAM2oB,EAAUnoB,KAAMR,EAAMkU,IAC1C1T,MAIbkmB,EAAa3nB,UAAUoV,eACnB,SAAwBnU,EAAMkU,GAC5B,IAAIiW,EAAMnC,EAAQoC,EAAUtqB,EAAGuqB,EAK/B,GAHA1C,EAAczT,QAGC3M,KADfygB,EAASxnB,KAAK+mB,SAEZ,OAAO/mB,KAGT,QAAa+G,KADb4iB,EAAOnC,EAAOhoB,IAEZ,OAAOQ,KAET,GAAI2pB,IAASjW,GAAYiW,EAAKjW,WAAaA,EACb,KAAtB1T,KAAKgnB,aACThnB,KAAK+mB,QAAUzoB,OAAOe,OAAO,cAEtBmoB,EAAOhoB,GACVgoB,EAAO7T,gBACT3T,KAAK4nB,KAAK,iBAAkBpoB,EAAMmqB,EAAKjW,UAAYA,SAElD,GAAoB,mBAATiW,EAAqB,CAGrC,IAFAC,GAAY,EAEPtqB,EAAIqqB,EAAKpqB,OAAS,EAAGD,GAAK,EAAGA,IAChC,GAAIqqB,EAAKrqB,KAAOoU,GAAYiW,EAAKrqB,GAAGoU,WAAaA,EAAU,CACzDmW,EAAmBF,EAAKrqB,GAAGoU,SAC3BkW,EAAWtqB,EACX,MAIJ,GAAIsqB,EAAW,EACb,OAAO5pB,KAEQ,IAAb4pB,EACFD,EAAK1T,QAiIf,SAAmB0T,EAAM9oB,GACvB,KAAOA,EAAQ,EAAI8oB,EAAKpqB,OAAQsB,IAC9B8oB,EAAK9oB,GAAS8oB,EAAK9oB,EAAQ,GAC7B8oB,EAAKhS,MAlIGmS,CAAUH,EAAMC,GAGE,IAAhBD,EAAKpqB,SACPioB,EAAOhoB,GAAQmqB,EAAK,SAEQ5iB,IAA1BygB,EAAO7T,gBACT3T,KAAK4nB,KAAK,iBAAkBpoB,EAAMqqB,GAAoBnW,GAG1D,OAAO1T,MAGbkmB,EAAa3nB,UAAUwrB,IAAM7D,EAAa3nB,UAAUoV,eAEpDuS,EAAa3nB,UAAUyrB,mBACnB,SAA4BxqB,GAC1B,IAAIsT,EAAW0U,EAAQloB,EAGvB,QAAeyH,KADfygB,EAASxnB,KAAK+mB,SAEZ,OAAO/mB,KAGT,QAA8B+G,IAA1BygB,EAAO7T,eAUT,OATyB,IAArB5L,UAAUxI,QACZS,KAAK+mB,QAAUzoB,OAAOe,OAAO,MAC7BW,KAAKgnB,aAAe,QACMjgB,IAAjBygB,EAAOhoB,KACY,KAAtBQ,KAAKgnB,aACThnB,KAAK+mB,QAAUzoB,OAAOe,OAAO,aAEtBmoB,EAAOhoB,IAEXQ,KAIT,GAAyB,IAArB+H,UAAUxI,OAAc,CAC1B,IACIkF,EADAF,EAAOjG,OAAOiG,KAAKijB,GAEvB,IAAKloB,EAAI,EAAGA,EAAIiF,EAAKhF,SAAUD,EAEjB,oBADZmF,EAAMF,EAAKjF,KAEXU,KAAKgqB,mBAAmBvlB,GAK1B,OAHAzE,KAAKgqB,mBAAmB,kBACxBhqB,KAAK+mB,QAAUzoB,OAAOe,OAAO,MAC7BW,KAAKgnB,aAAe,EACbhnB,KAKT,GAAyB,mBAFzB8S,EAAY0U,EAAOhoB,IAGjBQ,KAAK2T,eAAenU,EAAMsT,QACrB,QAAkB/L,IAAd+L,EAET,IAAKxT,EAAIwT,EAAUvT,OAAS,EAAGD,GAAK,EAAGA,IACrCU,KAAK2T,eAAenU,EAAMsT,EAAUxT,IAIxC,OAAOU,MAoBbkmB,EAAa3nB,UAAUuU,UAAY,SAAmBtT,GACpD,OAAO8oB,EAAWtoB,KAAMR,GAAM,IAGhC0mB,EAAa3nB,UAAU0rB,aAAe,SAAsBzqB,GAC1D,OAAO8oB,EAAWtoB,KAAMR,GAAM,IAGhC0mB,EAAa0C,cAAgB,SAASvC,EAAS7mB,GAC7C,MAAqC,mBAA1B6mB,EAAQuC,cACVvC,EAAQuC,cAAcppB,GAEtBopB,EAAcnqB,KAAK4nB,EAAS7mB,IAIvC0mB,EAAa3nB,UAAUqqB,cAAgBA,EAiBvC1C,EAAa3nB,UAAU2rB,WAAa,WAClC,OAAOlqB,KAAKgnB,aAAe,EAAIzB,EAAevlB,KAAK+mB,SAAW,oBC1ZhE,IAAIoD,EAASxlB,EAAQ,KAgDrB,SAASylB,EAAaC,EAAYzgB,GAC9B5J,KAAKqqB,WAAaA,EAClBrqB,KAAKsqB,oBAAmB1gB,IAAWA,EAAQ0gB,mBAAmB1gB,EAAQ0gB,iBACtEtqB,KAAKuqB,cAAgB3gB,GAAWA,EAAQ2gB,cAAgB3gB,EAAQ2gB,cAAe,IAC/EvqB,KAAKwqB,eAAiB5gB,GAAWA,EAAQ4gB,eAAiB5gB,EAAQ4gB,eAAiB,IAGnFlsB,OAAOiG,KAAK4lB,EAAOM,QAAQjmB,QAC3B,SAAUkmB,GAEN1qB,KADiBmqB,EAAOM,OAAOC,IACZ,WACf1qB,KAAK2qB,KAAKpiB,MAAMvI,KAAM+H,YACxB7B,KAAKlG,KAAM0qB,IACfxkB,KAAKlG,OAMPA,KAAK4qB,oBAAsB,KAM3B5qB,KAAKsV,MAAQ,GAKbtV,KAAK6qB,SAAW,EAMhB7qB,KAAK8qB,YAAc,GAiBvBV,EAAa7rB,UAAUwsB,UAAY,SAAUC,GACzC,IACI,OAAOC,KAAKF,UAAUC,GACxB,MAAO3T,GACL,MAAO,iCAmBf+S,EAAa7rB,UAAU2sB,iBAAmB,SAC1CR,GAEI,IADA,IAAIS,EAAM,GACD7rB,EAAI,EAAG0I,EAAMD,UAAUxI,OAAQD,EAAI0I,EAAK1I,IAAK,CAClD,IAAI6I,EAAMJ,UAAUzI,IAEfU,KAAKsqB,kBAAoBI,IAAaP,EAAOM,OAAOluB,OACtC,iBAAR4L,IACPA,EAAMnI,KAAK+qB,UAAU5iB,IAEzBgjB,GAAOhjB,EACH7I,IAAM0I,EAAM,IACZmjB,GAAO,KAGf,OAAOA,EAAI5rB,OAAS4rB,EAAM,MAS9Bf,EAAa7rB,UAAUosB,KAAO,WAG1B,IAAIS,EAAYrjB,UAAU,GACtBojB,EAAMnrB,KAAKkrB,iBAAiB3iB,MAAMvI,KAAM+H,WAC5C,GAAIojB,EAAK,CAEL,IAAIE,EAAcrrB,KAAKsV,MAAMtV,KAAKsV,MAAM/V,OAAS,GAC7C+rB,EAAkBD,GAAeA,EAAYE,KAC7CD,IAAoBH,EACpBE,EAAYvT,OAAS,GAErB9X,KAAKsV,MAAMvS,KAAK,CACZwoB,KAAMJ,EACNC,UAAWA,EACXtT,MAAO,IAEX9X,KAAK6qB,UAAYM,EAAI5rB,QAIzBS,KAAK6qB,UAAY7qB,KAAKwqB,gBACtBxqB,KAAKwrB,QAAO,GAAkB,IAQtCpB,EAAa7rB,UAAU8B,MAAQ,WAC3BL,KAAKyrB,8BAQTrB,EAAa7rB,UAAUktB,2BAA6B,WAC5CzrB,KAAK4qB,sBACLnuB,OAAOivB,aAAa1rB,KAAK4qB,qBACzB5qB,KAAK4qB,oBAAsB,MAG/B5qB,KAAK4qB,oBAAsBnuB,OAAO8S,WAC9BvP,KAAKwrB,OAAOtlB,KACRlG,MAAM,GAA0B,GACpCA,KAAKuqB,gBAObH,EAAa7rB,UAAUotB,MAAQ,WAC3B3rB,KAAKwrB,QACD,GACA,IAcRpB,EAAa7rB,UAAUitB,OAAS,SAASI,EAAOC,GAExC7rB,KAAK6qB,SAAW,IAAM7qB,KAAKqqB,WAAWyB,WAAaF,KAG/C5rB,KAAKqqB,WAAWyB,WAEZ9rB,KAAK8qB,YAAYvrB,SACjBS,KAAK8qB,YAAYtmB,QACb,SAAUunB,GACN/rB,KAAKqqB,WAAW2B,UAAUD,IAC5B7lB,KAAKlG,OAGXA,KAAK8qB,YAAc,IAGvB9qB,KAAKqqB,WAAW2B,UAAUhsB,KAAKsV,QAE/BtV,KAAK8qB,YAAY/nB,KAAK/C,KAAKsV,OAG/BtV,KAAKsV,MAAQ,GACbtV,KAAK6qB,SAAW,GAGhBgB,GACA7rB,KAAKyrB,8BAQbrB,EAAa7rB,UAAU0tB,KAAO,WAE1BjsB,KAAKwrB,QAAO,GAA0B,IAG1CrvB,EAAOD,QAAUkuB,WC/PjB,IAAIK,EAAS,CACT,MAAS,EACT,MAAS,EACT,KAAQ,EACR,IAAO,EACP,KAAQ,EACR,MAAS,GAObN,EAAO+B,iBAAmBpiB,QAM1B,IAAIqiB,EAAmB,CAAEhC,EAAO+B,kBAOhC/B,EAAOiC,mBAAqB,SAASC,IACY,IAAzCF,EAAiBvgB,QAAQygB,IACzBF,EAAiBppB,KAAKspB,IAS9BlC,EAAOmC,sBAAwB,SAASD,GACpC,IAAIE,EAAeJ,EAAiBvgB,QAAQygB,IACtB,IAAlBE,GACAJ,EAAiB5e,OAAOgf,EAAc,IAO9C,IAAIC,EAAgB,GAgBpB,SAASC,IACL,IAAIC,EAAa,CACbC,WAAY,GACZC,aAAc,GACdC,KAAM,KACNC,OAAQ,MAGRzV,EAAQ,IAAI5I,MACZ0V,EAAQ9M,EAAM8M,MAAO9M,EAAM8M,MAAM1mB,MAAM,MAAQ,GACnD,IAAI0mB,GAASA,EAAM5kB,OAAS,EACxB,OAAOmtB,EAEX,IAAI1pB,EAAI,KAIR,OAHGmhB,EAAM,KACLnhB,EAAImhB,EAAM,GAAGte,MAAM,iDAEnB7C,GAAKA,EAAEzD,QAAU,GAEe,IAA7B4kB,EAAM,GAAGvY,QAAQ,QAEhB8gB,EAAWC,WAAaxI,EAAM,GAAGvB,OAAO,EAAGuB,EAAM,GAAGvY,QAAQ,MAG5D8gB,EAAWC,WAAaxI,EAAM,GAAGvB,OAAO,EAAGuB,EAAM,GAAGvY,QAAQ,MAEzD8gB,IAGXA,EAAWC,WAAa3pB,EAAE,GAC1B0pB,EAAWE,aAAe5pB,EAAE,GAC5B0pB,EAAWG,KAAO7pB,EAAE,GACpB0pB,EAAWI,OAAS9pB,EAAE,GACf0pB,GASX,SAAS3iB,IACL,IAAIgjB,EAAShlB,UAAU,GAAIilB,EAAQjlB,UAAU,GACzCD,EAAO3J,MAAMI,UAAUiI,MAAM/H,KAAKsJ,UAAW,GACjD,KAAG0iB,EAAOuC,GAASD,EAAOC,OAQ1B,IAJA,IAAIN,IACIK,EAAOnjB,QAAQqjB,mBAAqBT,EAAcS,oBAClDR,IACJS,EAAaf,EAAiB3b,OAAOuc,EAAOG,YACxC5tB,EAAI,EAAGA,EAAI4tB,EAAW3tB,OAAQD,IAAK,CACvC,IAAIwD,EAAIoqB,EAAW5tB,GACfiH,EAAIzD,EAAEkqB,GACV,GAAGzmB,GAAmB,mBAAPA,EAAmB,CAC9B,IAAI4mB,EAAc,GAElBA,EAAYpqB,MAAK,IAAIqqB,MAAOC,eAExBN,EAAO5oB,IACPgpB,EAAYpqB,KAAK,IAAMgqB,EAAO5oB,GAAK,KAGnCuoB,GAAcA,EAAWC,WAAWptB,OAAS,GAC7C4tB,EAAYpqB,KAAK,IAAM2pB,EAAWC,WAAa,OAGnD,IAAIW,EAAeH,EAAY3c,OAAO1I,GAEtCvB,EAAEL,KAAKpD,GAAGyF,MAAMzF,EAAGwqB,KAiB/B,SAASnD,EAAO6C,EAAO7oB,EAAI+oB,EAAYtjB,GACnC5J,KAAKmE,GAAKA,EACVnE,KAAK4J,QAAUA,GAAW,GAC1B5J,KAAKktB,WAAaA,EACdltB,KAAKktB,aACLltB,KAAKktB,WAAa,IAEtBltB,KAAKgtB,MAAQvC,EAAOuC,GAEpB,IADA,IAAIO,EAAUjvB,OAAOiG,KAAKkmB,GAClBnrB,EAAI,EAAGA,EAAIiuB,EAAQhuB,OAAQD,IAC/BU,KAAKutB,EAAQjuB,IACTyK,EAAI7D,KAAK,KAAMlG,KAAMutB,EAAQjuB,IA7GzC6qB,EAAOqD,iBAAmB,SAAS5jB,GAC/B4iB,EAAgB5iB,GAAW,IAoH/BugB,EAAO5rB,UAAUkvB,SAAW,SAAUT,GAClChtB,KAAKgtB,MAAQvC,EAAOuC,IAExB7wB,EAAOD,QAAUiuB,EAKjBA,EAAOM,OAAS,CACZiD,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,KAAM,OACNvxB,MAAO,yBC7LX,IAAI4tB,EAASxlB,EAAQ,KACjBylB,EAAezlB,EAAQ,MAwBvBopB,EAAY,GAKZC,EAAU,GAKVC,EAAW9D,EAAOM,OAAOiD,MAG7BvxB,EAAOD,QAAU,CAMbkwB,mBAAoB,SAASC,GACzBlC,EAAOiC,mBAAmBC,IAO9BC,sBAAuB,SAASD,GAC5BlC,EAAOmC,sBAAsBD,IAMjCmB,iBAAkB,SAAS5jB,GACvBugB,EAAOqD,iBAAiB5jB,IAM5BskB,UAAW,SAAS/pB,EAAI+oB,EAAYtjB,GAChC,IAAImjB,EAAS,IAAI5C,EAAO8D,EAAU9pB,EAAI+oB,EAAYtjB,GAOlD,OANGzF,GACC4pB,EAAU5pB,GAAM4pB,EAAU5pB,IAAO,GACjC4pB,EAAU5pB,GAAIpB,KAAKgqB,IAEnBiB,EAAQjrB,KAAKgqB,GAEVA,GASXoB,gBAAiB,SAASnB,EAAO7oB,GAE7B,IADA,IAAIoC,EAAIpC,EAAK4pB,EAAU5pB,IAAO,GAAM6pB,EAC5B1uB,EAAI,EAAGA,EAAIiH,EAAEhH,OAAQD,IACzBiH,EAAEjH,GAAGmuB,SAAST,IAOtBoB,YAAa,SAAUpB,GACnBiB,EAAWjB,EAEX,IADA,IAAI1tB,EAAI,EACFA,EAAI0uB,EAAQzuB,OAAQD,IACtB0uB,EAAQ1uB,GAAGmuB,SAAST,GAGxB,IAAI,IAAI7oB,KAAM4pB,EAAW,CACrB,IAAIxnB,EAAIwnB,EAAU5pB,IAAO,GACzB,IAAI7E,EAAI,EAAGA,EAAIiH,EAAEhH,OAAQD,IACrBiH,EAAEjH,GAAGmuB,SAAST,KAO1BvC,OAAQN,EAAOM,OAIfL,aAAcA,mBC9HlBjuB,EAAOD,QAAU,EAAjBC,MAAAA,kBC+HAA,EAAOD,QA1HP,MAWI0C,YAAYyvB,EAAQC,EAAaC,GAC7BvuB,KAAKwuB,QAAUH,EACfruB,KAAKyuB,eAAeH,GACpBtuB,KAAK0uB,cAAgBH,IAAgB,EACrCvuB,KAAK2uB,oBAAmB,GACxB3uB,KAAK4uB,yBAA2B,EAChC5uB,KAAK6uB,sBAAwB,EAC7B7uB,KAAK8uB,UAAW,EAQpBC,YACI,OAAO/uB,KAAKwuB,QAQhBQ,iBACI,OAAOhvB,KAAKsuB,YAShBG,eAAeQ,GACXjvB,KAAKsuB,YAAcW,EAQvBV,eACI,OAAOvuB,KAAK0uB,cAQhBQ,oBACI,OAAOlvB,KAAK6uB,sBAAwB,EAWxCF,mBAAmBQ,GACf,IAAKnvB,KAAKkvB,qBAAuBC,EAC7BnvB,KAAK6uB,sBAAwBzB,KAAKgC,WAC/B,GAAIpvB,KAAKkvB,sBAAwBC,EAAsB,CAC1D,MACME,EADMjC,KAAKgC,MACSpvB,KAAK6uB,sBAE/B7uB,KAAK4uB,0BAA4BS,EACjCrvB,KAAK6uB,sBAAwB,GASrCS,8BACI,IAAIC,EAAQvvB,KAAK4uB,yBAMjB,OAJI5uB,KAAKkvB,sBACLK,GAASnC,KAAKgC,MAAQpvB,KAAK6uB,uBAGxBU,EAQXC,UACI,OAAOxvB,KAAK8uB,SAQhBW,gBACIzvB,KAAK8uB,UAAW,EAChB9uB,KAAK2uB,oBAAmB,qBC3HhC,MAAMe,EAAkB/qB,EAAQ,MAK1BgrB,EAAa,aACbC,EAAY,YAOZC,EAAgB,SAASC,GAE3B9vB,KAAK8vB,MAAQA,EAGb9vB,KAAK+vB,SAAW,KAIhB/vB,KAAKsU,KAAO,KAIZtU,KAAKmC,KAAO,KAGZnC,KAAKgwB,UAAY,MAQrB,SAASC,EAAcC,GACnB,QAA+BnpB,IAA3BmpB,EAAcH,SACd,MAAM,IAAIthB,MAAM,yEAGpByhB,EAAcH,SAAS1vB,QACvB6vB,EAAcF,UAAY,IAAI5C,KAQlC,SAAS+C,EAAaD,GAClB,QAA+BnpB,IAA3BmpB,EAAcH,SACd,MAAM,IAAIthB,MAAM,wEAGpByhB,EAAcH,SAAS9D,OAO3B,SAASmE,IACL,GAAIC,cAAcC,gBAAgBX,GAC9B,OAAOA,EACJ,GAAIU,cAAcC,gBAAgBV,GACrC,OAAOA,EAEX,MAAM,IAAInhB,MACN,6DASR,SAAS8hB,EAAcC,GAGnBxwB,KAAKywB,UAAY,GAGjBzwB,KAAK0wB,SAAWN,IAGhBpwB,KAAK2wB,aAAc,EAGnB3wB,KAAKwwB,gBAAkBA,EAM3BD,EAAcH,yBAA2BA,EAOzCG,EAAchyB,UAAUqyB,SAAW,SAASd,GACxC,GAAIA,EAAMe,eAAgB,CAEtB,MAAMX,EAAgBlwB,KAAK8wB,yBAAyBhB,GAIpD9vB,KAAKywB,UAAU1tB,KAAKmtB,GAGpBlwB,KAAK+wB,cAID/wB,KAAK2wB,aACLV,EAAcC,KAU1BK,EAAchyB,UAAUuyB,yBAA2B,SAAShB,GACxD,MAAMI,EAAgB,IAAIL,EAAcC,GAGlCkB,EAAiBd,EAAcJ,MAAMmB,oBACrCxpB,EAAS,IAAIypB,YAmBnB,OAjBAF,EAAeG,iBAAiB3sB,SAAQ1B,GAAK2E,EAAOmpB,SAAS9tB,KAG7DotB,EAAcH,SAAW,IAAIM,cAAc5oB,EACvC,CAAE2pB,SAAUpxB,KAAK0wB,WAIrBR,EAAc5b,KAAO,GAGrB4b,EAAcH,SAASsB,gBAAkB,SAASC,GAC1CA,EAAUhd,KAAKid,KAAO,GACtBrB,EAAc5b,KAAKvR,KAAKuuB,EAAUhd,OAInC4b,GAaXK,EAAchyB,UAAUizB,YAAc,SAAS1B,GAC3C,GAAIA,EAAM2B,eACN,OAGJ,MAAMhwB,EAAQzB,KAAKywB,UACnB,IAAInxB,EAEJ,IAAKA,EAAI,EAAGA,EAAImC,EAAMlC,OAAQD,IAC1B,GAAImC,EAAMnC,GAAGwwB,MAAM4B,qBAAuB5B,EAAM4B,mBAAoB,CAChE,MAAMC,EAAmBlwB,EAAMnC,GAE3BU,KAAK2wB,YACLR,EAAawB,GAGblwB,EAAM8L,OAAOjO,EAAG,GAM5BU,KAAK+wB,eAQTR,EAAchyB,UAAUwyB,YAAc,WAClC,MAAMa,EAAa5xB,KAAKwwB,gBAExBxwB,KAAKywB,UAAUjsB,SAAQ0rB,IACnB,GAAIA,EAAcJ,MAAM+B,UACpB3B,EAAc/tB,KAAO,sBAClB,CACH,MAAMgC,EAAK+rB,EAAcJ,MAAM4B,mBAEzBzC,EADc2C,EAAWE,mBAAmB3tB,GACtB6qB,iBAEZ,cAAZC,IACAiB,EAAc/tB,KAAO8sB,QASrCsB,EAAchyB,UAAU8B,MAAQ,WAC5B,GAAIL,KAAK2wB,YACL,MAAM,IAAIliB,MAAM,sCAKpBzO,KAAK2wB,aAAc,EAGnB3wB,KAAKywB,UAAUjsB,SAAQ0rB,GAAiBD,EAAcC,KAGtDpmB,QAAQC,IACH,2DACG/J,KAAKywB,UAAUlxB,6BAM3BgxB,EAAchyB,UAAU0tB,KAAO,WAE3BjsB,KAAK2wB,aAAc,EAGnB3wB,KAAKywB,UAAUjsB,SAAQ0rB,GAAiBC,EAAaD,KACrDpmB,QAAQC,IAAI,sBAMhBwmB,EAAchyB,UAAUwzB,SAAW,WAC/B/xB,KAAKywB,UAAUjsB,SAAQ0rB,IACnB,MAAM8B,EAAO,IAAIC,KAAK/B,EAAc5b,KAAM,CAAE9U,KAAMQ,KAAK0wB,WACjDpM,EAAM4N,IAAIC,gBAAgBH,GAC1B9wB,EAAIsiB,SAASG,cAAc,KAEjCH,SAAS4O,KAAKC,YAAYnxB,GAC1BA,EAAEoxB,MAAQ,gBACVpxB,EAAEmiB,KAAOiB,EACTpjB,EAAE6wB,SAAY,QAAO/xB,KAAK0wB,SAASjzB,MAAM,KAAK,KAC9CyD,EAAEqxB,QACF91B,OAAOy1B,IAAIM,gBAAgBlO,OASnCiM,EAAchyB,UAAUk0B,oBAAsB,WAC1C,GAAIzyB,KAAK2wB,YACL,MAAM,IAAIliB,MACN,kEAIRzO,KAAK+wB,cAEL,MAAMtvB,EAAQ,GAUd,OARAzB,KAAKywB,UAAUjsB,SACXurB,GACItuB,EAAMsB,KACF,IAAI2sB,EACA,IAAIuC,KAAKlC,EAASzb,KAAM,CAAE9U,KAAMQ,KAAK0wB,WACrCX,EAAS5tB,KACT4tB,EAASC,cAElBvuB,GAOX8uB,EAAchyB,UAAUm0B,YAAc,WAClC,OAAO1yB,KAAK0wB,UAMhBv0B,EAAOD,QAAUq0B,YC5RjBp0B,EAAOD,QATiB,SAAS81B,EAAM7vB,EAAM6tB,EAAW2C,GACpD3yB,KAAKgyB,KAAOA,EACZhyB,KAAKmC,KAAOA,EACZnC,KAAKgwB,UAAYA,EACjBhwB,KAAK2yB,UAAYA,mBChBrB,MAAMpC,EAAgB5rB,EAAQ,MACxBiuB,EAAgBjuB,EAClB,MAEEkuB,EAAe,SACfC,EAAkB,YAClBC,EAAqB,eACrBC,EAAiB,WAYvB,SAASC,IAELjzB,KAAKkzB,cAAgB,IAAI3C,EAGzBvwB,KAAKmzB,qBAAuB,IAAIP,EAGhC5yB,KAAK+X,QAAU,KAIf/X,KAAKgwB,UAAY,KAGjBhwB,KAAKozB,cAAgB,KAIrBpzB,KAAKyP,SAAW,KAIhBzP,KAAKiP,QAAU,GAGfjP,KAAKooB,MAAQyK,EAIb7yB,KAAKqzB,WAAa,EA+DtB,SAASC,EAAaC,EAAaC,GAO/B,GANA1pB,QAAQC,IAEG,0FAAoBypB,EAAOb,UAAUpzB,UAI5Ci0B,EAAOb,UAAUpzB,OAAS,EAAG,CAC7B,IAAIk0B,EAASD,EAAOxD,UAAU0D,qBACxBH,EAAYvD,UAAU0D,qBAIxBD,EAAS,IACTA,EAAS,GAGb,IAAIhyB,EAAQ,IAEZ+xB,EAAOb,UAAUnuB,SAAQmvB,IACrBA,EAAWC,OAASH,EACpBE,EAAWhd,KAAO8c,EAClBhyB,GAAU,GAAEkyB,EAAWE,WAE3BpyB,GAAS,IACTqI,QAAQC,IAAItI,GAKZ+xB,EAAOb,UAAUxwB,KAAOqxB,EAAOrxB,KAInCoxB,EAAYtkB,QAAQlM,KAAKywB,EAAOb,WAChCY,EAAYxb,UACZjO,QAAQC,IAAK,oBAAmBwpB,EAAYxb,WAG5Cwb,EAAYO,aAkHhB,SAASC,EAAmBC,GACxB,IAAK,IAAI10B,EAAI,EAAGA,EAAI00B,EAAoBz0B,OAAQD,IACN,IAAlC00B,EAAoB10B,GAAGC,QACvBy0B,EAAoBzmB,OAAOjO,EAAG,GAItC,OAAO00B,EAAoBz0B,OAAS,EAvNxC0zB,EAAY10B,UAAU8B,MAAQ,WAC1B,GAAIL,KAAKooB,QAAUyK,EACf,MAAM,IAAIpkB,MACL,4FAEGzO,KAAKooB,gBAEjBpoB,KAAKooB,MAAQ0K,EACb9yB,KAAKkzB,cAAc7yB,QACnBL,KAAKgwB,UAAY,IAAI5C,MASzB6F,EAAY10B,UAAU0tB,KAAO,SAAcxc,GACvC,GAAIzP,KAAKooB,QAAU0K,EACf,MAAM,IAAIrkB,MACL,8FAEGzO,KAAKooB,gBAIjBte,QAAQC,IAAI,8CACZ/J,KAAKkzB,cAAcjH,OAGnB,MAAMgI,EAAWX,EAAaptB,KAAK,KAAMlG,MAEzCA,KAAKkzB,cAAcT,sBAAsBjuB,SAAQ0vB,IAC7Cl0B,KAAKmzB,qBAAqBgB,KAAKD,EAAiBD,GAChDj0B,KAAK+X,aAIT/X,KAAKooB,MAAQ2K,EAGb/yB,KAAKyP,SAAWA,GA2DpBwjB,EAAY10B,UAAUu1B,WAAa,WAC3B9zB,KAAKooB,QAAU2K,GAAuC,IAAjB/yB,KAAK+X,SAG1C/X,KAAKo0B,SAQbnB,EAAY10B,UAAU61B,MAAQ,WAC1BtqB,QAAQC,IACH,sDACG/J,KAAKiP,QAAQ1P,UACrBS,KAAKozB,cAAgB,GAOrB,MAAMiB,EAASr0B,KAAKiP,QAGdqlB,EAAiB,GASvB,IANAP,EAAmBM,GAGnBA,EAAO7vB,SAAQ/C,GA6FnB,SAA+BA,EAAOoyB,GAClC,GAAqB,IAAjBpyB,EAAMlC,OACNkC,EAAMsB,KAAK8wB,OACR,CACH,GAAIpyB,EAAMA,EAAMlC,OAAS,GAAGq0B,OAASC,EAAKD,MAGtC,YAFAnyB,EAAMsB,KAAK8wB,GAKf,IAAK,IAAIv0B,EAAI,EAAGA,EAAImC,EAAMlC,OAAQD,IAC9B,GAAIu0B,EAAKD,MAAQnyB,EAAMnC,GAAGs0B,MAGtB,YAFAnyB,EAAM8L,OAAOjO,EAAG,EAAGu0B,GAK3BpyB,EAAMsB,KAAK8wB,IA9GSU,CAAsBD,EAAgB7yB,KAGvDsyB,EAAmBM,IAAS,CAE/B,IAAIG,EAAkBH,EAAO,GAE7BA,EAAO7vB,SAAQmuB,IACPA,EAAU,GAAGiB,MAAQY,EAAgB,GAAGZ,QACxCY,EAAkB7B,MAK1B,IAAI8B,EAAYD,EAAgBve,QAMhC,IAJAjW,KAAK00B,oBAAoBD,EAAWD,EAAgBryB,MAI7CqyB,EAAgBj1B,OAAS,GAAG,CAC/B,IAAIo1B,GAAe,EACnB,MAAMC,EAAgBJ,EAAgB,GAAGZ,MASzC,GAPAS,EAAO7vB,SAAQmuB,IACPA,EAAU,GAAGiB,MAAQgB,IACrBD,GAAe,MAKnBA,EACA,MAGJF,EAAYD,EAAgBve,QAC5BjW,KAAK00B,oBAAoBD,EAAW,OAM5Cz0B,KAAKooB,MAAQ4K,EACThzB,KAAKyP,UACLzP,KAAKyP,SAASzP,KAAKozB,gBAU3BH,EAAY10B,UAAUm2B,oBAAsB,SAASb,EAAM1xB,GACnDA,MAAAA,IACAnC,KAAKozB,eAAkB,KAAIjxB,KAC3BnC,KAAKqzB,WAAalxB,EAAK5C,OAAS,GAEhCS,KAAKqzB,WAAaQ,EAAKA,KAAKt0B,OA/OJ,KAgPxBS,KAAKozB,eAAiB,SACtBpzB,KAAKqzB,WAAa,GAEtBrzB,KAAKozB,eAAkB,IAAGS,EAAKA,OAC/B7zB,KAAKqzB,YAAcQ,EAAKA,KAAKt0B,OAAS,GAwD1C0zB,EAAY10B,UAAUqyB,SAAW,SAASd,GACtC9vB,KAAKkzB,cAActC,SAASd,IAOhCmD,EAAY10B,UAAUizB,YAAc,SAAS1B,GACzC9vB,KAAKkzB,cAAc1B,YAAY1B,IAQnCmD,EAAY10B,UAAUs2B,iBAAmB,WACrC,GAAI70B,KAAKooB,QAAU4K,EACf,MAAM,IAAIvkB,MACL,qGAEGzO,KAAKooB,gBAGjB,OAAOpoB,KAAKozB,eAMhBH,EAAY10B,UAAUu2B,SAAW,WAC7B,OAAO90B,KAAKooB,OAOhB6K,EAAY10B,UAAUw2B,MAAQ,WAC1B/0B,KAAKooB,MAAQyK,EACb7yB,KAAK+X,QAAU,KACf/X,KAAKozB,cAAgB,KACrBpzB,KAAKgwB,UAAY,KACjBhwB,KAAKyP,SAAW,KAChBzP,KAAKiP,QAAU,GACfjP,KAAKqzB,WAAa,GAGtBl3B,EAAOD,QAAU+2B,YCnWjB,MAAM+B,EAAuB,WACzB,MAAM,IAAIvmB,MAAM,0DAapBumB,EAAqBz2B,UAAU41B,KAAO,SAAcD,EAAiBzkB,GACjEzP,KAAKi1B,YAAYf,EAAgBlC,MAAMkD,IAC/Bl1B,KAAKm1B,OAAOD,GACZhB,EAAgBvB,UAAY3yB,KAAKo1B,eAAeF,IAEhDprB,QAAQC,IAAI,wDACZmqB,EAAgBvB,UAAY,IAEhCljB,EAASykB,OAcjBc,EAAqBz2B,UAAU02B,YAAc,SAASI,EAAW5lB,GAC7D,MAAM,IAAIhB,MAAM,iDAmBpBumB,EAAqBz2B,UAAU62B,eAAiB,SAASF,GACrD,MAAM,IAAIzmB,MAAM,4CAUpBumB,EAAqBz2B,UAAU42B,OAAS,SAASD,GAC7C,MAAM,IAAIzmB,MAAM,4CAGpBtS,EAAOD,QAAU84B,kBCzEjB,MAAMM,EAAO3wB,EAAQ,MAEfuuB,EAAgBvuB,EAAQ,MACxBqwB,EAAuBrwB,EAAQ,MAK/BiuB,EAAgB,WAElB5yB,KAAKskB,IAiHT,WACI,MAAMvlB,EAAU,2DAEhB,QAAyBgI,IAArBzD,OAAOiyB,UACPzrB,QAAQC,IAAIhL,OACT,CACH,MAAMy2B,EAAWlyB,OAAOiyB,UAExB,QAA0BxuB,IAAtByuB,EAASC,UAA0BD,EAASC,SAAS,YACrD,OAAOD,EAEX1rB,QAAQC,IAAIhL,IA5HL22B,IAMf9C,EAAcr0B,UAAYD,OAAOe,OAAO21B,EAAqBz2B,WAK7Dq0B,EAAch0B,YAAcg0B,EAS5BA,EAAcr0B,UAAU02B,YAAc,SAASU,EAAelmB,GAC1D3F,QAAQC,IAAK,6BAA4B/J,KAAKskB,OAC9Cxa,QAAQC,IAAK,8BAA6B4rB,KAC1C,MAAMC,EAAU,IAAIC,eAEpBD,EAAQE,mBAAqB,WACzB,GAAIF,EAAQhR,aAAeiR,eAAeE,MAChB,MAAnBH,EAAQI,OACXvmB,EAASmmB,EAAQK,mBACd,GAAIL,EAAQhR,aAAeiR,eAAeE,KAC7C,MAAM,IAAItnB,MACL,yDACGmnB,EAAQI,WAKxBJ,EAAQM,KAAK,OAAQl2B,KAAKskB,KAC1BsR,EAAQO,iBAAiB,eACrBjD,EAAc9C,4BAClBwF,EAAQzB,KAAKwB,GACb7rB,QAAQC,IAAK,QAAO4rB,MASxB/C,EAAcr0B,UAAU62B,eAAiB,SAASF,GAC9C,MAAMjjB,EAASgZ,KAAKnmB,MAAMowB,GAAUkB,QAKpCnkB,EAAOgE,QACP,MAAMxU,EAAQ,GAOd,OALAwQ,EAAOzN,SACHqvB,GACIA,EAAKwC,QACE50B,EAAMsB,KAAK,IAAIuyB,EAAKzB,EAAKA,KAAMA,EAAKxzB,MAAOwzB,EAAKld,QAExDlV,GAQXmxB,EAAcr0B,UAAU42B,OAAS,SAASD,GAItC,GAHAprB,QAAQC,IAAK,wBAAuBmrB,EAAS12B,cAGrB,iBAAb02B,EACP,OAAO,EAIX,IAAIoB,EAEJ,IACIA,EAAOrL,KAAKnmB,MAAMowB,GACpB,MAAO7d,GAGL,OAFAvN,QAAQC,IAAIsN,IAEL,EAIX,QAAqBtQ,IAAjBuvB,EAAKF,QACL,OAAO,EAIX,MAAM30B,EAAQ60B,EAAKF,QAEnB,SAAM30B,EAAM,KAAMA,EAAM,GAAG,gBA8B/BtF,EAAOD,QAAU02B,YCvIjB,MAAM0C,EAAO,SAASzB,EAAMD,EAAOjd,GAC/B3W,KAAK6zB,KAAOA,EACZ7zB,KAAK4zB,MAAQA,EACb5zB,KAAK2W,IAAMA,GAOf2e,EAAK/2B,UAAUg4B,QAAU,WACrB,OAAOv2B,KAAK6zB,MAOhByB,EAAK/2B,UAAUi4B,aAAe,WAC1B,OAAOx2B,KAAK4zB,OAOhB0B,EAAK/2B,UAAUk4B,WAAa,WACxB,OAAOz2B,KAAK2W,KAGhBxa,EAAOD,QAAUo5B,WCFjBn5B,EAAOD,QAlCU,CAsBbw6B,gBAAe,CAACC,EAAYC,EAAUC,IAGf,iBAFPF,EAGD,KAHCA,EAMD1uB,QAAQ,SAAU2uB,GACxB3uB,QAAQ,iBAAiC,IAAhB4uB,cCvBtC,SAASC,EAAsBjS,EAAKkS,GAChC,IAAKlS,IAAQkS,GAAmC,mBAApBlS,EAAI9R,aACJ,mBAAdgkB,EAAKnP,KACf,MAAM,IAAInZ,MAAM,qDAEpBzO,KAAK6kB,IAAMA,EACX7kB,KAAK+2B,KAAOA,EAWhBD,EAAsBv4B,UAAUy4B,QAAU,YAAYlvB,GAClD,MAAMmvB,EAAWnvB,EAAK,GAItBA,EAAK,GAAK9H,KAAK+2B,KAGf/2B,KAAK6kB,IAAI9R,YACLkkB,EACA5uB,SAAS9J,UAAU2H,KAAKqC,MAAMvI,KAAK+2B,KAAKnP,KAAM9f,KAGtD3L,EAAOD,QAAU46B,YC1BjB,MAAMI,EAAW,GAGXC,EAAoB16B,OAAO26B,QAY3BC,EAA0B56B,OAAO66B,qBAYvC76B,OAAO26B,QAlBP,YAAoCtvB,GAChCovB,EAAS1yB,SAAQmiB,GAAWA,KAAW7e,KACvCqvB,GAAqBA,KAAqBrvB,IAiB9CrL,OAAO66B,qBAPP,SAAuCC,GACnCL,EAAS1yB,SAAQmiB,GAAWA,EAAQ,KAAM,KAAM,KAAM,KAAM4Q,EAAMC,UAClEH,GAA2BA,EAAwBE,IAOvD,MAAME,EAAuB,CAKzBC,WAAW/Q,GACPuQ,EAASn0B,KAAK4jB,IAOlBgR,iBAAiBtgB,GACb,MAAMugB,EAAan7B,OAAO26B,QAErBQ,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAMvgB,IAOvCwgB,8BAA8BxgB,GAC1B,MAAMugB,EAAan7B,OAAO66B,qBAErBM,GAGLA,EAAWvgB,KAKnBlb,EAAOD,QAAUu7B,YC5DjB,SAASK,EAAU7c,EAAKD,GACpB,OAAO1O,KAAKC,MAAMD,KAAKE,UAAYwO,EAAMC,EAAM,IAAMA,EAQzD,SAAS8c,EAAcjpB,GACnB,OAAOA,EAAIgpB,EAAU,EAAGhpB,EAAIvP,OAAS,IAqBzC,MAAMy4B,EAAa,CAKfC,eAAc,IACHF,EA7CI,oBAoDfG,gBAAgBlwB,GACZ,IAAIygB,EAAM,GAEV,KAAOzgB,KACHygB,GAAOzoB,KAAKi4B,iBAGhB,OAAOxP,GAEXsP,cAAAA,EACAI,kBApCJ,SAA2B54B,GACvB,IAAI0S,EAAS,GAEb,IAAK,IAAI3S,EAAI,EAAGA,EAAIC,EAAQD,GAAK,EAC7B2S,GAAU8lB,EApCZ,kEAuCF,OAAO9lB,GA8BP6lB,UAAAA,GAGJ37B,EAAOD,QAAU87B,kBC5EjB,MAAM7S,EAAyBxgB,EAAQ,MAQjCyzB,EAAa,CAgBfC,WACQxT,EACAxW,EACAkZ,EACA+Q,EACAC,EACAC,GACJ,MAAMn3B,EAAImiB,SACJiV,EAAU,SACV/T,EAASrjB,EAAEsiB,cAAc8U,GACzBC,EAAgBr3B,EAAEoiB,qBAAqBgV,GAAS,GAItD,GAFA/T,EAAOrW,MAAQA,EAEXiqB,EAAa,CAGb,MAAMK,EAAWxT,IAEjB,GAAIwT,EAAU,CACV,MAAMC,EAAYD,EAAS9T,IACrBgU,EACAD,EAAUpxB,UAAU,EAAGoxB,EAAUE,YAAY,KAAO,GAEtDF,GAAaC,IAEbhU,EAAMgU,EAAgBhU,IAK9B0T,IACA7T,EAAOqU,OAASR,GAEhBC,IACA9T,EAAO0S,QAAUoB,GAGrB9T,EAAOG,IAAMA,EACT0C,EACAmR,EAAcM,WAAWC,aAAavU,EAAQgU,GAE9CA,EAAcM,WAAW3G,YAAY3N,KAOjDvoB,EAAOD,QAAUk8B,YClDjBj8B,EAAOD,QAAU,CAAEg9B,YAhBnB,SAAqBC,GACjB,IAAKA,EACD,OAAO,EAGX,IAAIC,EAAgB95B,EAAV0B,EAAO,EAEjB,IAAK1B,EAAI,EAAGA,EAAI65B,EAAO55B,OAAQD,IAC3B85B,EAAOD,EAAOr4B,WAAWxB,GACzB0B,GAAQo4B,EAAO9sB,KAAK+sB,IAAI,GAAIF,EAAO55B,OAAS,EAAID,GAChD0B,EAAOsL,KAAKkH,IAAW,EAAPxS,GAGpB,OAAOA,oBCpBX,MAAMg3B,EAAarzB,EAAQ,MASrBrC,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7BnG,EAAOD,QAAU,CACbo9B,iBARJ,WAII,MAAQ,GAHKtB,EAAWD,cAAcz1B,MACvB01B,EAAWG,kBAAkB,iBCtZhDh8B,EAAOD,QAtBiB,CAIpBq9B,OAAQ,SAKRC,QAAS,UAKTC,iBAAkB,mBAKlBC,KAAM,kBCHVv9B,EAAOD,QAZkB,CAIrBy9B,YAAa,cAKbC,KAAM,kBCUVz9B,EAAOD,QAvBe,CAIlB29B,KAAM,OAKNC,KAAM,OAKNC,IAAK,MAKLC,IAAK,iBCGT79B,EAAOD,QAtBgB,CAInB+9B,SAAU,WAKVC,SAAU,WAKVC,SAAU,WAKVC,SAAU,sBC0Fdj+B,EAAOD,QAlHW,CAIdm+B,qBAAsB,2BAKtBC,oBAAqB,0BACrBC,kBAAmB,wBACnBC,6BAA8B,mCAC9BC,yBAA0B,+BAC1BC,uBAAwB,6BAOxBC,oBAAqB,0BAErBC,iCAAkC,uCAOlCC,oBAAqB,0BAQrBC,yBAA0B,+BAK1BC,2CAA4C,iDAE5CC,eAAgB,qBAMhBC,mBAAoB,yBAIpBC,kBAAmB,wBAMnBC,qBAAsB,2BAItBC,oBAAqB,0BAKrBC,6BAA8B,mCAK9BC,8BAA+B,oCAC/BC,4BAA6B,kCAC7BC,oBAAqB,0BAKrBC,wBAAyB,8BACzBC,sBAAuB,4BAMvBC,0BAA2B,gCAK3BC,wBAAyB,8BASzBC,oBAAqB,0BASrBC,qBAAsB,sCCxD1B3/B,EAAOD,QAvDa,CAChB,KAAQ,CACJ6/B,MAAO,KACPC,OAAQ,MAEZ,KAAM,CACFD,MAAO,KACPC,OAAQ,MAEZ,KAAQ,CACJD,MAAO,KACPC,OAAQ,MAEZ,OAAU,CACND,MAAO,KACPC,OAAQ,MAEZ,IAAO,CACHD,MAAO,KACPC,OAAQ,KAEZ,GAAM,CACFD,MAAO,KACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,KAEZ,IAAO,CACHD,MAAO,IACPC,OAAQ,gBClChB7/B,EAAOD,QAZW,CAIdq9B,OAAQ,SAKRC,QAAS,oBCFbr9B,EAAOD,QAZsB,CASzB+/B,iBAAkB,6CCLtB9/B,EAAOD,QAJW,CACdggC,UAAW,mBC8Uf//B,EAAOD,QA/UY,CAIfigC,yBAA0B,gCAI1BC,qBAAsB,4BAItBC,qBAAsB,4BACtBC,wBAAyB,+BACzBC,YAAa,mBAKbC,cAAe,2BAIfC,cAAe,2BAMfC,WAAY,wBACZC,oBAAqB,2BAGrBC,8BAA+B,qCAK/BC,uBAAwB,4BAIxBC,kBAAmB,yBAInBC,uBAAwB,8BAIxBC,oBAAqB,2BAIrBC,sBAAuB,6BAIvBC,qBAAsB,0BAKtBC,0BAA2B,iCAI3BC,qBAAsB,4BAKtBC,gBAAiB,uBAKjBC,kBAAmB,yBACnBC,SAAU,gBACVC,mBAAoB,0BACpBC,WAAY,kBACZC,kBAAmB,yBAMnBC,eAAgB,qBAMhBC,oBAAqB,0BAWrBC,OAAQ,cAGRC,mBAAoB,yBAKpBC,eAAgB,sBAIhBC,iBAAkB,wBAIlBC,wBAAyB,+BAIzBC,yBAA0B,gCAG1BC,4BAA6B,mCAG7BC,cAAe,qBAGfC,WAAY,kBAGZC,kBAAmB,yBAGnBC,gBAAiB,uBAGjBC,wBAAyB,+BAGzBC,yBAA0B,gCAG1BC,sBAAuB,6BAGvBC,kBAAmB,yBAGnBC,SAAU,gBAIVC,iBAAkB,wBAGlBC,iBAAkB,wBAGlBC,yBAA0B,gCAI1BC,wBAAyB,mBAIzBC,wBAAyB,mBAMzBC,+BAAgC,kBAKhCC,6BAA8B,oCAC9BC,kBAAmB,yBAKnBC,qBAAsB,gCACtBC,kBAAmB,yBACnBC,gBAAiB,uBACjBC,iBAAkB,wBAGlBC,cAAe,qBAKfC,uBAAwB,4BAIxBC,aAAc,oBAKdC,qBAAsB,4BACtBC,kBAAmB,8BACnBC,mBAAoB,0BACpBC,+BAAgC,sCAChCC,gBAAiB,uBACjBC,gCAAiC,uCAKjCC,qBAAsB,4BAGtBC,qBAAsB,4BAItBC,6BAA8B,oCAY9BC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,8BAA+B,qCAK/BC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,sBAAuB,6BAKvBC,mCAAoC,0CAKpCC,mCAAoC,0CAIpCC,uBAAwB,8BAIxBC,gBAAiB,uBAIjBC,iBAAkB,wBAQlBC,6BAA8B,oCAK9BC,eAAgB,4BAQhBC,kCAAmC,qCAUnCC,mCACI,qCAIJC,6BAA8B,oCAM9BC,sBAAuB,yDClU3B,IAGIC,EAAiB,4BAGjBC,EAAmB,iBAGnBC,EAAU,qBAEVC,EAAU,mBACVC,EAAU,gBAEVC,EAAU,oBACVC,EAAS,6BACTC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBACbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBACZC,EAAY,kBACZC,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBACdC,EAAa,wBACbC,EAAa,wBACbC,EAAU,qBACVC,EAAW,sBACXC,EAAW,sBACXC,EAAW,sBACXC,EAAkB,6BAClBC,EAAY,uBACZC,EAAY,uBASZC,EAAU,OAGVC,EAAe,8BAGfC,EAAW,mBAGXC,EAAgB,GACpBA,EAAc5B,GAAW4B,EA7CV,kBA8CfA,EAAcd,GAAkBc,EAAcb,GAC9Ca,EAAc3B,GAAW2B,EAAc1B,GACvC0B,EAAcZ,GAAcY,EAAcX,GAC1CW,EAAcV,GAAWU,EAAcT,GACvCS,EAAcR,GAAYQ,EAAcvB,GACxCuB,EAActB,GAAasB,EAAcrB,GACzCqB,EAAcnB,GAAamB,EAAclB,GACzCkB,EAAcjB,GAAaiB,EAAchB,GACzCgB,EAAcP,GAAYO,EAAcN,GACxCM,EAAcL,GAAaK,EAAcJ,IAAa,EACtDI,EArDe,kBAqDWA,EAAczB,GACxCyB,EAAcf,IAAc,EAG5B,IAAIgB,EAA8B,iBAAVrmC,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOqB,SAAWA,QAAUrB,EAAAA,EAGhFsmC,EAA0B,iBAARjnC,MAAoBA,MAAQA,KAAKgC,SAAWA,QAAUhC,KAGxEN,EAAOsnC,GAAcC,GAAYl7B,SAAS,cAATA,GAGjCm7B,EAA4CtnC,IAAYA,EAAQunC,UAAYvnC,EAG5EwnC,EAAaF,GAA4CrnC,IAAWA,EAAOsnC,UAAYtnC,EAGvFwnC,EAAgBD,GAAcA,EAAWxnC,UAAYsnC,EAUzD,SAASI,EAAY38B,EAAK48B,GAGxB,OADA58B,EAAIgiB,IAAI4a,EAAK,GAAIA,EAAK,IACf58B,EAWT,SAAS68B,EAAY7a,EAAKplB,GAGxB,OADAolB,EAAI8a,IAAIlgC,GACDolB,EAuDT,SAAS+a,EAAYviC,EAAOwiC,EAAUC,EAAaC,GACjD,IAAItjC,GAAS,EACTtB,EAASkC,EAAQA,EAAMlC,OAAS,EAKpC,IAHI4kC,GAAa5kC,IACf2kC,EAAcziC,IAAQZ,MAEfA,EAAQtB,GACf2kC,EAAcD,EAASC,EAAaziC,EAAMZ,GAAQA,EAAOY,GAE3D,OAAOyiC,EAyCT,SAASE,EAAavgC,GAGpB,IAAIoO,GAAS,EACb,GAAa,MAATpO,GAA0C,mBAAlBA,EAAMrF,SAChC,IACEyT,KAAYpO,EAAQ,IACpB,MAAOnB,IAEX,OAAOuP,EAUT,SAASoyB,EAAWp9B,GAClB,IAAIpG,GAAS,EACToR,EAAS9T,MAAM8I,EAAIsqB,MAKvB,OAHAtqB,EAAIzC,SAAQ,SAASX,EAAOY,GAC1BwN,IAASpR,GAAS,CAAC4D,EAAKZ,MAEnBoO,EAWT,SAASqyB,EAAQC,EAAMr7B,GACrB,OAAO,SAASf,GACd,OAAOo8B,EAAKr7B,EAAUf,KAW1B,SAASq8B,EAAWvb,GAClB,IAAIpoB,GAAS,EACToR,EAAS9T,MAAM8qB,EAAIsI,MAKvB,OAHAtI,EAAIzkB,SAAQ,SAASX,GACnBoO,IAASpR,GAASgD,KAEboO,EAIT,IASMwyB,EATFC,EAAavmC,MAAMI,UACnBomC,EAAYt8B,SAAS9J,UACrBqmC,EAActmC,OAAOC,UAGrBsmC,EAAa7oC,EAAK,sBAGlB8oC,GACEL,EAAM,SAASM,KAAKF,GAAcA,EAAWtgC,MAAQsgC,EAAWtgC,KAAKygC,UAAY,KACvE,iBAAmBP,EAAO,GAItCQ,EAAeN,EAAUnmC,SAGzB4Q,GAAiBw1B,EAAYx1B,eAO7B81B,GAAiBN,EAAYpmC,SAG7B2mC,GAAanhC,OAAO,IACtBihC,EAAaxmC,KAAK2Q,IAAgBnH,QAzQjB,sBAyQuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EtI,GAASgkC,EAAgB3nC,EAAK2D,YAASoH,EACvCqT,GAASpe,EAAKoe,OACdnc,GAAajC,EAAKiC,WAClBmnC,GAAed,EAAQhmC,OAAO6qB,eAAgB7qB,QAC9C+mC,GAAe/mC,OAAOe,OACtBimC,GAAuBV,EAAYU,qBACnC/3B,GAASm3B,EAAWn3B,OAGpBg4B,GAAmBjnC,OAAOwnB,sBAC1B0f,GAAiB7lC,GAASA,GAAO8lC,cAAW1+B,EAC5C2+B,GAAapB,EAAQhmC,OAAOiG,KAAMjG,QAGlCqnC,GAAWC,GAAU5pC,EAAM,YAC3B6pC,GAAMD,GAAU5pC,EAAM,OACtBsqB,GAAUsf,GAAU5pC,EAAM,WAC1B8pC,GAAMF,GAAU5pC,EAAM,OACtB+pC,GAAUH,GAAU5pC,EAAM,WAC1BgqC,GAAeJ,GAAUtnC,OAAQ,UAGjC2nC,GAAqBC,GAASP,IAC9BQ,GAAgBD,GAASL,IACzBO,GAAoBF,GAAS5f,IAC7B+f,GAAgBH,GAASJ,IACzBQ,GAAoBJ,GAASH,IAG7BQ,GAAcnsB,GAASA,GAAO7b,eAAYwI,EAC1Cy/B,GAAgBD,GAAcA,GAAYE,aAAU1/B,EASxD,SAAS2/B,GAAKC,GACZ,IAAI9lC,GAAS,EACTtB,EAASonC,EAAUA,EAAQpnC,OAAS,EAGxC,IADAS,KAAK4mC,UACI/lC,EAAQtB,GAAQ,CACvB,IAAIsnC,EAAQF,EAAQ9lC,GACpBb,KAAKipB,IAAI4d,EAAM,GAAIA,EAAM,KA2F7B,SAASC,GAAUH,GACjB,IAAI9lC,GAAS,EACTtB,EAASonC,EAAUA,EAAQpnC,OAAS,EAGxC,IADAS,KAAK4mC,UACI/lC,EAAQtB,GAAQ,CACvB,IAAIsnC,EAAQF,EAAQ9lC,GACpBb,KAAKipB,IAAI4d,EAAM,GAAIA,EAAM,KAyG7B,SAASE,GAASJ,GAChB,IAAI9lC,GAAS,EACTtB,EAASonC,EAAUA,EAAQpnC,OAAS,EAGxC,IADAS,KAAK4mC,UACI/lC,EAAQtB,GAAQ,CACvB,IAAIsnC,EAAQF,EAAQ9lC,GACpBb,KAAKipB,IAAI4d,EAAM,GAAIA,EAAM,KAuF7B,SAASG,GAAML,GACb3mC,KAAKinC,SAAW,IAAIH,GAAUH,GAyHhC,SAASO,GAAYC,EAAQ1iC,EAAKZ,GAChC,IAAIujC,EAAWD,EAAO1iC,GAChB2K,GAAe3Q,KAAK0oC,EAAQ1iC,IAAQ4iC,GAAGD,EAAUvjC,UACxCkD,IAAVlD,GAAyBY,KAAO0iC,KACnCA,EAAO1iC,GAAOZ,GAYlB,SAASyjC,GAAa7lC,EAAOgD,GAE3B,IADA,IAAIlF,EAASkC,EAAMlC,OACZA,KACL,GAAI8nC,GAAG5lC,EAAMlC,GAAQ,GAAIkF,GACvB,OAAOlF,EAGX,OAAQ,EA8BV,SAASgoC,GAAU1jC,EAAO2jC,EAAQC,EAAQC,EAAYjjC,EAAK0iC,EAAQhjB,GACjE,IAAIlS,EAIJ,GAHIy1B,IACFz1B,EAASk1B,EAASO,EAAW7jC,EAAOY,EAAK0iC,EAAQhjB,GAASujB,EAAW7jC,SAExDkD,IAAXkL,EACF,OAAOA,EAET,IAAK01B,GAAS9jC,GACZ,OAAOA,EAET,IAAI+jC,EAAQxpC,GAAQyF,GACpB,GAAI+jC,GAEF,GADA31B,EA2XJ,SAAwBxQ,GACtB,IAAIlC,EAASkC,EAAMlC,OACf0S,EAASxQ,EAAM7C,YAAYW,GAO/B,OAJIA,GAA6B,iBAAZkC,EAAM,IAAkB2N,GAAe3Q,KAAKgD,EAAO,WACtEwQ,EAAOpR,MAAQY,EAAMZ,MACrBoR,EAAO41B,MAAQpmC,EAAMomC,OAEhB51B,EApYI61B,CAAejkC,IACnB2jC,EACH,OA6ON,SAAmBr5B,EAAQ1M,GACzB,IAAIZ,GAAS,EACTtB,EAAS4O,EAAO5O,OAGpB,IADAkC,IAAUA,EAAQtD,MAAMoB,MACfsB,EAAQtB,GACfkC,EAAMZ,GAASsN,EAAOtN,GAExB,OAAOY,EArPIsmC,CAAUlkC,EAAOoO,OAErB,CACL,IAAI+1B,EAAMC,GAAOpkC,GACbqkC,EAASF,GAAOpG,GAAWoG,GAAOnG,EAEtC,GAAI4D,GAAS5hC,GACX,OA0HN,SAAqB7F,EAAQwpC,GAC3B,GAAIA,EACF,OAAOxpC,EAAOwI,QAEhB,IAAIyL,EAAS,IAAIjU,EAAOY,YAAYZ,EAAOuB,QAE3C,OADAvB,EAAO6qB,KAAK5W,GACLA,EAhIIk2B,CAAYtkC,EAAO2jC,GAE5B,GAAIQ,GAAOhG,GAAagG,GAAOvG,GAAYyG,IAAWf,EAAS,CAC7D,GAAI/C,EAAavgC,GACf,OAAOsjC,EAAStjC,EAAQ,GAG1B,GADAoO,EA+XN,SAAyBk1B,GACvB,MAAqC,mBAAtBA,EAAOvoC,aAA8BwpC,GAAYjB,GAE5D,GAxVGQ,GADWU,EAwVHjD,GAAa+B,IAvVH9B,GAAagD,GAAS,GADjD,IAAoBA,EAzCLC,CAAgBJ,EAAS,GAAKrkC,IAClC2jC,EACH,OA6QR,SAAqBr5B,EAAQg5B,GAC3B,OAAOoB,GAAWp6B,EAAQq6B,GAAWr6B,GAASg5B,GA9QjCsB,CAAY5kC,EAhD3B,SAAoBsjC,EAAQh5B,GAC1B,OAAOg5B,GAAUoB,GAAWp6B,EAAQ5J,GAAK4J,GAASg5B,GA+ClBuB,CAAWz2B,EAAQpO,QAE1C,CACL,IAAKw/B,EAAc2E,GACjB,OAAOb,EAAStjC,EAAQ,GAE1BoO,EA0YN,SAAwBk1B,EAAQa,EAAKW,EAAWnB,GAC9C,IA5MmBoB,EA4MfC,EAAO1B,EAAOvoC,YAClB,OAAQopC,GACN,KAAKzF,EACH,OAAOuG,GAAiB3B,GAE1B,KAAKzF,EACL,KAAKC,EACH,OAAO,IAAIkH,GAAM1B,GAEnB,KAAK3E,EACH,OA3QN,SAAuBuG,EAAUvB,GAC/B,IAAIxpC,EAASwpC,EAASsB,GAAiBC,EAAS/qC,QAAU+qC,EAAS/qC,OACnE,OAAO,IAAI+qC,EAASnqC,YAAYZ,EAAQ+qC,EAASC,WAAYD,EAASnwB,YAyQ3DqwB,CAAc9B,EAAQK,GAE/B,KAAK/E,EAAY,KAAKC,EACtB,KAAKC,EAAS,KAAKC,EAAU,KAAKC,EAClC,KAAKC,EAAU,KAAKC,EAAiB,KAAKC,EAAW,KAAKC,EACxD,OA/MN,SAAyBiG,EAAY1B,GACnC,IAAIxpC,EAASwpC,EAASsB,GAAiBI,EAAWlrC,QAAUkrC,EAAWlrC,OACvE,OAAO,IAAIkrC,EAAWtqC,YAAYZ,EAAQkrC,EAAWF,WAAYE,EAAW3pC,QA6MjE4pC,CAAgBhC,EAAQK,GAEjC,KAAK1F,EACH,OArQN,SAAkB76B,EAAKugC,EAAQmB,GAE7B,OAAO3E,EADKwD,EAASmB,EAAUtE,EAAWp9B,IAAM,GAAQo9B,EAAWp9B,GACzC28B,EAAa,IAAI38B,EAAIrI,aAmQpCwqC,CAASjC,EAAQK,EAAQmB,GAElC,KAAK5G,EACL,KAAKK,EACH,OAAO,IAAIyG,EAAK1B,GAElB,KAAKjF,EACH,OAhQN,SAAqBmH,GACnB,IAAIp3B,EAAS,IAAIo3B,EAAOzqC,YAAYyqC,EAAOl7B,OAAQ+0B,EAAQ6B,KAAKsE,IAEhE,OADAp3B,EAAOq3B,UAAYD,EAAOC,UACnBr3B,EA6PIs3B,CAAYpC,GAErB,KAAKhF,EACH,OApPN,SAAkBlZ,EAAKue,EAAQmB,GAE7B,OAAO3E,EADKwD,EAASmB,EAAUnE,EAAWvb,IAAM,GAAQub,EAAWvb,GACzC6a,EAAa,IAAI7a,EAAIrqB,aAkPpC4qC,CAASrC,EAAQK,EAAQmB,GAElC,KAAKtG,EACH,OA3OeuG,EA2OIzB,EA1OhBX,GAAgBloC,OAAOkoC,GAAc/nC,KAAKmqC,IAAW,IAhM/Ca,CAAe5lC,EAAOmkC,EAAKT,GAAWC,IAInDrjB,IAAUA,EAAQ,IAAI6iB,IACtB,IAAI0C,EAAUvlB,EAAMhK,IAAItW,GACxB,GAAI6lC,EACF,OAAOA,EAIT,GAFAvlB,EAAM8E,IAAIplB,EAAOoO,IAEZ21B,EACH,IAAI+B,EAAQlC,EAsQhB,SAAoBN,GAClB,OAnOF,SAAwBA,EAAQyC,EAAUC,GACxC,IAAI53B,EAAS23B,EAASzC,GACtB,OAAO/oC,GAAQ+oC,GAAUl1B,EApwB3B,SAAmBxQ,EAAOkK,GAKxB,IAJA,IAAI9K,GAAS,EACTtB,EAASoM,EAAOpM,OAChBk0B,EAAShyB,EAAMlC,SAEVsB,EAAQtB,GACfkC,EAAMgyB,EAAS5yB,GAAS8K,EAAO9K,GAEjC,OAAOY,EA4vB2BqoC,CAAU73B,EAAQ43B,EAAY1C,IAiOzD4C,CAAe5C,EAAQ5iC,GAAMikC,IAvQbwB,CAAWnmC,GAASU,GAAKV,GAUhD,OA5vBF,SAAmBpC,EAAOwiC,GAIxB,IAHA,IAAIpjC,GAAS,EACTtB,EAASkC,EAAQA,EAAMlC,OAAS,IAE3BsB,EAAQtB,IAC8B,IAAzC0kC,EAASxiC,EAAMZ,GAAQA,MA+uB7BopC,CAAUN,GAAS9lC,GAAO,SAASqmC,EAAUzlC,GACvCklC,IAEFO,EAAWrmC,EADXY,EAAMylC,IAIRhD,GAAYj1B,EAAQxN,EAAK8iC,GAAU2C,EAAU1C,EAAQC,EAAQC,EAAYjjC,EAAKZ,EAAOsgB,OAEhFlS,EAsGT,SAAS62B,GAAiBpnC,GACxB,IAAIuQ,EAAS,IAAIvQ,EAAY9C,YAAY8C,EAAYkX,YAErD,OADA,IAAI3a,GAAWgU,GAAQgX,IAAI,IAAIhrB,GAAWyD,IACnCuQ,EA8GT,SAASs2B,GAAWp6B,EAAQw7B,EAAOxC,EAAQO,GACzCP,IAAWA,EAAS,IAKpB,IAHA,IAAItmC,GAAS,EACTtB,EAASoqC,EAAMpqC,SAEVsB,EAAQtB,GAAQ,CACvB,IAAIkF,EAAMklC,EAAM9oC,GAEZspC,EAAWzC,EACXA,EAAWP,EAAO1iC,GAAM0J,EAAO1J,GAAMA,EAAK0iC,EAAQh5B,QAClDpH,EAEJmgC,GAAYC,EAAQ1iC,OAAkBsC,IAAbojC,EAAyBh8B,EAAO1J,GAAO0lC,GAElE,OAAOhD,EAkCT,SAASiD,GAAWnjC,EAAKxC,GACvB,IAqKiBZ,EACbrE,EAtKA8U,EAAOrN,EAAIggC,SACf,OAsKgB,WADZznC,SADaqE,EApKAY,KAsKmB,UAARjF,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVqE,EACU,OAAVA,GAvKDyQ,EAAmB,iBAAP7P,EAAkB,SAAW,QACzC6P,EAAKrN,IAWX,SAAS2+B,GAAUuB,EAAQ1iC,GACzB,IAAIZ,EAj8BN,SAAkBsjC,EAAQ1iC,GACxB,OAAiB,MAAV0iC,OAAiBpgC,EAAYogC,EAAO1iC,GAg8B/B4lC,CAASlD,EAAQ1iC,GAC7B,OAvOF,SAAsBZ,GACpB,SAAK8jC,GAAS9jC,KAyYE0gC,EAzYiB1gC,EA0YxBihC,GAAeA,KAAcP,MAvYvB+F,GAAWzmC,IAAUugC,EAAavgC,GAAUshC,GAAahC,GACzDl9B,KAAKigC,GAASriC,IAqY/B,IAAkB0gC,EAnKTgG,CAAa1mC,GAASA,OAAQkD,EA7tBvC2/B,GAAKnoC,UAAUqoC,MAnEf,WACE5mC,KAAKinC,SAAWjB,GAAeA,GAAa,MAAQ,IAmEtDU,GAAKnoC,UAAL,OAtDA,SAAoBkG,GAClB,OAAOzE,KAAKwqC,IAAI/lC,WAAezE,KAAKinC,SAASxiC,IAsD/CiiC,GAAKnoC,UAAU4b,IA1Cf,SAAiB1V,GACf,IAAI6P,EAAOtU,KAAKinC,SAChB,GAAIjB,GAAc,CAChB,IAAI/zB,EAASqC,EAAK7P,GAClB,OAAOwN,IAAWsvB,OAAiBx6B,EAAYkL,EAEjD,OAAO7C,GAAe3Q,KAAK6V,EAAM7P,GAAO6P,EAAK7P,QAAOsC,GAqCtD2/B,GAAKnoC,UAAUisC,IAzBf,SAAiB/lC,GACf,IAAI6P,EAAOtU,KAAKinC,SAChB,OAAOjB,QAA6Bj/B,IAAduN,EAAK7P,GAAqB2K,GAAe3Q,KAAK6V,EAAM7P,IAwB5EiiC,GAAKnoC,UAAU0qB,IAXf,SAAiBxkB,EAAKZ,GAGpB,OAFW7D,KAAKinC,SACXxiC,GAAQuhC,SAA0Bj/B,IAAVlD,EAAuB09B,EAAiB19B,EAC9D7D,MAoHT8mC,GAAUvoC,UAAUqoC,MAjFpB,WACE5mC,KAAKinC,SAAW,IAiFlBH,GAAUvoC,UAAV,OArEA,SAAyBkG,GACvB,IAAI6P,EAAOtU,KAAKinC,SACZpmC,EAAQymC,GAAahzB,EAAM7P,GAE/B,QAAI5D,EAAQ,IAIRA,GADYyT,EAAK/U,OAAS,EAE5B+U,EAAKqD,MAELpK,GAAO9O,KAAK6V,EAAMzT,EAAO,GAEpB,KAyDTimC,GAAUvoC,UAAU4b,IA7CpB,SAAsB1V,GACpB,IAAI6P,EAAOtU,KAAKinC,SACZpmC,EAAQymC,GAAahzB,EAAM7P,GAE/B,OAAO5D,EAAQ,OAAIkG,EAAYuN,EAAKzT,GAAO,IA0C7CimC,GAAUvoC,UAAUisC,IA9BpB,SAAsB/lC,GACpB,OAAO6iC,GAAatnC,KAAKinC,SAAUxiC,IAAQ,GA8B7CqiC,GAAUvoC,UAAU0qB,IAjBpB,SAAsBxkB,EAAKZ,GACzB,IAAIyQ,EAAOtU,KAAKinC,SACZpmC,EAAQymC,GAAahzB,EAAM7P,GAO/B,OALI5D,EAAQ,EACVyT,EAAKvR,KAAK,CAAC0B,EAAKZ,IAEhByQ,EAAKzT,GAAO,GAAKgD,EAEZ7D,MAkGT+mC,GAASxoC,UAAUqoC,MA/DnB,WACE5mC,KAAKinC,SAAW,CACd,KAAQ,IAAIP,GACZ,IAAO,IAAKb,IAAOiB,IACnB,OAAU,IAAIJ,KA4DlBK,GAASxoC,UAAT,OA/CA,SAAwBkG,GACtB,OAAO2lC,GAAWpqC,KAAMyE,GAAjB,OAAgCA,IA+CzCsiC,GAASxoC,UAAU4b,IAnCnB,SAAqB1V,GACnB,OAAO2lC,GAAWpqC,KAAMyE,GAAK0V,IAAI1V,IAmCnCsiC,GAASxoC,UAAUisC,IAvBnB,SAAqB/lC,GACnB,OAAO2lC,GAAWpqC,KAAMyE,GAAK+lC,IAAI/lC,IAuBnCsiC,GAASxoC,UAAU0qB,IAVnB,SAAqBxkB,EAAKZ,GAExB,OADAumC,GAAWpqC,KAAMyE,GAAKwkB,IAAIxkB,EAAKZ,GACxB7D,MAgGTgnC,GAAMzoC,UAAUqoC,MApEhB,WACE5mC,KAAKinC,SAAW,IAAIH,IAoEtBE,GAAMzoC,UAAN,OAxDA,SAAqBkG,GACnB,OAAOzE,KAAKinC,SAAL,OAAwBxiC,IAwDjCuiC,GAAMzoC,UAAU4b,IA5ChB,SAAkB1V,GAChB,OAAOzE,KAAKinC,SAAS9sB,IAAI1V,IA4C3BuiC,GAAMzoC,UAAUisC,IAhChB,SAAkB/lC,GAChB,OAAOzE,KAAKinC,SAASuD,IAAI/lC,IAgC3BuiC,GAAMzoC,UAAU0qB,IAnBhB,SAAkBxkB,EAAKZ,GACrB,IAAI4mC,EAAQzqC,KAAKinC,SACjB,GAAIwD,aAAiB3D,GAAW,CAC9B,IAAI4D,EAAQD,EAAMxD,SAClB,IAAKpB,IAAQ6E,EAAMnrC,OAASorC,IAE1B,OADAD,EAAM3nC,KAAK,CAAC0B,EAAKZ,IACV7D,KAETyqC,EAAQzqC,KAAKinC,SAAW,IAAIF,GAAS2D,GAGvC,OADAD,EAAMxhB,IAAIxkB,EAAKZ,GACR7D,MAicT,IAAIwoC,GAAajD,GAAmBjB,EAAQiB,GAAkBjnC,QAyhB9D,WACE,MAAO,IAjhBL2pC,GAtQJ,SAAoBpkC,GAClB,OAAOqhC,GAAezmC,KAAKoF,IAyX7B,SAAS+mC,GAAQ/mC,EAAOtE,GAEtB,SADAA,EAAmB,MAAVA,EAAiBiiC,EAAmBjiC,KAE1B,iBAATsE,GAAqBu/B,EAASn9B,KAAKpC,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQtE,EAmC7C,SAAS6oC,GAAYvkC,GACnB,IAAIglC,EAAOhlC,GAASA,EAAMjF,YAG1B,OAAOiF,KAFqB,mBAARglC,GAAsBA,EAAKtqC,WAAcqmC,GAY/D,SAASsB,GAAS3B,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOU,EAAaxmC,KAAK8lC,GACzB,MAAO7hC,IACT,IACE,OAAQ6hC,EAAO,GACf,MAAO7hC,KAEX,MAAO,GAyDT,SAAS2kC,GAAGxjC,EAAOgnC,GACjB,OAAOhnC,IAAUgnC,GAAUhnC,GAAUA,GAASgnC,GAAUA,GAxOrDlF,IAAYsC,GAAO,IAAItC,GAAS,IAAIpoC,YAAY,MAAQilC,GACxDqD,IAAOoC,GAAO,IAAIpC,KAAQ/D,GAC1Bxb,IAAW2hB,GAAO3hB,GAAQC,YAAc0b,GACxC6D,IAAOmC,GAAO,IAAInC,KAAQ3D,GAC1B4D,IAAWkC,GAAO,IAAIlC,KAAYzD,KACrC2F,GAAS,SAASpkC,GAChB,IAAIoO,EAASizB,GAAezmC,KAAKoF,GAC7BglC,EAAO52B,GAAU+vB,EAAYn+B,EAAMjF,iBAAcmI,EACjD+jC,EAAajC,EAAO3C,GAAS2C,QAAQ9hC,EAEzC,GAAI+jC,EACF,OAAQA,GACN,KAAK7E,GAAoB,OAAOzD,EAChC,KAAK2D,GAAe,OAAOrE,EAC3B,KAAKsE,GAAmB,OAAOnE,EAC/B,KAAKoE,GAAe,OAAOlE,EAC3B,KAAKmE,GAAmB,OAAOhE,EAGnC,OAAOrwB,IAuQX,IAAI7T,GAAUD,MAAMC,QA2BpB,SAAS2sC,GAAYlnC,GACnB,OAAgB,MAATA,GAqGT,SAAkBA,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAAS29B,EAvGnBwJ,CAASnnC,EAAMtE,UAAY+qC,GAAWzmC,GAiDhE,IAAI4hC,GAAWD,IAsLf,WACE,OAAO,GApKT,SAAS8E,GAAWzmC,GAGlB,IAAImkC,EAAML,GAAS9jC,GAASqhC,GAAezmC,KAAKoF,GAAS,GACzD,OAAOmkC,GAAOpG,GAAWoG,GAAOnG,EA2DlC,SAAS8F,GAAS9jC,GAChB,IAAIrE,SAAcqE,EAClB,QAASA,IAAkB,UAARrE,GAA4B,YAARA,GA2DzC,SAAS+E,GAAK4iC,GACZ,OAAO4D,GAAY5D,GAn7BrB,SAAuBtjC,EAAOonC,GAG5B,IAAIh5B,EAAU7T,GAAQyF,IAsrBxB,SAAqBA,GAEnB,OAmFF,SAA2BA,GACzB,OAmIF,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,EApIlBqnC,CAAarnC,IAAUknC,GAAYlnC,GApFnCsnC,CAAkBtnC,IAAUuL,GAAe3Q,KAAKoF,EAAO,aAC1DyhC,GAAqB7mC,KAAKoF,EAAO,WAAaqhC,GAAezmC,KAAKoF,IAAU49B,GAzrBhD2J,CAAYvnC,GAljB9C,SAAmByE,EAAG27B,GAIpB,IAHA,IAAIpjC,GAAS,EACToR,EAAS9T,MAAMmK,KAEVzH,EAAQyH,GACf2J,EAAOpR,GAASojC,EAASpjC,GAE3B,OAAOoR,EA4iBHo5B,CAAUxnC,EAAMtE,OAAQ+F,QACxB,GAEA/F,EAAS0S,EAAO1S,OAChB+rC,IAAgB/rC,EAEpB,IAAK,IAAIkF,KAAOZ,GACTonC,IAAa77B,GAAe3Q,KAAKoF,EAAOY,IACvC6mC,IAAuB,UAAP7mC,GAAmBmmC,GAAQnmC,EAAKlF,KACpD0S,EAAOlP,KAAK0B,GAGhB,OAAOwN,EAm6BsBs5B,CAAcpE,GAtuB7C,SAAkBA,GAChB,IAAKiB,GAAYjB,GACf,OAAOzB,GAAWyB,GAEpB,IAAIl1B,EAAS,GACb,IAAK,IAAIxN,KAAOnG,OAAO6oC,GACjB/3B,GAAe3Q,KAAK0oC,EAAQ1iC,IAAe,eAAPA,GACtCwN,EAAOlP,KAAK0B,GAGhB,OAAOwN,EA4tB8Cu5B,CAASrE,GA0ChEhrC,EAAOD,QA9VP,SAAmB2H,GACjB,OAAO0jC,GAAU1jC,GAAO,GAAM,oBC52ChC,IASI4nC,EAAS,aAGTC,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAe/gC,SAGfw4B,EAA8B,iBAAVrmC,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOqB,SAAWA,QAAUrB,EAAAA,EAGhFsmC,EAA0B,iBAARjnC,MAAoBA,MAAQA,KAAKgC,SAAWA,QAAUhC,KAGxEN,EAAOsnC,GAAcC,GAAYl7B,SAAS,cAATA,GAUjC68B,EAPc5mC,OAAOC,UAOQC,SAG7BstC,EAAYx/B,KAAK0O,IACjB+wB,EAAYz/B,KAAK2O,IAkBjBmU,EAAM,WACR,OAAOpzB,EAAKoxB,KAAKgC,OA4MnB,SAASuY,EAAS9jC,GAChB,IAAIrE,SAAcqE,EAClB,QAASA,IAAkB,UAARrE,GAA4B,YAARA,GA4EzC,SAASwsC,EAASnoC,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,GAhCF,SAAkBA,GAChB,MAAuB,iBAATA,GAtBhB,SAAsBA,GACpB,QAASA,GAAyB,iBAATA,EAsBtBqnC,CAAarnC,IAzTF,mBAyTYqhC,EAAezmC,KAAKoF,GA8B1CooC,CAASpoC,GACX,OA3VM,IA6VR,GAAI8jC,EAAS9jC,GAAQ,CACnB,IAAIgnC,EAAgC,mBAAjBhnC,EAAM4iC,QAAwB5iC,EAAM4iC,UAAY5iC,EACnEA,EAAQ8jC,EAASkD,GAAUA,EAAQ,GAAMA,EAE3C,GAAoB,iBAAThnC,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQA,EAAMoE,QAAQwjC,EAAQ,IAC9B,IAAIS,EAAWP,EAAW1lC,KAAKpC,GAC/B,OAAQqoC,GAAYN,EAAU3lC,KAAKpC,GAC/BgoC,EAAahoC,EAAM2C,MAAM,GAAI0lC,EAAW,EAAI,GAC3CR,EAAWzlC,KAAKpC,GAxWb,KAwW6BA,EAGvC1H,EAAOD,QAtPP,SAAkBqoC,EAAM4H,EAAMviC,GAC5B,IAAIwiC,EACAC,EACAC,EACAr6B,EACAs6B,EACAC,EACAC,EAAiB,EACjBC,GAAU,EACVC,GAAS,EACTC,GAAW,EAEf,GAAmB,mBAARrI,EACT,MAAM,IAAInd,UArIQ,uBA+IpB,SAASylB,EAAWC,GAClB,IAAIhlC,EAAOskC,EACPW,EAAUV,EAKd,OAHAD,EAAWC,OAAWtlC,EACtB0lC,EAAiBK,EACjB76B,EAASsyB,EAAKh8B,MAAMwkC,EAASjlC,GAI/B,SAASklC,EAAYF,GAMnB,OAJAL,EAAiBK,EAEjBP,EAAUh9B,WAAW09B,EAAcd,GAE5BO,EAAUG,EAAWC,GAAQ76B,EAWtC,SAASi7B,EAAaJ,GACpB,IAAIK,EAAoBL,EAAON,EAM/B,YAAyBzlC,IAAjBylC,GAA+BW,GAAqBhB,GACzDgB,EAAoB,GAAOR,GANJG,EAAOL,GAM8BH,EAGjE,SAASW,IACP,IAAIH,EAAO1d,IACX,GAAI8d,EAAaJ,GACf,OAAOM,EAAaN,GAGtBP,EAAUh9B,WAAW09B,EAzBvB,SAAuBH,GACrB,IAEI76B,EAASk6B,GAFWW,EAAON,GAI/B,OAAOG,EAASZ,EAAU95B,EAAQq6B,GAHRQ,EAAOL,IAGkCx6B,EAoBhCo7B,CAAcP,IAGnD,SAASM,EAAaN,GAKpB,OAJAP,OAAUxlC,EAIN6lC,GAAYR,EACPS,EAAWC,IAEpBV,EAAWC,OAAWtlC,EACfkL,GAeT,SAASq7B,IACP,IAAIR,EAAO1d,IACPme,EAAaL,EAAaJ,GAM9B,GAJAV,EAAWrkC,UACXskC,EAAWrsC,KACXwsC,EAAeM,EAEXS,EAAY,CACd,QAAgBxmC,IAAZwlC,EACF,OAAOS,EAAYR,GAErB,GAAIG,EAGF,OADAJ,EAAUh9B,WAAW09B,EAAcd,GAC5BU,EAAWL,GAMtB,YAHgBzlC,IAAZwlC,IACFA,EAAUh9B,WAAW09B,EAAcd,IAE9Bl6B,EAIT,OAxGAk6B,EAAOH,EAASG,IAAS,EACrBxE,EAAS/9B,KACX8iC,IAAY9iC,EAAQ8iC,QAEpBJ,GADAK,EAAS,YAAa/iC,GACHkiC,EAAUE,EAASpiC,EAAQ0iC,UAAY,EAAGH,GAAQG,EACrEM,EAAW,aAAchjC,IAAYA,EAAQgjC,SAAWA,GAiG1DU,EAAUE,OAnCV,gBACkBzmC,IAAZwlC,GACF7gB,aAAa6gB,GAEfE,EAAiB,EACjBL,EAAWI,EAAeH,EAAWE,OAAUxlC,GA+BjDumC,EAAU3hB,MA5BV,WACE,YAAmB5kB,IAAZwlC,EAAwBt6B,EAASm7B,EAAahe,MA4BhDke,8BC/OT,IAGI/L,EAAiB,4BAOjBC,EAAmB,iBAGnBC,EAAU,qBACVgM,EAAW,iBAEX/L,EAAU,mBACVC,EAAU,gBACV+L,EAAW,iBACX9L,EAAU,oBAEVE,EAAS,eACTC,EAAY,kBAEZC,EAAY,kBACZC,EAAa,mBAEbC,EAAY,kBACZC,EAAS,eACTC,EAAY,kBAGZE,EAAa,mBAEbC,EAAiB,uBACjBC,EAAc,oBAkBdW,EAAe,8BAGfC,EAAW,mBAGXuK,EAAiB,GACrBA,EAxBiB,yBAwBYA,EAvBZ,yBAwBjBA,EAvBc,sBAuBYA,EAtBX,uBAuBfA,EAtBe,uBAsBYA,EArBZ,uBAsBfA,EArBsB,8BAqBYA,EApBlB,wBAqBhBA,EApBgB,yBAoBY,EAC5BA,EAAelM,GAAWkM,EAAeF,GACzCE,EAAepL,GAAkBoL,EAAejM,GAChDiM,EAAenL,GAAemL,EAAehM,GAC7CgM,EAAeD,GAAYC,EAAe/L,GAC1C+L,EAAe7L,GAAU6L,EAAe5L,GACxC4L,EAAe3L,GAAa2L,EAAezL,GAC3CyL,EAAexL,GAAUwL,EAAevL,GACxCuL,EAAerL,IAAc,EAG7B,IAAIgB,EAA8B,iBAAVrmC,EAAAA,GAAsBA,EAAAA,GAAUA,EAAAA,EAAOqB,SAAWA,QAAUrB,EAAAA,EAGhFsmC,EAA0B,iBAARjnC,MAAoBA,MAAQA,KAAKgC,SAAWA,QAAUhC,KAGxEN,EAAOsnC,GAAcC,GAAYl7B,SAAS,cAATA,GAGjCm7B,EAA4CtnC,IAAYA,EAAQunC,UAAYvnC,EAG5EwnC,EAAaF,GAA4CrnC,IAAWA,EAAOsnC,UAAYtnC,EAGvFwnC,EAAgBD,GAAcA,EAAWxnC,UAAYsnC,EAGrDoK,EAAcjK,GAAiBL,EAAWxmC,QAG1C+wC,EAAY,WACd,IACE,OAAOD,GAAeA,EAAYE,SAAWF,EAAYE,QAAQ,QACjE,MAAOprC,KAHK,GAOZqrC,EAAmBF,GAAYA,EAASG,aAuD5C,SAASC,EAAUxsC,EAAOysC,GAIxB,IAHA,IAAIrtC,GAAS,EACTtB,EAAkB,MAATkC,EAAgB,EAAIA,EAAMlC,SAE9BsB,EAAQtB,GACf,GAAI2uC,EAAUzsC,EAAMZ,GAAQA,EAAOY,GACjC,OAAO,EAGX,OAAO,EAkET,SAAS4iC,EAAWp9B,GAClB,IAAIpG,GAAS,EACToR,EAAS9T,MAAM8I,EAAIsqB,MAKvB,OAHAtqB,EAAIzC,SAAQ,SAASX,EAAOY,GAC1BwN,IAASpR,GAAS,CAAC4D,EAAKZ,MAEnBoO,EAwBT,SAASuyB,EAAWvb,GAClB,IAAIpoB,GAAS,EACToR,EAAS9T,MAAM8qB,EAAIsI,MAKvB,OAHAtI,EAAIzkB,SAAQ,SAASX,GACnBoO,IAASpR,GAASgD,KAEboO,EAIT,IAeMwyB,EAvCWF,EAAMr7B,EAwBnBw7B,EAAavmC,MAAMI,UACnBomC,EAAYt8B,SAAS9J,UACrBqmC,EAActmC,OAAOC,UAGrBsmC,EAAa7oC,EAAK,sBAGlBipC,EAAeN,EAAUnmC,SAGzB4Q,EAAiBw1B,EAAYx1B,eAG7B01B,GACEL,EAAM,SAASM,KAAKF,GAAcA,EAAWtgC,MAAQsgC,EAAWtgC,KAAKygC,UAAY,KACvE,iBAAmBP,EAAO,GAQtC0J,EAAuBvJ,EAAYpmC,SAGnC2mC,EAAanhC,OAAO,IACtBihC,EAAaxmC,KAAK2Q,GAAgBnH,QA7PjB,sBA6PuC,QACvDA,QAAQ,yDAA0D,SAAW,KAI5EtI,EAASgkC,EAAgB3nC,EAAK2D,YAASoH,EACvCqT,EAASpe,EAAKoe,OACdnc,EAAajC,EAAKiC,WAClBqnC,EAAuBV,EAAYU,qBACnC/3B,EAASm3B,EAAWn3B,OACpB6gC,EAAiBh0B,EAASA,EAAOC,iBAActT,EAG/Cw+B,GAAmBjnC,OAAOwnB,sBAC1B0f,GAAiB7lC,EAASA,EAAO8lC,cAAW1+B,EAC5C2+B,IAnEanB,EAmEQjmC,OAAOiG,KAnET2E,EAmEe5K,OAlE7B,SAAS6J,GACd,OAAOo8B,EAAKr7B,EAAUf,MAoEtBw9B,GAAWC,GAAU5pC,EAAM,YAC3B6pC,GAAMD,GAAU5pC,EAAM,OACtBsqB,GAAUsf,GAAU5pC,EAAM,WAC1B8pC,GAAMF,GAAU5pC,EAAM,OACtB+pC,GAAUH,GAAU5pC,EAAM,WAC1BgqC,GAAeJ,GAAUtnC,OAAQ,UAGjC2nC,GAAqBC,GAASP,IAC9BQ,GAAgBD,GAASL,IACzBO,GAAoBF,GAAS5f,IAC7B+f,GAAgBH,GAASJ,IACzBQ,GAAoBJ,GAASH,IAG7BQ,GAAcnsB,EAASA,EAAO7b,eAAYwI,EAC1Cy/B,GAAgBD,GAAcA,GAAYE,aAAU1/B,EASxD,SAAS2/B,GAAKC,GACZ,IAAI9lC,GAAS,EACTtB,EAAoB,MAAXonC,EAAkB,EAAIA,EAAQpnC,OAG3C,IADAS,KAAK4mC,UACI/lC,EAAQtB,GAAQ,CACvB,IAAIsnC,EAAQF,EAAQ9lC,GACpBb,KAAKipB,IAAI4d,EAAM,GAAIA,EAAM,KA+F7B,SAASC,GAAUH,GACjB,IAAI9lC,GAAS,EACTtB,EAAoB,MAAXonC,EAAkB,EAAIA,EAAQpnC,OAG3C,IADAS,KAAK4mC,UACI/lC,EAAQtB,GAAQ,CACvB,IAAIsnC,EAAQF,EAAQ9lC,GACpBb,KAAKipB,IAAI4d,EAAM,GAAIA,EAAM,KA4G7B,SAASE,GAASJ,GAChB,IAAI9lC,GAAS,EACTtB,EAAoB,MAAXonC,EAAkB,EAAIA,EAAQpnC,OAG3C,IADAS,KAAK4mC,UACI/lC,EAAQtB,GAAQ,CACvB,IAAIsnC,EAAQF,EAAQ9lC,GACpBb,KAAKipB,IAAI4d,EAAM,GAAIA,EAAM,KA+F7B,SAASwH,GAAS1iC,GAChB,IAAI9K,GAAS,EACTtB,EAAmB,MAAVoM,EAAiB,EAAIA,EAAOpM,OAGzC,IADAS,KAAKinC,SAAW,IAAIF,KACXlmC,EAAQtB,GACfS,KAAK+jC,IAAIp4B,EAAO9K,IA2CpB,SAASmmC,GAAML,GACb,IAAIryB,EAAOtU,KAAKinC,SAAW,IAAIH,GAAUH,GACzC3mC,KAAKuxB,KAAOjd,EAAKid,KAsInB,SAAS+V,GAAa7lC,EAAOgD,GAE3B,IADA,IAAIlF,EAASkC,EAAMlC,OACZA,KACL,GAAI8nC,GAAG5lC,EAAMlC,GAAQ,GAAIkF,GACvB,OAAOlF,EAGX,OAAQ,EA0BV,SAAS+uC,GAAWzqC,GAClB,OAAa,MAATA,OACekD,IAAVlD,EAt1BQ,qBARL,gBAg2BJuqC,GAAkBA,KAAkB9vC,OAAOuF,GA0arD,SAAmBA,GACjB,IAAI0qC,EAAQn/B,EAAe3Q,KAAKoF,EAAOuqC,GACnCpG,EAAMnkC,EAAMuqC,GAEhB,IACEvqC,EAAMuqC,QAAkBrnC,EACxB,IAAIynC,GAAW,EACf,MAAO9rC,IAET,IAAIuP,EAASk8B,EAAqB1vC,KAAKoF,GAQvC,OAPI2qC,IACED,EACF1qC,EAAMuqC,GAAkBpG,SAEjBnkC,EAAMuqC,IAGVn8B,EA1bHw8B,CAAU5qC,GA4iBhB,SAAwBA,GACtB,OAAOsqC,EAAqB1vC,KAAKoF,GA5iB7BqhC,CAAerhC,GAUrB,SAAS6qC,GAAgB7qC,GACvB,OAAOqnC,GAAarnC,IAAUyqC,GAAWzqC,IAAU49B,EAiBrD,SAASkN,GAAY9qC,EAAOgnC,EAAO+D,EAASlH,EAAYvjB,GACtD,OAAItgB,IAAUgnC,IAGD,MAAThnC,GAA0B,MAATgnC,IAAmBK,GAAarnC,KAAWqnC,GAAaL,GACpEhnC,GAAUA,GAASgnC,GAAUA,EAmBxC,SAAyB1D,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAW1qB,GACtE,IAAI2qB,EAAW1wC,GAAQ+oC,GACnB4H,EAAW3wC,GAAQysC,GACnBmE,EAASF,EAAWrB,EAAWxF,GAAOd,GACtC8H,EAASF,EAAWtB,EAAWxF,GAAO4C,GAKtCqE,GAHJF,EAASA,GAAUvN,EAAUO,EAAYgN,IAGhBhN,EACrBmN,GAHJF,EAASA,GAAUxN,EAAUO,EAAYiN,IAGhBjN,EACrBoN,EAAYJ,GAAUC,EAE1B,GAAIG,GAAa3J,GAAS0B,GAAS,CACjC,IAAK1B,GAASoF,GACZ,OAAO,EAETiE,GAAW,EACXI,GAAW,EAEb,GAAIE,IAAcF,EAEhB,OADA/qB,IAAUA,EAAQ,IAAI6iB,IACd8H,GAAYd,GAAa7G,GAC7BkI,GAAYlI,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAW1qB,GAiKnE,SAAoBgjB,EAAQ0D,EAAO7C,EAAK4G,EAASlH,EAAYmH,EAAW1qB,GACtE,OAAQ6jB,GACN,KAAKxF,EACH,GAAK2E,EAAOvuB,YAAciyB,EAAMjyB,YAC3BuuB,EAAO6B,YAAc6B,EAAM7B,WAC9B,OAAO,EAET7B,EAASA,EAAOnpC,OAChB6sC,EAAQA,EAAM7sC,OAEhB,KAAKukC,EACH,QAAK4E,EAAOvuB,YAAciyB,EAAMjyB,aAC3Bi2B,EAAU,IAAI5wC,EAAWkpC,GAAS,IAAIlpC,EAAW4sC,KAKxD,KAAKnJ,EACL,KAAKC,EACL,KAAKI,EAGH,OAAOsF,IAAIF,GAAS0D,GAEtB,KAAK6C,EACH,OAAOvG,EAAOhlC,MAAQ0oC,EAAM1oC,MAAQglC,EAAOpoC,SAAW8rC,EAAM9rC,QAE9D,KAAKmjC,EACL,KAAKE,EAIH,OAAO+E,GAAW0D,EAAQ,GAE5B,KAAK/I,EACH,IAAIwN,EAAUjL,EAEhB,KAAKlC,EACH,IAAIoN,EAroCiB,EAqoCLX,EAGhB,GAFAU,IAAYA,EAAU9K,GAElB2C,EAAO5V,MAAQsZ,EAAMtZ,OAASge,EAChC,OAAO,EAGT,IAAI7F,EAAUvlB,EAAMhK,IAAIgtB,GACxB,GAAIuC,EACF,OAAOA,GAAWmB,EAEpB+D,GA/oCuB,EAkpCvBzqB,EAAM8E,IAAIke,EAAQ0D,GAClB,IAAI54B,EAASo9B,GAAYC,EAAQnI,GAASmI,EAAQzE,GAAQ+D,EAASlH,EAAYmH,EAAW1qB,GAE1F,OADAA,EAAK,OAAWgjB,GACTl1B,EAET,IAhoCY,kBAioCV,GAAIu0B,GACF,OAAOA,GAAc/nC,KAAK0oC,IAAWX,GAAc/nC,KAAKosC,GAG9D,OAAO,EA9ND2E,CAAWrI,EAAQ0D,EAAOmE,EAAQJ,EAASlH,EAAYmH,EAAW1qB,GAExE,KAj8ByB,EAi8BnByqB,GAAiC,CACrC,IAAIa,EAAeP,GAAY9/B,EAAe3Q,KAAK0oC,EAAQ,eACvDuI,EAAeP,GAAY//B,EAAe3Q,KAAKosC,EAAO,eAE1D,GAAI4E,GAAgBC,EAAc,CAChC,IAAIC,EAAeF,EAAetI,EAAOtjC,QAAUsjC,EAC/CyI,EAAeF,EAAe7E,EAAMhnC,QAAUgnC,EAGlD,OADA1mB,IAAUA,EAAQ,IAAI6iB,IACf6H,EAAUc,EAAcC,EAAchB,EAASlH,EAAYvjB,IAGtE,QAAKirB,IAGLjrB,IAAUA,EAAQ,IAAI6iB,IA6NxB,SAAsBG,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAW1qB,GACnE,IAAIorB,EA9qCqB,EA8qCTX,EACZiB,EAAW7F,GAAW7C,GACtB2I,EAAYD,EAAStwC,OAIzB,GAAIuwC,GAHW9F,GAAWa,GACDtrC,SAEMgwC,EAC7B,OAAO,EAGT,IADA,IAAI1uC,EAAQivC,EACLjvC,KAAS,CACd,IAAI4D,EAAMorC,EAAShvC,GACnB,KAAM0uC,EAAY9qC,KAAOomC,EAAQz7B,EAAe3Q,KAAKosC,EAAOpmC,IAC1D,OAAO,EAIX,IAAIilC,EAAUvlB,EAAMhK,IAAIgtB,GACxB,GAAIuC,GAAWvlB,EAAMhK,IAAI0wB,GACvB,OAAOnB,GAAWmB,EAEpB,IAAI54B,GAAS,EACbkS,EAAM8E,IAAIke,EAAQ0D,GAClB1mB,EAAM8E,IAAI4hB,EAAO1D,GAGjB,IADA,IAAI4I,EAAWR,IACN1uC,EAAQivC,GAAW,CAE1B,IAAI1I,EAAWD,EADf1iC,EAAMorC,EAAShvC,IAEXmvC,EAAWnF,EAAMpmC,GAErB,GAAIijC,EACF,IAAIuI,EAAWV,EACX7H,EAAWsI,EAAU5I,EAAU3iC,EAAKomC,EAAO1D,EAAQhjB,GACnDujB,EAAWN,EAAU4I,EAAUvrC,EAAK0iC,EAAQ0D,EAAO1mB,GAGzD,UAAmBpd,IAAbkpC,EACG7I,IAAa4I,GAAYnB,EAAUzH,EAAU4I,EAAUpB,EAASlH,EAAYvjB,GAC7E8rB,GACD,CACLh+B,GAAS,EACT,MAEF89B,IAAaA,EAAkB,eAAPtrC,GAE1B,GAAIwN,IAAW89B,EAAU,CACvB,IAAIG,EAAU/I,EAAOvoC,YACjBuxC,EAAUtF,EAAMjsC,YAGhBsxC,GAAWC,KACV,gBAAiBhJ,MAAU,gBAAiB0D,IACzB,mBAAXqF,GAAyBA,aAAmBA,GACjC,mBAAXC,GAAyBA,aAAmBA,IACvDl+B,GAAS,GAKb,OAFAkS,EAAK,OAAWgjB,GAChBhjB,EAAK,OAAW0mB,GACT54B,EAzRAm+B,CAAajJ,EAAQ0D,EAAO+D,EAASlH,EAAYmH,EAAW1qB,IA3D5DksB,CAAgBxsC,EAAOgnC,EAAO+D,EAASlH,EAAYiH,GAAaxqB,IA2HzE,SAASkrB,GAAY5tC,EAAOopC,EAAO+D,EAASlH,EAAYmH,EAAW1qB,GACjE,IAAIorB,EAlhCqB,EAkhCTX,EACZ0B,EAAY7uC,EAAMlC,OAClBgxC,EAAY1F,EAAMtrC,OAEtB,GAAI+wC,GAAaC,KAAehB,GAAagB,EAAYD,GACvD,OAAO,EAGT,IAAI5G,EAAUvlB,EAAMhK,IAAI1Y,GACxB,GAAIioC,GAAWvlB,EAAMhK,IAAI0wB,GACvB,OAAOnB,GAAWmB,EAEpB,IAAIhqC,GAAS,EACToR,GAAS,EACTu+B,EA/hCuB,EA+hCf5B,EAAoC,IAAIP,QAAWtnC,EAM/D,IAJAod,EAAM8E,IAAIxnB,EAAOopC,GACjB1mB,EAAM8E,IAAI4hB,EAAOppC,KAGRZ,EAAQyvC,GAAW,CAC1B,IAAIG,EAAWhvC,EAAMZ,GACjBmvC,EAAWnF,EAAMhqC,GAErB,GAAI6mC,EACF,IAAIuI,EAAWV,EACX7H,EAAWsI,EAAUS,EAAU5vC,EAAOgqC,EAAOppC,EAAO0iB,GACpDujB,EAAW+I,EAAUT,EAAUnvC,EAAOY,EAAOopC,EAAO1mB,GAE1D,QAAiBpd,IAAbkpC,EAAwB,CAC1B,GAAIA,EACF,SAEFh+B,GAAS,EACT,MAGF,GAAIu+B,GACF,IAAKvC,EAAUpD,GAAO,SAASmF,EAAUU,GACnC,GA72BajsC,EA62BOisC,GAANF,EA52BXhG,IAAI/lC,KA62BFgsC,IAAaT,GAAYnB,EAAU4B,EAAUT,EAAUpB,EAASlH,EAAYvjB,IAC/E,OAAOqsB,EAAKztC,KAAK2tC,GA/2B/B,IAAyBjsC,KAi3BX,CACNwN,GAAS,EACT,YAEG,GACDw+B,IAAaT,IACXnB,EAAU4B,EAAUT,EAAUpB,EAASlH,EAAYvjB,GACpD,CACLlS,GAAS,EACT,OAKJ,OAFAkS,EAAK,OAAW1iB,GAChB0iB,EAAK,OAAW0mB,GACT54B,EAyKT,SAAS+3B,GAAW7C,GAClB,OApZF,SAAwBA,EAAQyC,EAAUC,GACxC,IAAI53B,EAAS23B,EAASzC,GACtB,OAAO/oC,GAAQ+oC,GAAUl1B,EAhuB3B,SAAmBxQ,EAAOkK,GAKxB,IAJA,IAAI9K,GAAS,EACTtB,EAASoM,EAAOpM,OAChBk0B,EAAShyB,EAAMlC,SAEVsB,EAAQtB,GACfkC,EAAMgyB,EAAS5yB,GAAS8K,EAAO9K,GAEjC,OAAOY,EAwtB2BqoC,CAAU73B,EAAQ43B,EAAY1C,IAkZzD4C,CAAe5C,EAAQ5iC,GAAMikC,IAWtC,SAAS4B,GAAWnjC,EAAKxC,GACvB,IAsHiBZ,EACbrE,EAvHA8U,EAAOrN,EAAIggC,SACf,OAuHgB,WADZznC,SADaqE,EArHAY,KAuHmB,UAARjF,GAA4B,UAARA,GAA4B,WAARA,EACrD,cAAVqE,EACU,OAAVA,GAxHDyQ,EAAmB,iBAAP7P,EAAkB,SAAW,QACzC6P,EAAKrN,IAWX,SAAS2+B,GAAUuB,EAAQ1iC,GACzB,IAAIZ,EAxjCN,SAAkBsjC,EAAQ1iC,GACxB,OAAiB,MAAV0iC,OAAiBpgC,EAAYogC,EAAO1iC,GAujC/B4lC,CAASlD,EAAQ1iC,GAC7B,OArTF,SAAsBZ,GACpB,SAAK8jC,GAAS9jC,IAwahB,SAAkB0gC,GAChB,QAASO,GAAeA,KAAcP,EAzadoM,CAAS9sC,MAGnBymC,GAAWzmC,GAASshC,EAAahC,GAChCl9B,KAAKigC,GAASriC,IAgTtB0mC,CAAa1mC,GAASA,OAAQkD,EAp2BvC2/B,GAAKnoC,UAAUqoC,MAvEf,WACE5mC,KAAKinC,SAAWjB,GAAeA,GAAa,MAAQ,GACpDhmC,KAAKuxB,KAAO,GAsEdmV,GAAKnoC,UAAL,OAzDA,SAAoBkG,GAClB,IAAIwN,EAASjS,KAAKwqC,IAAI/lC,WAAezE,KAAKinC,SAASxiC,GAEnD,OADAzE,KAAKuxB,MAAQtf,EAAS,EAAI,EACnBA,GAuDTy0B,GAAKnoC,UAAU4b,IA3Cf,SAAiB1V,GACf,IAAI6P,EAAOtU,KAAKinC,SAChB,GAAIjB,GAAc,CAChB,IAAI/zB,EAASqC,EAAK7P,GAClB,OAAOwN,IAAWsvB,OAAiBx6B,EAAYkL,EAEjD,OAAO7C,EAAe3Q,KAAK6V,EAAM7P,GAAO6P,EAAK7P,QAAOsC,GAsCtD2/B,GAAKnoC,UAAUisC,IA1Bf,SAAiB/lC,GACf,IAAI6P,EAAOtU,KAAKinC,SAChB,OAAOjB,QAA8Bj/B,IAAduN,EAAK7P,GAAsB2K,EAAe3Q,KAAK6V,EAAM7P,IAyB9EiiC,GAAKnoC,UAAU0qB,IAZf,SAAiBxkB,EAAKZ,GACpB,IAAIyQ,EAAOtU,KAAKinC,SAGhB,OAFAjnC,KAAKuxB,MAAQvxB,KAAKwqC,IAAI/lC,GAAO,EAAI,EACjC6P,EAAK7P,GAAQuhC,SAA0Bj/B,IAAVlD,EAAuB09B,EAAiB19B,EAC9D7D,MAuHT8mC,GAAUvoC,UAAUqoC,MApFpB,WACE5mC,KAAKinC,SAAW,GAChBjnC,KAAKuxB,KAAO,GAmFduV,GAAUvoC,UAAV,OAvEA,SAAyBkG,GACvB,IAAI6P,EAAOtU,KAAKinC,SACZpmC,EAAQymC,GAAahzB,EAAM7P,GAE/B,QAAI5D,EAAQ,IAIRA,GADYyT,EAAK/U,OAAS,EAE5B+U,EAAKqD,MAELpK,EAAO9O,KAAK6V,EAAMzT,EAAO,KAEzBb,KAAKuxB,KACA,KA0DTuV,GAAUvoC,UAAU4b,IA9CpB,SAAsB1V,GACpB,IAAI6P,EAAOtU,KAAKinC,SACZpmC,EAAQymC,GAAahzB,EAAM7P,GAE/B,OAAO5D,EAAQ,OAAIkG,EAAYuN,EAAKzT,GAAO,IA2C7CimC,GAAUvoC,UAAUisC,IA/BpB,SAAsB/lC,GACpB,OAAO6iC,GAAatnC,KAAKinC,SAAUxiC,IAAQ,GA+B7CqiC,GAAUvoC,UAAU0qB,IAlBpB,SAAsBxkB,EAAKZ,GACzB,IAAIyQ,EAAOtU,KAAKinC,SACZpmC,EAAQymC,GAAahzB,EAAM7P,GAQ/B,OANI5D,EAAQ,KACRb,KAAKuxB,KACPjd,EAAKvR,KAAK,CAAC0B,EAAKZ,KAEhByQ,EAAKzT,GAAO,GAAKgD,EAEZ7D,MAyGT+mC,GAASxoC,UAAUqoC,MAtEnB,WACE5mC,KAAKuxB,KAAO,EACZvxB,KAAKinC,SAAW,CACd,KAAQ,IAAIP,GACZ,IAAO,IAAKb,IAAOiB,IACnB,OAAU,IAAIJ,KAkElBK,GAASxoC,UAAT,OArDA,SAAwBkG,GACtB,IAAIwN,EAASm4B,GAAWpqC,KAAMyE,GAAjB,OAAgCA,GAE7C,OADAzE,KAAKuxB,MAAQtf,EAAS,EAAI,EACnBA,GAmDT80B,GAASxoC,UAAU4b,IAvCnB,SAAqB1V,GACnB,OAAO2lC,GAAWpqC,KAAMyE,GAAK0V,IAAI1V,IAuCnCsiC,GAASxoC,UAAUisC,IA3BnB,SAAqB/lC,GACnB,OAAO2lC,GAAWpqC,KAAMyE,GAAK+lC,IAAI/lC,IA2BnCsiC,GAASxoC,UAAU0qB,IAdnB,SAAqBxkB,EAAKZ,GACxB,IAAIyQ,EAAO81B,GAAWpqC,KAAMyE,GACxB8sB,EAAOjd,EAAKid,KAIhB,OAFAjd,EAAK2U,IAAIxkB,EAAKZ,GACd7D,KAAKuxB,MAAQjd,EAAKid,MAAQA,EAAO,EAAI,EAC9BvxB,MAyDTquC,GAAS9vC,UAAUwlC,IAAMsK,GAAS9vC,UAAUwE,KAnB5C,SAAqBc,GAEnB,OADA7D,KAAKinC,SAAShe,IAAIplB,EAAO09B,GAClBvhC,MAkBTquC,GAAS9vC,UAAUisC,IANnB,SAAqB3mC,GACnB,OAAO7D,KAAKinC,SAASuD,IAAI3mC,IAqG3BmjC,GAAMzoC,UAAUqoC,MA3EhB,WACE5mC,KAAKinC,SAAW,IAAIH,GACpB9mC,KAAKuxB,KAAO,GA0EdyV,GAAMzoC,UAAN,OA9DA,SAAqBkG,GACnB,IAAI6P,EAAOtU,KAAKinC,SACZh1B,EAASqC,EAAI,OAAW7P,GAG5B,OADAzE,KAAKuxB,KAAOjd,EAAKid,KACVtf,GA0DT+0B,GAAMzoC,UAAU4b,IA9ChB,SAAkB1V,GAChB,OAAOzE,KAAKinC,SAAS9sB,IAAI1V,IA8C3BuiC,GAAMzoC,UAAUisC,IAlChB,SAAkB/lC,GAChB,OAAOzE,KAAKinC,SAASuD,IAAI/lC,IAkC3BuiC,GAAMzoC,UAAU0qB,IArBhB,SAAkBxkB,EAAKZ,GACrB,IAAIyQ,EAAOtU,KAAKinC,SAChB,GAAI3yB,aAAgBwyB,GAAW,CAC7B,IAAI4D,EAAQp2B,EAAK2yB,SACjB,IAAKpB,IAAQ6E,EAAMnrC,OAASorC,IAG1B,OAFAD,EAAM3nC,KAAK,CAAC0B,EAAKZ,IACjB7D,KAAKuxB,OAASjd,EAAKid,KACZvxB,KAETsU,EAAOtU,KAAKinC,SAAW,IAAIF,GAAS2D,GAItC,OAFAp2B,EAAK2U,IAAIxkB,EAAKZ,GACd7D,KAAKuxB,KAAOjd,EAAKid,KACVvxB,MA+hBT,IAAIwoC,GAAcjD,GAA+B,SAAS4B,GACxD,OAAc,MAAVA,EACK,IAETA,EAAS7oC,OAAO6oC,GA9sClB,SAAqB1lC,EAAOysC,GAM1B,IALA,IAAIrtC,GAAS,EACTtB,EAAkB,MAATkC,EAAgB,EAAIA,EAAMlC,OACnCqxC,EAAW,EACX3+B,EAAS,KAEJpR,EAAQtB,GAAQ,CACvB,IAAIsE,EAAQpC,EAAMZ,GAwsCkC+nC,EAvsCtC/kC,EAwsCPyhC,EAAqB7mC,KAAK0oC,EAAQyB,KAvsCvC32B,EAAO2+B,KAAc/sC,GAssCoB,IAAS+kC,EAnsCtD,OAAO32B,EAmsCA4+B,CAAYtL,GAAiB4B,MAudtC,WACE,MAAO,IA5cLc,GAASqG,GAkCb,SAAS1D,GAAQ/mC,EAAOtE,GAEtB,SADAA,EAAmB,MAAVA,EAAiBiiC,EAAmBjiC,KAE1B,iBAATsE,GAAqBu/B,EAASn9B,KAAKpC,KAC1CA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQtE,EA4D7C,SAAS2mC,GAAS3B,GAChB,GAAY,MAARA,EAAc,CAChB,IACE,OAAOU,EAAaxmC,KAAK8lC,GACzB,MAAO7hC,IACT,IACE,OAAQ6hC,EAAO,GACf,MAAO7hC,KAEX,MAAO,GAmCT,SAAS2kC,GAAGxjC,EAAOgnC,GACjB,OAAOhnC,IAAUgnC,GAAUhnC,GAAUA,GAASgnC,GAAUA,GA5IrDlF,IAAYsC,GAAO,IAAItC,GAAS,IAAIpoC,YAAY,MAAQilC,GACxDqD,IAAOoC,GAAO,IAAIpC,KAAQ/D,GAC1Bxb,IAAW2hB,GAAO3hB,GAAQC,YAAc0b,GACxC6D,IAAOmC,GAAO,IAAInC,KAAQ3D,GAC1B4D,IAAWkC,GAAO,IAAIlC,KAAYzD,KACrC2F,GAAS,SAASpkC,GAChB,IAAIoO,EAASq8B,GAAWzqC,GACpBglC,EAAO52B,GAAU+vB,EAAYn+B,EAAMjF,iBAAcmI,EACjD+jC,EAAajC,EAAO3C,GAAS2C,GAAQ,GAEzC,GAAIiC,EACF,OAAQA,GACN,KAAK7E,GAAoB,OAAOzD,EAChC,KAAK2D,GAAe,OAAOrE,EAC3B,KAAKsE,GAAmB,OAAOnE,EAC/B,KAAKoE,GAAe,OAAOlE,EAC3B,KAAKmE,GAAmB,OAAOhE,EAGnC,OAAOrwB,IA8IX,IAAIm5B,GAAcsD,GAAgB,WAAa,OAAO3mC,UAApB,IAAsC2mC,GAAkB,SAAS7qC,GACjG,OAAOqnC,GAAarnC,IAAUuL,EAAe3Q,KAAKoF,EAAO,YACtDyhC,EAAqB7mC,KAAKoF,EAAO,WA0BlCzF,GAAUD,MAAMC,QAgDhBqnC,GAAWD,IA4Of,WACE,OAAO,GA1LT,SAAS8E,GAAWzmC,GAClB,IAAK8jC,GAAS9jC,GACZ,OAAO,EAIT,IAAImkC,EAAMsG,GAAWzqC,GACrB,OAAOmkC,GAAOpG,GAnmDH,8BAmmDcoG,GAxmDZ,0BAwmD6BA,GA7lD7B,kBA6lDgDA,EA6B/D,SAASgD,GAASnnC,GAChB,MAAuB,iBAATA,GACZA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,GAAS29B,EA4B7C,SAASmG,GAAS9jC,GAChB,IAAIrE,SAAcqE,EAClB,OAAgB,MAATA,IAA0B,UAARrE,GAA4B,YAARA,GA2B/C,SAAS0rC,GAAarnC,GACpB,OAAgB,MAATA,GAAiC,iBAATA,EAoBjC,IAAImqC,GAAeD,EAhiDnB,SAAmBxJ,GACjB,OAAO,SAAS1gC,GACd,OAAO0gC,EAAK1gC,IA8hDsBitC,CAAU/C,GAnvBhD,SAA0BlqC,GACxB,OAAOqnC,GAAarnC,IAClBmnC,GAASnnC,EAAMtE,WAAaouC,EAAeW,GAAWzqC,KA+wB1D,SAASU,GAAK4iC,GACZ,OA1NgB,OADGtjC,EA2NAsjC,IA1NK6D,GAASnnC,EAAMtE,UAAY+qC,GAAWzmC,GA1vBhE,SAAuBA,EAAOonC,GAC5B,IAAIrD,EAAQxpC,GAAQyF,GAChBktC,GAASnJ,GAASwD,GAAYvnC,GAC9BmtC,GAAUpJ,IAAUmJ,GAAStL,GAAS5hC,GACtCotC,GAAUrJ,IAAUmJ,IAAUC,GAAUhD,GAAanqC,GACrDynC,EAAc1D,GAASmJ,GAASC,GAAUC,EAC1Ch/B,EAASq5B,EAloBf,SAAmBhjC,EAAG27B,GAIpB,IAHA,IAAIpjC,GAAS,EACToR,EAAS9T,MAAMmK,KAEVzH,EAAQyH,GACf2J,EAAOpR,GAASojC,EAASpjC,GAE3B,OAAOoR,EA2nBoBo5B,CAAUxnC,EAAMtE,OAAQ+F,QAAU,GACzD/F,EAAS0S,EAAO1S,OAEpB,IAAK,IAAIkF,KAAOZ,GACTonC,IAAa77B,EAAe3Q,KAAKoF,EAAOY,IACvC6mC,IAEQ,UAAP7mC,GAECusC,IAAkB,UAAPvsC,GAA0B,UAAPA,IAE9BwsC,IAAkB,UAAPxsC,GAA0B,cAAPA,GAA8B,cAAPA,IAEtDmmC,GAAQnmC,EAAKlF,KAElB0S,EAAOlP,KAAK0B,GAGhB,OAAOwN,EA47BsBs5B,CAAcpE,GAtwB7C,SAAkBA,GAChB,GAyZI0B,GADehlC,EAxZFsjC,IAyZGtjC,EAAMjF,YAGnBiF,KAFqB,mBAARglC,GAAsBA,EAAKtqC,WAAcqmC,GAzZ3D,OAAOc,GAAWyB,GAuZtB,IAAqBtjC,EACfglC,EAtZA52B,EAAS,GACb,IAAK,IAAIxN,KAAOnG,OAAO6oC,GACjB/3B,EAAe3Q,KAAK0oC,EAAQ1iC,IAAe,eAAPA,GACtCwN,EAAOlP,KAAK0B,GAGhB,OAAOwN,EA4vB8Cu5B,CAASrE,GA3NhE,IAAqBtjC,EAqQrB1H,EAAOD,QAlNP,SAAiB2H,EAAOgnC,GACtB,OAAO8D,GAAY9qC,EAAOgnC,cCtmD5B,IAAI5oC,EAAU9F,EAAOD,QAAU,CAC7BgG,EAAG,CAAC,CACFC,KAAM,UACNC,IAAK,YAEPC,EAAG,CAAC,CAEFF,KAAM,SACNC,IAAK,wCACLE,MAAO,CAAC,WAAY,YAAa,iBAAkB,UAAW,QAAS,WACvEC,OAAQ,wBAGVC,EAAG,CAAC,CAAEL,KAAM,SACZ7C,EAAG,CAAC,CAAE6C,KAAM,gBACZM,EAAG,CAAC,CAAEN,KAAM,QACZO,EAAG,CAAC,CAAEP,KAAM,UACZQ,EAAG,CAAC,CAAER,KAAM,UACZS,EAAG,CAAC,CAAET,KAAM,cACZU,EAAG,CAAC,CAAEV,KAAM,YAEZW,EAAG,CAAC,CACFX,KAAM,SACNC,IAAK,eACLE,MAAO,CAAC,QAAS,QACjBC,OAAQ,UAEVnB,EAAG,CAAC,CACFe,KAAM,aACNC,IAAK,mBACLE,MAAO,CAAC,UAAW,MACnBC,OAAQ,eAEVpB,EAAG,CAAC,CACF4B,KAAM,YACNX,IAAK,4BACLE,MAAO,CAAC,OAAQ,SAChBC,OAAQ,UAEVS,EAAG,CAAC,CAGFZ,IAAK,mCACLE,MAAO,CAAC,OAAQ,OAAQ,WAAY,YACpCC,OAAQ,gBAEVrB,EAAG,CACD,CACE6B,KAAM,MACNX,IAAK,0DACLE,MAAO,CAAC,UAAW,QAAS,OAAQ,YACpCC,OAAQ,SAAUF,GAChB,OAAQA,EAAEY,SACR,qBACAZ,EAAEa,KACF,kBACA,iBAGN,CAEEH,KAAM,OACNX,IAAK,wBACLE,MAAO,CAAC,UAAW,UACnBC,OAAQ,cAEV,CACEJ,KAAM,UACNC,IAAK,gBACLG,OAAQ,cAEV,CACEJ,KAAM,OACNC,IAAK,sCACLE,MAAO,CAAC,OAAQ,UAAW,QAAS,WACpCC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEc,QACR,qBACA,YAGN,CACEJ,KAAM,eACNX,IAAK,kCACLE,MAAO,CAAC,UAAW,SACnBC,OAAQ,yBAEV,CACEQ,KAAM,SACNX,IAAK,6CACLE,MAAO,CAAC,UAAW,OAAQ,WAC3BC,OAAQ,SAAUF,GAChB,OAAqB,MAAbA,EAAEe,QACR,mBACA,kBAGN,CAEEL,KAAM,MACNX,IAAK,6CACLE,MAAO,CAAC,QAAS,YAAa,MAAO,UACrCC,OAAQ,SAAUF,GAChB,MAAO,aAAeA,EAAEgB,UAAY,MAAQ,MAAQ,OAAShB,EAAEiB,OAAS,MAAQ,MAGpF,CACEP,KAAM,SACNX,IAAK,0CACLE,MAAO,CAAC,KAAM,QAAS,SAAU,iBACjCC,OAAQ,SAAUF,GAChB,OAA2B,MAAnBA,EAAEkB,cACR,qBACA,oBAGN,CACEpB,KAAM,QACNC,IAAK,eACLG,OAAQ,YAEV,CACEJ,KAAM,MACNC,IAAK,gBACLG,OAAQ,UAEV,CACEJ,KAAM,OACNC,IAAK,aACLG,OAAQ,WAEV,CACEJ,KAAM,QACNC,IAAK,eACLG,OAAQ,YAEV,CACEJ,KAAM,WACNC,IAAK,kBACLG,OAAQ,eAEV,CACEJ,KAAM,YACNC,IAAK,0CAEP,CACED,KAAM,UACNC,IAAK,eAEP,CACED,KAAM,WACNC,IAAK,mBACLG,OAAQ,gBAEV,CACEJ,KAAM,SACNC,IAAK,iBACLG,OAAQ,cAEV,CACEJ,KAAM,cACNC,IAAK,2BACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,qBAEV,CAKEQ,KAAK,aACLX,IAAK,+KACLE,MAAO,CAAC,aAAc,YAAa,YAAa,WAAY,KAAM,OAAQ,OAAQ,QAAS,QAAS,UAAW,aAAc,aAAc,gBAC3IC,OAAQ,SAAUF,GAChB,IAAImB,EAAM,qCAaV,OAXAA,GAAmB,MAAXnB,EAAEoB,MAAiB,qBAAuB,OAGlDD,GAAqB,MAAbnB,EAAEqB,QAAmB,cAAgB,KAEzB,MAAhBrB,EAAEsB,aACJH,GAAO,mBAGTA,GAA2B,MAAnBnB,EAAE,cAAyB,iBAAmB,OACzB,MAArBA,EAAE,gBAA2B,mBAAqB,QAI9D,CACEF,KAAM,kBACNC,IAAK,wBAEP,CACED,KAAM,mBACNC,IAAK,0BACLG,OAAQ,wBAEV,CACEJ,KAAM,aACNC,IAAK,qBACLG,OAAQ,kBAEV,CACEQ,KAAM,QACNX,IAAK,iCACLE,MAAO,CAAC,KAAM,YAAa,SAC3BC,OAAQ,SAAUF,GAChB,IAAImB,EAAM,UAOV,OANmB,MAAfnB,EAAEuB,YACJJ,GAAO,MACQ,MAAXnB,EAAEwB,QACJL,GAAO,QAGJA,IAGX,CAEET,KAAM,aAENX,IAAK,mEACLE,MAAO,CAAC,YAAa,SACrBC,OAAQ,oBAEV,CACEJ,KAAM,eACNC,IAAK,gCACLE,MAAO,CAAC,WAAY,SACpBC,OAAQ,wBAEV,CACEQ,KAAM,SACNX,IAAK,oBACLE,MAAO,CAAC,OAAQ,QAChBC,OAAQ,eAEV,CACEJ,KAAM,UACNC,IAAK,eAEP,CACED,KAAM,YACNC,IAAK,iBAEP,CACED,KAAM,UACNC,IAAK,uCACLE,MAAO,CAAC,gBAAiB,MAAO,kBAChCC,OAAQ,SAAUF,GAChB,OAA4B,MAApBA,EAAEyB,eACR,mBACA,kBAGN,CACE3B,KAAM,cACNC,IAAK,0BACLG,OAAQ,oBAEV,CACEQ,KAAM,OACNX,IAAK,sCACLE,MAAO,CAAC,KAAM,YAAa,UAC3BC,OAAQ,SAAUF,GAChB,OAAQA,EAAE0B,OAAU,eAAiB,cAGzC,CAGEhB,KAAM,aACNX,IAAK,IAAI4B,OAEP,wKAMF1B,MAAO,CAAC,KAAM,OAAQ,SAAU,OAAQ,UACxCC,OAAQ,SAAUF,GAChB,MAAO,sBAAwBA,EAAE4B,KAAO,SAAW,MAGvD,CAEE9B,KAAM,YACNC,IAAK,IAAI4B,OAEP,2FAQF1B,MAAO,CAAC,OAAQ,QAAS,OAAQ,SACjCC,OAAQ,SAAUF,GAChB,MAAO,mBAAqBA,EAAE4B,KAAO,SAAW,MAGpD,CAIE9B,KAAM,eACNC,IAAK,kCACLE,MAAO,CAAC,SACRC,OAAQ,iBAEV,CAGEJ,KAAM,YACNC,IAAK,8BACLG,OAAQ,gBAEV,CACEQ,KAAM,UACNT,MAAO,CAAC,YAMdhE,OAAOiG,KAAKtC,GAASuC,SAAQ,SAAUC,GAC1BxC,EAAQwC,GACdD,SAAQ,SAAUnG,GAChBA,EAAI+D,MACP/D,EAAI+D,IAAM,QAEP/D,EAAIkE,SACPlE,EAAIkE,OAAS,4BChVnB,IAAImC,EAASC,EAAQ,MACjBC,EAASD,EAAQ,MAErBzI,EAAQ2I,MAAQD,EAChB1I,EAAQ4I,MAAQJ,EAAOI,MACvB5I,EAAQ8I,gBAAkBN,EAAOM,gBACjC9I,EAAQ6I,YAAcL,EAAOK,YAC7B7I,EAAQ+I,cAAgBP,EAAOO,cAC/B/I,EAAQgJ,sBAAwBR,EAAOQ,sBACvChJ,EAAQiJ,qBAAuBT,EAAOS,qBACtCjJ,EAAQkJ,yBAA2BV,EAAOU,yCCV1C,IAAIC,EAAa,SAAUnD,GACzB,OAAOoD,OAAOC,OAAOrD,MAAQA,EAAIqD,OAAOrD,GAAKA,GAgB3CsD,EAAW,SAAUnH,EAAKoH,EAAUC,GACtC,IAAIC,EAAatH,EAAI8D,MAAQ9D,EAAIiE,MAC7BjE,EAAI0E,OAAS0C,EAASpH,EAAI0E,MAC5B0C,EAASpH,EAAI0E,MAAQ,GAEd4C,IAAeF,EAASpH,EAAI8D,QACnCsD,EAASpH,EAAI8D,MAAQ,IAEvB,IAAIyD,EAAcvH,EAAI0E,KACpB,GACA4C,EAAaF,EAASpH,EAAI8D,MAAQsD,GAvBf,SAAUI,EAAOJ,EAAUnD,EAAOwD,GACvD,GAAIA,IAAYxD,EACdmD,EAASK,GAAWT,EAAWQ,EAAM,SAGrC,IAAK,IAAIvG,EAAI,EAAGA,EAAIgD,EAAM/C,OAAQD,GAAK,EACnB,MAAduG,EAAMvG,EAAE,KACVmG,EAASnD,EAAMhD,IAAM+F,EAAWQ,EAAMvG,EAAE,KAkB9CyG,CAAiBL,EAAQG,MAAMxH,EAAI+D,KAAMwD,EAAavH,EAAIiE,MAAOjE,EAAI8D,MAEjE9D,EAAI0E,MACN0C,EAASpH,EAAI0E,MAAMA,KAAK6C,IAIxB3D,EAAU0C,EAAQ,MAClBqB,EAAYhC,OAAOzF,UAAU0H,KAAKC,KAAK,iBAE3ChK,EAAQ4I,MAAQ,SAAUqB,GACxB,IAAIC,EAAU,GACVC,EAAQ,GACRZ,EAAWW,EAoBf,OAjBAD,EAAI1I,MAAM,gBAAgB6I,OAAON,GAAWxB,SAAQ,SAAU+B,GAC5D,IAAI/G,EAAO+G,EAAE,GACTb,EAAUa,EAAEC,MAAM,GACT,MAAThH,IACF6G,EAAMtD,KAAK,CAAC0D,IAAK,GAAIC,KAAM,KAC3BjB,EAAWY,EAAMA,EAAM9G,OAAO,IAGhC,IAAK,IAAIoH,EAAI,EAAGA,GAAK1E,EAAQzC,IAAS,IAAID,OAAQoH,GAAK,EAAG,CACxD,IAAItI,EAAM4D,EAAQzC,GAAMmH,GACxB,GAAItI,EAAI+D,IAAI6D,KAAKP,GACf,OAAOF,EAASnH,EAAKoH,EAAUC,OAKrCU,EAAQC,MAAQA,EACTD,GAGT,IAAIQ,EAAe,SAAUC,EAAKC,GAChC,IAAItE,EAAIsE,EAAKrJ,MAAM,QAAS,GAI5B,OAHiB,IAAb+E,EAAEjD,SACJsH,EAAIrE,EAAE,IAAM6C,EAAW7C,EAAE,KAEpBqE,GAGT3K,EAAQ6I,YAAc,SAAUvB,GAC9B,OAAOA,EAAI/F,MAAM,SAASuJ,OAAOJ,EAAc,KAIjD1K,EAAQ8I,gBAAkB9I,EAAQ6I,YAElC7I,EAAQ+I,cAAgB,SAAUzB,GAChC,OAAOA,EAAI/F,MAAM,KAAKwJ,IAAI1B,SAG5BrJ,EAAQgJ,sBAAwB,SAAU1B,GAGxC,IAFA,IAAI0D,EAAa,GACbC,EAAQ3D,EAAI/F,MAAM,KAAKwJ,IAAI5B,GACtB/F,EAAI,EAAGA,EAAI6H,EAAM5H,OAAQD,GAAK,EACrC4H,EAAWnE,KAAK,CACdqE,UAAWD,EAAM7H,GACjB+H,GAAIF,EAAM7H,EAAI,GACdgI,KAAMH,EAAM7H,EAAI,KAGpB,OAAO4H,GAGThL,EAAQiJ,qBAAuB,SAAU3B,GACvC,OAAOA,EAAI/F,MAAM,KAAKwJ,KAAI,SAAUM,GAClC,OAAOA,EAAKC,UAAU,EAAGD,EAAKhI,OAAO,GAAG9B,MAAM,KAAKuJ,OAAOJ,EAAc,QAI5E1K,EAAQkJ,yBAA2B,SAAU5B,GAC3C,OAAOA,EAAI/F,MAAM,KAAKwJ,KAAI,SAAUQ,GAClC,OAAOA,EAAOhK,MAAM,KAAKwJ,KAAI,SAAU1E,GACrC,IAAImF,EAAMC,GAAS,EASnB,MAPkB,MAAdpF,EAAO,GACTmF,EAAOrC,EAAW9C,IAElBmF,EAAOrC,EAAW9C,EAAOiF,UAAU,EAAGjF,EAAOhD,SAC7CoI,GAAS,GAGJ,CACLD,KAAMA,EACNC,OAAQA,0BCrHhB,IAAI1F,EAAU0C,EAAQ,MAGlBiD,EAAe,WACfrF,EAAS,SAAUsF,GACrB,IAAIvI,EAAI,EACJwI,EAAOC,UACPC,EAAMF,EAAKvI,OACf,OAAOsI,EAAUI,QAAQL,GAAc,SAAUM,GAC/C,GAAI5I,GAAK0I,EACP,OAAOE,EAET,IAAIC,EAAML,EAAKxI,GAEf,OADAA,GAAK,EACG4I,GACR,IAAK,KACH,MAAO,IACT,IAAK,KACH,OAAO5C,OAAO6C,GAChB,IAAK,KACH,OAAO5C,OAAO4C,GAChB,IAAK,KACH,MAAO,QAMTC,EAAW,SAAU5I,EAAMnB,EAAKoH,GAClC,IAIIqC,EAAO,CAACtI,EAAO,KAJTnB,EAAIkE,kBAAkB8F,SAC7BhK,EAAIkE,OAAOlE,EAAI0E,KAAO0C,EAAWA,EAASpH,EAAI8D,OAC/C9D,EAAIkE,SAGN,GAAIlE,EAAIiE,MACN,IAAK,IAAIhD,EAAI,EAAGA,EAAIjB,EAAIiE,MAAM/C,OAAQD,GAAK,EAAG,CAC5C,IAAIgJ,EAAIjK,EAAIiE,MAAMhD,GACdjB,EAAI8D,KACN2F,EAAK/E,KAAK0C,EAASpH,EAAI8D,MAAMmG,IAG7BR,EAAK/E,KAAK0C,EAASpH,EAAIiE,MAAMhD,UAKjCwI,EAAK/E,KAAK0C,EAASpH,EAAI8D,OAEzB,OAAOI,EAAOgG,MAAM,KAAMT,IAKxBU,EAAoB,CACtB,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,KAElBC,EAAoB,CAAC,IAAK,IAAK,IAAK,KAGxCtM,EAAOD,QAAU,SAAUkK,EAASsC,GAClCA,EAAOA,GAAQ,GAEQ,MAAnBtC,EAAQuC,UACVvC,EAAQuC,QAAU,GAEA,MAAhBvC,EAAQjE,OACViE,EAAQjE,KAAO,KAEjBiE,EAAQC,MAAM7B,SAAQ,SAAUoE,GACR,MAAlBA,EAAMC,WACRD,EAAMC,SAAW,OAIrB,IAAIC,EAAaJ,EAAKI,YAAcN,EAChCO,EAAaL,EAAKK,YAAcN,EAChCtC,EAAM,GAkCV,OA/BA2C,EAAWtE,SAAQ,SAAUhF,GAC3ByC,EAAQzC,GAAMgF,SAAQ,SAAUnG,GAC1BA,EAAI8D,QAAQiE,GAAgC,MAArBA,EAAQ/H,EAAI8D,MACrCgE,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAK+H,IAEtB/H,EAAI0E,QAAQqD,GAAgC,MAArBA,EAAQ/H,EAAI0E,OAC1CqD,EAAQ/H,EAAI0E,MAAMyB,SAAQ,SAAUwE,GAClC7C,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAK2K,aAOrC5C,EAAQC,MAAM7B,SAAQ,SAAUoE,GAC9BzC,EAAIpD,KAAKqF,EAAS,IAAKnG,EAAQe,EAAE,GAAI4F,IAErCG,EAAWvE,SAAQ,SAAUhF,GAC3ByC,EAAQzC,GAAMgF,SAAQ,SAAUnG,GAC1BA,EAAI8D,QAAQyG,GAA4B,MAAnBA,EAAMvK,EAAI8D,MACjCgE,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAKuK,IAEtBvK,EAAI0E,QAAQ6F,GAA4B,MAAnBA,EAAMvK,EAAI0E,OACtC6F,EAAMvK,EAAI0E,MAAMyB,SAAQ,SAAUwE,GAChC7C,EAAIpD,KAAKqF,EAAS5I,EAAMnB,EAAK2K,gBAOhC7C,EAAI8C,KAAK,QAAU,+BC5G5B,MAAMioC,EAAW,CAIjBA,mBAA8B,WAC5B,OAAO5kC,KAAKE,SAAShO,SAAS,IAAIokB,OAAO,EAAG,MAI9CsuB,EAASC,WAAaD,EAASE,qBAG/BF,EAASG,WAAa,SAASrf,GAC7B,OAAOA,EAAKsf,OAAO7zC,MAAM,MAAMwJ,KAAI4lB,GAAQA,EAAKykB,UAGlDJ,EAASK,cAAgB,SAASvf,GAEhC,OADcA,EAAKv0B,MAAM,QACZwJ,KAAI,CAACuqC,EAAM3wC,KAAWA,EAAQ,EACzC,KAAO2wC,EAAOA,GAAMF,OAAS,UAIjCJ,EAASO,eAAiB,SAASzf,GACjC,MAAM0f,EAAWR,EAASK,cAAcvf,GACxC,OAAO0f,GAAYA,EAAS,IAI9BR,EAASS,iBAAmB,SAAS3f,GACnC,MAAM0f,EAAWR,EAASK,cAAcvf,GAExC,OADA0f,EAASz7B,QACFy7B,GAITR,EAASU,YAAc,SAAS5f,EAAM6f,GACpC,OAAOX,EAASG,WAAWrf,GAAM1rB,QAAOumB,GAAiC,IAAzBA,EAAKjhB,QAAQimC,MAO/DX,EAASY,eAAiB,SAASjlB,GACjC,IAAI1lB,EAGFA,EADmC,IAAjC0lB,EAAKjhB,QAAQ,gBACPihB,EAAKrlB,UAAU,IAAI/J,MAAM,KAEzBovB,EAAKrlB,UAAU,IAAI/J,MAAM,KAGnC,MAAMs0C,EAAY,CAChBC,WAAY7qC,EAAM,GAClBC,UAAW,CAAC,EAAG,MAAO,EAAG,QAAQD,EAAM,KAAOA,EAAM,GACpD8qC,SAAU9qC,EAAM,GAAGma,cACnB/K,SAAUzL,SAAS3D,EAAM,GAAI,IAC7BE,GAAIF,EAAM,GACVhE,QAASgE,EAAM,GACfG,KAAMwD,SAAS3D,EAAM,GAAI,IAEzB3H,KAAM2H,EAAM,IAGd,IAAK,IAAI7H,EAAI,EAAGA,EAAI6H,EAAM5H,OAAQD,GAAK,EACrC,OAAQ6H,EAAM7H,IACZ,IAAK,QACHyyC,EAAUG,eAAiB/qC,EAAM7H,EAAI,GACrC,MACF,IAAK,QACHyyC,EAAUI,YAAcrnC,SAAS3D,EAAM7H,EAAI,GAAI,IAC/C,MACF,IAAK,UACHyyC,EAAUK,QAAUjrC,EAAM7H,EAAI,GAC9B,MACF,IAAK,QACHyyC,EAAUM,MAAQlrC,EAAM7H,EAAI,GAC5ByyC,EAAUO,iBAAmBnrC,EAAM7H,EAAI,GACvC,MACF,aAC8ByH,IAAxBgrC,EAAU5qC,EAAM7H,MAClByyC,EAAU5qC,EAAM7H,IAAM6H,EAAM7H,EAAI,IAKxC,OAAOyyC,GAKTb,EAASqB,eAAiB,SAASR,GACjC,MAAM5rC,EAAM,GACZA,EAAIpD,KAAKgvC,EAAUC,YAEnB,MAAM5qC,EAAY2qC,EAAU3qC,UACV,QAAdA,EACFjB,EAAIpD,KAAK,GACc,SAAdqE,EACTjB,EAAIpD,KAAK,GAEToD,EAAIpD,KAAKqE,GAEXjB,EAAIpD,KAAKgvC,EAAUE,SAASO,eAC5BrsC,EAAIpD,KAAKgvC,EAAUx7B,UACnBpQ,EAAIpD,KAAKgvC,EAAU5uC,SAAW4uC,EAAU1qC,IACxClB,EAAIpD,KAAKgvC,EAAUzqC,MAEnB,MAAM9H,EAAOuyC,EAAUvyC,KAkBvB,OAjBA2G,EAAIpD,KAAK,OACToD,EAAIpD,KAAKvD,GACI,SAATA,GAAmBuyC,EAAUG,gBAC7BH,EAAUI,cACZhsC,EAAIpD,KAAK,SACToD,EAAIpD,KAAKgvC,EAAUG,gBACnB/rC,EAAIpD,KAAK,SACToD,EAAIpD,KAAKgvC,EAAUI,cAEjBJ,EAAUK,SAAgD,QAArCL,EAAUE,SAAS3wB,gBAC1Cnb,EAAIpD,KAAK,WACToD,EAAIpD,KAAKgvC,EAAUK,WAEjBL,EAAUO,kBAAoBP,EAAUM,SAC1ClsC,EAAIpD,KAAK,SACToD,EAAIpD,KAAKgvC,EAAUO,kBAAoBP,EAAUM,QAE5C,aAAelsC,EAAI8C,KAAK,MAMjCioC,EAASuB,gBAAkB,SAAS5lB,GAClC,OAAOA,EAAKjK,OAAO,IAAInlB,MAAM,MAK/ByzC,EAASwB,YAAc,SAAS7lB,GAC9B,IAAI1lB,EAAQ0lB,EAAKjK,OAAO,GAAGnlB,MAAM,KACjC,MAAMk1C,EAAS,CACbC,YAAa9nC,SAAS3D,EAAM8O,QAAS,KAUvC,OAPA9O,EAAQA,EAAM,GAAG1J,MAAM,KAEvBk1C,EAAOxwC,KAAOgF,EAAM,GACpBwrC,EAAOE,UAAY/nC,SAAS3D,EAAM,GAAI,IACtCwrC,EAAOG,SAA4B,IAAjB3rC,EAAM5H,OAAeuL,SAAS3D,EAAM,GAAI,IAAM,EAEhEwrC,EAAOI,YAAcJ,EAAOG,SACrBH,GAKTzB,EAAS8B,YAAc,SAASC,GAC9B,IAAIC,EAAKD,EAAML,iBACoB7rC,IAA/BksC,EAAME,uBACRD,EAAKD,EAAME,sBAEb,MAAML,EAAWG,EAAMH,UAAYG,EAAMF,aAAe,EACxD,MAAO,YAAcG,EAAK,IAAMD,EAAM9wC,KAAO,IAAM8wC,EAAMJ,WACvC,IAAbC,EAAiB,IAAMA,EAAW,IAAM,QAM/C5B,EAASkC,YAAc,SAASvmB,GAC9B,MAAM1lB,EAAQ0lB,EAAKjK,OAAO,GAAGnlB,MAAM,KACnC,MAAO,CACL0G,GAAI2G,SAAS3D,EAAM,GAAI,IACvB9D,UAAW8D,EAAM,GAAGyE,QAAQ,KAAO,EAAIzE,EAAM,GAAG1J,MAAM,KAAK,GAAK,WAChE41C,IAAKlsC,EAAM,KAMf+pC,EAASoC,YAAc,SAASC,GAC9B,MAAO,aAAeA,EAAgBpvC,IAAMovC,EAAgBC,cACvDD,EAAgBlwC,WAA2C,aAA9BkwC,EAAgBlwC,UAC1C,IAAMkwC,EAAgBlwC,UACtB,IACJ,IAAMkwC,EAAgBF,IAAM,QAMlCnC,EAASuC,UAAY,SAAS5mB,GAC5B,MAAM8lB,EAAS,GACf,IAAIe,EACJ,MAAMvsC,EAAQ0lB,EAAKjK,OAAOiK,EAAKjhB,QAAQ,KAAO,GAAGnO,MAAM,KACvD,IAAK,IAAIkJ,EAAI,EAAGA,EAAIQ,EAAM5H,OAAQoH,IAChC+sC,EAAKvsC,EAAMR,GAAG2qC,OAAO7zC,MAAM,KAC3Bk1C,EAAOe,EAAG,GAAGpC,QAAUoC,EAAG,GAE5B,OAAOf,GAITzB,EAASyC,UAAY,SAASV,GAC5B,IAAIpmB,EAAO,GACPqmB,EAAKD,EAAML,YAIf,QAHmC7rC,IAA/BksC,EAAME,uBACRD,EAAKD,EAAME,sBAETF,EAAMW,YAAct1C,OAAOiG,KAAK0uC,EAAMW,YAAYr0C,OAAQ,CAC5D,MAAMwE,EAAS,GACfzF,OAAOiG,KAAK0uC,EAAMW,YAAYpvC,SAAQqvC,SACJ9sC,IAA5BksC,EAAMW,WAAWC,GACnB9vC,EAAOhB,KAAK8wC,EAAQ,IAAMZ,EAAMW,WAAWC,IAE3C9vC,EAAOhB,KAAK8wC,MAGhBhnB,GAAQ,UAAYqmB,EAAK,IAAMnvC,EAAOkF,KAAK,KAAO,OAEpD,OAAO4jB,GAKTqkB,EAAS4C,YAAc,SAASjnB,GAC9B,MAAM1lB,EAAQ0lB,EAAKjK,OAAOiK,EAAKjhB,QAAQ,KAAO,GAAGnO,MAAM,KACvD,MAAO,CACL+B,KAAM2H,EAAM8O,QACZ89B,UAAW5sC,EAAM8B,KAAK,OAK1BioC,EAAS8C,YAAc,SAASf,GAC9B,IAAIgB,EAAQ,GACRf,EAAKD,EAAML,YAYf,YAXmC7rC,IAA/BksC,EAAME,uBACRD,EAAKD,EAAME,sBAETF,EAAMiB,cAAgBjB,EAAMiB,aAAa30C,QAE3C0zC,EAAMiB,aAAa1vC,SAAQ2vC,IACzBF,GAAS,aAAef,EAAK,IAAMiB,EAAG30C,MACrC20C,EAAGJ,WAAaI,EAAGJ,UAAUx0C,OAAS,IAAM40C,EAAGJ,UAAY,IACxD,UAGDE,GAKT/C,EAASkD,eAAiB,SAASvnB,GACjC,MAAMwnB,EAAKxnB,EAAKjhB,QAAQ,KAClBzE,EAAQ,CACZoC,KAAMuB,SAAS+hB,EAAKjK,OAAO,EAAGyxB,EAAK,GAAI,KAEnCC,EAAQznB,EAAKjhB,QAAQ,IAAKyoC,GAOhC,OANIC,GAAS,GACXntC,EAAMvD,UAAYipB,EAAKjK,OAAOyxB,EAAK,EAAGC,EAAQD,EAAK,GACnDltC,EAAMtD,MAAQgpB,EAAKjK,OAAO0xB,EAAQ,IAElCntC,EAAMvD,UAAYipB,EAAKjK,OAAOyxB,EAAK,GAE9BltC,GAKT+pC,EAASqD,eAAiB,SAAS1nB,GACjC,MAAM1lB,EAAQ0lB,EAAKjK,OAAO,IAAInlB,MAAM,KACpC,MAAO,CACLmN,UAAWzD,EAAM8O,QACjBxM,MAAOtC,EAAMF,KAAIsC,GAAQuB,SAASvB,EAAM,QAM5C2nC,EAASsD,OAAS,SAASC,GACzB,MAAM79B,EAAMs6B,EAASU,YAAY6C,EAAc,UAAU,GACzD,GAAI79B,EACF,OAAOA,EAAIgM,OAAO,IAKtBsuB,EAASwD,iBAAmB,SAAS7nB,GACnC,MAAM1lB,EAAQ0lB,EAAKjK,OAAO,IAAInlB,MAAM,KACpC,MAAO,CACLk3C,UAAWxtC,EAAM,GAAGma,cACpBzd,MAAOsD,EAAM,GAAGqrC,gBAOpBtB,EAAS0D,kBAAoB,SAASH,EAAcI,GAIlD,MAAO,CACLC,KAAM,OACNC,aALY7D,EAASU,YAAY6C,EAAeI,EAChD,kBAIoB5tC,IAAIiqC,EAASwD,oBAKrCxD,EAAS8D,oBAAsB,SAASjxC,EAAQkxC,GAC9C,IAAI9uC,EAAM,WAAa8uC,EAAY,OAInC,OAHAlxC,EAAOgxC,aAAavwC,SAAQ0wC,IAC1B/uC,GAAO,iBAAmB+uC,EAAGP,UAAY,IAAMO,EAAGrxC,MAAQ,UAErDsC,GAKT+qC,EAASiE,gBAAkB,SAAStoB,GAClC,MAAM1lB,EAAQ0lB,EAAKjK,OAAO,GAAGnlB,MAAM,KACnC,MAAO,CACLuqC,IAAKl9B,SAAS3D,EAAM,GAAI,IACxBiuC,YAAajuC,EAAM,GACnBkuC,UAAWluC,EAAM,GACjBmuC,cAAenuC,EAAMX,MAAM,KAI/B0qC,EAASqE,gBAAkB,SAAS3B,GAClC,MAAO,YAAcA,EAAW5L,IAAM,IACpC4L,EAAWwB,YAAc,KACQ,iBAAzBxB,EAAWyB,UACfnE,EAASsE,qBAAqB5B,EAAWyB,WACzCzB,EAAWyB,YACdzB,EAAW0B,cAAgB,IAAM1B,EAAW0B,cAAcrsC,KAAK,KAAO,IACvE,QAKJioC,EAASuE,qBAAuB,SAASJ,GACvC,GAAqC,IAAjCA,EAAUzpC,QAAQ,WACpB,OAAO,KAET,MAAMzE,EAAQkuC,EAAUzyB,OAAO,GAAGnlB,MAAM,KACxC,MAAO,CACLi4C,UAAW,SACXC,QAASxuC,EAAM,GACfyuC,SAAUzuC,EAAM,GAChB0uC,SAAU1uC,EAAM,GAAKA,EAAM,GAAG1J,MAAM,KAAK,QAAKsJ,EAC9C+uC,UAAW3uC,EAAM,GAAKA,EAAM,GAAG1J,MAAM,KAAK,QAAKsJ,IAInDmqC,EAASsE,qBAAuB,SAASH,GACvC,OAAOA,EAAUK,UAAY,IACzBL,EAAUM,SACXN,EAAUO,SAAW,IAAMP,EAAUO,SAAW,KAChDP,EAAUQ,UAAYR,EAAUS,UAC7B,IAAMT,EAAUQ,SAAW,IAAMR,EAAUS,UAC3C,KAIR5E,EAAS6E,oBAAsB,SAAStB,EAAcI,GAGpD,OAFc3D,EAASU,YAAY6C,EAAeI,EAChD,aACW5tC,IAAIiqC,EAASiE,kBAM5BjE,EAAS8E,iBAAmB,SAASvB,EAAcI,GACjD,MAAMxC,EAAQnB,EAASU,YAAY6C,EAAeI,EAChD,gBAAgB,GACZoB,EAAM/E,EAASU,YAAY6C,EAAeI,EAC9C,cAAc,GAChB,OAAMxC,GAAS4D,EAGR,CACL3D,iBAAkBD,EAAMzvB,OAAO,IAC/BszB,SAAUD,EAAIrzB,OAAO,KAJd,MASXsuB,EAASiF,mBAAqB,SAASpyC,GACrC,IAAIoC,EAAM,eAAiBpC,EAAOuuC,iBAAxB,iBACSvuC,EAAOmyC,SAAW,OAIrC,OAHInyC,EAAOqyC,UACTjwC,GAAO,kBAEFA,GAIT+qC,EAASmF,mBAAqB,SAAS5B,GACrC,MAAM6B,EAAc,CAClBC,OAAQ,GACRC,iBAAkB,GAClBC,cAAe,GACfC,KAAM,IAGFC,EADQzF,EAASG,WAAWoD,GACd,GAAGh3C,MAAM,KAC7B,IAAK,IAAI6B,EAAI,EAAGA,EAAIq3C,EAAMp3C,OAAQD,IAAK,CACrC,MAAM4zC,EAAKyD,EAAMr3C,GACXs3C,EAAa1F,EAASU,YAC1B6C,EAAc,YAAcvB,EAAK,KAAK,GACxC,GAAI0D,EAAY,CACd,MAAM3D,EAAQ/B,EAASwB,YAAYkE,GAC7BC,EAAQ3F,EAASU,YACrB6C,EAAc,UAAYvB,EAAK,KAQjC,OANAD,EAAMW,WAAaiD,EAAMt3C,OAAS2xC,EAASuC,UAAUoD,EAAM,IAAM,GACjE5D,EAAMiB,aAAehD,EAASU,YAC5B6C,EAAc,aAAevB,EAAK,KACjCjsC,IAAIiqC,EAAS4C,aAChBwC,EAAYC,OAAOxzC,KAAKkwC,GAEhBA,EAAM9wC,KAAKqwC,eACjB,IAAK,MACL,IAAK,SACH8D,EAAYG,cAAc1zC,KAAKkwC,EAAM9wC,KAAKqwC,iBAWlD,OAJAtB,EAASU,YAAY6C,EAAc,aAAajwC,SAAQqoB,IACtDypB,EAAYE,iBAAiBzzC,KAAKmuC,EAASkC,YAAYvmB,OAGlDypB,GAKTpF,EAAS4F,oBAAsB,SAASC,EAAMC,GAC5C,IAAI7wC,EAAM,GAGVA,GAAO,KAAO4wC,EAAO,IACrB5wC,GAAO6wC,EAAKT,OAAOh3C,OAAS,EAAI,IAAM,IACtC4G,GAAO,sBACPA,GAAO6wC,EAAKT,OAAOtvC,KAAIgsC,QACclsC,IAA/BksC,EAAME,qBACDF,EAAME,qBAERF,EAAML,cACZ3pC,KAAK,KAAO,OAEf9C,GAAO,uBACPA,GAAO,8BAGP6wC,EAAKT,OAAO/xC,SAAQyuC,IAClB9sC,GAAO+qC,EAAS8B,YAAYC,GAC5B9sC,GAAO+qC,EAASyC,UAAUV,GAC1B9sC,GAAO+qC,EAAS8C,YAAYf,MAE9B,IAAIgE,EAAW,EAgBf,OAfAD,EAAKT,OAAO/xC,SAAQyuC,IACdA,EAAMgE,SAAWA,IACnBA,EAAWhE,EAAMgE,aAGjBA,EAAW,IACb9wC,GAAO,cAAgB8wC,EAAW,QAGhCD,EAAKR,kBACPQ,EAAKR,iBAAiBhyC,SAAQ0yC,IAC5B/wC,GAAO+qC,EAASoC,YAAY4D,MAIzB/wC,GAKT+qC,EAASiG,2BAA6B,SAAS1C,GAC7C,MAAM2C,EAAqB,GACrBd,EAAcpF,EAASmF,mBAAmB5B,GAC1C4C,GAAuD,IAA9Cf,EAAYG,cAAc7qC,QAAQ,OAC3C0rC,GAA6D,IAAjDhB,EAAYG,cAAc7qC,QAAQ,UAG9CnC,EAAQynC,EAASU,YAAY6C,EAAc,WAC9CxtC,KAAI4lB,GAAQqkB,EAASkD,eAAevnB,KACpCvmB,QAAOa,GAA6B,UAApBA,EAAMvD,YACnBkI,EAAcrC,EAAMlK,OAAS,GAAKkK,EAAM,GAAGF,KACjD,IAAIguC,EAEJ,MAAMC,EAAQtG,EAASU,YAAY6C,EAAc,oBAC9CxtC,KAAI4lB,GACWA,EAAKjK,OAAO,IAAInlB,MAAM,KACvBwJ,KAAIuqC,GAAQ1mC,SAAS0mC,EAAM,QAExCgG,EAAMj4C,OAAS,GAAKi4C,EAAM,GAAGj4C,OAAS,GAAKi4C,EAAM,GAAG,KAAO1rC,IAC7DyrC,EAAgBC,EAAM,GAAG,IAG3BlB,EAAYC,OAAO/xC,SAAQyuC,IACzB,GAAiC,QAA7BA,EAAM9wC,KAAKqwC,eAA2BS,EAAMW,WAAW6D,IAAK,CAC9D,IAAIC,EAAW,CACbnuC,KAAMuC,EACN6rC,iBAAkB7sC,SAASmoC,EAAMW,WAAW6D,IAAK,KAE/C3rC,GAAeyrC,IACjBG,EAASE,IAAM,CAACruC,KAAMguC,IAExBH,EAAmBr0C,KAAK20C,GACpBL,IACFK,EAAWzsB,KAAKnmB,MAAMmmB,KAAKF,UAAU2sB,IACrCA,EAASG,IAAM,CACbtuC,KAAMuC,EACNgsC,UAAWR,EAAY,aAAe,OAExCF,EAAmBr0C,KAAK20C,QAII,IAA9BN,EAAmB73C,QAAgBuM,GACrCsrC,EAAmBr0C,KAAK,CACtBwG,KAAMuC,IAKV,IAAIisC,EAAY7G,EAASU,YAAY6C,EAAc,MAenD,OAdIsD,EAAUx4C,SAEVw4C,EADsC,IAApCA,EAAU,GAAGnsC,QAAQ,WACXd,SAASitC,EAAU,GAAGn1B,OAAO,GAAI,IACF,IAAlCm1B,EAAU,GAAGnsC,QAAQ,SAEqB,IAAvCd,SAASitC,EAAU,GAAGn1B,OAAO,GAAI,IAAa,IACnD,UAEK7b,EAEdqwC,EAAmB5yC,SAAQT,IACzBA,EAAOi0C,WAAaD,MAGjBX,GAITlG,EAAS+G,oBAAsB,SAASxD,GACtC,MAAMyD,EAAiB,GAIjBC,EAAajH,EAASU,YAAY6C,EAAc,WACnDxtC,KAAI4lB,GAAQqkB,EAASkD,eAAevnB,KACpCvmB,QAAOjI,GAAyB,UAAlBA,EAAIuF,YAAuB,GACxCu0C,IACFD,EAAe/qC,MAAQgrC,EAAWt0C,MAClCq0C,EAAe3uC,KAAO4uC,EAAW5uC,MAKnC,MAAM6uC,EAAQlH,EAASU,YAAY6C,EAAc,gBACjDyD,EAAeG,YAAcD,EAAM74C,OAAS,EAC5C24C,EAAeI,SAA4B,IAAjBF,EAAM74C,OAIhC,MAAMg5C,EAAMrH,EAASU,YAAY6C,EAAc,cAG/C,OAFAyD,EAAeK,IAAMA,EAAIh5C,OAAS,EAE3B24C,GAGThH,EAASsH,oBAAsB,SAASN,GACtC,IAAI/xC,EAAM,GAWV,OAVI+xC,EAAeG,cACjBlyC,GAAO,oBAEL+xC,EAAeK,MACjBpyC,GAAO,uBAEmBY,IAAxBmxC,EAAe3uC,MAAsB2uC,EAAe/qC,QACtDhH,GAAO,UAAY+xC,EAAe3uC,KAChC,UAAY2uC,EAAe/qC,MAAQ,QAEhChH,GAMT+qC,EAASuH,UAAY,SAAShE,GAC5B,IAAIttC,EACJ,MAAMuxC,EAAOxH,EAASU,YAAY6C,EAAc,WAChD,GAAoB,IAAhBiE,EAAKn5C,OAEP,OADA4H,EAAQuxC,EAAK,GAAG91B,OAAO,GAAGnlB,MAAM,KACzB,CAACgK,OAAQN,EAAM,GAAI2oB,MAAO3oB,EAAM,IAEzC,MAAMwxC,EAAQzH,EAASU,YAAY6C,EAAc,WAC9CxtC,KAAI4lB,GAAQqkB,EAASkD,eAAevnB,KACpCvmB,QAAOsyC,GAAqC,SAAxBA,EAAUh1C,YACjC,OAAI+0C,EAAMp5C,OAAS,GACjB4H,EAAQwxC,EAAM,GAAG90C,MAAMpG,MAAM,KACtB,CAACgK,OAAQN,EAAM,GAAI2oB,MAAO3oB,EAAM,UAFzC,GASF+pC,EAAS2H,qBAAuB,SAASpE,GACvC,MAAMkC,EAAQzF,EAAS4H,WAAWrE,GAC5BsE,EAAc7H,EAASU,YAAY6C,EAAc,uBACvD,IAAI3wC,EACAi1C,EAAYx5C,OAAS,IACvBuE,EAAiBgH,SAASiuC,EAAY,GAAGn2B,OAAO,IAAK,KAEnDqD,MAAMniB,KACRA,EAAiB,OAEnB,MAAMk1C,EAAW9H,EAASU,YAAY6C,EAAc,gBACpD,GAAIuE,EAASz5C,OAAS,EACpB,MAAO,CACL+H,KAAMwD,SAASkuC,EAAS,GAAGp2B,OAAO,IAAK,IACvCqvB,SAAU0E,EAAMsC,IAChBn1C,eAAAA,GAGJ,MAAMo1C,EAAehI,EAASU,YAAY6C,EAAc,cACxD,GAAIyE,EAAa35C,OAAS,EAAG,CAC3B,MAAM4H,EAAQ+xC,EAAa,GACxBt2B,OAAO,IACPnlB,MAAM,KACT,MAAO,CACL6J,KAAMwD,SAAS3D,EAAM,GAAI,IACzB8qC,SAAU9qC,EAAM,GAChBrD,eAAAA,KAUNotC,EAASiI,qBAAuB,SAAS9yC,EAAO+yC,GAC9C,IAAIp/B,EAAS,GAiBb,OAfEA,EADqB,cAAnB3T,EAAM4rC,SACC,CACP,KAAO5rC,EAAM0wC,KAAO,MAAQ1wC,EAAM4rC,SAAW,IAAMmH,EAAKnH,SAAW,OACnE,uBACA,eAAiBmH,EAAK9xC,KAAO,QAGtB,CACP,KAAOjB,EAAM0wC,KAAO,MAAQ1wC,EAAM4rC,SAAW,IAAMmH,EAAK9xC,KAAO,OAC/D,uBACA,aAAe8xC,EAAK9xC,KAAO,IAAM8xC,EAAKnH,SAAW,mBAGzBlrC,IAAxBqyC,EAAKt1C,gBACPkW,EAAOjX,KAAK,sBAAwBq2C,EAAKt1C,eAAiB,QAErDkW,EAAO/Q,KAAK,KAOrBioC,EAASmI,kBAAoB,WAC3B,OAAO/sC,KAAKE,SAAShO,WAAWokB,OAAO,EAAG,KAQ5CsuB,EAASoI,wBAA0B,SAASC,EAAQC,EAASC,GAC3D,IAAIC,EACJ,MAAM/wC,OAAsB5B,IAAZyyC,EAAwBA,EAAU,EAQlD,OANEE,EADEH,GAGUrI,EAASmI,oBAIhB,aAFMI,GAAY,qBAGP,IAAMC,EAAY,IAAM/wC,EADnC,yCAQTuoC,EAASyI,aAAe,SAASlF,EAAcI,GAE7C,MAAMZ,EAAQ/C,EAASG,WAAWoD,GAClC,IAAK,IAAIn1C,EAAI,EAAGA,EAAI20C,EAAM10C,OAAQD,IAChC,OAAQ20C,EAAM30C,IACZ,IAAK,aACL,IAAK,aACL,IAAK,aACL,IAAK,aACH,OAAO20C,EAAM30C,GAAGsjB,OAAO,GAK7B,OAAIiyB,EACK3D,EAASyI,aAAa9E,GAExB,YAGT3D,EAAS0I,QAAU,SAASnF,GAG1B,OAFcvD,EAASG,WAAWoD,GACd,GAAGh3C,MAAM,KAChB,GAAGmlB,OAAO,IAGzBsuB,EAAS2I,WAAa,SAASpF,GAC7B,MAAyC,MAAlCA,EAAah3C,MAAM,IAAK,GAAG,IAGpCyzC,EAAS4H,WAAa,SAASrE,GAC7B,MACMttC,EADQ+pC,EAASG,WAAWoD,GACd,GAAG7xB,OAAO,GAAGnlB,MAAM,KACvC,MAAO,CACLs5C,KAAM5vC,EAAM,GACZG,KAAMwD,SAAS3D,EAAM,GAAI,IACzB8qC,SAAU9qC,EAAM,GAChB8xC,IAAK9xC,EAAMX,MAAM,GAAGyC,KAAK,OAI7BioC,EAAS4I,WAAa,SAASrF,GAC7B,MACMttC,EADO+pC,EAASU,YAAY6C,EAAc,MAAM,GACnC7xB,OAAO,GAAGnlB,MAAM,KACnC,MAAO,CACLs8C,SAAU5yC,EAAM,GAChBuyC,UAAWvyC,EAAM,GACjB6yC,eAAgBlvC,SAAS3D,EAAM,GAAI,IACnC8yC,QAAS9yC,EAAM,GACf+yC,YAAa/yC,EAAM,GACnBhE,QAASgE,EAAM,KAKnB+pC,EAASiJ,WAAa,SAASnoB,GAC7B,GAAoB,iBAATA,GAAqC,IAAhBA,EAAKzyB,OACnC,OAAO,EAET,MAAM00C,EAAQ/C,EAASG,WAAWrf,GAClC,IAAK,IAAI1yB,EAAI,EAAGA,EAAI20C,EAAM10C,OAAQD,IAChC,GAAI20C,EAAM30C,GAAGC,OAAS,GAA4B,MAAvB00C,EAAM30C,GAAG86C,OAAO,GACzC,OAAO,EAIX,OAAO,GAKPj+C,EAAOD,QAAUg1C,wBC9wBwD/0C,EAAOD,QAG1E,WAAc,aAEV,IAAIm+C,OAA8B,IAAXp9C,EAAAA,EAAyBA,EAAAA,EACpB,oBAATX,KAAuBA,KACZ,oBAAXG,OAAyBA,OAAS,GAErD,SAAS69C,EAAQj8C,GAWf,OATEi8C,EADoB,mBAAXlgC,QAAoD,iBAApBA,OAAOrL,SACtC,SAAU1Q,GAClB,cAAcA,GAGN,SAAUA,GAClB,OAAOA,GAAyB,mBAAX+b,QAAyB/b,EAAIO,cAAgBwb,QAAU/b,IAAQ+b,OAAO7b,UAAY,gBAAkBF,GAItHi8C,EAAQj8C,GAGjB,SAASk8C,EAAmBzrC,GAC1B,OAGF,SAA4BA,GAC1B,GAAI3Q,MAAMC,QAAQ0Q,GAAM,CACtB,IAAK,IAAIxP,EAAI,EAAGk7C,EAAO,IAAIr8C,MAAM2Q,EAAIvP,QAASD,EAAIwP,EAAIvP,OAAQD,IAAKk7C,EAAKl7C,GAAKwP,EAAIxP,GAEjF,OAAOk7C,GAPFC,CAAmB3rC,IAW5B,SAA0B4rC,GACxB,GAAItgC,OAAOrL,YAAYzQ,OAAOo8C,IAAkD,uBAAzCp8C,OAAOC,UAAUC,SAASC,KAAKi8C,GAAgC,OAAOv8C,MAAMw8C,KAAKD,GAZtFE,CAAiB9rC,IAerD,WACE,MAAM,IAAIsY,UAAU,mDAhBuCyzB,GAoC7D,IAAIC,EAAW,SAAkB5yC,EAAG8M,GAClC,IAAI+lC,GAAW,MAAJ7yC,IAAmB,MAAJ8M,GAE1B,OADW9M,GAAK,KAAO8M,GAAK,KAAO+lC,GAAO,KAC5B,GAAW,MAANA,GAejBC,EAAW,SAAkBx3C,GAC/B,GAAmB,iBAARA,EACT,MAAM,IAAIiL,MAAM,oCAKlB,IAFA,IAAIwsC,EAAM,GAED37C,EAAI,EAAGA,EAAiB,EAAbkE,EAAIjE,OAAYD,GAAK,EACvC27C,EAAI37C,GAAK,KAA+B,IAAxBkE,EAAI1C,WAAWxB,EAAI,KAAaA,EAAI,GAGtD,OAAO27C,GAoCLC,EAAU,SAAiBxlC,EAAGxU,EAAGC,EAAG+G,EAAG1F,EAAGM,GAC5C,OAAOg4C,GAxDsB/gC,EAwDL+gC,EAASA,EAAS55C,EAAGwU,GAAIolC,EAAS5yC,EAAGpF,OAxD3Bq4C,EAwDgC34C,GAvD9CuX,IAAQ,GAAKohC,EAuDqCh6C,GAxD1D,IAAiB4Y,EAAKohC,GA2DhCC,EAAS,SAAgBl6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC7C,OAAOo4C,EAAQ/5C,EAAIC,GAAKD,EAAIE,EAAGH,EAAGC,EAAG+G,EAAG1F,EAAGM,IAGzCu4C,EAAS,SAAgBn6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC7C,OAAOo4C,EAAQ/5C,EAAIE,EAAID,GAAKC,EAAGH,EAAGC,EAAG+G,EAAG1F,EAAGM,IAGzCw4C,EAAS,SAAgBp6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC7C,OAAOo4C,EAAQ/5C,EAAIC,EAAIC,EAAGH,EAAGC,EAAG+G,EAAG1F,EAAGM,IAGpCy4C,EAAS,SAAgBr6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC7C,OAAOo4C,EAAQ95C,GAAKD,GAAKE,GAAIH,EAAGC,EAAG+G,EAAG1F,EAAGM,IAOvC04C,EAAW,SAAkBtzC,EAAGF,GAElCE,EAAEF,GAAO,IAAM,KAAQA,EAAM,GAC7BE,EAA0B,IAAvBF,EAAM,KAAO,GAAK,IAAWA,EAOhC,IANA,IAIIyzC,EAAMC,EAAMC,EAAMC,EAJlB16C,EAAI,WACJC,GAAK,UACLC,GAAK,WACLC,EAAI,UAGC/B,EAAI,EAAGA,EAAI4I,EAAE3I,OAAQD,GAAK,GACjCm8C,EAAOv6C,EACPw6C,EAAOv6C,EACPw6C,EAAOv6C,EACPw6C,EAAOv6C,EACPH,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAI+5C,EAAO/5C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,WACtC8B,EAAIg6C,EAAOh6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,GAAI,WACrC6B,EAAIi6C,EAAOj6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,YACtC4B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAI+5C,EAAO/5C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACrC8B,EAAIg6C,EAAOh6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,YACtC6B,EAAIi6C,EAAOj6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,UACtC4B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,EAAG,YACpC+B,EAAI+5C,EAAO/5C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,YACtC8B,EAAIg6C,EAAOh6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,OACvC6B,EAAIi6C,EAAOj6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,YACvC4B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,EAAG,YACrC+B,EAAI+5C,EAAO/5C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,UACvC8B,EAAIg6C,EAAOh6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,YACvC6B,EAAIi6C,EAAOj6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,GAAI,YACtC4B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAIg6C,EAAOh6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACrC8B,EAAIi6C,EAAOj6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,GAAI,WACtC6B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACtC4B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAIg6C,EAAOh6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,EAAG,UACrC8B,EAAIi6C,EAAOj6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,WACvC6B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACtC4B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,EAAG,WACpC+B,EAAIg6C,EAAOh6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,GAAI,YACtC8B,EAAIi6C,EAAOj6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,WACtC6B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,GAAI,YACrC4B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,GAAI,YACtC+B,EAAIg6C,EAAOh6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,UACrC8B,EAAIi6C,EAAOj6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,GAAI,YACrC6B,EAAIk6C,EAAOl6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,YACvC4B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,QACrC+B,EAAIi6C,EAAOj6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,YACtC8B,EAAIk6C,EAAOl6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,GAAI,YACtC6B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,UACvC4B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,YACrC+B,EAAIi6C,EAAOj6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACrC8B,EAAIk6C,EAAOl6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,WACtC6B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,YACvC4B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,EAAG,WACrC+B,EAAIi6C,EAAOj6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,WACtC8B,EAAIk6C,EAAOl6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,WACtC6B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,GAAI,UACrC4B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAIi6C,EAAOj6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,WACvC8B,EAAIk6C,EAAOl6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,GAAI,WACtC6B,EAAIm6C,EAAOn6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACtC4B,EAAIq6C,EAAOr6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAIk6C,EAAOl6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACrC8B,EAAIm6C,EAAOn6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,YACvC6B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,UACtC4B,EAAIq6C,EAAOr6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,EAAG,YACrC+B,EAAIk6C,EAAOl6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,YACtC8B,EAAIm6C,EAAOn6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,SACvC6B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,YACtC4B,EAAIq6C,EAAOr6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,EAAG,YACpC+B,EAAIk6C,EAAOl6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,UACvC8B,EAAIm6C,EAAOn6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,YACtC6B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,GAAI,YACtC4B,EAAIq6C,EAAOr6C,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACrC+B,EAAIk6C,EAAOl6C,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,YACvC8B,EAAIm6C,EAAOn6C,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,GAAI,WACrC6B,EAAIo6C,EAAOp6C,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACtC4B,EAAI45C,EAAS55C,EAAGu6C,GAChBt6C,EAAI25C,EAAS35C,EAAGu6C,GAChBt6C,EAAI05C,EAAS15C,EAAGu6C,GAChBt6C,EAAIy5C,EAASz5C,EAAGu6C,GAGlB,MAAO,CAAC16C,EAAGC,EAAGC,EAAGC,IASfw6C,EAAM,CACRC,UAAW,SAAmBt5C,GAC5B,OAvIW,SAAkBu5C,GAI/B,IAHA,IAAIC,EAAU,mBACVx4C,EAAM,GAEDlE,EAAI,EAAGA,EAAsB,EAAlBy8C,EAASx8C,OAAYD,IACvCkE,GAAOw4C,EAAQ5B,OAAO2B,EAASz8C,GAAK,IAAMA,EAAI,EAAI,EAAI,EAAI,IAAO08C,EAAQ5B,OAAO2B,EAASz8C,GAAK,IAAMA,EAAI,EAAI,EAAI,IAGlH,OAAOkE,EA+HEy4C,CAAST,EAASR,EAASx4C,GAAe,EAAXA,EAAEjD,UAE1CyB,KAAM,SAAcwB,GAClB,OAxJW,SAAkBy4C,GAG/B,IAFA,IAAIz3C,EAAM,GAEDlE,EAAI,EAAGA,EAAiB,GAAb27C,EAAI17C,OAAaD,GAAK,EACxCkE,GAAO8B,OAAO42C,aAAajB,EAAI37C,GAAK,KAAOA,EAAI,GAAK,KAGtD,OAAOkE,EAiJE24C,CAASX,EAASR,EAASx4C,GAAe,EAAXA,EAAEjD,WAoB5C,SAAS68C,EAAUl0C,EAAGF,GAEpBE,EAAEF,GAAO,IAAM,KAAQ,GAAKA,EAAM,GAClCE,EAAyB,IAAtBF,EAAM,IAAM,GAAK,IAAWA,EAC/B,IAMI1I,EAAGqH,EAAG7D,EAAG24C,EAAMC,EAAMC,EAAMC,EAAMS,EANjCv0B,EAAI,IAAI3pB,MAAM,IACd+C,EAAI,WACJC,GAAK,UACLC,GAAK,WACLC,EAAI,UACJqB,GAAK,WAGT,IAAKpD,EAAI,EAAGA,EAAI4I,EAAE3I,OAAQD,GAAK,GAAI,CAOjC,IANAm8C,EAAOv6C,EACPw6C,EAAOv6C,EACPw6C,EAAOv6C,EACPw6C,EAAOv6C,EACPg7C,EAAO35C,EAEFiE,EAAI,EAAGA,EAAI,GAAIA,IAEhBmhB,EAAEnhB,GADAA,EAAI,GACCuB,EAAE5I,EAAIqH,GAEN21C,EAAIx0B,EAAEnhB,EAAI,GAAKmhB,EAAEnhB,EAAI,GAAKmhB,EAAEnhB,EAAI,IAAMmhB,EAAEnhB,EAAI,IAAK,GAG1D7D,EAAIy5C,EAAWA,EAAWD,EAAIp7C,EAAG,GAAIs7C,EAAQ71C,EAAGxF,EAAGC,EAAGC,IAAKk7C,EAAWA,EAAW75C,EAAGolB,EAAEnhB,IAAK81C,EAAQ91C,KACnGjE,EAAIrB,EACJA,EAAID,EACJA,EAAIk7C,EAAIn7C,EAAG,IACXA,EAAID,EACJA,EAAI4B,EAGN5B,EAAIq7C,EAAWr7C,EAAGu6C,GAClBt6C,EAAIo7C,EAAWp7C,EAAGu6C,GAClBt6C,EAAIm7C,EAAWn7C,EAAGu6C,GAClBt6C,EAAIk7C,EAAWl7C,EAAGu6C,GAClBl5C,EAAI65C,EAAW75C,EAAG25C,GAGpB,MAAO,CAACn7C,EAAGC,EAAGC,EAAGC,EAAGqB,GAQtB,SAAS85C,EAAQ15C,EAAG3B,EAAGC,EAAGC,GACxB,OAAIyB,EAAI,GACC3B,EAAIC,GAAKD,EAAIE,EAGlByB,EAAI,GACC3B,EAAIC,EAAIC,EAGbyB,EAAI,GACC3B,EAAIC,EAAID,EAAIE,EAAID,EAAIC,EAGtBF,EAAIC,EAAIC,EAOjB,SAASo7C,EAAQ35C,GACf,OAAOA,EAAI,GAAK,WAAaA,EAAI,GAAK,WAAaA,EAAI,IAAM,YAAc,UAO7E,SAAS45C,EAAej4C,EAAK6P,GAC3B,IAAIqoC,EAAOC,EAASn4C,GAEhBk4C,EAAKp9C,OAAS,KAChBo9C,EAAOP,EAAUO,EAAmB,EAAbl4C,EAAIlF,SAM7B,IAHA,IAAIs9C,EAAO,IAAI1+C,MAAM,IACjB2+C,EAAO,IAAI3+C,MAAM,IAEZmB,EAAI,EAAGA,EAAI,GAAIA,IACtBu9C,EAAKv9C,GAAe,UAAVq9C,EAAKr9C,GACfw9C,EAAKx9C,GAAe,WAAVq9C,EAAKr9C,GAGjB,IAAI0B,EAAOo7C,EAAUS,EAAKrsC,OAAOosC,EAAStoC,IAAQ,IAAoB,EAAdA,EAAK/U,QAC7D,OAAO68C,EAAUU,EAAKtsC,OAAOxP,GAAO,KAQtC,SAASu7C,EAAWr0C,EAAG8M,GACrB,IAAI+lC,GAAW,MAAJ7yC,IAAmB,MAAJ8M,GAE1B,OADW9M,GAAK,KAAO8M,GAAK,KAAO+lC,GAAO,KAC5B,GAAW,MAANA,EAOrB,SAASuB,EAAIviC,EAAKohC,GAChB,OAAOphC,GAAOohC,EAAMphC,IAAQ,GAAKohC,EAQnC,SAASyB,EAASp5C,GAIhB,IAHA,IAAIy3C,EAAM,GAGD37C,EAAI,EAAGA,EAAiB,EAAbkE,EAAIjE,OAAYD,GAAK,EACvC27C,EAAI37C,GAAK,KAHA,IAGOkE,EAAI1C,WAAWxB,EAAI,KAAc,GAAKA,EAAI,GAG5D,OAAO27C,EAOT,SAAS8B,EAAShB,GAKhB,IAJA,IAEIiB,EAASr2C,EADTnD,EAAM,GAGDlE,EAAI,EAAGA,EAAsB,EAAlBy8C,EAASx8C,OAAYD,GAAK,EAG5C,IAFA09C,GAAWjB,EAASz8C,GAAK,IAAM,GAAK,EAAIA,EAAI,GAAK,MAAS,IAAMy8C,EAASz8C,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,MAAS,EAAIy8C,EAASz8C,EAAI,GAAK,IAAM,GAAK,GAAKA,EAAI,GAAK,GAAK,IAExKqH,EAAI,EAAGA,EAAI,EAAGA,IACT,EAAJrH,EAAY,EAAJqH,EAA0B,GAAlBo1C,EAASx8C,OAC3BiE,GAAO,IAEPA,GAXI,mEAWO42C,OAAO4C,GAAW,GAAK,EAAIr2C,GAAK,IAKjD,OAAOnD,EAOT,SAASy5C,EAAShC,GAIhB,IAHA,IAAIz3C,EAAM,GAGDlE,EAAI,EAAGA,EAAiB,GAAb27C,EAAI17C,OAAaD,GAAK,EACxCkE,GAAO8B,OAAO42C,aAAajB,EAAI37C,GAAK,KAAO,GAAKA,EAAI,GAH3C,KAMX,OAAOkE,EAQT,IAAI05C,EAAO,CACTC,cAAe,SAAuB14C,EAAK6P,GACzC,OAAOyoC,EAASL,EAAej4C,EAAK6P,KAEtC8oC,SAAU,SAAkB56C,GAC1B,OAAOu6C,EAASX,EAAUQ,EAASp6C,GAAe,EAAXA,EAAEjD,UAE3C09C,SAAUA,EACVP,eAAgBA,EAChBW,cAAe,SAAuB54C,EAAK6P,GACzC,OAAO2oC,EAASP,EAAej4C,EAAK6P,KAEtCgpC,SAAU,SAAkB96C,GAC1B,OAAOy6C,EAASb,EAAUQ,EAASp6C,GAAe,EAAXA,EAAEjD,WAIzCg+C,EACQ,SAAkB/5C,GAC1B,IAAIlE,EAAG8B,EACHo8C,EAAM,GACNx1C,EAAMxE,EAAIjE,OAEd,IAAKD,EAAI,EAAGA,EAAI0I,EAAK1I,KACnB8B,EAAIoC,EAAI1C,WAAWxB,KAEV,GAAU8B,GAAK,IACtBo8C,GAAOh6C,EAAI42C,OAAO96C,GACT8B,EAAI,MACbo8C,GAAOl4C,OAAO42C,aAAa,IAAO96C,GAAK,GAAK,IAC5Co8C,GAAOl4C,OAAO42C,aAAa,IAAO96C,GAAK,EAAI,IAC3Co8C,GAAOl4C,OAAO42C,aAAa,IAAO96C,GAAK,EAAI,MAE3Co8C,GAAOl4C,OAAO42C,aAAa,IAAO96C,GAAK,EAAI,IAC3Co8C,GAAOl4C,OAAO42C,aAAa,IAAO96C,GAAK,EAAI,KAI/C,OAAOo8C,GArBPD,EAuBU,SAAoBE,GAsB9B,IAAK,IAAIC,KAFTD,EAAUA,GAAW,GAGnB,GAAIn/C,OAAOC,UAAU6Q,eAAe3Q,KAAKg/C,EAASC,GAAa,CAC7D,IAAIC,EAAU,GACVC,EAAS,GACTC,EAAO,GACPC,EAAYL,EAAQC,GACpBK,EAA+B,WAAvBzD,EAAQwD,GAChBE,EAAcC,OAAOC,SAASH,EAAQD,EAAUj6C,MAAQi6C,IAExDC,IACFJ,EAAUG,EAAUH,QAAU,YAAcG,EAAUH,QAAU,GAChEC,EAASE,EAAUF,OAAS,WAAaE,EAAUF,OAAS,GAC5DC,EAAOC,EAAUD,KAAO,SAAWC,EAAUD,KAAO,IAGtDr6B,SAAS26B,OAAST,EAAa,IAAMM,EAAcL,EAAUC,EAASC,IAkB9E,SAASO,EAAOj8C,EAAMk8C,GACpB,OAAO,IAAIC,EAAQC,QAAQp8C,EAAMk8C,GA2BnC,SAASG,EAAIH,GACX,OAAO,IAAIC,EAAQC,QAAQ,KAAMF,GAanC,SAASI,EAAMJ,GACb,OAAO,IAAIC,EAAQC,QAAQ,WAAYF,GAWzC,IAAIC,EAAU,CAEZI,QAAS,YAqBTC,GAAI,CACFC,SAAU,sCACVC,KAAM,iBACNC,OAAQ,gBACRC,KAAM,iBACNC,OAAQ,mBACRC,QAAS,oBACTC,WAAY,wCACZC,YAAa,yCACbC,IAAK,iCACLC,KAAM,mCACNC,OAAQ,mCACRC,QAAS,sCACTC,KAAM,mCACNC,QAAS,sCACTf,QAAS,oBACTgB,QAAS,sCACTC,SAAU,sCACVC,MAAO,gCASTA,MAAO,CACLC,KAAM,CAAC,IAAK,aAAc,KAAM,OAAQ,KAAM,MAAO,KAAM,KAAM,IAAK,OAAQ,SAAU,KAAM,QAC9FC,WAAY,CACV,EAAK,CAAC,QACN,WAAc,CAAC,SACf,GAAM,GACN,KAAQ,CAAC,SACT,GAAM,GACN,IAAO,CAAC,MAAO,MAAO,QAAS,SAAU,SACzC,GAAM,CAAC,SACP,GAAM,CAAC,SACP,EAAK,CAAC,SACN,KAAQ,CAAC,SACT,OAAU,GACV,GAAM,CAAC,SACP,KAAQ,IAEVC,IAAK,CAAC,mBAAoB,QAAS,cAAe,YAAa,aAAc,cAAe,cAAe,eAAgB,aAAc,mBASzIC,SAAU,SAAkBhY,GAC1B,IAAK,IAAI1oC,EAAI,EAAGA,EAAIg/C,EAAQsB,MAAMC,KAAKtgD,OAAQD,IAC7C,GAAI0oC,IAAQsW,EAAQsB,MAAMC,KAAKvgD,GAC7B,OAAO,EAIX,OAAO,GAUT2gD,eAAgB,SAAwBjY,EAAKpkC,GAC3C,QAA6C,IAAlC06C,EAAQsB,MAAME,WAAW9X,IAAwBsW,EAAQsB,MAAME,WAAW9X,GAAKzoC,OAAS,EACjG,IAAK,IAAID,EAAI,EAAGA,EAAIg/C,EAAQsB,MAAME,WAAW9X,GAAKzoC,OAAQD,IACxD,GAAIsE,IAAc06C,EAAQsB,MAAME,WAAW9X,GAAK1oC,GAC9C,OAAO,EAKb,OAAO,GAET4gD,SAAU,SAAkB5tB,GAC1B,IAAK,IAAIhzB,EAAI,EAAGA,EAAIg/C,EAAQsB,MAAMG,IAAIxgD,OAAQD,IAC5C,GAAIgzB,IAAUgsB,EAAQsB,MAAMG,IAAIzgD,GAC9B,OAAO,EAIX,OAAO,IAoBX6gD,OAAQ,CACN5jD,MAAO,EACP6jD,WAAY,EACZC,SAAU,EACVC,eAAgB,EAChBC,SAAU,EACVC,UAAW,EACXC,aAAc,EACdC,cAAe,EACfC,SAAU,EACVC,SAAU,EACVC,YAAa,GACbC,aAAc,IAEhBC,eAAgB,CACdC,WAAY,aACZC,SAAU,WACVC,iBAAkB,6BAClBC,aAAc,eACdC,eAAgB,WAYlBC,SAAU,CACR1zB,MAAO,EACPC,KAAM,EACNE,KAAM,EACNvxB,MAAO,EACP+kD,MAAO,GAUTC,YAAa,CACXC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,SAAU,IAiBZC,QAAS,IACTC,kBAAmB,GAcnBC,aAAc,SAAsB3/C,EAAM0B,GACxCy6C,EAAQK,GAAGx8C,GAAQ0B,GAiBrBk+C,aAAc,SAAsBC,EAAMC,EAAU1d,GAClD,IAAK,IAAIjlC,EAAI,EAAGA,EAAI0iD,EAAKE,WAAW3iD,OAAQD,IAAK,CAC/C,IAAI6iD,EAAYH,EAAKE,WAAW5iD,GAE5B6iD,EAAU1e,WAAa6a,EAAQiD,YAAYC,QAAYS,IAAYjiD,KAAKoiD,WAAWD,EAAWF,IAChG1d,EAAK4d,KAkBXC,WAAY,SAAoBp5C,EAAI7G,GAClC,OAAO6G,EAAGyvB,UAAYt2B,GAOxBkgD,cAAe,KAMfC,eAAgB,WACd,IAAIC,EAWJ,YAP+Cx7C,IAA3Cyc,SAASg/B,eAAeC,gBAAgCj/B,SAASg/B,eAAeC,gBAAkBj/B,SAASk/B,cAAgBl/B,SAASk/B,aAAe,IACrJH,EAAMviD,KAAK2iD,gBACPtwB,YAAYkwB,EAAI5+B,cAAc,YAElC4+B,EAAM/+B,SAASg/B,eAAeC,eAAe,gBAAiB,UAAW,MAGpEF,GASTK,aAAc,WAKZ,OAJKtE,EAAQ+D,gBACX/D,EAAQ+D,cAAgB/D,EAAQgE,kBAG3BhE,EAAQ+D,eAWjBM,aAAc,WAIZ,IAHA,IAAIJ,EAAM,KACNM,EAAa,CAAC,yBAA0B,yBAA0B,yBAA0B,yBAA0B,qBAAsB,oBAAqB,oBAE5JxhD,EAAI,EAAGA,EAAIwhD,EAAWtjD,QACjB,OAARgjD,EADiClhD,IAEnC,IACEkhD,EAAM,IAAIO,cAAcD,EAAWxhD,IACnC,MAAOqB,GACP6/C,EAAM,KAOZ,OAAOA,GAqBTQ,WAAY,SAAoB5gD,GAC9B,IAAKA,EACH,OAAO,KAMT,IAHA,IAAInF,EAAOshD,EAAQsE,eAAej/B,cAAcxhB,GAGvCjB,EAAI,EAAGA,EAAI6G,UAAUxI,OAAQ2B,IAAK,CACzC,IAAIiH,EAAMJ,UAAU7G,GAEpB,GAAKiH,EAIL,GAAmB,iBAARA,GAAmC,iBAARA,EACpCnL,EAAKq1B,YAAYisB,EAAQ0E,YAAY76C,SAChC,GAAqB,WAAjBmyC,EAAQnyC,IAAyC,mBAAbA,EAAIqJ,KACjD,IAAK,IAAIlS,EAAI,EAAGA,EAAI6I,EAAI5I,OAAQD,IAAK,CACnC,IAAI2jD,EAAO96C,EAAI7I,GAEO,WAAlBg7C,EAAQ2I,IAA2C,mBAAdA,EAAKzxC,WAAmCzK,IAAZk8C,EAAK,IAAgC,OAAZA,EAAK,IACjGjmD,EAAKkmD,aAAaD,EAAK,GAAIA,EAAK,SAG/B,GAAqB,WAAjB3I,EAAQnyC,GACjB,IAAK,IAAIgH,KAAKhH,EACR7J,OAAOC,UAAU6Q,eAAe3Q,KAAK0J,EAAKgH,SAAiBpI,IAAXoB,EAAIgH,IAA+B,OAAXhH,EAAIgH,IAC9EnS,EAAKkmD,aAAa/zC,EAAGhH,EAAIgH,IAMjC,OAAOnS,GAYTmmD,UAAW,SAAmB53B,GAM5B,OAFAA,GADAA,GADAA,GADAA,EAAOA,EAAKtjB,QAAQ,MAAO,UACfA,QAAQ,KAAM,SACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,WACdA,QAAQ,KAAM,WAa5Bm7C,YAAa,SAAqB73B,GAMhC,OAFAA,GADAA,GADAA,GADAA,EAAOA,EAAKtjB,QAAQ,UAAW,MACnBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MACjBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,MAejC+6C,YAAa,SAAqBz3B,GAChC,OAAO+yB,EAAQsE,eAAeS,eAAe93B,IAY/C+3B,YAAa,SAAqBC,GAChC,IAAIvmD,EAWJ,OATIwmD,UAEFxmD,GADa,IAAIwmD,WACHC,gBAAgBF,EAAM,cAEpCvmD,EAAO,IAAI8lD,cAAc,qBACpBz0C,MAAQ,QACbrR,EAAK0mD,QAAQH,IAGRvmD,GAYT2mD,QAAS,SAAiB3B,GACxB,IAAKA,EACH,OAAO,KAGT,IAAIx+C,EAAM,GAEqB,IAA3Bw+C,EAAKE,WAAW3iD,QAAgByiD,EAAKve,WAAa6a,EAAQiD,YAAYE,OACxEj+C,GAAOw+C,EAAK4B,WAGd,IAAK,IAAItkD,EAAI,EAAGA,EAAI0iD,EAAKE,WAAW3iD,OAAQD,IACtC0iD,EAAKE,WAAW5iD,GAAGmkC,WAAa6a,EAAQiD,YAAYE,OACtDj+C,GAAOw+C,EAAKE,WAAW5iD,GAAGskD,WAI9B,OAAOtF,EAAQ6E,UAAU3/C,IAe3BqgD,YAAa,SAAqB7B,GAChC,IAAIh5C,EAEJ,GAAIg5C,EAAKve,WAAa6a,EAAQiD,YAAYC,OAAQ,CAChDx4C,EAAKs1C,EAAQyE,WAAWf,EAAKvpB,SAE7B,IAAK,IAAIn5B,EAAI,EAAGA,EAAI0iD,EAAKlC,WAAWvgD,OAAQD,IAC1C0J,EAAGk6C,aAAalB,EAAKlC,WAAWxgD,GAAGwkD,SAAU9B,EAAKlC,WAAWxgD,GAAGuE,OAGlE,IAAK,IAAIkgD,EAAK,EAAGA,EAAK/B,EAAKE,WAAW3iD,OAAQwkD,IAC5C/6C,EAAGqpB,YAAYisB,EAAQuF,YAAY7B,EAAKE,WAAW6B,UAE5C/B,EAAKve,WAAa6a,EAAQiD,YAAYE,OAC/Cz4C,EAAKs1C,EAAQsE,eAAeS,eAAerB,EAAK4B,YAGlD,OAAO56C,GAeTg7C,WAAY,SAAoBhC,GAC9B,IAAIh5C,EAEJ,GAAIg5C,EAAKve,WAAa6a,EAAQiD,YAAYC,OAAQ,CAChD,IAAIxZ,EAAMga,EAAK8B,SAASxiC,cAExB,GAAIg9B,EAAQsB,MAAMI,SAAShY,GACzB,IACEh/B,EAAKs1C,EAAQyE,WAAW/a,GAExB,IAAK,IAAI1oC,EAAI,EAAGA,EAAIg/C,EAAQsB,MAAME,WAAW9X,GAAKzoC,OAAQD,IAAK,CAC7D,IAAIsE,EAAY06C,EAAQsB,MAAME,WAAW9X,GAAK1oC,GAC1CuE,EAAQm+C,EAAKiC,aAAargD,GAE9B,GAAI,MAAOC,GAAqD,KAAVA,IAA0B,IAAVA,GAA6B,IAAVA,EASzF,GALkB,UAAdD,GAA4C,WAAnB02C,EAAQz2C,SAAgD,IAAlBA,EAAMqgD,UACvErgD,EAAQA,EAAMqgD,SAIE,UAAdtgD,EAAuB,CAIzB,IAHA,IAAIm8C,EAAM,GACNoE,EAAWtgD,EAAMpG,MAAM,KAElBkJ,EAAI,EAAGA,EAAIw9C,EAAS5kD,OAAQoH,IAAK,CACxC,IAAIs8C,EAAOkB,EAASx9C,GAAGlJ,MAAM,KACzB2mD,EAAUnB,EAAK,GAAGh7C,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAAIqZ,cAE9D,GAAIg9B,EAAQsB,MAAMM,SAASkE,GAAU,CACnC,IAAIC,EAAWpB,EAAK,GAAGh7C,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAC3D83C,EAAIh9C,KAAKqhD,EAAU,KAAOC,IAI1BtE,EAAIxgD,OAAS,IACfsE,EAAQk8C,EAAI92C,KAAK,MACjBD,EAAGk6C,aAAat/C,EAAWC,SAG7BmF,EAAGk6C,aAAat/C,EAAWC,GAI/B,IAAK,IAAIygD,EAAM,EAAGA,EAAMtC,EAAKE,WAAW3iD,OAAQ+kD,IAC9Ct7C,EAAGqpB,YAAYisB,EAAQ0F,WAAWhC,EAAKE,WAAWoC,KAEpD,MAAO5hD,GAEPsG,EAAKs1C,EAAQ0E,YAAY,QAEtB,CACLh6C,EAAKs1C,EAAQsE,eAAe2B,yBAE5B,IAAK,IAAIC,EAAM,EAAGA,EAAMxC,EAAKE,WAAW3iD,OAAQilD,IAC9Cx7C,EAAGqpB,YAAYisB,EAAQ0F,WAAWhC,EAAKE,WAAWsC,WAGjD,GAAIxC,EAAKve,WAAa6a,EAAQiD,YAAYI,SAAU,CACzD34C,EAAKs1C,EAAQsE,eAAe2B,yBAE5B,IAAK,IAAIE,EAAM,EAAGA,EAAMzC,EAAKE,WAAW3iD,OAAQklD,IAC9Cz7C,EAAGqpB,YAAYisB,EAAQ0F,WAAWhC,EAAKE,WAAWuC,UAE3CzC,EAAKve,WAAa6a,EAAQiD,YAAYE,OAC/Cz4C,EAAKs1C,EAAQ0E,YAAYhB,EAAK4B,YAGhC,OAAO56C,GAYT07C,WAAY,SAAoB1nD,GAC9B,MAAoB,iBAATA,EACFA,EAGFA,EAAKiL,QAAQ,aAAc,IAAIA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,SAYjQ08C,aAAc,SAAsB3nD,GAClC,MAAoB,iBAATA,EACFA,EAGFA,EAAKiL,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,OAYrO28C,eAAgB,SAAwBC,GACtC,OAAIA,EAAIj5C,QAAQ,KAAO,EACd,KAGFi5C,EAAIpnD,MAAM,KAAK,IAYxBqnD,iBAAkB,SAA0BD,GAC1C,IAAIE,EAAOzG,EAAQ0G,kBAAkBH,GAErC,GAAIE,EAAKn5C,QAAQ,KAAO,EACtB,OAAOm5C,EAEP,IAAI59C,EAAQ49C,EAAKtnD,MAAM,KAEvB,OADA0J,EAAMoG,OAAO,EAAG,GACTpG,EAAM8B,KAAK,MAatBg8C,mBAAoB,SAA4BJ,GAC9C,IAAKA,EACH,OAAO,KAGT,IAAIriD,EAAIqiD,EAAIpnD,MAAM,KAElB,OAAI+E,EAAEjD,OAAS,EACN,MAGTiD,EAAE+K,OAAO,EAAG,GACL/K,EAAEyG,KAAK,OAYhB+7C,kBAAmB,SAA2BH,GAC5C,OAAOA,EAAMA,EAAIpnD,MAAM,KAAK,GAAK,MAMnCynD,aAAc,SAAsBxiD,QACX,IAAZA,EAAEyhB,OACXm6B,EAAQ6G,MAAMziD,EAAEyhB,OAGdzhB,EAAE0iD,UACJ9G,EAAQ6G,MAAM,UAAYnlD,KAAK2mB,QAAU,IAAMjkB,EAAE0iD,UAAY,IAAM1iD,EAAEmqB,KAAO,MAAQnqB,EAAEP,KAAO,KAAOO,EAAE3D,SAC7F2D,EAAE2iD,SACX/G,EAAQ6G,MAAM,UAAYnlD,KAAK2mB,QAAU,IAAMjkB,EAAE2iD,SAAW,IAAM3iD,EAAE4iD,WAAa,MAAQ5iD,EAAEP,KAAO,KAAOO,EAAE3D,SAE3Gu/C,EAAQ6G,MAAM,UAAYziD,EAAE3D,UAiChCgL,IAAK,SAAaijB,EAAO7B,GACnB6B,IAAUhtB,KAAKqhD,SAASC,OAAqC,WAA5BhH,EAAQ79C,OAAOqN,UAAyD,mBAAzBrN,OAAOqN,QAAQuN,OACjG5a,OAAOqN,QAAQuN,MAAM8T,IAUzBo6B,MAAO,SAAep6B,GACpBnrB,KAAK+J,IAAI/J,KAAKqhD,SAAS1zB,MAAOxC,IAShC1d,KAAM,SAAc0d,GAClBnrB,KAAK+J,IAAI/J,KAAKqhD,SAASzzB,KAAMzC,IAS/BpD,KAAM,SAAcoD,GAClBnrB,KAAK+J,IAAI/J,KAAKqhD,SAASvzB,KAAM3C,IAS/B9T,MAAO,SAAe8T,GACpBnrB,KAAK+J,IAAI/J,KAAKqhD,SAAS9kD,MAAO4uB,IAShCg6B,MAAO,SAAeh6B,GACpBnrB,KAAK+J,IAAI/J,KAAKqhD,SAASC,MAAOn2B,IAYhCq6B,UAAW,SAAmBxD,GAC5B,IAAKA,EACH,OAAO,KAGgB,mBAAdA,EAAKyD,OACdzD,EAAOA,EAAKyD,QAGd,IAAInjD,EAAQi4C,EAAmBp8C,MAAM6jD,EAAKlC,WAAWvgD,QAAQgF,QAAQ0C,KAAI,SAAU3H,GACjF,OAAO0iD,EAAKlC,WAAWxgD,GAAGwkD,YAG5BxhD,EAAMkP,OACN,IAAIS,EAAS3P,EAAM0E,QAAO,SAAU9F,EAAGoH,GACrC,MAAO,GAAGkI,OAAOtP,EAAG,KAAKsP,OAAOlI,EAAG,MAAOkI,OAAO8tC,EAAQ6E,UAAUnB,EAAKlC,WAAW4F,aAAap9C,GAAGzE,OAAQ,OAC1G,IAAI2M,OAAOwxC,EAAK8B,WAEnB,GAAI9B,EAAKE,WAAW3iD,OAAS,EAAG,CAC9B0S,GAAU,IAEV,IAAK,IAAI3S,EAAI,EAAGA,EAAI0iD,EAAKE,WAAW3iD,OAAQD,IAAK,CAC/C,IAAIqmD,EAAQ3D,EAAKE,WAAW5iD,GAE5B,OAAQqmD,EAAMliB,UACZ,KAAK6a,EAAQiD,YAAYC,OAEvBvvC,GAAUqsC,EAAQkH,UAAUG,GAC5B,MAEF,KAAKrH,EAAQiD,YAAYE,KAEvBxvC,GAAUqsC,EAAQ6E,UAAUwC,EAAM/B,WAClC,MAEF,KAAKtF,EAAQiD,YAAYG,MAEvBzvC,GAAU,YAAc0zC,EAAM/B,UAAY,OAIhD3xC,GAAU,KAAO+vC,EAAK8B,SAAW,SAEjC7xC,GAAU,KAGZ,OAAOA,GAOT2zC,WAAY,EAMZC,mBAAoB,GASpBC,oBAAqB,SAA6B3jD,EAAM4jD,GACtDzH,EAAQuH,mBAAmB1jD,GAAQ4jD,GA8CvCzH,QAAkB,SAAUn8C,EAAMk8C,GAEnB,aAATl8C,GAAgC,YAATA,GAA+B,OAATA,IAC3Ck8C,IAAUA,EAAM2H,MAClB3H,EAAM2H,MAAQ1H,EAAQK,GAAGG,OACfT,IACVA,EAAQ,CACN2H,MAAO1H,EAAQK,GAAGG,UAMxB9+C,KAAKimD,SAAW3H,EAAQyE,WAAW5gD,EAAMk8C,GAEzCr+C,KAAKhD,KAAOgD,KAAKimD,WAGnB3H,EAAQC,QAAQhgD,UAAY,CAU1BknD,KAAM,WACJ,OAAOzlD,KAAKimD,UAadznD,SAAU,WACR,OAAO8/C,EAAQkH,UAAUxlD,KAAKimD,WAahCC,GAAI,WAEF,OADAlmD,KAAKhD,KAAOgD,KAAKhD,KAAKg8B,WACfh5B,MAaThE,KAAM,WAEJ,OADAgE,KAAKhD,KAAOgD,KAAKimD,SACVjmD,MAeTq+C,MAAO,SAAe8H,GACpB,IAAK,IAAIh3C,KAAKg3C,EACR7nD,OAAOC,UAAU6Q,eAAe3Q,KAAK0nD,EAAWh3C,UAC7BpI,IAAjBo/C,EAAUh3C,GACZnP,KAAKhD,KAAKopD,gBAAgBj3C,GAE1BnP,KAAKhD,KAAKkmD,aAAa/zC,EAAGg3C,EAAUh3C,KAK1C,OAAOnP,MAmBToB,EAAG,SAAWe,EAAMk8C,EAAO9yB,GACzB,IAAIo6B,EAAQrH,EAAQyE,WAAW5gD,EAAMk8C,EAAO9yB,GAO5C,OANAvrB,KAAKhD,KAAKq1B,YAAYszB,GAEF,iBAATp6B,GAAqC,iBAATA,IACrCvrB,KAAKhD,KAAO2oD,GAGP3lD,MAiBTqmD,MAAO,SAAerE,GACpB,IAAIsE,EACAC,EAASjI,EAAQsE,eAErB,IACE0D,OAAgCv/C,IAAtBw/C,EAAOC,WACjB,MAAO9jD,GACP4jD,GAAU,EAGZ,IAAIG,EAAUH,EAAUC,EAAOC,WAAWxE,GAAM,GAAQ1D,EAAQuF,YAAY7B,GAG5E,OAFAhiD,KAAKhD,KAAKq1B,YAAYo0B,GACtBzmD,KAAKhD,KAAOypD,EACLzmD,MAeT8C,EAAG,SAAWyoB,GACZ,IAAIo6B,EAAQrH,EAAQ0E,YAAYz3B,GAEhC,OADAvrB,KAAKhD,KAAKq1B,YAAYszB,GACf3lD,MAcT0mD,EAAG,SAAWnD,GACZ,IAAIoD,EAAWnjC,SAASG,cAAc,QAEtCgjC,EAASC,UAAYrD,EAIrB,IAFA,IAAIsD,EAAQvI,EAAQ0F,WAAW2C,GAExBE,EAAM3E,WAAW3iD,OAAS,GAC/BS,KAAKhD,KAAKq1B,YAAYw0B,EAAM3E,WAAW,IAGzC,OAAOliD,OAiCXs+C,EAAQwI,QAAU,SAAUngC,EAASogC,EAAI5kD,EAAM3C,EAAM2E,EAAIw2C,EAAM/wC,GAC7D5J,KAAK2mB,QAAUA,EACf3mB,KAAK+mD,GAAKA,EACV/mD,KAAKmC,KAAOA,EACZnC,KAAKR,KAAOA,EACZQ,KAAKmE,GAAKA,EACVnE,KAAK4J,QAAUA,GAAW,CACxB,kBAAoB,EACpB,yBAA2B,GAGzB5J,KAAK4J,QAAQo9C,YACf1I,EAAQv2B,KAAK,yEACb/nB,KAAK4J,QAAQq9C,iBAAmBjnD,KAAK4J,QAAQo9C,iBACtChnD,KAAK4J,QAAQo9C,WAGlBhnD,KAAK4J,QAAQq9C,iBACfjnD,KAAK26C,KAAOA,EAAO2D,EAAQ0G,kBAAkBrK,GAAQ,KAErD36C,KAAK26C,KAAOA,EAId36C,KAAKknD,MAAO,GAGd5I,EAAQwI,QAAQvoD,UAAY,CAY1B4oD,aAAc,SAAsBnF,GAClC,IAAIoF,EAAcpF,EAAKiC,aAAa,SAMpC,OAJImD,GAAepnD,KAAK4J,QAAQy9C,0BAC9BD,EAAcA,EAAY3pD,MAAM,KAAK,IAGhC2pD,GAYTE,eAAgB,SAAwBtF,GACtC,IAAIuF,EAAQvnD,KAERwnD,GAAU,EAEd,OAAKxnD,KAAK+mD,KAGRzI,EAAQyD,aAAaC,EAAM,MAAM,SAAUA,GACrCuF,EAAMJ,aAAanF,KAAUuF,EAAMR,KACrCS,GAAU,MAGPA,GAAWxnD,KAAKmnD,aAAanF,KAAUhiD,KAAK+mD,KAavDU,QAAS,SAAiBzF,GACxB,IAAIrH,EAAOqH,EAAKiC,aAAa,QAEzBjkD,KAAK4J,QAAQq9C,mBACftM,EAAO2D,EAAQ0G,kBAAkBrK,IAGnC,IAAI+M,EAAY1F,EAAKiC,aAAa,QAElC,SAAIjkD,KAAKsnD,eAAetF,IAAWhiD,KAAKmC,OAAQm8C,EAAQ8D,WAAWJ,EAAMhiD,KAAKmC,OAAYnC,KAAKR,OAASrB,MAAMC,QAAQ4B,KAAKR,OAA0C,IAAlCQ,KAAKR,KAAKoM,QAAQ87C,GAAoBA,IAAc1nD,KAAKR,OAAYQ,KAAKmE,IAAM69C,EAAKiC,aAAa,QAAUjkD,KAAKmE,IAASnE,KAAK26C,MAAQA,IAAS36C,KAAK26C,OAiB1RgN,IAAK,SAAa3F,GAChB,IAAI/vC,EAAS,KAEb,IACEA,EAASjS,KAAK2mB,QAAQq7B,GACtB,MAAOt/C,GAGP,MAFA47C,EAAQ4G,aAAaxiD,GAEfA,EAGR,OAAOuP,GASTzT,SAAU,WACR,MAAO,aAAewB,KAAK2mB,QAAU,IAAM3mB,KAAKmC,KAAO,IAAMnC,KAAKmE,GAAK,IAAMnE,KAAK+mD,GAAK,OA6B3FzI,EAAQsJ,aAAe,SAAUC,EAAQlhC,GACvC3mB,KAAK6nD,OAASA,EACd7nD,KAAK2mB,QAAUA,EACf3mB,KAAK8nD,YAAa,IAAI16B,MAAO26B,UAC7B/nD,KAAKknD,MAAO,GAGd5I,EAAQsJ,aAAarpD,UAAY,CAQ/BopD,IAAK,WAEH,OADA3nD,KAAK8nD,YAAa,IAAI16B,MAAO26B,UACtB/nD,KAAK2mB,WAMdoO,MAAO,WACL/0B,KAAK8nD,YAAa,IAAI16B,MAAO26B,WAS/BvpD,SAAU,WACR,MAAO,kBAAoBwB,KAAK2mB,QAAU,IAAM3mB,KAAK6nD,OAAS,OA4JlEvJ,EAAQ0J,WAAa,SAAUC,EAASr+C,GACtC,IAAIs+C,EAASloD,KAGbA,KAAKioD,QAAUA,EAEfjoD,KAAK4J,QAAUA,GAAW,GAC1B,IAAIy+B,EAAQroC,KAAK4J,QAAQqoC,UAAY,GAsDrC,IAAK,IAAI9iC,KApDsB,IAA3B84C,EAAQr8C,QAAQ,QAA4C,IAA5Bq8C,EAAQr8C,QAAQ,SAAyC,IAAxBy8B,EAAMz8B,QAAQ,MACjF5L,KAAKmoD,OAAS,IAAI7J,EAAQ8J,UAAUpoD,MAEpCA,KAAKmoD,OAAS,IAAI7J,EAAQ+J,KAAKroD,MAKjCA,KAAK6kD,IAAM,GAGX7kD,KAAK49C,OAAS,KAGd59C,KAAKsoD,SAAW,KAEhBtoD,KAAKuoD,WAAa,GAClBvoD,KAAKwoD,YAAa,EAClBxoD,KAAKyoD,SAAU,EAEfzoD,KAAK0oD,cAAgB,GACrB1oD,KAAKk3B,SAAW,GAChBl3B,KAAK2oD,aAAe,GACpB3oD,KAAK4oD,eAAiB,GACtB5oD,KAAK6oD,UAAY,GACjB7oD,KAAK8oD,YAAc,GACnB9oD,KAAK+oD,sBAAwB,CAC3B,KAAQ,GACR,UAAa,IAEf/oD,KAAKgpD,aAAe,KACpBhpD,KAAKipD,mBAAqB,KAC1BjpD,KAAKkpD,eAAgB,EACrBlpD,KAAKmpD,WAAY,EACjBnpD,KAAKopD,eAAgB,EACrBppD,KAAKqpD,mBAAoB,EACzBrpD,KAAK2H,QAAS,EACd3H,KAAKspD,UAAW,EAChBtpD,KAAKupD,MAAQ,GACbvpD,KAAKwpD,UAAY,EACjBxpD,KAAKypD,sBAAwB,KAC7BzpD,KAAK0pD,sBAAwB,KAC7B1pD,KAAK2pD,wBAA0B,KAE/B3pD,KAAK4pD,WAAa,EAElB5pD,KAAKgpD,aAAez5C,YAAW,WAC7B,OAAO24C,EAAO2B,YACb,KACHtM,EAAiBv9C,KAAK4J,QAAQ6zC,SAC9Bz9C,KAAK8pD,uBAAuB9pD,KAAK4J,QAAQmgD,YAE3BzL,EAAQuH,mBACpB,GAAIvnD,OAAOC,UAAU6Q,eAAe3Q,KAAK6/C,EAAQuH,mBAAoB12C,GAAI,CACvE,IAAI66C,EAAI,aAERA,EAAEzrD,UAAY+/C,EAAQuH,mBAAmB12C,GACzCnP,KAAKmP,GAAK,IAAI66C,EACdhqD,KAAKmP,GAAGgX,KAAKnmB,QAKnBs+C,EAAQ0J,WAAWzpD,UAAY,CAO7Bw2B,MAAO,WACL/0B,KAAKmoD,OAAO8B,SAGZjqD,KAAKwoD,YAAa,EAClBxoD,KAAKyoD,SAAU,EAEfzoD,KAAK0oD,cAAgB,GACrB1oD,KAAKk3B,SAAW,GAChBl3B,KAAK2oD,aAAe,GACpB3oD,KAAK4oD,eAAiB,GACtB5oD,KAAK6oD,UAAY,GACjB7oD,KAAK8oD,YAAc,GACnB9oD,KAAKkpD,eAAgB,EACrBlpD,KAAKmpD,WAAY,EACjBnpD,KAAKopD,eAAgB,EACrBppD,KAAKspD,UAAW,EAChBtpD,KAAKupD,MAAQ,GACbvpD,KAAKkqD,UAAY,GACjBlqD,KAAKwpD,UAAY,GAYnBrzC,MAAO,WACLnW,KAAK2H,QAAS,GAQhByO,OAAQ,WACNpW,KAAK2H,QAAS,GAyBhBwiD,YAAa,SAAqBC,GAChC,IAAIC,EAAO,uCAAuCpiD,QAAQ,SAAS,SAAU7G,GAC3E,IAAIyB,EAAoB,GAAhByJ,KAAKE,SAAgB,EAE7B,OADc,MAANpL,EAAYyB,EAAQ,EAAJA,EAAU,GACzBrE,SAAS,OAGpB,MAAsB,iBAAX4rD,GAAyC,iBAAXA,EAChCC,EAAO,IAAMD,EAEbC,EAAO,IA0BlBC,wBAAyB,SAAiCrY,EAAUsY,EAAa96C,GAC/EzP,KAAK+oD,sBAAsB9W,GAAUsY,GAAe96C,GA2CtD+6C,QAAS,SAAiB3F,EAAK4F,EAAMh7C,EAAU08B,EAAMue,EAAMC,EAAOC,GAChE5qD,KAAK6kD,IAAMA,EAKX7kD,KAAK6qD,QAAUvM,EAAQ0G,kBAAkBhlD,KAAK6kD,KAK9C7kD,KAAK4qD,QAAUA,GAAWtM,EAAQsG,eAAe5kD,KAAK6kD,KAKtD7kD,KAAKyqD,KAAOA,EAKZzqD,KAAK8qD,SAAW,OAChB9qD,KAAK+qD,iBAAmBt7C,EACxBzP,KAAKopD,eAAgB,EACrBppD,KAAKmpD,WAAY,EACjBnpD,KAAKkpD,eAAgB,EACrBlpD,KAAKspD,UAAW,EAEhBtpD,KAAK49C,OAASU,EAAQwG,iBAAiB9kD,KAAK6kD,KAE5C7kD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOC,WAAY,MAErDpgD,KAAKmoD,OAAO8C,SAAS9e,EAAMue,EAAMC,IA2BnCO,OAAQ,SAAgBrG,EAAKsG,EAAKC,EAAK37C,EAAU08B,EAAMue,EAAMW,GAC3D,KAAIrrD,KAAKmoD,kBAAkB7J,EAAQ+J,MAE5B,CACL,IAAIhxC,EAAQ,IAAI5I,MAAM,gEAEtB,MADA4I,EAAMlV,KAAO,sBACPkV,EAJNrX,KAAKmoD,OAAOmD,QAAQzG,EAAKsG,EAAKC,EAAK37C,EAAU08B,EAAMue,EAAMW,IAmC7DE,QAAS,SAAiB1G,EAAKp1C,EAAU08B,EAAMue,EAAMW,GACnD,IAAIrrD,KAAKwrD,2BAEF,CACL,IAAIn0C,EAAQ,IAAI5I,MAAM,iEAEtB,MADA4I,EAAMlV,KAAO,sBACPkV,EAJNrX,KAAKmoD,OAAOsD,SAAS5G,EAAKp1C,EAAU08B,EAAMue,EAAMW,IAYpDG,yBAA0B,WACxB,GAAIxrD,KAAKmoD,kBAAkB7J,EAAQ+J,KAAM,CACvC,IAAKp9B,KACH,OAAO,EAGT,IACEygC,eAAeC,QAAQ,YAAa,aACpCD,eAAeE,WAAW,aAC1B,MAAOlpD,GACP,OAAO,EAGT,OAAO,EAGT,OAAO,GAqBTmpD,SAAU,SAAkB7J,KAsB5B8J,UAAW,SAAmB9J,KAgB9B+J,SAAU,SAAkBz3C,KAgB5B03C,UAAW,SAAmB13C,KAe9B23C,aAAc,SAAsBb,KAgBpCj3B,KAAM,SAAc6tB,GAClB,GAAa,OAATA,EAAJ,CAIA,GAAyB,mBAAdA,EAAKxwC,KACd,IAAK,IAAIlS,EAAI,EAAGA,EAAI0iD,EAAKziD,OAAQD,IAC/BU,KAAKksD,WAAWlK,EAAK1iD,QAEO,mBAAd0iD,EAAKyD,KACrBzlD,KAAKksD,WAAWlK,EAAKyD,QAErBzlD,KAAKksD,WAAWlK,GAGlBhiD,KAAKmoD,OAAOgE,UAWdxgC,MAAO,WAGLD,aAAa1rB,KAAKgpD,cAElBhpD,KAAK6pD,WAmBPuC,aAAc,SAAsBpK,EAAMvyC,EAAU48C,EAASC,GAC3D,IAAIC,EAASvsD,KAETwsD,EAAiB,KAEI,mBAAdxK,EAAKyD,OACdzD,EAAOA,EAAKyD,QAGd,IAAIthD,EAAK69C,EAAKiC,aAAa,MAQ3B,GANK9/C,IAEHA,EAAKnE,KAAKmqD,YAAY,gBACtBnI,EAAKkB,aAAa,KAAM/+C,IAGF,mBAAbsL,GAA8C,mBAAZ48C,EAAwB,CACnE,IAAI1lC,EAAU3mB,KAAK03B,YAAW,SAAU+0B,GAElCD,GACFD,EAAOG,mBAAmBF,GAGQ,UAAhCC,EAAOxI,aAAa,QAClBoI,GACFA,EAAQI,GAEDh9C,GACTA,EAASg9C,KAEV,KAAM,WAAY,KAAMtoD,GAEvBmoD,IACFE,EAAiBxsD,KAAK2sD,gBAAgBL,GAAS,WAS7C,OAPAC,EAAOK,cAAcjmC,GAGjB0lC,GACFA,EAAQ,OAGH,MAMb,OADArsD,KAAKm0B,KAAK6tB,GACH79C,GAiBT0oD,OAAQ,SAAgB7K,EAAMvyC,EAAU48C,EAASC,GAC/C,IAAIQ,EAAS9sD,KAETwsD,EAAiB,KAEI,mBAAdxK,EAAKyD,OACdzD,EAAOA,EAAKyD,QAGd,IAAIthD,EAAK69C,EAAKiC,aAAa,MAQ3B,GANK9/C,IAEHA,EAAKnE,KAAKmqD,YAAY,UACtBnI,EAAKkB,aAAa,KAAM/+C,IAGF,mBAAbsL,GAA8C,mBAAZ48C,EAAwB,CACnE,IAAI1lC,EAAU3mB,KAAK03B,YAAW,SAAU+0B,GAElCD,GACFM,EAAOJ,mBAAmBF,GAG5B,IAAIO,EAASN,EAAOxI,aAAa,QAEjC,GAAe,WAAX8I,EACEt9C,GACFA,EAASg9C,OAEN,IAAe,UAAXM,EAIJ,CACL,IAAI11C,EAAQ,IAAI5I,MAAM,sBAAsB+B,OAAOu8C,IAEnD,MADA11C,EAAMlV,KAAO,eACPkV,EANFg1C,GACFA,EAAQI,MAOX,KAAM,KAAM,CAAC,QAAS,UAAWtoD,GAEhCmoD,IACFE,EAAiBxsD,KAAK2sD,gBAAgBL,GAAS,WAS7C,OAPAQ,EAAOF,cAAcjmC,GAGjB0lC,GACFA,EAAQ,OAGH,MAMb,OADArsD,KAAKm0B,KAAK6tB,GACH79C,GAOT+nD,WAAY,SAAoBc,GAC9B,GAAgB,OAAZA,IAAqBA,EAAQv0B,UAAYu0B,EAAQ9K,WAAY,CAC/D,IAAI7qC,EAAQ,IAAI5I,MAAM,gCAEtB,MADA4I,EAAMlV,KAAO,eACPkV,EAGRrX,KAAKupD,MAAMxmD,KAAKiqD,IAMlBC,aAAc,WACZ,IAAIC,EAASltD,KAEbA,KAAKupD,MAAMxmD,KAAK,WAEhB/C,KAAKmoD,OAAO8E,eAEZjtD,KAAKgpD,aAAez5C,YAAW,WAC7B,OAAO29C,EAAOrD,YACb,MAyBL8C,gBAAiB,SAAyB9E,EAAQlhC,GAChD,IAAIwmC,EAAQ,IAAI7O,EAAQsJ,aAAaC,EAAQlhC,GAE7C,OADA3mB,KAAK6oD,UAAU9lD,KAAKoqD,GACbA,GAaTT,mBAAoB,SAA4BU,GAG9CptD,KAAK2oD,aAAa5lD,KAAKqqD,IAmEzB11B,WAAY,SAAoB/Q,EAASogC,EAAI5kD,EAAM3C,EAAM2E,EAAIw2C,EAAM/wC,GACjE,IAAIyjD,EAAO,IAAI/O,EAAQwI,QAAQngC,EAASogC,EAAI5kD,EAAM3C,EAAM2E,EAAIw2C,EAAM/wC,GAElE,OADA5J,KAAK8oD,YAAY/lD,KAAKsqD,GACfA,GAaTT,cAAe,SAAuBQ,GAGpCptD,KAAK4oD,eAAe7lD,KAAKqqD,GAGzB,IAAI9tD,EAAIU,KAAK8oD,YAAYl9C,QAAQwhD,GAE7B9tD,GAAK,GACPU,KAAK8oD,YAAYv7C,OAAOjO,EAAG,IAa/BwqD,uBAAwB,SAAgCC,GACtD/pD,KAAK+pD,WAAa,IAClBA,EAAaA,GAAc,CAACzL,EAAQgP,cAAehP,EAAQiP,aAAcjP,EAAQkP,QAASlP,EAAQmP,gBAAiBnP,EAAQoP,YAAapP,EAAQqP,UAAWrP,EAAQsP,WACxJppD,QAAQxE,KAAK6tD,sBAAsB3nD,KAAKlG,QAWrD6tD,sBAAuB,SAA+B/V,GACpD93C,KAAK+pD,WAAWjS,EAAUv5C,UAAU4D,MAAQ21C,GAmB9CgW,WAAY,SAAoBt2B,GAK9B,GAJAx3B,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOO,cAAelpB,GAExD8mB,EAAQv2B,KAAK,kCAAoCyP,GAE7Cx3B,KAAKmpD,UAAW,CAClB,IAAI4E,GAAO,EACX/tD,KAAKopD,eAAgB,EAEjBppD,KAAKkpD,gBACP6E,EAAOtP,EAAM,CACX,MAASH,EAAQK,GAAGG,OACpB,KAAQ,iBAKZ9+C,KAAKipD,mBAAqBjpD,KAAKguD,oBAAoB,IAAMhuD,KAAKiuD,qBAAqB/nD,KAAKlG,OAExFA,KAAKmoD,OAAO+F,YAAYH,QAExBzP,EAAQv2B,KAAK,gEAEb/nB,KAAKmoD,OAAOgG,oBAEZnuD,KAAKouD,iBAcTpD,qBAAsB,SAA8Bh1B,EAAQq4B,EAAWrM,GAErE,IAAK,IAAI7yC,KAAKmvC,EAAQuH,mBACpB,GAAIvnD,OAAOC,UAAU6Q,eAAe3Q,KAAK6/C,EAAQuH,mBAAoB12C,GAAI,CACvE,IAAIm/C,EAAStuD,KAAKmP,GAElB,GAAIm/C,EAAOC,cACT,IACED,EAAOC,cAAcv4B,EAAQq4B,GAC7B,MAAOz+C,GACP0uC,EAAQjnC,MAAM,GAAG7G,OAAOrB,EAAG,iDAAiDqB,OAAOZ,KAO3F,GAAI5P,KAAK+qD,iBACP,IACE/qD,KAAK+qD,iBAAiB/0B,EAAQq4B,EAAWrM,GACzC,MAAOt/C,GACP47C,EAAQ4G,aAAaxiD,GAErB47C,EAAQjnC,MAAM,iDAAiD7G,OAAO9N,MAW5E0rD,cAAe,SAAuBC,GACH,iBAAtBruD,KAAKgpD,cACdt9B,aAAa1rB,KAAKgpD,cAIY,OAA5BhpD,KAAKipD,qBACPjpD,KAAK0sD,mBAAmB1sD,KAAKipD,oBAC7BjpD,KAAKipD,mBAAqB,MAG5B3K,EAAQiH,MAAM,4BAEdvlD,KAAKmoD,OAAOiG,gBAEZpuD,KAAKkpD,eAAgB,EACrBlpD,KAAKopD,eAAgB,EACrBppD,KAAKspD,UAAW,EAEhBtpD,KAAKk3B,SAAW,GAChBl3B,KAAK0oD,cAAgB,GACrB1oD,KAAK2oD,aAAe,GACpB3oD,KAAK4oD,eAAiB,GACtB5oD,KAAK6oD,UAAY,GACjB7oD,KAAK8oD,YAAc,GAEnB9oD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOM,aAAc4N,GAEvDruD,KAAKmpD,WAAY,GAenBqF,UAAW,SAAmBC,EAAKC,GACjC,IAAIC,EAAS3uD,KAEbs+C,EAAQiH,MAAM,oBAEd,IAAIvD,EAAOhiD,KAAKmoD,OAAOyG,WAAWH,GAElC,GAAa,OAATzM,EAAJ,CAqBA,IAjBIhiD,KAAK6rD,WAAavN,EAAQ0J,WAAWzpD,UAAUstD,WAC7C7J,EAAK8B,WAAa9jD,KAAKmoD,OAAO0G,OAAS7M,EAAKE,WAAW3iD,OACzDS,KAAK6rD,SAAS7J,EAAKE,WAAW,IAE9BliD,KAAK6rD,SAAS7J,IAIdhiD,KAAK+rD,WAAazN,EAAQ0J,WAAWzpD,UAAUwtD,WAC7C2C,EACF1uD,KAAK+rD,SAAS2C,GAEd1uD,KAAK+rD,SAASzN,EAAQkH,UAAUxD,KAK7BhiD,KAAK4oD,eAAerpD,OAAS,GAAG,CACrC,IAAI8tD,EAAOrtD,KAAK4oD,eAAejxC,MAC3BrY,EAAIU,KAAKk3B,SAAStrB,QAAQyhD,GAE1B/tD,GAAK,GACPU,KAAKk3B,SAAS3pB,OAAOjO,EAAG,GAK5B,KAAOU,KAAK8oD,YAAYvpD,OAAS,GAC/BS,KAAKk3B,SAASn0B,KAAK/C,KAAK8oD,YAAYnxC,OAItC,GAAI3X,KAAKopD,eAAiBppD,KAAKmoD,OAAO2G,cACpC9uD,KAAKouD,oBADP,CAMA,IAAI5uD,EAAOwiD,EAAKiC,aAAa,QAE7B,GAAa,OAATzkD,GAA0B,cAATA,EAAsB,CAEzC,GAAIQ,KAAKopD,cACP,OAIF,IAAI2F,EAAO/M,EAAKiC,aAAa,aACzB+K,EAAWhN,EAAKv+B,qBAAqB,YAczC,OAZa,OAATsrC,GACW,wBAATA,GAAkCC,EAASzvD,OAAS,IACtDwvD,EAAO,YAGT/uD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOE,SAAU0O,IAEnD/uD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOE,SAAU/B,EAAQyC,eAAekO,oBAG5EjvD,KAAKouD,cAAcW,GAMrBzQ,EAAQyD,aAAaC,EAAM,MAAM,SAAU2D,GAEzC,IAAIuJ,EAAUP,EAAOz3B,SACrBy3B,EAAOz3B,SAAW,GAElB,IAAK,IAAIi4B,EAAM,EAAGA,EAAMD,EAAQ3vD,OAAQ4vD,IAAO,CAC7C,IAAIC,EAAQF,EAAQC,GAGpB,MACMC,EAAM3H,QAAQ9B,KAAWgJ,EAAOzF,eAAkBkG,EAAMlI,MACtDkI,EAAMzH,IAAIhC,KAIdgJ,EAAOz3B,SAASn0B,KAAKqsD,GAEvB,MAAO1sD,GAEP47C,EAAQv2B,KAAK,wDAA0DrlB,EAAE3D,iBASjFgrD,WAAY,GAkBZsF,YAAa,SAAqBZ,EAAKa,EAAWZ,GAGhD,IAAIa,EAFJjR,EAAQiH,MAAM,0BACdvlD,KAAKmpD,WAAY,EAGjB,IACEoG,EAAWvvD,KAAKmoD,OAAOyG,WAAWH,GAClC,MAAO/rD,GACP,GAAIA,EAAEP,OAASm8C,EAAQyC,eAAeC,WACpC,MAAMt+C,EAGR1C,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOE,SAAU/B,EAAQyC,eAAeC,YAE1EhhD,KAAKouD,cAAc9P,EAAQyC,eAAeC,YAG5C,GAAKuO,IAIDvvD,KAAK6rD,WAAavN,EAAQ0J,WAAWzpD,UAAUstD,WAC7C0D,EAASzL,WAAa9jD,KAAKmoD,OAAO0G,OAASU,EAASrN,WAAW3iD,OACjES,KAAK6rD,SAAS0D,EAASrN,WAAW,IAElCliD,KAAK6rD,SAAS0D,IAIdvvD,KAAK+rD,WAAazN,EAAQ0J,WAAWzpD,UAAUwtD,WAC7C2C,EACF1uD,KAAK+rD,SAAS2C,GAEd1uD,KAAK+rD,SAASzN,EAAQkH,UAAU+J,KAIpBvvD,KAAKmoD,OAAOkH,YAAYE,KAEtBjR,EAAQ6B,OAAOE,UAajC,GANIkP,EAASC,uBACGD,EAASC,uBAAuBlR,EAAQK,GAAGW,OAAQ,YAAY//C,OAAS,EAExEgwD,EAAS9rC,qBAAqB,mBAAmBlkB,OAAS,GAAKgwD,EAAS9rC,qBAAqB,YAAYlkB,OAAS,EAGlI,CAMA,IAAIkwD,EAAU,GACV1F,EAAawF,EAAS9rC,qBAAqB,aAE/C,GAAIsmC,EAAWxqD,OAAS,EACtB,IAAK,IAAID,EAAI,EAAGA,EAAIyqD,EAAWxqD,OAAQD,IAAK,CAC1C,IAAIowD,EAAOpR,EAAQqF,QAAQoG,EAAWzqD,IAClCU,KAAK+pD,WAAW2F,IAAOD,EAAQ1sD,KAAK/C,KAAK+pD,WAAW2F,IAIrC,IAAnBD,EAAQlwD,QAC2C,IAAjDgwD,EAAS9rC,qBAAqB,QAAQlkB,QASb,IAA3BS,KAAKqpD,mBACPrpD,KAAK2vD,aAAaF,GAPhBzvD,KAAKmoD,OAAOyH,kBAAkBN,QAnBhCtvD,KAAKmoD,OAAOyH,kBAAkBN,IAuClCO,yBAA0B,SAAkC9F,GAE1D,IAAK,IAAIzqD,EAAI,EAAGA,EAAIyqD,EAAWxqD,OAAS,IAAKD,EAAG,CAG9C,IAFA,IAAIwwD,EAASxwD,EAEJqH,EAAIrH,EAAI,EAAGqH,EAAIojD,EAAWxqD,SAAUoH,EACvCojD,EAAWpjD,GAAGpI,UAAUgY,SAAWwzC,EAAW+F,GAAQvxD,UAAUgY,WAClEu5C,EAASnpD,GAIb,GAAImpD,IAAWxwD,EAAG,CAChB,IAAIywD,EAAOhG,EAAWzqD,GACtByqD,EAAWzqD,GAAKyqD,EAAW+F,GAC3B/F,EAAW+F,GAAUC,GAIzB,OAAOhG,GAgBT4F,aAAc,SAAsBF,GAC7BzvD,KAAKgwD,iBAAiBP,IACzBzvD,KAAKiwD,sBAiBTD,iBAAkB,SAA0BjG,GAC1CA,EAAa/pD,KAAK6vD,yBAAyB9F,GAAc,IAGzD,IAFA,IAAImG,GAAkB,EAEb5wD,EAAI,EAAGA,EAAIyqD,EAAWxqD,SAAUD,EACvC,GAAKyqD,EAAWzqD,GAAGf,UAAU0H,KAAKjG,MAAlC,CAIAA,KAAKypD,sBAAwBzpD,KAAKmwD,eAAenwD,KAAKowD,iBAAiBlqD,KAAKlG,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAK0pD,sBAAwB1pD,KAAKmwD,eAAenwD,KAAKqwD,iBAAiBnqD,KAAKlG,MAAO,KAAM,UAAW,KAAM,MAC1GA,KAAK2pD,wBAA0B3pD,KAAKmwD,eAAenwD,KAAKswD,mBAAmBpqD,KAAKlG,MAAO,KAAM,YAAa,KAAM,MAChHA,KAAKuwD,gBAAkB,IAAIxG,EAAWzqD,GAEtCU,KAAKuwD,gBAAgBC,QAAQxwD,MAE7B,IAAIywD,EAAwBrS,EAAO,OAAQ,CACzC,MAASE,EAAQK,GAAGU,KACpB,UAAar/C,KAAKuwD,gBAAgBpuD,OAGpC,GAAInC,KAAKuwD,gBAAgBG,cAAe,CACtC,IAAIx7B,EAAWl1B,KAAKuwD,gBAAgBI,YAAY3wD,KAAM,MAEtDywD,EAAsB3tD,EAAE8tD,KAAK17B,IAG/Bl1B,KAAKm0B,KAAKs8B,EAAsBhL,QAChCyK,GAAkB,EAClB,MAGF,OAAOA,GAOTI,mBAAoB,SAA4BtO,GAC9C,IAAI6O,EAAYC,KAAKxS,EAAQqF,QAAQ3B,IAEjC9sB,EAAWl1B,KAAKuwD,gBAAgBI,YAAY3wD,KAAM6wD,GAElDpE,EAASrO,EAAO,WAAY,CAC9B,MAASE,EAAQK,GAAGU,OAQtB,MALiB,KAAbnqB,GACFu3B,EAAO3pD,EAAE8tD,KAAK17B,IAGhBl1B,KAAKm0B,KAAKs4B,EAAOhH,SACV,GAOTwK,mBAAoB,WACuB,OAArC3R,EAAQsG,eAAe5kD,KAAK6kD,MAG9B7kD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOE,SAAU/B,EAAQyC,eAAeG,kBAE1ElhD,KAAK8tD,WAAWxP,EAAQyC,eAAeG,oBAGvClhD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOG,eAAgB,MAEzDtgD,KAAKmwD,eAAenwD,KAAK+wD,sBAAsB7qD,KAAKlG,MAAO,KAAM,KAAM,KAAM,WAE7EA,KAAKm0B,KAAKqqB,EAAI,CACZ,KAAQ,MACR,GAAMx+C,KAAK49C,OACX,GAAM,YACLx8C,EAAE,QAAS,CACZ4kD,MAAO1H,EAAQK,GAAGI,OACjB39C,EAAE,WAAY,IAAI0B,EAAEw7C,EAAQsG,eAAe5kD,KAAK6kD,MAAMY,UAkB7DsL,sBAAuB,SAA+B/O,GAEpD,IAAIgP,EAAKxS,EAAI,CACXh/C,KAAM,MACN2E,GAAI,YACH/C,EAAE,QAAS,CACZ4kD,MAAO1H,EAAQK,GAAGI,OACjB39C,EAAE,WAAY,IAAI0B,EAAEw7C,EAAQsG,eAAe5kD,KAAK6kD,MAAMqB,KAAK9kD,EAAE,YAAY0B,EAAE9C,KAAKyqD,MAcnF,OAZKnM,EAAQ2G,mBAAmBjlD,KAAK6kD,OAInC7kD,KAAK6kD,IAAMvG,EAAQ0G,kBAAkBhlD,KAAK6kD,KAAO,YAGnDmM,EAAG9K,KAAK9kD,EAAE,WAAY,IAAI0B,EAAEw7C,EAAQ2G,mBAAmBjlD,KAAK6kD,MAE5D7kD,KAAKmwD,eAAenwD,KAAKixD,UAAU/qD,KAAKlG,MAAO,KAAM,KAAM,KAAM,WAEjEA,KAAKm0B,KAAK68B,EAAGvL,SACN,GAYT2K,iBAAkB,SAA0BpO,GAC1C,IAAIkP,EAASlxD,KAEb,GAAIA,KAAKuoD,WAAW,oBAAqB,CACvC,IAAI4I,EAGA9sC,EAFUysC,KAAKxS,EAAQqF,QAAQ3B,IAEbn8C,MADJ,yBAOlB,GAJmB,MAAfwe,EAAQ,KACV8sC,EAAkB9sC,EAAQ,IAGxB8sC,IAAoBnxD,KAAKuoD,WAAW,oBAWtC,OATAvoD,KAAK4sD,cAAc5sD,KAAK0pD,uBACxB1pD,KAAK0pD,sBAAwB,KAEzB1pD,KAAK2pD,0BACP3pD,KAAK4sD,cAAc5sD,KAAK2pD,yBACxB3pD,KAAK2pD,wBAA0B,MAGjC3pD,KAAKuoD,WAAa,GACXvoD,KAAKqwD,iBAAiB,MAIjC/R,EAAQ7wC,KAAK,kCAETzN,KAAKuwD,iBACPvwD,KAAKuwD,gBAAgBa,YAIvBpxD,KAAK4sD,cAAc5sD,KAAK0pD,uBACxB1pD,KAAK0pD,sBAAwB,KAEzB1pD,KAAK2pD,0BACP3pD,KAAK4sD,cAAc5sD,KAAK2pD,yBACxB3pD,KAAK2pD,wBAA0B,MAGjC,IAAI0H,EAAyB,GAEzBC,EAAU,SAAiBp6B,EAAU8qB,GACvC,KAAO9qB,EAAS33B,QACd2xD,EAAOtE,cAAc11B,EAASvf,OAKhC,OAFAu5C,EAAOK,2BAA2BvP,IAE3B,GAYT,OATAqP,EAAuBtuD,KAAK/C,KAAKmwD,gBAAe,SAAUnO,GACxD,OAAOsP,EAAQD,EAAwBrP,KACtC,KAAM,kBAAmB,KAAM,OAClCqP,EAAuBtuD,KAAK/C,KAAKmwD,gBAAe,SAAUnO,GACxD,OAAOsP,EAAQD,EAAwBrP,KACtC1D,EAAQK,GAAGW,OAAQ,WAAY,KAAM,OAExCt/C,KAAKitD,gBAEE,GAUTsE,2BAA4B,SAAoCvP,GAE9DhiD,KAAKsoD,SAAWtG,EAEhB,IAAK,IAAI1iD,EAAI,EAAGA,EAAI0iD,EAAKE,WAAW3iD,OAAQD,IAAK,CAC/C,IAAIqmD,EAAQ3D,EAAKE,WAAW5iD,GAEL,SAAnBqmD,EAAM7B,WACR9jD,KAAKyoD,SAAU,GAGM,YAAnB9C,EAAM7B,WACR9jD,KAAKwoD,YAAa,GAItB,OAAKxoD,KAAKyoD,SAIEzoD,KAAK4J,QAAQ4nD,wBAGvBxxD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOW,aAAc,MAFvD9gD,KAAKkG,QAKA,IATLlG,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,OAE5C,IAuBXr6C,KAAM,WACJ,GAAKlG,KAAKyoD,QAAV,CAKAzoD,KAAKmwD,eAAenwD,KAAKyxD,wBAAwBvrD,KAAKlG,MAAO,KAAM,KAAM,KAAM,gBAE/E,IAAI0xD,EAAWpT,EAAQ2G,mBAAmBjlD,KAAK6kD,KAE3C6M,EACF1xD,KAAKm0B,KAAKqqB,EAAI,CACZh/C,KAAM,MACN2E,GAAI,iBACH/C,EAAE,OAAQ,CACX4kD,MAAO1H,EAAQK,GAAGa,OACjBp+C,EAAE,WAAY,IAAI0B,EAAE4uD,GAAUjM,QAEjCzlD,KAAKm0B,KAAKqqB,EAAI,CACZh/C,KAAM,MACN2E,GAAI,iBACH/C,EAAE,OAAQ,CACX4kD,MAAO1H,EAAQK,GAAGa,OACjBiG,aArBHnH,EAAQv0C,IAAIu0C,EAAQ+C,SAASzzB,KAAM,oEAkCvC6jC,wBAAyB,SAAiCzP,GAGtD,IACIqM,EAHN,GAAkC,UAA9BrM,EAAKiC,aAAa,QAWpB,OAVA3F,EAAQv2B,KAAK,4BACEi6B,EAAKv+B,qBAAqB,YAG5BlkB,OAAS,IACpB8uD,EAAY/P,EAAQyC,eAAeE,UAGrCjhD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOI,SAAU8N,EAAWrM,IAEvD,EAIT,IAAI97C,EAAO87C,EAAKv+B,qBAAqB,QAErC,KAAIvd,EAAK3G,OAAS,GAmBhB,OAJA++C,EAAQv2B,KAAK,4BAEb/nB,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,IAElD,EAlBP,IAAI2P,EAAUzrD,EAAK,GAAGud,qBAAqB,OAEvCkuC,EAAQpyD,OAAS,IACnBS,KAAK6kD,IAAMvG,EAAQqF,QAAQgO,EAAQ,IAE/B3xD,KAAKwoD,WACPxoD,KAAK4xD,qBAEL5xD,KAAKkpD,eAAgB,EAErBlpD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOK,UAAW,SAoB5DoR,kBAAmB,WACjB,IAAK5xD,KAAKwoD,WACR,MAAM,IAAI/5C,MAAM,kDAAoD,yBAAyB+B,OAAO8tC,EAAQK,GAAGc,QAAS,qCAG1Hz/C,KAAKmwD,eAAenwD,KAAK6xD,mBAAmB3rD,KAAKlG,MAAO,KAAM,KAAM,KAAM,mBAE1EA,KAAKm0B,KAAKqqB,EAAI,CACZh/C,KAAM,MACN2E,GAAI,oBACH/C,EAAE,UAAW,CACd4kD,MAAO1H,EAAQK,GAAGc,UACjBgG,SAqBLoM,mBAAoB,SAA4B7P,GAC9C,GAAkC,WAA9BA,EAAKiC,aAAa,QACpBjkD,KAAKkpD,eAAgB,EAErBlpD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOK,UAAW,WAC/C,GAAkC,UAA9BwB,EAAKiC,aAAa,QAK3B,OAJA3F,EAAQv2B,KAAK,4BAEb/nB,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,IAElD,EAGT,OAAO,GAYTqO,iBAAkB,SAA0BrO,GAgB1C,OAdIhiD,KAAKypD,wBACPzpD,KAAK4sD,cAAc5sD,KAAKypD,uBACxBzpD,KAAKypD,sBAAwB,MAG3BzpD,KAAK2pD,0BACP3pD,KAAK4sD,cAAc5sD,KAAK2pD,yBACxB3pD,KAAK2pD,wBAA0B,MAG7B3pD,KAAKuwD,iBAAiBvwD,KAAKuwD,gBAAgBuB,YAE/C9xD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,IAElD,GAeTiP,UAAW,SAAmBjP,GAW5B,MAVkC,WAA9BA,EAAKiC,aAAa,SACpBjkD,KAAKkpD,eAAgB,EAErBlpD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOK,UAAW,OACb,UAA9BwB,EAAKiC,aAAa,UAC3BjkD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOI,SAAU,KAAMyB,GAEzDhiD,KAAK8tD,WAAW,2BAGX,GAcTE,oBAAqB,SAA6BnG,EAAQlhC,GACxD,IAAIwmC,EAAQ,IAAI7O,EAAQsJ,aAAaC,EAAQlhC,GAG7C,OAFAwmC,EAAMjG,MAAO,EACblnD,KAAK6oD,UAAU9lD,KAAKoqD,GACbA,GAiBTgD,eAAgB,SAAwBxpC,EAASogC,EAAI5kD,EAAM3C,EAAM2E,GAC/D,IAAIkpD,EAAO,IAAI/O,EAAQwI,QAAQngC,EAASogC,EAAI5kD,EAAM3C,EAAM2E,GAGxD,OAFAkpD,EAAKnG,MAAO,EACZlnD,KAAK8oD,YAAY/lD,KAAKsqD,GACfA,GAYTY,qBAAsB,WAUpB,OATA3P,EAAQiH,MAAM,mCAEdvlD,KAAKgrD,qBAAqB1M,EAAQ6B,OAAOU,YAAa,MAEtD7gD,KAAKmoD,OAAO8F,uBAGZjuD,KAAKouD,iBAEE,GASTvE,QAAS,WAMP,IALA,IAAIkI,EAAS/xD,KAKNA,KAAK6oD,UAAUtpD,OAAS,GAC7BS,KAAK0oD,cAAc3lD,KAAK/C,KAAK6oD,UAAUlxC,OAIzC,KAAO3X,KAAK2oD,aAAappD,OAAS,GAAG,CACnC,IAAI4tD,EAAQntD,KAAK2oD,aAAahxC,MAC1BrY,EAAIU,KAAK0oD,cAAc98C,QAAQuhD,GAE/B7tD,GAAK,GACPU,KAAK0oD,cAAcn7C,OAAOjO,EAAG,GAQjC,IAHA,IAAI8vB,GAAM,IAAIhC,MAAO26B,UACjBmH,EAAU,GAEL8C,EAAM,EAAGA,EAAMhyD,KAAK0oD,cAAcnpD,OAAQyyD,IAAO,CACxD,IAAIC,EAASjyD,KAAK0oD,cAAcsJ,IAE5BhyD,KAAKkpD,eAAkB+I,EAAO/K,OACpB+K,EAAOnK,WAAamK,EAAOpK,OAE3Bz4B,GAAO,EACb6iC,EAAOtK,OACTuH,EAAQnsD,KAAKkvD,GAGf/C,EAAQnsD,KAAKkvD,IAKnBjyD,KAAK0oD,cAAgBwG,EACrBxjC,aAAa1rB,KAAKgpD,cAElBhpD,KAAKmoD,OAAO0B,UAGR7pD,KAAKmpD,YACPnpD,KAAKgpD,aAAez5C,YAAW,WAC7B,OAAOwiD,EAAOlI,YACb,QAqCTvL,EAAQ4T,cAAgB,SAAU/vD,EAAMuuD,EAAen6C,GAIrDvW,KAAKmC,KAAOA,EAKZnC,KAAK0wD,cAAgBA,EAmBrB1wD,KAAKuW,SAAWA,GAGlB+nC,EAAQ4T,cAAc3zD,UAAY,CAmBhC0H,KAAM,SAAcksD,GAClB,OAAO,GAST3B,QAAS,SAAiB2B,GACxBnyD,KAAKoyD,YAAcD,GAcrBxB,YAAa,SAAqBwB,EAAYtB,GAC5C,MAAM,IAAIpiD,MAAM,6CAMlBqjD,UAAW,WACT9xD,KAAKoyD,YAAc,MAMrBhB,UAAW,WACTpxD,KAAKoyD,YAAc,OAoBvB9T,EAAQgP,cAAgB,aAExBhP,EAAQgP,cAAc/uD,UAAY,IAAI+/C,EAAQ4T,cAAc,aAAa,EAAO,IAEhF5T,EAAQgP,cAAc/uD,UAAU0H,KAAO,SAAUksD,GAC/C,OAA8B,OAAvBA,EAAWvH,SAOpBtM,EAAQqP,UAAY,aAEpBrP,EAAQqP,UAAUpvD,UAAY,IAAI+/C,EAAQ4T,cAAc,SAAS,EAAM,IAEvE5T,EAAQqP,UAAUpvD,UAAU0H,KAAO,SAAUksD,GAC3C,OAA8B,OAAvBA,EAAWvH,SAGpBtM,EAAQqP,UAAUpvD,UAAUoyD,YAAc,SAAUwB,GAClD,IAAIE,EAAWF,EAAWtH,QAK1B,OAJAwH,GAAsB,KACtBA,GAAsBF,EAAWvH,QACjCyH,GAAsB,KACtBA,GAAsBF,EAAW1H,KAC1BlN,EAAe8U,IAOxB/T,EAAQsP,SAAW,aAEnBtP,EAAQsP,SAASrvD,UAAY,IAAI+/C,EAAQ4T,cAAc,eAAe,EAAM,IAE5E5T,EAAQsP,SAASrvD,UAAU0H,KAAO,SAAUksD,GAC1C,OAA8B,OAAvBA,EAAWvH,SAGpBtM,EAAQsP,SAASrvD,UAAUoyD,YAAc,SAAUwB,EAAYtB,EAAWyB,GACxE,IAAIC,EAASD,GAAezW,EAAIC,UAAU,GAAqB,WAAhBxvC,KAAKE,UAChD6lD,EAAW,KAAO9U,EAAe4U,EAAWvH,SAqEhD,OApEAyH,GAAY,MACZA,GAAYE,EACZJ,EAAW5J,WAAWgK,OAASA,EAC/BJ,EAAW5J,WAAW,6BAA+B8J,EACrDA,EAAW,MAAQA,EAEnBryD,KAAK2wD,YAAc,SAAUwB,EAAYtB,GAOvC,IANA,IAAI2B,EAAOC,EAAM/X,EAAMgY,EAAIC,EAAGC,EAAOtzD,EAAG6P,EACpC8mB,EAAe,UACf48B,EAAc,GAAGriD,OAAO2hD,EAAW5J,WAAW,6BAA8B,KAAK/3C,OAAOqgD,EAAW,KACnG0B,EAASJ,EAAW5J,WAAWgK,OAC/BO,EAAc,wBAEXjC,EAAUhrD,MAAMitD,IAAc,CACnC,IAAIzuC,EAAUwsC,EAAUhrD,MAAMitD,GAG9B,OAFAjC,EAAYA,EAAU5oD,QAAQoc,EAAQ,GAAI,IAElCA,EAAQ,IACd,IAAK,IACHmuC,EAAQnuC,EAAQ,GAChB,MAEF,IAAK,IACHouC,EAAOpuC,EAAQ,GACf,MAEF,IAAK,IACHq2B,EAAOr2B,EAAQ,IAKrB,GAAImuC,EAAM5vC,OAAO,EAAG2vC,EAAOhzD,UAAYgzD,EAErC,OADAJ,EAAW5J,WAAa,GACjB4J,EAAW9B,mBAIpBwC,GADA58B,GAAgB,KAAOu8B,EAEvBC,EAAO3B,KAAK2B,GACZA,GAAQ,UACR,IAAIhI,EAAOlN,EAAe4U,EAAW1H,MAGrC,IAFAiI,EAAKE,EAAQ1V,EAAKR,eAAe+N,EAAMgI,GAElCnzD,EAAI,EAAGA,EAAIo7C,EAAMp7C,IAAK,CAGzB,IAFAqzD,EAAIzV,EAAKR,eAAe+N,EAAMvN,EAAKD,SAAS2V,IAEvCzjD,EAAI,EAAGA,EAAI,EAAGA,IACjBujD,EAAGvjD,IAAMwjD,EAAExjD,GAGbyjD,EAAQD,EAGVD,EAAKxV,EAAKD,SAASyV,GACnB,IAAIK,EAAY7V,EAAKR,eAAegW,EAAI,cACpCM,EAAY9V,EAAKG,cAAcqV,EAAI,cACnCO,EAAkB/V,EAAKR,eAAeQ,EAAKI,SAASJ,EAAKD,SAAS8V,IAAaF,GAGnF,IAFAV,EAAW5J,WAAW,oBAAsBrL,EAAKC,cAAc6V,EAAWH,GAErE1jD,EAAI,EAAGA,EAAI,EAAGA,IACjB4jD,EAAU5jD,IAAM8jD,EAAgB9jD,GAIlC,OADA8mB,EAAgB,MAAQ26B,KAAK1T,EAAKD,SAAS8V,KAItCV,GAOT/T,EAAQkP,QAAU,aAElBlP,EAAQkP,QAAQjvD,UAAY,IAAI+/C,EAAQ4T,cAAc,cAAc,EAAO,IAE3E5T,EAAQkP,QAAQjvD,UAAU0H,KAAO,SAAUksD,GACzC,OAA8B,OAAvBA,EAAWvH,SAapBtM,EAAQkP,QAAQjvD,UAAU20D,OAAS,SAAU1vD,GAC3C,MAAO,IAAMA,EAAIyE,QAAQ,MAAO,QAAQA,QAAQ,KAAM,OAAS,KAGjEq2C,EAAQkP,QAAQjvD,UAAUoyD,YAAc,SAAUwB,EAAYtB,EAAWyB,GAQvE,IAPA,IAAIQ,EAAc,mCACdP,EAASD,GAAezW,EAAIC,UAAU,GAAqB,WAAhBxvC,KAAKE,UAChD2mD,EAAQ,GACRC,EAAO,KACPZ,EAAQ,GAGL3B,EAAUhrD,MAAMitD,IAAc,CACnC,IAAIzuC,EAAUwsC,EAAUhrD,MAAMitD,GAI9B,OAHAjC,EAAYA,EAAU5oD,QAAQoc,EAAQ,GAAI,IAC1CA,EAAQ,GAAKA,EAAQ,GAAGpc,QAAQ,WAAY,MAEpCoc,EAAQ,IACd,IAAK,QACH8uC,EAAQ9uC,EAAQ,GAChB,MAEF,IAAK,QACHmuC,EAAQnuC,EAAQ,GAChB,MAEF,IAAK,MACGA,EAAQ,GACd,MAEF,IAAK,OACH+uC,EAAO/uC,EAAQ,IAKrB,IAAIgvC,EAAalB,EAAWrH,SAAW,IAAMqH,EAAWvU,OAE3C,OAATwV,IACFC,EAAaA,EAAa,IAAMD,GAGlC,IAAIE,EAAO/V,EAAe4U,EAAWvH,QAAU,IAAMuI,EAAQ,IAAMnzD,KAAKoyD,YAAY3H,MAChF8I,EAAK1X,EAAI76C,KAAKsyD,GAAQ,IAAMd,EAAQ,IAAMD,EAC1CiB,EAAK,gBAAkBH,EACvBp9B,EAAe,GAenB,OAdAA,GAAgB,iBAChBA,GAAgB,YAAcj2B,KAAKkzD,OAAO3V,EAAe4U,EAAWvH,UAAY,IAChF30B,GAAgB,SAAWj2B,KAAKkzD,OAAOC,GAAS,IAChDl9B,GAAgB,SAAWj2B,KAAKkzD,OAAOV,GAAS,IAChDv8B,GAAgB,eAChBA,GAAgB,UAAYj2B,KAAKkzD,OAAOX,GAAU,IAClDt8B,GAAgB,cAAgBj2B,KAAKkzD,OAAOG,GAAc,IAC1Dp9B,GAAgB,YAAc4lB,EAAIC,UAAUD,EAAIC,UAAUyX,GAAM,IAAMf,EAAQ,aAAeD,EAAS,SAAW1W,EAAIC,UAAU0X,IAAO,IACtIv9B,GAAgB,WAEhBj2B,KAAK2wD,YAAc,WACjB,MAAO,IAGF16B,GAOTqoB,EAAQmP,gBAAkB,aAE1BnP,EAAQmP,gBAAgBlvD,UAAY,IAAI+/C,EAAQ4T,cAAc,eAAe,EAAM,IAEnF5T,EAAQmP,gBAAgBlvD,UAAU0H,KAAO,SAAUksD,GACjD,OAA2B,OAApBA,EAAW1H,MAGpBnM,EAAQmP,gBAAgBlvD,UAAUoyD,YAAc,SAAUwB,GACxD,IAAIE,EAAW,KAYf,OAV2B,OAAvBF,EAAWvH,UACbyH,EAAWA,EAAW,KAAOF,EAAWtH,SAG1CwH,GAAsB,IACtBA,GAAsB,IACtBA,GAAsB,eACtBA,GAAsBF,EAAW1H,KACjC4H,GAAsB,IAEf9U,EADP8U,GAAsB,MAaxB/T,EAAQiP,aAAe,aAEvBjP,EAAQiP,aAAahvD,UAAY,IAAI+/C,EAAQ4T,cAAc,YAAY,EAAM,IAE7E5T,EAAQiP,aAAahvD,UAAUoyD,YAAc,SAAUwB,GAQrD,OAAOA,EAAWvH,UAAYuH,EAAWtH,QAAU,GAAKsH,EAAWtH,SAOrEvM,EAAQoP,YAAc,aAEtBpP,EAAQoP,YAAYnvD,UAAY,IAAI+/C,EAAQ4T,cAAc,YAAY,EAAM,IAE5E5T,EAAQoP,YAAYnvD,UAAU0H,KAAO,SAAUksD,GAC7C,OAA2B,OAApBA,EAAW1H,MAGpBnM,EAAQoP,YAAYnvD,UAAUoyD,YAAc,SAAUwB,GACpD,IAAIE,EAAW,KAQf,OAN2B,OAAvBF,EAAWvH,UACbyH,GAAsBF,EAAWtH,SAGnCwH,GAAsB,KACtBA,GAAsBF,EAAW1H,KAC1BlN,EAAe8U,IAExB,IAAIoB,EAAO,CACT,QAAWnV,EACX,OAAUF,EACV,IAAOI,EACP,KA/qHF,SAAcH,GACZ,OAAO,IAAIC,EAAQC,QAAQ,UAAWF,IA+qHtC,MAASI,EACT,KAAQvB,EACR,IAAOrB,EACP,cAAiBqB,EAAKC,cACtB,SAAYD,EAAKE,SACjB,cAAiBF,EAAKG,cACtB,SAAYH,EAAKI,UASfoW,EAAYD,EAAKnV,QACjBqV,EAAWF,EAAKrV,OAoBpBsV,EAAUE,QAAU,SAAU5R,EAAMzd,EAAM6mB,EAAKyI,GAC7C7zD,KAAKmE,KAAOuvD,EAAU9N,WACtB5lD,KAAK8zD,QAAU9R,EACfhiD,KAAKsU,KAAOo/C,EAAUlO,UAAUxD,GAGhChiD,KAAK+zD,SAAWxvB,EAChBvkC,KAAKukC,KAAOA,EACZvkC,KAAKorD,IAAMA,EACXprD,KAAKg0D,KAAOC,IACZj0D,KAAK6zD,MAAQA,GAAS,EACtB7zD,KAAKk0D,OAAQ,EACbl0D,KAAKm0D,KAAO,KAEZn0D,KAAKo0D,IAAM,WACT,OAAKp0D,KAAKg0D,MAIA,IAAI5mC,KACAptB,KAAKg0D,MAAQ,IAJlB,GAOXh0D,KAAKq0D,SAAW,WACd,OAAKr0D,KAAKm0D,MAIA,IAAI/mC,KACAptB,KAAKm0D,MAAQ,IAJlB,GAOXn0D,KAAKs0D,IAAMt0D,KAAKu0D,WAGlBb,EAAUE,QAAQr1D,UAAY,CAc5Bi2D,YAAa,WACX,IAAIx3D,EAAO,KAEX,GAAIgD,KAAKs0D,IAAIG,aAAez0D,KAAKs0D,IAAIG,YAAYC,iBAG/C,GAAqB,iBAFrB13D,EAAOgD,KAAKs0D,IAAIG,YAAYC,iBAEnBj8B,QAIP,MAHAi7B,EAAUr8C,MAAM,6BAChBq8C,EAAUr8C,MAAM,iBAAmBrX,KAAKs0D,IAAIr+B,cAC5Cy9B,EAAUr8C,MAAM,gBAAkBq8C,EAAUlO,UAAUxlD,KAAKs0D,IAAIG,cACzD,IAAIhmD,MAAM,oBAEb,GAAIzO,KAAKs0D,IAAIr+B,aAAc,CAKhC,GAHAy9B,EAAUnO,MAAM,mFAChBvoD,GAAO,IAAIwmD,WAAYC,gBAAgBzjD,KAAKs0D,IAAIr+B,aAAc,mBAAmBy+B,iBAG/E,MAAM,IAAIjmD,MAAM,8BACX,GAAIzR,EAAK23D,cAAc,eAAgB,CAC5CjB,EAAUr8C,MAAM,8BAAgCra,EAAK23D,cAAc,eAAeC,aAClFlB,EAAUr8C,MAAM,iBAAmBrX,KAAKs0D,IAAIr+B,cAC5C,IAAI5e,EAAQ,IAAI5I,MAEhB,MADA4I,EAAMlV,KAAOuxD,EAAU3S,eAAeC,WAChC3pC,GAIV,OAAOra,GAWTu3D,QAAS,WACP,IAAID,EAAM,KAcV,OAZI73D,OAAOo5B,gBACTy+B,EAAM,IAAIz+B,gBAEFg/B,kBACNP,EAAIO,iBAAiB,2BAEdp4D,OAAOqmD,gBAChBwR,EAAM,IAAIxR,cAAc,sBAI1BwR,EAAIx+B,mBAAqB91B,KAAKukC,KAAKr+B,KAAK,KAAMlG,MACvCs0D,IA4BXZ,EAAUrL,KAAO,SAAU8J,GACzBnyD,KAAK80D,MAAQ3C,EAGbnyD,KAAKorD,IAAM9+C,KAAKC,MAAsB,WAAhBD,KAAKE,UAG3BxM,KAAKmrD,IAAM,KAEXnrD,KAAK0qD,KAAO,EACZ1qD,KAAKmsC,KAAO,GACZnsC,KAAKvD,OAAS,EACduD,KAAK+0D,OAAS,EACd/0D,KAAKg1D,WAAa,KAClBh1D,KAAKi1D,oBAAsB,KAC3Bj1D,KAAKkqD,UAAY,IAGnBwJ,EAAUrL,KAAK9pD,UAAY,CAYzBswD,MAAO,KAQPqG,WAAY,WACV,IAAI3F,EAAWoE,EAAS,OAAQ,CAC9B,IAAO3zD,KAAKorD,MACZ,MAASsI,EAAU/U,GAAGC,WAaxB,OAViB,OAAb5+C,KAAKmrD,KACPoE,EAASlR,MAAM,CACb,IAAOr+C,KAAKmrD,MAIZnrD,KAAK80D,MAAMlrD,QAAQurD,WAAan1D,KAAK80D,MAAMtJ,4BAC7CxrD,KAAKo1D,gBAGA7F,GAQTtF,OAAQ,WACNjqD,KAAKorD,IAAM9+C,KAAKC,MAAsB,WAAhBD,KAAKE,UAC3BxM,KAAKmrD,IAAM,KACXnrD,KAAK+0D,OAAS,EAEV/0D,KAAK80D,MAAMtJ,4BACb/uD,OAAOivD,eAAeE,WAAW,wBAGnC5rD,KAAK80D,MAAM7I,aAAajsD,KAAKorD,MAQ/BH,SAAU,SAAkB9e,EAAMue,EAAMC,GACtC3qD,KAAKmsC,KAAOA,GAAQnsC,KAAKmsC,KACzBnsC,KAAK0qD,KAAOA,GAAQ1qD,KAAK0qD,KACzB1qD,KAAK+0D,OAAS,EAEd,IAAI3iC,EAAOpyB,KAAKk1D,aAAa7W,MAAM,CACjC,GAAMr+C,KAAK80D,MAAMlX,OACjB,WAAY,KACZ,KAAQ59C,KAAKmsC,KACb,KAAQnsC,KAAK0qD,KACb,QAAW,0BACX,IAAO,MACP,eAAgB,MAChB,aAAcgJ,EAAU/U,GAAGE,OAGzB8L,GACFv4B,EAAKisB,MAAM,CACT,MAASsM,IAIb,IAAI0E,EAAcrvD,KAAK80D,MAAMzF,YAE7BrvD,KAAKkqD,UAAUnnD,KAAK,IAAI2wD,EAAUE,QAAQxhC,EAAKqzB,OAAQzlD,KAAKq1D,sBAAsBnvD,KAAKlG,KAAMqvD,EAAYnpD,KAAKlG,KAAK80D,QAAS1iC,EAAKqzB,OAAOxB,aAAa,SAErJjkD,KAAKs1D,4BA2BPhK,QAAS,SAAiBzG,EAAKsG,EAAKC,EAAK37C,EAAU08B,EAAMue,EAAMW,GAC7DrrD,KAAK80D,MAAMjQ,IAAMA,EACjB7kD,KAAKmrD,IAAMA,EACXnrD,KAAKorD,IAAMA,EACXprD,KAAK80D,MAAM/J,iBAAmBt7C,EAC9BzP,KAAK80D,MAAMlX,OAAS8V,EAAU5O,iBAAiB9kD,KAAK80D,MAAMjQ,KAC1D7kD,KAAK80D,MAAM5L,eAAgB,EAC3BlpD,KAAK80D,MAAM3L,WAAY,EACvBnpD,KAAKmsC,KAAOA,GAAQnsC,KAAKmsC,KACzBnsC,KAAK0qD,KAAOA,GAAQ1qD,KAAK0qD,KACzB1qD,KAAKvD,OAAS4uD,GAAQrrD,KAAKvD,OAE3BuD,KAAK80D,MAAM9J,qBAAqB0I,EAAUvT,OAAOQ,SAAU,OAsB7D8K,SAAU,SAAkB5G,EAAKp1C,EAAU08B,EAAMue,EAAMW,GACrD,IAAIjlD,EAAU6kB,KAAKnmB,MAAMrI,OAAOivD,eAAe6J,QAAQ,yBAEvD,KAAI,MAAOnvD,GAA+CA,EAAQglD,KAAOhlD,EAAQ+kD,KAAO/kD,EAAQy+C,MAAQ,MAAOA,GAAuC6O,EAAU1O,kBAAkB5+C,EAAQy+C,OAAS6O,EAAU1O,kBAAkBH,IAE7L,OAAlC6O,EAAU9O,eAAeC,IAAiB6O,EAAU5O,iBAAiB1+C,EAAQy+C,OAASA,IAI/E,CACL,IAAIxtC,EAAQ,IAAI5I,MAAM,qCAEtB,MADA4I,EAAMlV,KAAO,sBACPkV,EANNrX,KAAK80D,MAAMxL,UAAW,EAEtBtpD,KAAKsrD,QAAQllD,EAAQy+C,IAAKz+C,EAAQ+kD,IAAK/kD,EAAQglD,IAAK37C,EAAU08B,EAAMue,EAAMW,IAe9E+J,cAAe,WACTp1D,KAAK80D,MAAM5L,cACTlpD,KAAK80D,MAAMjQ,KAAO7kD,KAAKorD,KAAOprD,KAAKmrD,KACrC1uD,OAAOivD,eAAeC,QAAQ,uBAAwB1gC,KAAKF,UAAU,CACnE,IAAO/qB,KAAK80D,MAAMjQ,IAClB,IAAO7kD,KAAKorD,IACZ,IAAOprD,KAAKmrD,OAIhB1uD,OAAOivD,eAAeE,WAAW,yBAWrCyD,YAAa,SAAqBE,GAChC,IAAIiG,EAAMjG,EAAStL,aAAa,QAEhC,GAAY,OAARuR,GAAwB,cAARA,EAAqB,CAEvC,IAAIzG,EAAOQ,EAAStL,aAAa,aACjCyP,EAAUr8C,MAAM,2BAA6B03C,GAC7C,IAAIC,EAAWO,EAAS9rC,qBAAqB,YAc7C,OAZa,OAATsrC,GACW,wBAATA,GAAkCC,EAASzvD,OAAS,IACtDwvD,EAAO,YAGT/uD,KAAK80D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU0O,IAE3D/uD,KAAK80D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU,WAG7DrgD,KAAK80D,MAAM1G,cAAcW,GAElB2E,EAAUvT,OAAOE,SAKrBrgD,KAAKmrD,MACRnrD,KAAKmrD,IAAMoE,EAAStL,aAAa,QAGnC,IAAIoH,EAAOkE,EAAStL,aAAa,YAE7BoH,IACFrrD,KAAKvD,OAASqO,SAASugD,EAAM,KAG/B,IAAIX,EAAO6E,EAAStL,aAAa,QAE7ByG,IACF1qD,KAAK0qD,KAAO5/C,SAAS4/C,EAAM,KAG7B,IAAIve,EAAOojB,EAAStL,aAAa,QAE7B9X,IACFnsC,KAAKmsC,KAAOrhC,SAASqhC,EAAM,KAG7B,IAAI6oB,EAAazF,EAAStL,aAAa,cAEnC+Q,IACFh1D,KAAKg1D,WAAalqD,SAASkqD,EAAY,MAU3C9G,YAAa,SAAqBH,GAChC/tD,KAAKy1D,eAAe1H,IAQtBK,cAAe,WACbpuD,KAAKmrD,IAAM,KACXnrD,KAAKorD,IAAM9+C,KAAKC,MAAsB,WAAhBD,KAAKE,UAEvBxM,KAAK80D,MAAMtJ,4BACb/uD,OAAOivD,eAAeE,WAAW,wBAGnC5rD,KAAK80D,MAAM7I,aAAajsD,KAAKorD,MAS/B0D,YAAa,WACX,OAAiC,IAA1B9uD,KAAKkqD,UAAU3qD,QASxBm2D,2BAA4B,SAAoCjH,GAC9D,IAAIkH,EAAY31D,KAAK41D,kBAAkBnH,GAEnCoH,EAAe71D,KAAK80D,MAAM/L,sBAAsB+M,KAAKH,GAErDE,GACFA,EAAap3D,KAAKuB,KAAM21D,IAc5BI,UAAW,SAAmBJ,GAC5B31D,KAAK+0D,SACLrB,EAAU3rC,KAAK,4BAA8B4tC,EAAY,uBAAyB31D,KAAK+0D,QAEnF/0D,KAAK+0D,OAAS,GAChB/0D,KAAK80D,MAAM7G,wBASf2B,kBAAmB,SAA2BngD,GAC5CikD,EAAU3rC,KAAK,gGAGbtY,EADEA,EACSA,EAASvJ,KAAKlG,KAAK80D,OAEnB90D,KAAK80D,MAAMzF,YAAYnpD,KAAKlG,KAAK80D,OAG9C,IAAI1iC,EAAOpyB,KAAKk1D,aAEhBl1D,KAAKkqD,UAAUnnD,KAAK,IAAI2wD,EAAUE,QAAQxhC,EAAKqzB,OAAQzlD,KAAKq1D,sBAAsBnvD,KAAKlG,KAAMyP,GAAW2iB,EAAKqzB,OAAOxB,aAAa,SAEjIjkD,KAAKs1D,4BAQPrH,qBAAsB,WACpBjuD,KAAKmuD,qBAMPA,kBAAmB,WACjB,KAAOnuD,KAAKkqD,UAAU3qD,OAAS,GAAG,CAChC,IAAIkvD,EAAMzuD,KAAKkqD,UAAUvyC,MAEzB82C,EAAIyF,OAAQ,EACZzF,EAAI6F,IAAIJ,QAERzF,EAAI6F,IAAIx+B,mBAAqB,eASjC+zB,QAAS,WACP,IAAIv1C,EAAOtU,KAAK80D,MAAMvL,MAOtB,GALIvpD,KAAK80D,MAAM5L,eAA2C,IAA1BlpD,KAAKkqD,UAAU3qD,QAAgC,IAAhB+U,EAAK/U,SAAiBS,KAAK80D,MAAM1L,gBAC9FsK,EAAUnO,MAAM,wDAChBjxC,EAAKvR,KAAK,QAGR/C,KAAK80D,MAAMntD,OAAf,CAIA,GAAI3H,KAAKkqD,UAAU3qD,OAAS,GAAK+U,EAAK/U,OAAS,EAAG,CAGhD,IAFA,IAAI6yB,EAAOpyB,KAAKk1D,aAEP51D,EAAI,EAAGA,EAAIgV,EAAK/U,OAAQD,IACf,OAAZgV,EAAKhV,KACS,YAAZgV,EAAKhV,GACP8yB,EAAKisB,MAAM,CACT,GAAMr+C,KAAK80D,MAAMlX,OACjB,WAAY,KACZ,eAAgB,OAChB,aAAc8V,EAAU/U,GAAGE,OAG7BzsB,EAAKi0B,MAAM/xC,EAAKhV,IAAI4mD,aAKnBlmD,KAAK80D,MAAMvL,MAClBvpD,KAAK80D,MAAMvL,MAAQ,GAEnBvpD,KAAKkqD,UAAUnnD,KAAK,IAAI2wD,EAAUE,QAAQxhC,EAAKqzB,OAAQzlD,KAAKq1D,sBAAsBnvD,KAAKlG,KAAMA,KAAK80D,MAAMtG,UAAUtoD,KAAKlG,KAAK80D,QAAS1iC,EAAKqzB,OAAOxB,aAAa,SAE9JjkD,KAAKs1D,2BAGP,GAAIt1D,KAAKkqD,UAAU3qD,OAAS,EAAG,CAC7B,IAAIy2D,EAAeh2D,KAAKkqD,UAAU,GAAGkK,MAEN,OAA3Bp0D,KAAKkqD,UAAU,GAAGiK,MAChBn0D,KAAKkqD,UAAU,GAAGmK,WAAa/nD,KAAKC,MAAMmnD,EAAU7R,kBAAoB7hD,KAAKmsC,OAC/EnsC,KAAKs1D,2BAILU,EAAe1pD,KAAKC,MAAMmnD,EAAU9R,QAAU5hD,KAAKmsC,QACrDunB,EAAU3rC,KAAK,WAAa/nB,KAAKkqD,UAAU,GAAG/lD,GAAK,oBAAsBmI,KAAKC,MAAMmnD,EAAU9R,QAAU5hD,KAAKmsC,MAAQ,gCAErHnsC,KAAKs1D,+BAcXM,kBAAmB,SAA2BnH,EAAKwH,GACjD,IAAIN,EAEJ,GAA2B,IAAvBlH,EAAI6F,IAAI1vC,WACV,IACE+wC,EAAYlH,EAAI6F,IAAIt+B,OACpB,MAAOtzB,GAGPgxD,EAAUr8C,MAAM,mEAA0Es+C,GAQ9F,YAJyB,IAAdA,IACTA,EAA2B,iBAARM,EAAmBA,EAAM,GAGvCN,GAeTN,sBAAuB,SAA+B9wB,EAAMkqB,GAG1D,GAFAiF,EAAUnO,MAAM,cAAgBkJ,EAAItqD,GAAK,IAAMsqD,EAAIoF,MAAQ,qBAAuBpF,EAAI6F,IAAI1vC,YAEtF6pC,EAAIyF,MACNzF,EAAIyF,OAAQ,OAId,GAA2B,IAAvBzF,EAAI6F,IAAI1vC,WAAZ,CAKA,IAAI+wC,EAAY31D,KAAK41D,kBAAkBnH,GAIvC,GAFAzuD,KAAKi1D,oBAAsBxG,EAAI6F,IAAI4B,wBAE/Bl2D,KAAKopD,eAAiBuM,GAAa,IAKrC,OAJA31D,KAAK+1D,UAAUJ,QAEf31D,KAAK01D,2BAA2BjH,GAKlC,IAAI0H,EAAgBR,EAAY,GAAKA,EAAY,IAC7CS,EAAmB3H,EAAIoF,MAAQ7zD,KAAK80D,MAAMlL,WAS9C,IAPIuM,GAAiBC,KAEnBp2D,KAAKq2D,eAAe5H,GAEpBiF,EAAUnO,MAAM,cAAgBkJ,EAAItqD,GAAK,2BAGzB,MAAdwxD,EAAmB,CAErB,IAAIW,EAASt2D,KAAKkqD,UAAU,KAAOuE,GACtBzuD,KAAKkqD,UAAU,KAAOuE,GAKrB6H,GAAUt2D,KAAKkqD,UAAU3qD,OAAS,GAAKS,KAAKkqD,UAAU,GAAGkK,MAAQ9nD,KAAKC,MAAMmnD,EAAU7R,kBAAoB7hD,KAAKmsC,QAC3HnsC,KAAKu2D,gBAAgB,GAGvBv2D,KAAK80D,MAAM7I,aAAa1mD,OAAOkpD,EAAIrD,KAAO,GAE1CsI,EAAUnO,MAAM,cAAgBkJ,EAAItqD,GAAK,IAAMsqD,EAAIoF,MAAQ,YAC3DtvB,EAAKkqB,GAELzuD,KAAK+0D,OAAS,OACS,IAAdY,GAAmBA,GAAa,KAAOA,EAAY,KAAOA,GAAa,MAEhFjC,EAAUr8C,MAAM,cAAgBo3C,EAAItqD,GAAK,IAAMsqD,EAAIoF,MAAQ,UAAY8B,EAAY,aAEnF31D,KAAK+1D,UAAUJ,GAEf31D,KAAK01D,2BAA2BjH,GAE5BkH,GAAa,KAAOA,EAAY,MAClC31D,KAAK80D,MAAM9J,qBAAqB0I,EAAUvT,OAAOO,cAAe,MAEhE1gD,KAAK80D,MAAM1G,kBAGbsF,EAAUr8C,MAAM,cAAgBo3C,EAAItqD,GAAK,IAAMsqD,EAAIoF,MAAQ,UAAY8B,EAAY,aAGhFQ,GAAkBC,EAEZA,IAAqBp2D,KAAK80D,MAAM3L,WACzCnpD,KAAK80D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU,aAF3DrgD,KAAKs1D,6BAeTkB,gBAAiB,SAAyBl3D,GACxC,IAAIioD,EAAQvnD,KAERyuD,EAAMzuD,KAAKkqD,UAAU5qD,GAErBq2D,EAAY31D,KAAK41D,kBAAkBnH,GAAM,GAG7C,GAAIA,EAAIoF,MAAQ7zD,KAAK80D,MAAMlL,WACzB5pD,KAAK80D,MAAM7G,2BADb,CAMA,IAAI+H,EAAevH,EAAI2F,MACnBqC,GAAmBxwC,MAAM+vC,IAAiBA,EAAe1pD,KAAKC,MAAMmnD,EAAU9R,QAAU5hD,KAAKmsC,MAC7FuqB,EAAiC,OAAbjI,EAAI0F,MAAiB1F,EAAI4F,WAAa/nD,KAAKC,MAAMmnD,EAAU7R,kBAAoB7hD,KAAKmsC,MACxGwqB,EAAsC,IAAvBlI,EAAI6F,IAAI1vC,aAAqB+wC,EAAY,GAAKA,GAAa,KAgB9E,IAdIc,GAAmBC,GAAqBC,KACtCD,GACFhD,EAAUr8C,MAAM,WAAW7G,OAAOxQ,KAAKkqD,UAAU5qD,GAAG6E,GAAI,uCAG1DsqD,EAAIyF,OAAQ,EACZzF,EAAI6F,IAAIJ,QAERzF,EAAI6F,IAAIx+B,mBAAqB,aAE7B91B,KAAKkqD,UAAU5qD,GAAK,IAAIo0D,EAAUE,QAAQnF,EAAIqF,QAASrF,EAAIsF,SAAUtF,EAAIrD,IAAKqD,EAAIoF,OAClFpF,EAAMzuD,KAAKkqD,UAAU5qD,IAGI,IAAvBmvD,EAAI6F,IAAI1vC,WAAkB,CAC5B8uC,EAAUnO,MAAM,cAAgBkJ,EAAItqD,GAAK,IAAMsqD,EAAIoF,MAAQ,YAE3D,IACE,IAAI+C,EAAe52D,KAAK80D,MAAMlrD,QAAQitD,aAAe,0BACrDpI,EAAI6F,IAAIp+B,KAAK,OAAQl2B,KAAK80D,MAAM7M,SAASjoD,KAAK80D,MAAMlrD,QAAQktD,WAEpB,IAA7BrI,EAAI6F,IAAIn+B,kBAEjBs4B,EAAI6F,IAAIn+B,iBAAiB,eAAgBygC,GAGvC52D,KAAK80D,MAAMlrD,QAAQmtD,kBACrBtI,EAAI6F,IAAIyC,iBAAkB,GAE5B,MAAOC,GASP,OARAtD,EAAUr8C,MAAM,oBAAsB2/C,EAAGx4D,YAEpCwB,KAAK80D,MAAM3L,WACdnpD,KAAK80D,MAAM9J,qBAAqB0I,EAAUvT,OAAOE,SAAU,oBAG7DrgD,KAAK80D,MAAMhH,aAOb,IAAImJ,EAAW,WAGb,GAFAxI,EAAIuF,KAAO,IAAI5mC,KAEXm6B,EAAMuN,MAAMlrD,QAAQstD,cAAe,CACrC,IAAIC,EAAU5P,EAAMuN,MAAMlrD,QAAQstD,cAElC,IAAK,IAAIE,KAAUD,EACb74D,OAAOC,UAAU6Q,eAAe3Q,KAAK04D,EAASC,IAChD3I,EAAI6F,IAAIn+B,iBAAiBihC,EAAQD,EAAQC,IAK/C3I,EAAI6F,IAAIngC,KAAKs6B,EAAIn6C,OAKnB,GAAIm6C,EAAIoF,MAAQ,EAAG,CAGjB,IAAIwD,EAAwF,IAA9E/qD,KAAK2O,IAAI3O,KAAKC,MAAMmnD,EAAU9R,QAAU5hD,KAAKmsC,MAAO7/B,KAAK+sB,IAAIo1B,EAAIoF,MAAO,IACtFtkD,YAAW,WAET0nD,MACCI,QAEHJ,IAGFxI,EAAIoF,QAEA7zD,KAAK80D,MAAMhJ,YAAc4H,EAAU1L,WAAWzpD,UAAUutD,YACtD2C,EAAIqF,QAAQhQ,WAAa9jD,KAAK6uD,OAASJ,EAAIqF,QAAQ5R,WAAW3iD,OAChES,KAAK80D,MAAMhJ,UAAU2C,EAAIqF,QAAQ5R,WAAW,IAE5CliD,KAAK80D,MAAMhJ,UAAU2C,EAAIqF,UAIzB9zD,KAAK80D,MAAM9I,YAAc0H,EAAU1L,WAAWzpD,UAAUytD,WAC1DhsD,KAAK80D,MAAM9I,UAAUyC,EAAIn6C,WAG3Bo/C,EAAUnO,MAAM,qBAA6B,IAANjmD,EAAU,QAAU,UAAY,8BAAgCmvD,EAAI6F,IAAI1vC,cAUnHyxC,eAAgB,SAAwB5H,GACtCiF,EAAUnO,MAAM,oBAEhB,IAAK,IAAIjmD,EAAIU,KAAKkqD,UAAU3qD,OAAS,EAAGD,GAAK,EAAGA,IAC1CmvD,IAAQzuD,KAAKkqD,UAAU5qD,IACzBU,KAAKkqD,UAAU38C,OAAOjO,EAAG,GAK7BmvD,EAAI6F,IAAIx+B,mBAAqB,aAE7B91B,KAAKs1D,4BASPiB,gBAAiB,SAAyBj3D,GACxC,IAAImvD,EAAMzuD,KAAKkqD,UAAU5qD,GAER,OAAbmvD,EAAI0F,OACN1F,EAAI0F,KAAO,IAAI/mC,MAGjBptB,KAAKw2D,gBAAgBl3D,IAevBsvD,WAAY,SAAoBH,GAC9B,IACE,OAAOA,EAAI+F,cACX,MAAO9xD,GACP,GAAkB,gBAAdA,EAAE3D,QACJ,MAAM2D,EAGR1C,KAAK80D,MAAMhH,WAAW,yBAW1B2H,eAAgB,SAAwB1H,GACtC2F,EAAUnO,MAAM,6BAEhB,IAAInzB,EAAOpyB,KAAKk1D,aAAa7W,MAAM,CACjC7+C,KAAM,cAGJuuD,GACF37B,EAAKi0B,MAAM0H,EAAKtI,QAGlB,IAAIgJ,EAAM,IAAIiF,EAAUE,QAAQxhC,EAAKqzB,OAAQzlD,KAAKq1D,sBAAsBnvD,KAAKlG,KAAMA,KAAK80D,MAAMtG,UAAUtoD,KAAKlG,KAAK80D,QAAS1iC,EAAKqzB,OAAOxB,aAAa,QAEpJjkD,KAAKkqD,UAAUnnD,KAAK0rD,GAEpBzuD,KAAKs1D,4BAQPnJ,MAAO,WACL,IAAIjE,EAASloD,KAEb0rB,aAAa1rB,KAAK80D,MAAM9L,cAExBhpD,KAAKs1D,2BAELt1D,KAAK80D,MAAM9L,aAAez5C,YAAW,WACnC,OAAO24C,EAAO4M,MAAMjL,YACnB,MAOLoD,aAAc,WACZjtD,KAAKs1D,2BAEL5pC,aAAa1rB,KAAK80D,MAAM9L,eAU1BsM,yBAA0B,WACnBt1D,KAAKkqD,UAGRwJ,EAAUnO,MAAM,wCAA0CvlD,KAAKkqD,UAAU3qD,OAAS,aAFlFm0D,EAAUnO,MAAM,2DAKbvlD,KAAKkqD,WAAuC,IAA1BlqD,KAAKkqD,UAAU3qD,SAIlCS,KAAKkqD,UAAU3qD,OAAS,GAC1BS,KAAKw2D,gBAAgB,GAGnBx2D,KAAKkqD,UAAU3qD,OAAS,GAAK+M,KAAKkH,IAAIxT,KAAKkqD,UAAU,GAAGkB,IAAMprD,KAAKkqD,UAAU,GAAGkB,KAAOprD,KAAKvD,QAC9FuD,KAAKw2D,gBAAgB,MAW3B,IAAIc,EAAY7D,EAAKnV,QACjBiZ,EAAW9D,EAAKrV,OAilBpB,OAljBAkZ,EAAUlP,UAAY,SAAU+J,GAC9BnyD,KAAK80D,MAAQ3C,EACbnyD,KAAK6uD,MAAQ,UACb,IAAI5G,EAAUkK,EAAWlK,QAEzB,GAA+B,IAA3BA,EAAQr8C,QAAQ,QAA4C,IAA5Bq8C,EAAQr8C,QAAQ,QAAe,CAGjE,IAAI4rD,EAAc,GAEkB,OAAhCrF,EAAWvoD,QAAQqoC,UAAkD,WAA7Bx1C,OAAOgJ,SAASwsC,SAC1DulB,GAAe,KAEfA,GAAe,MAGjBA,GAAe,MAAQ/6D,OAAOgJ,SAAS2tD,KAEV,IAAzBnL,EAAQr8C,QAAQ,KAClB4rD,GAAe/6D,OAAOgJ,SAASgyD,SAAWxP,EAE1CuP,GAAevP,EAGjBkK,EAAWlK,QAAUuP,IAIzBF,EAAUlP,UAAU7pD,UAAY,CAO9Bm5D,aAAc,WACZ,OAAOH,EAAS,OAAQ,CACtB,MAASD,EAAU3Y,GAAGY,QACtB,GAAMv/C,KAAK80D,MAAMlX,OACjB,QAAW,SAaf+Z,mBAAoB,SAA4BpI,EAAUqI,GACxD,IAAI7C,EAQJ,GAAsB,KALpBA,EADExF,EAASC,uBACFD,EAASC,uBAAuB8H,EAAU3Y,GAAGW,OAAQ,SAErDiQ,EAAS9rC,qBAAqB,iBAG9BlkB,OACT,OAAO,EAQT,IALA,IAAI8X,EAAQ09C,EAAO,GACf1G,EAAY,GACZ9iC,EAAO,GAGFjsB,EAAI,EAAGA,EAAI+X,EAAM6qC,WAAW3iD,OAAQD,IAAK,CAChD,IAAIoD,EAAI2U,EAAM6qC,WAAW5iD,GAEzB,GALO,wCAKHoD,EAAEuhD,aAAa,SACjB,MAGiB,SAAfvhD,EAAEohD,SACJv4B,EAAO7oB,EAAEkyD,YAETvG,EAAY3rD,EAAEohD,SAIlB,IAAI+T,EAAc,2BAkBlB,OAfEA,GADExJ,GAGa,UAGb9iC,IACFssC,GAAe,MAAQtsC,GAGzB+rC,EAAUjgD,MAAMwgD,GAEhB73D,KAAK80D,MAAM9J,qBAAqB4M,EAAevJ,GAE/CruD,KAAK80D,MAAM1G,iBAEJ,GASTnE,OAAQ,aAURgB,SAAU,WAERjrD,KAAK83D,eAGL93D,KAAK+3D,OAAS,IAAIC,UAAUh4D,KAAK80D,MAAM7M,QAAS,QAChDjoD,KAAK+3D,OAAOE,OAASj4D,KAAKk4D,QAAQhyD,KAAKlG,MACvCA,KAAK+3D,OAAO3gC,QAAUp3B,KAAKm4D,SAASjyD,KAAKlG,MACzCA,KAAK+3D,OAAOK,QAAUp4D,KAAKq4D,SAASnyD,KAAKlG,MACzCA,KAAK+3D,OAAOO,UAAYt4D,KAAKu4D,oBAAoBryD,KAAKlG,OAWxDqvD,YAAa,SAAqBE,GAGhC,GAFYvvD,KAAK23D,mBAAmBpI,EAAU+H,EAAUnX,OAAOE,UAG7D,OAAOiX,EAAUnX,OAAOE,UAY5BmY,mBAAoB,SAA4Bz5D,GAC9C,IAAIsY,GAAQ,EAER0vC,EAAKhoD,EAAQklD,aAAa,SAEZ,iBAAP8C,EACT1vC,EAAQ,4BACC0vC,IAAOuQ,EAAU3Y,GAAGY,UAC7BloC,EAAQ,4BAA8B0vC,GAGxC,IAAI0R,EAAM15D,EAAQklD,aAAa,WAQ/B,MANmB,iBAARwU,EACTphD,EAAQ,8BACS,QAARohD,IACTphD,EAAQ,8BAAgCohD,IAGtCphD,IACFrX,KAAK80D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAUhpC,GAE3DrX,KAAK80D,MAAM1G,iBAEJ,IAYXmK,oBAAqB,SAA6Bx5D,GAChD,GAAuC,IAAnCA,EAAQuV,KAAK1I,QAAQ,WAAqD,IAAlC7M,EAAQuV,KAAK1I,QAAQ,SAAgB,CAE/E,IAAI0I,EAAOvV,EAAQuV,KAAKrM,QAAQ,mBAAoB,IACpD,GAAa,KAATqM,EAAa,OACjB,IAAIokD,GAAc,IAAIlV,WAAYC,gBAAgBnvC,EAAM,YAAYogD,gBAEpE10D,KAAK80D,MAAMjJ,SAAS6M,GAEpB14D,KAAK80D,MAAM/I,SAAShtD,EAAQuV,MAGxBtU,KAAKw4D,mBAAmBE,IAE1B14D,KAAKqvD,YAAYqJ,QAEd,GAAwC,IAApC35D,EAAQuV,KAAK1I,QAAQ,WAAkB,CAGhD,IAAI+sD,GAAgB,IAAInV,WAAYC,gBAAgB1kD,EAAQuV,KAAM,YAAYogD,gBAE9E10D,KAAK80D,MAAMjJ,SAAS8M,GAEpB34D,KAAK80D,MAAM/I,SAAShtD,EAAQuV,MAE5B,IAAIskD,EAAUD,EAAc1U,aAAa,iBAEzC,GAAI2U,EAAS,CACX,IAAI3Q,EAAUjoD,KAAK80D,MAAM7M,SAEFA,EAAQr8C,QAAQ,SAAW,GAAKgtD,EAAQhtD,QAAQ,SAAW,GAAKq8C,EAAQr8C,QAAQ,QAAU,KAG/G5L,KAAK80D,MAAM9J,qBAAqBsM,EAAUnX,OAAOS,SAAU,gDAE3D5gD,KAAK80D,MAAM//B,QAEX/0B,KAAK80D,MAAM7M,QAAU2Q,EAErB54D,KAAKirD,iBAGPjrD,KAAK80D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAU,2BAE3DrgD,KAAK80D,MAAM1G,oBAER,CACL,IAAIj1B,EAASn5B,KAAK64D,YAAY95D,EAAQuV,MAElC0tC,GAAO,IAAIwB,WAAYC,gBAAgBtqB,EAAQ,YAAYu7B,gBAC/D10D,KAAK+3D,OAAOO,UAAYt4D,KAAK84D,WAAW5yD,KAAKlG,MAE7CA,KAAK80D,MAAMzF,YAAYrN,EAAM,KAAMjjD,EAAQuV,QAY/C45C,YAAa,SAAqBH,GAChC,GAAI/tD,KAAK+3D,QAAU/3D,KAAK+3D,OAAOnzC,aAAeozC,UAAUe,OAAQ,CAC1DhL,GACF/tD,KAAK80D,MAAM3gC,KAAK45B,GAGlB,IAAIiL,EAAQzB,EAAS,QAAS,CAC5B,MAASD,EAAU3Y,GAAGY,UAGxBv/C,KAAK80D,MAAMhJ,UAAUkN,EAAMvT,QAE3B,IAAIwT,EAAc3B,EAAU9R,UAAUwT,GAEtCh5D,KAAK80D,MAAM9I,UAAUiN,GAErB,IACEj5D,KAAK+3D,OAAO5jC,KAAK8kC,GACjB,MAAOv2D,GACP40D,EAAUvvC,KAAK,iCAInB/nB,KAAK80D,MAAM1G,iBAQbA,cAAe,WACbkJ,EAAU/R,MAAM,uCAEhBvlD,KAAK83D,gBAOPe,YAAa,SAAqBpM,GAChC,MAAO,YAAcA,EAAS,cAQhCqL,aAAc,WACZ,GAAI93D,KAAK+3D,OACP,IACE/3D,KAAK+3D,OAAOK,QAAU,KACtBp4D,KAAK+3D,OAAO3gC,QAAU,KACtBp3B,KAAK+3D,OAAOO,UAAY,KACxBt4D,KAAK+3D,OAAOiB,QACZ,MAAOt2D,GACP40D,EAAU/R,MAAM7iD,EAAE3D,SAItBiB,KAAK+3D,OAAS,MAShBjJ,YAAa,WACX,OAAO,GAQTuJ,SAAU,SAAkB31D,GACtB1C,KAAK80D,MAAM3L,YAAcnpD,KAAK80D,MAAM1L,eACtCkO,EAAUjgD,MAAM,iCAEhBrX,KAAK80D,MAAM1G,iBACF1rD,GAAgB,OAAXA,EAAE9B,OAAkBZ,KAAK80D,MAAM3L,WAAanpD,KAAK+3D,QAK/DT,EAAUjgD,MAAM,iCAEhBrX,KAAK80D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAU,0EAE3DrgD,KAAK80D,MAAM1G,iBAEXkJ,EAAU/R,MAAM,qBASpBqK,kBAAmB,SAA2BngD,GAC5C6nD,EAAUjgD,MAAM,6DAEhBrX,KAAK80D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAUiX,EAAUvW,eAAeI,cAEhF1xC,GACFA,EAAShR,KAAKuB,KAAK80D,OAGrB90D,KAAK80D,MAAM1G,iBAQbH,qBAAsB,aAKtBE,kBAAmB,aAQnBgK,SAAU,SAAkB9gD,GAC1BigD,EAAUjgD,MAAM,mBAAqBA,GAErCrX,KAAK80D,MAAM9J,qBAAqBsM,EAAUnX,OAAOE,SAAU,0EAE3DrgD,KAAKkuD,eAQPrE,QAAS,WACP,IAAIv1C,EAAOtU,KAAK80D,MAAMvL,MAEtB,GAAIj1C,EAAK/U,OAAS,IAAMS,KAAK80D,MAAMntD,OAAQ,CACzC,IAAK,IAAIrI,EAAI,EAAGA,EAAIgV,EAAK/U,OAAQD,IAC/B,GAAgB,OAAZgV,EAAKhV,GAAa,CACpB,IAAImtD,EAGFA,EADc,YAAZn4C,EAAKhV,GACEU,KAAK03D,eAAejS,OAEpBnxC,EAAKhV,GAGhB,IAAI45D,EAAY5B,EAAU9R,UAAUiH,GAEpCzsD,KAAK80D,MAAMhJ,UAAUW,GAErBzsD,KAAK80D,MAAM9I,UAAUkN,GAErBl5D,KAAK+3D,OAAO5jC,KAAK+kC,GAIrBl5D,KAAK80D,MAAMvL,MAAQ,KA2BvBuP,WAAY,SAAoB/5D,GAC9B,IAAIijD,EAEAgX,EAAQ,wDAEZ,GAAIj6D,EAAQuV,OAAS0kD,EASnB,OARAh5D,KAAK80D,MAAM/I,SAASiN,GAEpBh5D,KAAK80D,MAAMjJ,SAAS9sD,QAEfiB,KAAK80D,MAAM1L,eACdppD,KAAK80D,MAAM1G,iBAIR,GAAsC,IAAlCrvD,EAAQuV,KAAKyO,OAAO,WAI7B,GAFAi/B,GAAO,IAAIwB,WAAYC,gBAAgB1kD,EAAQuV,KAAM,YAAYogD,iBAE5D10D,KAAKw4D,mBAAmBxW,GAC3B,WAEG,CACL,IAAI1tC,EAAOtU,KAAK64D,YAAY95D,EAAQuV,MAEpC0tC,GAAO,IAAIwB,WAAYC,gBAAgBnvC,EAAM,YAAYogD,gBAG3D,OAAI10D,KAAK23D,mBAAmB3V,EAAMsV,EAAUnX,OAAO5jD,YAAnD,EAKIyD,KAAK80D,MAAM1L,eAA8C,aAA7BpH,EAAKmX,WAAWrV,UAAoE,gBAAzC9B,EAAKmX,WAAWlV,aAAa,SACtGjkD,KAAK80D,MAAMjJ,SAAS7J,QAEpBhiD,KAAK80D,MAAM/I,SAASuL,EAAU9R,UAAUxD,UAO1ChiD,KAAK80D,MAAMtG,UAAUxM,EAAMjjD,EAAQuV,OAQrC4jD,QAAS,WACPZ,EAAU/R,MAAM,kBAEhB,IAAIllD,EAAQL,KAAK03D,eAEjB13D,KAAK80D,MAAMhJ,UAAUzrD,EAAMolD,QAE3B,IAAI2T,EAAc9B,EAAU9R,UAAUnlD,GAEtCL,KAAK80D,MAAM9I,UAAUoN,GAErBp5D,KAAK+3D,OAAO5jC,KAAKilC,IAcnBxK,WAAY,SAAoBnC,GAC9B,OAAOA,GAQTN,MAAO,WACLnsD,KAAK80D,MAAMnpC,SAObshC,aAAc,WACZvhC,aAAa1rB,KAAK80D,MAAM9L,cAExBhpD,KAAK80D,MAAMjL,QAAQ3jD,KAAKlG,KAAK80D,MAA7B90D,KAIJq6C,EAASiE,QAAUmV,EAAKnV,QACxBjE,EAAS+D,OAASqV,EAAKrV,OACvB/D,EAASmE,IAAMiV,EAAKjV,IACpBnE,EAASgf,KAAO5F,EAAK4F,KACrBhf,EAASoE,MAAQgV,EAAKhV,MAEfgV,EAzwLyEx3D,mDCC5FqiD,EAAAA,QAAQwH,oBAAoB,QAC5B,CACIsM,YAAa,KACbkH,YAAc,GACdC,UAAY,GACZC,OAAS,GAOTrzC,KAAM,SAASszC,GAEfz5D,KAAKoyD,YAAcqH,EACfz5D,KAAKs5D,YAAc,GACnBt5D,KAAKu5D,UAAc,GACnBv5D,KAAKw5D,OAAc,GAEnBC,EAAK/hC,WAAW13B,KAAK05D,aAAaxzD,KAAKlG,MAAOs+C,EAAAA,QAAQK,GAAGO,WAAY,KAAM,MAAO,KAAM,MAExFua,EAAK/hC,WAAW13B,KAAK25D,cAAczzD,KAAKlG,MAAOs+C,EAAAA,QAAQK,GAAGQ,YAAa,KAAM,MAAO,KAAM,OAa9Fya,YAAa,SAASC,EAAUr6D,EAAM2C,EAAM23D,GAExC,IAAK,IAAIx6D,EAAE,EAAGA,EAAEU,KAAKs5D,YAAY/5D,OAAQD,IAErC,GAAIU,KAAKs5D,YAAYh6D,GAAGu6D,UAAYA,GAChC75D,KAAKs5D,YAAYh6D,GAAGE,MAAQA,GAC5BQ,KAAKs5D,YAAYh6D,GAAG6C,MAAQA,GAC5BnC,KAAKs5D,YAAYh6D,GAAGw6D,MAAQA,EAE5B,OAAO,EAIf,OADA95D,KAAKs5D,YAAYv2D,KAAK,CAAC82D,SAAUA,EAAUr6D,KAAMA,EAAM2C,KAAMA,EAAM23D,KAAMA,KAClE,GAUXC,WAAY,SAASC,GAEjB,IAAK,IAAI16D,EAAE,EAAGA,EAAEU,KAAKu5D,UAAUh6D,OAAQD,IAElC,GAAIU,KAAKu5D,UAAUj6D,IAAM06D,EACrB,OAAO,EAGhB,OADAh6D,KAAKu5D,UAAUx2D,KAAKi3D,IACb,GAUXC,cAAe,SAASD,GAEpB,IAAK,IAAI16D,EAAE,EAAGA,EAAEU,KAAKu5D,UAAUh6D,OAAQD,IAElC,GAAIU,KAAKu5D,UAAUj6D,KAAO06D,EAEtB,OADAh6D,KAAKu5D,UAAUhsD,OAAOjO,EAAE,IACjB,EAGhB,OAAO,GAaX46D,QAAS,SAASrV,EAAK1iD,EAAMnF,EAAMm9D,GAE/B,QAAIn9D,IAASm9D,IAEbn6D,KAAKw5D,OAAOz2D,KAAK,CAAC8hD,IAAKA,EAAK1iD,KAAMA,EAAMnF,KAAMA,EAAMm9D,UAAWA,IACxD,KAUX1sD,KAAM,SAASo3C,EAAK7nD,EAAMo9D,EAAS/iD,EAAOi1C,GAEtC,IAAIjO,EAAQ,CAAC2H,MAAO1H,EAAAA,QAAQK,GAAGO,YAC3BliD,IACAqhD,EAAMrhD,KAAOA,GAEjB,IAAIyQ,EAAO+wC,EAAAA,IAAI,CAAC7D,KAAK36C,KAAKoyD,YAAYvN,IACrBwV,GAAGxV,EAAKrlD,KAAK,QAAQ4B,EAAE,QAASi9C,GACjDr+C,KAAKoyD,YAAYvF,OAAOp/C,EAAM2sD,EAAS/iD,EAAOi1C,IAUlDgO,MAAO,SAASzV,EAAK7nD,EAAMo9D,EAAS/iD,EAAOi1C,GAEvC,IAAIjO,EAAQ,CAAC2H,MAAO1H,EAAAA,QAAQK,GAAGQ,aAC3BniD,IACAqhD,EAAMrhD,KAAOA,GAEjB,IAAIs9D,EAAQ9b,EAAAA,IAAI,CAAC7D,KAAK36C,KAAKoyD,YAAYvN,IACtBwV,GAAGxV,EAAKrlD,KAAK,QAAQ4B,EAAE,QAASi9C,GACjDr+C,KAAKoyD,YAAYvF,OAAOyN,EAAOF,EAAS/iD,EAAOi1C,IAKnDiO,eAAgB,SAAS9N,EAAQ+N,GAE7B,IAAIr2D,EAAQsoD,EAAOxI,aAAa,MAC5BtJ,EAAO8R,EAAOxI,aAAa,QAC3BwW,EAAWjc,EAAAA,IAAI,CAACh/C,KAAM,SAAU2E,GAAIA,IAMxC,OAJa,OAATw2C,GACA8f,EAASpc,MAAM,CAACgc,GAAI1f,IAGjB8f,EAASr5D,EAAE,QAASo5D,IAM/Bd,aAAc,SAASjN,GAEnB,IAEIntD,EAFAtC,EAAOyvD,EAAOhpC,qBAAqB,SAAS,GAAGwgC,aAAa,QAC5D5F,EAAQ,CAAC2H,MAAO1H,EAAAA,QAAQK,GAAGO,YAE3BliD,IAEAqhD,EAAMrhD,KAAOA,GAEjB,IAAIy9D,EAAWz6D,KAAKu6D,eAAe9N,EAAQpO,GAC3C,IAAK/+C,EAAE,EAAGA,EAAEU,KAAKs5D,YAAY/5D,OAAQD,IAEjC++C,EAAQ,CAACwb,SAAU75D,KAAKs5D,YAAYh6D,GAAGu6D,SAC1Br6D,KAAUQ,KAAKs5D,YAAYh6D,GAAGE,MACvCQ,KAAKs5D,YAAYh6D,GAAG6C,OACpBk8C,EAAMl8C,KAAOnC,KAAKs5D,YAAYh6D,GAAG6C,MACjCnC,KAAKs5D,YAAYh6D,GAAGw6D,OACpBzb,EAAM,YAAcr+C,KAAKs5D,YAAYh6D,GAAGw6D,MAC5CW,EAASr5D,EAAE,WAAYi9C,GAAO6H,KAElC,IAAK5mD,EAAE,EAAGA,EAAEU,KAAKu5D,UAAUh6D,OAAQD,IAE/Bm7D,EAASr5D,EAAE,UAAW,CAAC,IAAMpB,KAAKu5D,UAAUj6D,KAAK4mD,KAGrD,OADAlmD,KAAKoyD,YAAYj+B,KAAKsmC,EAAShV,SACxB,GAKXkU,cAAe,SAASlN,GAEpB,IAEI6N,EAAOh7D,EAFPk7D,EAAc,CAACxU,MAAO1H,EAAAA,QAAQK,GAAGQ,aACjCniD,EAAOyvD,EAAOhpC,qBAAqB,SAAS,GAAGwgC,aAAa,QAEhE,GAAIjnD,GAIA,IAFAw9D,EAAYx9D,KAAOA,EACnBs9D,EAAQ,GACHh7D,EAAI,EAAGA,EAAIU,KAAKw5D,OAAOj6D,OAAQD,IAEhC,GAAIU,KAAKw5D,OAAOl6D,GAAGtC,MAAQA,EAC3B,CACIs9D,EAAQt6D,KAAKw5D,OAAOl6D,GAAG66D,UAAU1N,GACjC,YAMR6N,EAAQt6D,KAAKw5D,OAEjB,IAAIiB,EAAWz6D,KAAKu6D,eAAe9N,EAAQ+N,GAC3C,IAAKl7D,EAAI,EAAGA,EAAIg7D,EAAM/6D,OAAQD,IAC9B,CACI,IAAI++C,EAAQ,CAACwG,IAAMyV,EAAMh7D,GAAGulD,KACxByV,EAAMh7D,GAAG6C,OACTk8C,EAAMl8C,KAAOm4D,EAAMh7D,GAAG6C,MACtBm4D,EAAMh7D,GAAGtC,OACTqhD,EAAMrhD,KAAOs9D,EAAMh7D,GAAGtC,MAC1By9D,EAASr5D,EAAE,OAAQi9C,GAAO6H,KAG9B,OADAlmD,KAAKoyD,YAAYj+B,KAAKsmC,EAAShV,SACxB,+DCpNfnH,EAAAA,QAAQwH,oBAAoB,mBAAoB,CAK/C4U,SAAS,EAOTC,oCAAoC,EAQpCC,wBAAyB,EAMzBC,GAAI,KAMJC,IAAK,gBAMLC,4BAA4B,EAQ5BC,gCAAiC,KAQjCC,+BAAgC,KAMhCC,0BAA2B,KAQ3BC,mBAAoB,KAMpBC,gBAAiB,KAMjBC,iBAAkB,KAKlBC,8BAA+B,EAM/BC,cAAc,EAKdC,uBAAwB,GAOxBC,6BAA8B,GAE9BC,8BAA+B,SAAShoD,GACvC1T,KAAKy7D,6BAA6B14D,KAAK2Q,IAGxCioD,OAAQ,SAASvlD,GAChB,IAAKpW,KAAKu7D,aACT,MAAM,IAAI9sD,MAAM,sDACV,GAAIzO,KAAK47D,oBAAsBtd,EAAAA,QAAQ6B,OAAOK,UACpD,MAAM,IAAI/xC,MAAM,sDAEjBzO,KAAK66D,GAAG1mC,KAAKiqB,EAAAA,OAAO,SAAU,CAAE4H,MAAOhmD,KAAK86D,IAAK1kD,OAAAA,KACjDpW,KAAK66D,GAAGlvC,QACR3rB,KAAK66D,GAAG1kD,SAGT0lD,eAAgB,WACf,OAAO77D,KAAK87D,cAGbC,cACC,OAAO/7D,KAAKu7D,cAGbnlD,OAAQ,WACP,IAAKpW,KAAK67D,iBACT,MAAM,IAAIptD,MAAM,mBAEjB,GAAIzO,KAAK47D,oBAAsBtd,EAAAA,QAAQ6B,OAAOM,aAC7C,MAAM,IAAIhyC,MAAM,yDAGjBzO,KAAK66D,GAAGjxD,QAAQ4nD,yBAA0B,EAC1CxxD,KAAKg8D,WAAY,EAEjBh8D,KAAKi8D,iBAAiB1zD,MAAMvI,KAAK66D,GAAI76D,KAAKk8D,eAG3CC,uBAAwB,WACvB,GAAIn8D,KAAK47D,oBAAsBtd,EAAAA,QAAQ6B,OAAOK,UAC7C,MAAM,IAAI/xC,MAAM,sEAEjBzO,KAAKs7D,8BAAgC,EACrCt7D,KAAK66D,GAAG1mC,KAAKiqB,EAAAA,OAAO,IAAK,CAAE4H,MAAOhmD,KAAK86D,QAGxCsB,mBAAoB,WACnB,OAAOp8D,KAAKk7D,2BAGbmB,mBAAoB,WACnB,OAAOr8D,KAAKi7D,gCAGb90C,KAAM,SAASszC,GACdz5D,KAAK66D,GAAKpB,EACVnb,EAAAA,QAAQwD,aAAa,KAAM9hD,KAAK86D,KAGhC96D,KAAKm7D,mBAAqBn7D,KAAK66D,GAAG/O,UAClC9rD,KAAK66D,GAAG/O,UAAY9rD,KAAK8rD,UAAU5lD,KAAKlG,MAExCA,KAAKi8D,iBAAmBj8D,KAAK66D,GAAGrQ,QAChCxqD,KAAK66D,GAAGrQ,QAAUxqD,KAAKs8D,sBAAsBp2D,KAAKlG,MAElDA,KAAKu8D,mCAAqCv8D,KAAK66D,GAAGtJ,2BAClDvxD,KAAK66D,GAAGtJ,2BAA6BvxD,KAAKuxD,2BAA2BrrD,KAAKlG,MAE1EA,KAAKw8D,sBAAwBx8D,KAAK66D,GAAGzM,cACrCpuD,KAAK66D,GAAGzM,cAAgBpuD,KAAKy8D,uBAAuBv2D,KAAKlG,MAEzDA,KAAK08D,oBAAsB18D,KAAK66D,GAAG/M,WACnC9tD,KAAK66D,GAAG/M,WAAa9tD,KAAK28D,qBAAqBz2D,KAAKlG,OAGrD28D,qBAAsB,WACrB38D,KAAK87D,kBAAe/0D,EACpB/G,KAAK08D,oBAAoBn0D,MAAMvI,KAAK66D,GAAI9yD,YAGzC00D,uBAAwB,WACnBz8D,KAAK67D,mBACH77D,KAAKg8D,WACNh8D,KAAK66D,GAAG1R,YAAcnpD,KAAK66D,GAAGzR,gBAClCppD,KAAK48D,aAAe,CACnB1lC,SAAUl3B,KAAK66D,GAAG3jC,SAClBwxB,cAAe1oD,KAAK66D,GAAGnS,cACvBC,aAAc3oD,KAAK66D,GAAGlS,aACtBC,eAAgB5oD,KAAK66D,GAAGjS,eACxBC,UAAW7oD,KAAK66D,GAAGhS,UACnBC,YAAa9oD,KAAK66D,GAAG/R,aAEtB9oD,KAAK68D,WAAa78D,KAAK66D,GAAGhW,IAE1B7kD,KAAK06D,SAAWpc,EAAAA,QAAQiH,MAAM,0CAA4CvlD,KAAK48D,aAAa1lC,SAAS33B,SAKtGS,KAAK66D,GAAGtR,MAAQ,GAEhBvpD,KAAKw8D,sBAAsBj0D,MAAMvI,KAAK66D,GAAI9yD,YAG3Cu0D,sBAAuB,WACtBt8D,KAAKk8D,aAAen0D,UAEpB/H,KAAKi8D,iBAAiB1zD,MAAMvI,KAAK66D,GAAI9yD,YAGtCwpD,2BAA4B,SAASvP,GAGpC,OAFAhiD,KAAKu7D,aAAevZ,EAAKwN,uBAAuBxvD,KAAK86D,IAAK,MAAMv7D,OAAS,EAElES,KAAKu8D,mCAAmCh0D,MAAMvI,KAAK66D,GAAI9yD,YAG/DwmD,cAAe,SAAUv4B,GAExB,GADAh2B,KAAK47D,kBAAoB5lC,EACpBh2B,KAAK67D,kBACL7lC,IAAWsoB,EAAAA,QAAQ6B,OAAOK,WAAaxqB,IAAWsoB,EAAAA,QAAQ6B,OAAOM,aAqC/D,GAAIzqB,IAAWsoB,EAAAA,QAAQ6B,OAAOW,aAAe,CACnD9gD,KAAK66D,GAAGhW,IAAM7kD,KAAK68D,WAGnB,IAAK,MAAMC,KAAY98D,KAAK48D,aAC3B58D,KAAK66D,GAAGiC,GAAY98D,KAAK48D,aAAaE,GAIvC98D,KAAK66D,GAAG1mC,KAAKiqB,EAAAA,OAAO,SAAU,CAC7B4H,MAAOhmD,KAAK86D,IACZpU,EAAG1mD,KAAKi7D,+BACR8B,OAAQ/8D,KAAK87D,gBAEd97D,KAAK66D,GAAGlvC,aACEqK,IAAWsoB,EAAAA,QAAQ6B,OAAO5jD,QACpCyD,KAAK06D,SAAWpc,EAAAA,QAAQiH,MAAM,oCAC9BvlD,KAAK87D,kBAAe/0D,QArDpB/G,KAAK06D,SAAWpc,EAAAA,QAAQiH,MAAM,kBAE9BvlD,KAAKg7D,gCAAkC,EACvCh7D,KAAKi7D,+BAAiC,EAEtCj7D,KAAKk7D,0BAA4B,EAEjCl7D,KAAK+6D,4BAA6B,EAClC/6D,KAAKs7D,8BAAgC,EAGrCt7D,KAAKg8D,WAAY,EAEbhmC,IAAWsoB,EAAAA,QAAQ6B,OAAOM,eAC7BzgD,KAAKu7D,cAAe,GAGrBv7D,KAAKw7D,uBAAyB,GAE1Bx7D,KAAKo7D,iBACRp7D,KAAK66D,GAAGjO,cAAc5sD,KAAKo7D,iBAGxBp7D,KAAKq7D,kBACRr7D,KAAK66D,GAAGjO,cAAc5sD,KAAKq7D,kBAG5Br7D,KAAKo7D,gBAAkBp7D,KAAK66D,GAAGnjC,WAAW13B,KAAKg9D,4BAA4B92D,KAAKlG,MAAOA,KAAK86D,IAAK,KACjG96D,KAAKi9D,YAAcj9D,KAAK66D,GAAGnjC,WAAW13B,KAAKk9D,iBAAiBh3D,KAAKlG,MAAOA,KAAK86D,IAAK,KAClF96D,KAAKq7D,iBAAmBr7D,KAAK66D,GAAGnjC,WAAW13B,KAAKm9D,uBAAuBj3D,KAAKlG,OAG5EA,KAAKo9D,gBAAkBp9D,KAAK66D,GAAG1K,eAAenwD,KAAKq9D,eAAen3D,KAAKlG,MAAOA,KAAK86D,IAAK,WACxF96D,KAAKs9D,qBAAuBt9D,KAAK66D,GAAG1K,eAAenwD,KAAKu9D,oBAAoBr3D,KAAKlG,MAAOA,KAAK86D,IAAK,UAClG96D,KAAKw9D,gBAAmBx9D,KAAK66D,GAAG1K,eAAenwD,KAAKy9D,eAAev3D,KAAKlG,MAAOA,KAAK86D,IAAI,YA8B1FhP,UAAW,SAAS9J,GAOnB,OANI1D,EAAAA,QAAQ8D,WAAWJ,EAAM,OAC5B1D,EAAAA,QAAQ8D,WAAWJ,EAAM,aACzB1D,EAAAA,QAAQ8D,WAAWJ,EAAM,aACzBhiD,KAAK09D,4BAA4B1b,GAG3BhiD,KAAKm7D,mBAAmB18D,KAAKuB,KAAK66D,GAAI7Y,IAG9Cqb,eAAgB,SAASrb,GAOxB,OANAhiD,KAAK+6D,4BAA6B,EAElC/6D,KAAK87D,aAA+C,SAAhC9Z,EAAKiC,aAAa,WAAwBjC,EAAKiC,aAAa,MAEhFjkD,KAAK66D,GAAGzkD,UAED,GAGRmnD,oBAAqB,SAASvb,GAC7B,MAAM3qC,EAAQ2qC,GAAQA,EAAK2b,mBAAqB3b,EAAK2b,kBAAkBllC,QAKvE,OAHAz4B,KAAK66D,GAAG7P,qBAAqB1M,EAAAA,QAAQ6B,OAAO5jD,MAAO8a,EAAO2qC,GAC1DhiD,KAAK66D,GAAGzM,iBAED,GAGRqP,eAAgB,SAASzb,GAExB,IAAI4b,EAAe9yD,SAASk3C,EAAKiC,aAAa,MAQ9C,GAPAjkD,KAAK69D,2BAA2BD,EAAc59D,KAAKg7D,iCAEnDh7D,KAAKg8D,WAAY,EACjBh8D,KAAK66D,GAAGpS,SAAU,EAClBzoD,KAAK66D,GAAG3R,eAAgB,EACxBlpD,KAAK66D,GAAGvR,UAAW,EAEftpD,KAAKw7D,uBAAuBj8D,OAAS,EAAG,CAC3CS,KAAK06D,SAAWpc,EAAAA,QAAQiH,MAAM,oCAAqCvlD,KAAKw7D,wBACxE,IAAI,MAAM/O,KAAUzsD,KAAKw7D,uBACxBx7D,KAAK66D,GAAG1mC,KAAKs4B,QAGdzsD,KAAK06D,SAAWpc,EAAAA,QAAQiH,MAAM,+BAAgCvlD,KAAKw7D,wBAKpE,OAFAx7D,KAAK66D,GAAG7P,qBAAqB1M,EAAAA,QAAQ6B,OAAOK,UAAW,OAEhD,GAGR2c,uBAAwB,SAASnb,GAShC,OARI1D,EAAAA,QAAQ8D,WAAWJ,EAAM,OAAS1D,EAAAA,QAAQ8D,WAAWJ,EAAM,aAAe1D,EAAAA,QAAQ8D,WAAWJ,EAAM,cACtGhiD,KAAK89D,kCAED99D,KAAK26D,oCACR36D,KAAK+9D,4BAIA,GAGRF,2BAA4B,SAASG,EAAsBC,GAC1D,IAAIC,EAAQF,EAAuBC,EAE/BC,EAAQ,GACXl+D,KAAKm+D,YAAY,uDAAyDH,EAAuB,gBAAkBC,GAGhHC,EAAQl+D,KAAKw7D,uBAAuBj8D,QACvCS,KAAKm+D,YAAY,8FAAgGD,EAAQ,kCAAoCl+D,KAAKw7D,uBAAuBj8D,OAAS,WAAay+D,EAAuB,gBAAkBC,GAGzP,IAAI,IAAI3+D,EAAI,EAAGA,EAAI4+D,EAAO5+D,IAEzB,IADA,IAAImtD,EAASzsD,KAAKw7D,uBAAuBvlD,QAChCtP,EAAI,EAAGA,EAAI3G,KAAKy7D,6BAA6Bl8D,OAAQoH,IAC7D3G,KAAKy7D,6BAA6B90D,GAAG8lD,GAInCzsD,KAAK06D,SAAW16D,KAAKw7D,uBAAuBj8D,OAAS,GACxD++C,EAAAA,QAAQv2B,KAAK,4BAA6B/nB,KAAKw7D,wBAGhDx7D,KAAKg7D,gCAAkCgD,EAEnCh+D,KAAK46D,wBAA0B,IAClC56D,KAAKs7D,8BAAgC,IAIvC0B,4BAA6B,WAG5B,OAFAh9D,KAAK+9D,2BAEE,GAGRb,iBAAkB,SAASlb,GAC1B,IAAI4b,EAAe9yD,SAASk3C,EAAKiC,aAAa,MAG9C,OAFAjkD,KAAK69D,2BAA2BD,EAAc59D,KAAKg7D,kCAE5C,GAGR+C,wBAAyB,WACpB/9D,KAAK+6D,4BACR/6D,KAAK66D,GAAG1mC,KAAKiqB,EAAAA,OAAO,IAAK,CAAE4H,MAAOhmD,KAAK86D,IAAKpU,EAAG1mD,KAAKi7D,mCAItDyC,4BAA6B,SAAS1b,GACrC,GAAIhiD,KAAK+6D,2BAA4B,CACpC,IAAmD,IAA/C/6D,KAAKw7D,uBAAuB5vD,QAAQo2C,GAEvC,OAGDhiD,KAAKw7D,uBAAuBz4D,KAAKi/C,GACjChiD,KAAKk7D,4BAEDl7D,KAAK46D,wBAA0B,IAClC56D,KAAKs7D,gCAEDt7D,KAAKs7D,gCAAkCt7D,KAAK46D,yBAE/CrrD,YAAW,KACNvP,KAAK47D,oBAAsBtd,EAAAA,QAAQ6B,OAAOK,WAC7CxgD,KAAKm8D,2BAEJ,MAMP2B,gCAAiC,WAC5B99D,KAAK+6D,4BACR/6D,KAAKi7D,kCAIPkD,YAAa,SAAShzC,GAErB,MADAmzB,EAAAA,QAAQjnC,MAAM8T,GACR,IAAI1c,MAAM0c,0oCCpblB,IAAIizC,GAAe,EACfC,GAAuB,EAUpB,SAASC,EAAeC,EAAUz3D,EAAM6O,GAC7C,MAAM9P,EAAQ04D,EAAS14D,MAAMiB,GAC7B,OAAOjB,GAASA,EAAMtG,QAAUoW,GAAO7K,SAASjF,EAAM8P,GAAM,IAMvD,SAAS6oD,EAAwB/hE,EAAQgiE,EAAiBnN,GAC/D,IAAK70D,EAAOiiE,kBACV,OAEF,MAAMr2B,EAAQ5rC,EAAOiiE,kBAAkBngE,UACjCogE,EAAyBt2B,EAAMvf,iBACrCuf,EAAMvf,iBAAmB,SAAS81C,EAAiB7pD,GACjD,GAAI6pD,IAAoBH,EACtB,OAAOE,EAAuBp2D,MAAMvI,KAAM+H,WAE5C,MAAMiM,EAAmBtR,IACvB,MAAMm8D,EAAgBvN,EAAQ5uD,GAC1Bm8D,IACE9pD,EAAG+pD,YACL/pD,EAAG+pD,YAAYD,GAEf9pD,EAAG8pD,KAST,OALA7+D,KAAK++D,UAAY/+D,KAAK++D,WAAa,GAC9B/+D,KAAK++D,UAAUN,KAClBz+D,KAAK++D,UAAUN,GAAmB,IAAI54B,KAExC7lC,KAAK++D,UAAUN,GAAiBx1C,IAAIlU,EAAIf,GACjC2qD,EAAuBp2D,MAAMvI,KAAM,CAAC4+D,EACzC5qD,KAGJ,MAAMgrD,EAA4B32B,EAAMrf,oBACxCqf,EAAMrf,oBAAsB,SAAS41C,EAAiB7pD,GACpD,GAAI6pD,IAAoBH,IAAoBz+D,KAAK++D,YACzC/+D,KAAK++D,UAAUN,GACrB,OAAOO,EAA0Bz2D,MAAMvI,KAAM+H,WAE/C,IAAK/H,KAAK++D,UAAUN,GAAiBj0B,IAAIz1B,GACvC,OAAOiqD,EAA0Bz2D,MAAMvI,KAAM+H,WAE/C,MAAMk3D,EAAcj/D,KAAK++D,UAAUN,GAAiBtkD,IAAIpF,GAQxD,OAPA/U,KAAK++D,UAAUN,GAAiBS,OAAOnqD,GACM,IAAzC/U,KAAK++D,UAAUN,GAAiBltC,aAC3BvxB,KAAK++D,UAAUN,GAEmB,IAAvCngE,OAAOiG,KAAKvE,KAAK++D,WAAWx/D,eACvBS,KAAK++D,UAEPC,EAA0Bz2D,MAAMvI,KAAM,CAAC4+D,EAC5CK,KAGJ3gE,OAAO2b,eAAeouB,EAAO,KAAOo2B,EAAiB,CACnDtkD,MACE,OAAOna,KAAK,MAAQy+D,IAEtBx1C,IAAIlU,GACE/U,KAAK,MAAQy+D,KACfz+D,KAAKgpB,oBAAoBy1C,EACrBz+D,KAAK,MAAQy+D,WACVz+D,KAAK,MAAQy+D,IAElB1pD,GACF/U,KAAK8oB,iBAAiB21C,EAClBz+D,KAAK,MAAQy+D,GAAmB1pD,IAGxCmF,YAAY,EACZwG,cAAc,IAIX,SAASy+C,EAAWC,GACzB,MAAoB,kBAATA,EACF,IAAI3wD,MAAM,yBAA2B2wD,EACxC,4BAENhB,EAAegB,EACPA,EAAQ,8BACZ,8BAOC,SAASC,EAAgBD,GAC9B,MAAoB,kBAATA,EACF,IAAI3wD,MAAM,yBAA2B2wD,EACxC,4BAENf,GAAwBe,EACjB,oCAAsCA,EAAO,WAAa,YAG5D,SAASr1D,IACd,GAAsB,iBAAXtN,OAAqB,CAC9B,GAAI2hE,EACF,OAEqB,oBAAZt0D,SAAkD,mBAAhBA,QAAQC,KACnDD,QAAQC,IAAIxB,MAAMuB,QAAS/B,YAQ1B,SAASu3D,EAAWC,EAAWC,GAC/BnB,GAGLv0D,QAAQie,KAAKw3C,EAAY,8BAAgCC,EACrD,aAwDN,SAAS73B,EAAS83B,GAChB,MAA+C,oBAAxCnhE,OAAOC,UAAUC,SAASC,KAAKghE,GAQjC,SAASC,EAAcprD,GAC5B,OAAKqzB,EAASrzB,GAIPhW,OAAOiG,KAAK+P,GAAMtN,QAAO,SAASk9B,EAAaz/B,GACpD,MAAMs5C,EAAQpW,EAASrzB,EAAK7P,IACtBZ,EAAQk6C,EAAQ2hB,EAAcprD,EAAK7P,IAAQ6P,EAAK7P,GAChDk7D,EAAgB5hB,IAAUz/C,OAAOiG,KAAKV,GAAOtE,OACnD,YAAcwH,IAAVlD,GAAuB87D,EAClBz7B,EAEF5lC,OAAO+jB,OAAO6hB,EAAa,CAAC,CAACz/B,GAAMZ,MACzC,IAXMyQ,EAeJ,SAASsrD,EAAUC,EAAOC,EAAMC,GAChCD,IAAQC,EAAUv1B,IAAIs1B,EAAK37D,MAGhC47D,EAAU92C,IAAI62C,EAAK37D,GAAI27D,GACvBxhE,OAAOiG,KAAKu7D,GAAMt7D,SAAQrC,IACpBA,EAAK69D,SAAS,MAChBJ,EAAUC,EAAOA,EAAM1lD,IAAI2lD,EAAK39D,IAAQ49D,GAC/B59D,EAAK69D,SAAS,QACvBF,EAAK39D,GAAMqC,SAAQL,IACjBy7D,EAAUC,EAAOA,EAAM1lD,IAAIhW,GAAK47D,UAOjC,SAASE,EAAYhuD,EAAQ6d,EAAOowC,GACzC,MAAMC,EAAkBD,EAAW,eAAiB,cAC9CE,EAAiB,IAAIv6B,IAC3B,GAAc,OAAV/V,EACF,OAAOswC,EAET,MAAMC,EAAa,GAcnB,OAbApuD,EAAOzN,SAAQX,IACM,UAAfA,EAAMrE,MACNqE,EAAMy8D,kBAAoBxwC,EAAM3rB,IAClCk8D,EAAWt9D,KAAKc,MAGpBw8D,EAAW77D,SAAQ+7D,IACjBtuD,EAAOzN,SAAQq7D,IACTA,EAAMrgE,OAAS2gE,GAAmBN,EAAMW,UAAYD,EAAUp8D,IAChEy7D,EAAU3tD,EAAQ4tD,EAAOO,SAIxBA,EC1PT,MAAM1F,EAAUnd,EAET,SAASkjB,EAAiBhkE,EAAQikE,GACvC,MAAMC,EAAYlkE,GAAUA,EAAOkkE,UAEnC,IAAKA,EAAUC,aACb,OAGF,MAAMC,EAAuB,SAASz/D,GACpC,GAAiB,iBAANA,GAAkBA,EAAE0/D,WAAa1/D,EAAE2/D,SAC5C,OAAO3/D,EAET,MAAM4/D,EAAK,GA4CX,OA3CA1iE,OAAOiG,KAAKnD,GAAGoD,SAAQC,IACrB,GAAY,YAARA,GAA6B,aAARA,GAA8B,gBAARA,EAC7C,OAEF,MAAM5B,EAAuB,iBAAXzB,EAAEqD,GAAqBrD,EAAEqD,GAAO,CAACw8D,MAAO7/D,EAAEqD,SAC5CsC,IAAZlE,EAAEq+D,OAA0C,iBAAZr+D,EAAEq+D,QACpCr+D,EAAEoY,IAAMpY,EAAEmY,IAAMnY,EAAEq+D,OAEpB,MAAMC,EAAW,SAAStvB,EAAQ1vC,GAChC,OAAI0vC,EACKA,EAAS1vC,EAAKi4C,OAAO,GAAG5H,cAAgBrwC,EAAKqE,MAAM,GAE3C,aAATrE,EAAuB,WAAaA,GAE9C,QAAgB4E,IAAZlE,EAAEo+D,MAAqB,CACzBD,EAAGD,SAAWC,EAAGD,UAAY,GAC7B,IAAIK,EAAK,GACc,iBAAZv+D,EAAEo+D,OACXG,EAAGD,EAAS,MAAO18D,IAAQ5B,EAAEo+D,MAC7BD,EAAGD,SAASh+D,KAAKq+D,GACjBA,EAAK,GACLA,EAAGD,EAAS,MAAO18D,IAAQ5B,EAAEo+D,MAC7BD,EAAGD,SAASh+D,KAAKq+D,KAEjBA,EAAGD,EAAS,GAAI18D,IAAQ5B,EAAEo+D,MAC1BD,EAAGD,SAASh+D,KAAKq+D,SAGLr6D,IAAZlE,EAAEq+D,OAA0C,iBAAZr+D,EAAEq+D,OACpCF,EAAGF,UAAYE,EAAGF,WAAa,GAC/BE,EAAGF,UAAUK,EAAS,GAAI18D,IAAQ5B,EAAEq+D,OAEpC,CAAC,MAAO,OAAO18D,SAAQ68D,SACNt6D,IAAXlE,EAAEw+D,KACJL,EAAGF,UAAYE,EAAGF,WAAa,GAC/BE,EAAGF,UAAUK,EAASE,EAAK58D,IAAQ5B,EAAEw+D,UAKzCjgE,EAAEkgE,WACJN,EAAGD,UAAYC,EAAGD,UAAY,IAAIvwD,OAAOpP,EAAEkgE,WAEtCN,GAGHO,EAAmB,SAASC,EAAaj9B,GAC7C,GAAIm8B,EAAe/3D,SAAW,GAC5B,OAAO47B,EAAKi9B,GAGd,IADAA,EAAcv2C,KAAKnmB,MAAMmmB,KAAKF,UAAUy2C,MACQ,iBAAtBA,EAAYC,MAAoB,CACxD,MAAMC,EAAQ,SAASrjE,EAAK6C,EAAGC,GACzBD,KAAK7C,KAAS8C,KAAK9C,KACrBA,EAAI8C,GAAK9C,EAAI6C,UACN7C,EAAI6C,KAIfwgE,GADAF,EAAcv2C,KAAKnmB,MAAMmmB,KAAKF,UAAUy2C,KACtBC,MAAO,kBAAmB,uBAC5CC,EAAMF,EAAYC,MAAO,mBAAoB,wBAC7CD,EAAYC,MAAQZ,EAAqBW,EAAYC,OAEvD,GAAID,GAA4C,iBAAtBA,EAAYG,MAAoB,CAExD,IAAIC,EAAOJ,EAAYG,MAAME,WAC7BD,EAAOA,IAA0B,iBAATA,EAAqBA,EAAO,CAACX,MAAOW,IAC5D,MAAME,EAA6BpB,EAAe/3D,QAAU,GAE5D,GAAKi5D,IAAwB,SAAfA,EAAKV,OAAmC,gBAAfU,EAAKV,OACf,SAAfU,EAAKX,OAAmC,gBAAfW,EAAKX,UACtCN,EAAUC,aAAamB,0BACvBpB,EAAUC,aAAamB,0BAA0BF,YAChDC,GAA6B,CAElC,IAAIz9C,EAMJ,UAPOm9C,EAAYG,MAAME,WAEN,gBAAfD,EAAKV,OAA0C,gBAAfU,EAAKX,MACvC58C,EAAU,CAAC,OAAQ,QACK,SAAfu9C,EAAKV,OAAmC,SAAfU,EAAKX,QACvC58C,EAAU,CAAC,UAETA,EAEF,OAAOs8C,EAAUC,aAAaoB,mBAC7BC,MAAKC,IAEJ,IAAIC,GADJD,EAAUA,EAAQ57D,QAAOjF,GAAgB,eAAXA,EAAE01C,QACdrsC,MAAKrJ,GAAKgjB,EAAQxW,MAAKhI,GACvCxE,EAAE+gE,MAAM9gD,cAAcmU,SAAS5vB,OAUjC,OATKs8D,GAAOD,EAAQ3iE,QAAU8kB,EAAQoR,SAAS,UAC7C0sC,EAAMD,EAAQA,EAAQ3iE,OAAS,IAE7B4iE,IACFX,EAAYG,MAAMU,SAAWT,EAAKV,MAAQ,CAACA,MAAOiB,EAAIE,UACZ,CAACpB,MAAOkB,EAAIE,WAExDb,EAAYG,MAAQd,EAAqBW,EAAYG,OACrDjH,EAAQ,WAAazvC,KAAKF,UAAUy2C,IAC7Bj9B,EAAKi9B,MAIlBA,EAAYG,MAAQd,EAAqBW,EAAYG,OAGvD,OADAjH,EAAQ,WAAazvC,KAAKF,UAAUy2C,IAC7Bj9B,EAAKi9B,IAGRc,EAAa,SAAS5/D,GAC1B,OAAIg+D,EAAe/3D,SAAW,GACrBjG,EAEF,CACLP,KAAM,CACJogE,sBAAuB,kBACvBC,yBAA0B,kBAC1BC,kBAAmB,kBACnBC,qBAAsB,gBACtBC,4BAA6B,uBAC7BC,gBAAiB,mBACjBC,+BAAgC,kBAChCC,wBAAyB,kBACzBC,gBAAiB,aACjBC,mBAAoB,aACpBC,mBAAoB,cACpBvgE,EAAEP,OAASO,EAAEP,KACfpD,QAAS2D,EAAE3D,QACXmkE,WAAYxgE,EAAEwgE,YAAcxgE,EAAEygE,eAC9B3kE,WACE,OAAOwB,KAAKmC,MAAQnC,KAAKjB,SAAW,MAAQiB,KAAKjB,WAmBvD,GALA4hE,EAAUyC,aATY,SAAS5B,EAAapQ,EAAWiS,GACrD9B,EAAiBC,GAAapgE,IAC5Bu/D,EAAU2C,mBAAmBliE,EAAGgwD,GAAW1uD,IACrC2gE,GACFA,EAAQf,EAAW5/D,WAKYwD,KAAKy6D,GAKxCA,EAAUC,aAAawC,aAAc,CACvC,MAAMG,EAAmB5C,EAAUC,aAAawC,aAC5Cl9D,KAAKy6D,EAAUC,cACnBD,EAAUC,aAAawC,aAAe,SAASI,GAC7C,OAAOjC,EAAiBiC,GAAIpiE,GAAKmiE,EAAiBniE,GAAG6gE,MAAKx6D,IACxD,GAAIrG,EAAEqgE,QAAUh6D,EAAO0pB,iBAAiB5xB,QACpC6B,EAAEugE,QAAUl6D,EAAOg8D,iBAAiBlkE,OAItC,MAHAkI,EAAOi8D,YAAYl/D,SAAQsrB,IACzBA,EAAM7D,UAEF,IAAI03C,aAAa,GAAI,iBAE7B,OAAOl8D,KACN/E,GAAK4jB,QAAQzU,OAAOywD,EAAW5/D,UC/KjC,SAASkhE,EAAoBnnE,EAAQonE,GACtCpnE,EAAOkkE,UAAUC,cACnB,oBAAqBnkE,EAAOkkE,UAAUC,cAGlCnkE,EAAOkkE,UAAUC,eAKI,mBAAhBiD,EAKXpnE,EAAOkkE,UAAUC,aAAakD,gBAC5B,SAAyBtC,GACvB,OAAOqC,EAAYrC,GAChBS,MAAK8B,IACJ,MAAMC,EAAiBxC,EAAYG,OAASH,EAAYG,MAAM5lC,MACxDkoC,EAAkBzC,EAAYG,OAClCH,EAAYG,MAAM3lC,OACdkoC,EAAqB1C,EAAYG,OACrCH,EAAYG,MAAMwC,UAcpB,OAbA3C,EAAYG,MAAQ,CAClBb,UAAW,CACTsD,kBAAmB,UACnBC,oBAAqBN,EACrBO,aAAcJ,GAAsB,IAGpCF,IACFxC,EAAYG,MAAMb,UAAUyD,SAAWP,GAErCC,IACFzC,EAAYG,MAAMb,UAAU0D,UAAYP,GAEnCxnE,EAAOkkE,UAAUC,aAAawC,aAAa5B,OA1BxD13D,QAAQuN,MAAM,gECNX,SAASotD,EAAgBhoE,GAC9BA,EAAOy0B,YAAcz0B,EAAOy0B,aAAez0B,EAAOioE,kBAG7C,SAASC,EAAYloE,GAC1B,GAAsB,iBAAXA,GAAuBA,EAAOiiE,qBAAuB,YAC5DjiE,EAAOiiE,kBAAkBngE,WAAY,CACvCD,OAAO2b,eAAexd,EAAOiiE,kBAAkBngE,UAAW,UAAW,CACnE4b,MACE,OAAOna,KAAK4kE,UAEd37C,IAAIxG,GACEziB,KAAK4kE,UACP5kE,KAAKgpB,oBAAoB,QAAShpB,KAAK4kE,UAEzC5kE,KAAK8oB,iBAAiB,QAAS9oB,KAAK4kE,SAAWniD,IAEjDvI,YAAY,EACZwG,cAAc,IAEhB,MAAMmkD,EACFpoE,EAAOiiE,kBAAkBngE,UAAUumE,qBACvCroE,EAAOiiE,kBAAkBngE,UAAUumE,qBACjC,WAuCE,OAtCK9kE,KAAK+kE,eACR/kE,KAAK+kE,aAAgBriE,IAGnBA,EAAE+E,OAAOqhB,iBAAiB,YAAYk8C,IACpC,IAAIp/C,EAEFA,EADEnpB,EAAOiiE,kBAAkBngE,UAAU0mE,aAC1BjlE,KAAKilE,eACbv6D,MAAK7H,GAAKA,EAAEitB,OAASjtB,EAAEitB,MAAM3rB,KAAO6gE,EAAGl1C,MAAM3rB,KAErC,CAAC2rB,MAAOk1C,EAAGl1C,OAGxB,MAAMyH,EAAQ,IAAI2tC,MAAM,SACxB3tC,EAAMzH,MAAQk1C,EAAGl1C,MACjByH,EAAM3R,SAAWA,EACjB2R,EAAM4tC,YAAc,CAACv/C,SAAAA,GACrB2R,EAAM6tC,QAAU,CAAC1iE,EAAE+E,QACnBzH,KAAKqlE,cAAc9tC,MAErB70B,EAAE+E,OAAOi8D,YAAYl/D,SAAQsrB,IAC3B,IAAIlK,EAEFA,EADEnpB,EAAOiiE,kBAAkBngE,UAAU0mE,aAC1BjlE,KAAKilE,eACbv6D,MAAK7H,GAAKA,EAAEitB,OAASjtB,EAAEitB,MAAM3rB,KAAO2rB,EAAM3rB,KAElC,CAAC2rB,MAAAA,GAEd,MAAMyH,EAAQ,IAAI2tC,MAAM,SACxB3tC,EAAMzH,MAAQA,EACdyH,EAAM3R,SAAWA,EACjB2R,EAAM4tC,YAAc,CAACv/C,SAAAA,GACrB2R,EAAM6tC,QAAU,CAAC1iE,EAAE+E,QACnBzH,KAAKqlE,cAAc9tC,OAGvBv3B,KAAK8oB,iBAAiB,YAAa9oB,KAAK+kE,eAEnCF,EAAyBt8D,MAAMvI,KAAM+H,iBAMhDw1C,EAA8B9gD,EAAQ,SAASiG,IACxCA,EAAEyiE,aACL7mE,OAAO2b,eAAevX,EAAG,cACvB,CAACmB,MAAO,CAAC+hB,SAAUljB,EAAEkjB,YAElBljB,KAKN,SAAS4iE,EAAuB7oE,GAErC,GAAsB,iBAAXA,GAAuBA,EAAOiiE,qBACnC,eAAgBjiE,EAAOiiE,kBAAkBngE,YAC3C,qBAAsB9B,EAAOiiE,kBAAkBngE,UAAW,CAC5D,MAAMgnE,EAAqB,SAASC,EAAI11C,GACtC,MAAO,CACLA,MAAAA,EACI21C,WAQF,YAPmB1+D,IAAf/G,KAAK0lE,QACY,UAAf51C,EAAMinB,KACR/2C,KAAK0lE,MAAQF,EAAGG,iBAAiB71C,GAEjC9vB,KAAK0lE,MAAQ,MAGV1lE,KAAK0lE,OAEdE,IAAKJ,IAKT,IAAK/oE,EAAOiiE,kBAAkBngE,UAAUsnE,WAAY,CAClDppE,EAAOiiE,kBAAkBngE,UAAUsnE,WAAa,WAE9C,OADA7lE,KAAK8lE,SAAW9lE,KAAK8lE,UAAY,GAC1B9lE,KAAK8lE,SAASt/D,SAEvB,MAAMu/D,EAAetpE,EAAOiiE,kBAAkBngE,UAAUqyB,SACxDn0B,EAAOiiE,kBAAkBngE,UAAUqyB,SACjC,SAAkBd,EAAOroB,GACvB,IAAIu+D,EAASD,EAAax9D,MAAMvI,KAAM+H,WAKtC,OAJKi+D,IACHA,EAAST,EAAmBvlE,KAAM8vB,GAClC9vB,KAAK8lE,SAAS/iE,KAAKijE,IAEdA,GAGX,MAAMC,EAAkBxpE,EAAOiiE,kBAAkBngE,UAAUizB,YAC3D/0B,EAAOiiE,kBAAkBngE,UAAUizB,YACjC,SAAqBw0C,GACnBC,EAAgB19D,MAAMvI,KAAM+H,WAC5B,MAAMm+D,EAAMlmE,KAAK8lE,SAASl6D,QAAQo6D,IACrB,IAATE,GACFlmE,KAAK8lE,SAASv4D,OAAO24D,EAAK,IAIlC,MAAMC,EAAgB1pE,EAAOiiE,kBAAkBngE,UAAU6nE,UACzD3pE,EAAOiiE,kBAAkBngE,UAAU6nE,UAAY,SAAmB3+D,GAChEzH,KAAK8lE,SAAW9lE,KAAK8lE,UAAY,GACjCK,EAAc59D,MAAMvI,KAAM,CAACyH,IAC3BA,EAAOi8D,YAAYl/D,SAAQsrB,IACzB9vB,KAAK8lE,SAAS/iE,KAAKwiE,EAAmBvlE,KAAM8vB,QAIhD,MAAMu2C,EAAmB5pE,EAAOiiE,kBAAkBngE,UAAU+nE,aAC5D7pE,EAAOiiE,kBAAkBngE,UAAU+nE,aACjC,SAAsB7+D,GACpBzH,KAAK8lE,SAAW9lE,KAAK8lE,UAAY,GACjCO,EAAiB99D,MAAMvI,KAAM,CAACyH,IAE9BA,EAAOi8D,YAAYl/D,SAAQsrB,IACzB,MAAMk2C,EAAShmE,KAAK8lE,SAASp7D,MAAKlI,GAAKA,EAAEstB,QAAUA,IAC/Ck2C,GACFhmE,KAAK8lE,SAASv4D,OAAOvN,KAAK8lE,SAASl6D,QAAQo6D,GAAS,YAIvD,GAAsB,iBAAXvpE,GAAuBA,EAAOiiE,mBACrC,eAAgBjiE,EAAOiiE,kBAAkBngE,WACzC,qBAAsB9B,EAAOiiE,kBAAkBngE,WAC/C9B,EAAO8pE,gBACL,SAAU9pE,EAAO8pE,aAAahoE,WAAY,CACrD,MAAMioE,EAAiB/pE,EAAOiiE,kBAAkBngE,UAAUsnE,WAC1DppE,EAAOiiE,kBAAkBngE,UAAUsnE,WAAa,WAC9C,MAAMY,EAAUD,EAAej+D,MAAMvI,KAAM,IAE3C,OADAymE,EAAQjiE,SAAQwhE,GAAUA,EAAOJ,IAAM5lE,OAChCymE,GAGTnoE,OAAO2b,eAAexd,EAAO8pE,aAAahoE,UAAW,OAAQ,CAC3D4b,MAQE,YAPmBpT,IAAf/G,KAAK0lE,QACiB,UAApB1lE,KAAK8vB,MAAMinB,KACb/2C,KAAK0lE,MAAQ1lE,KAAK4lE,IAAID,iBAAiB3lE,KAAK8vB,OAE5C9vB,KAAK0lE,MAAQ,MAGV1lE,KAAK0lE,UAMb,SAASgB,EAAajqE,GAC3B,IAAKA,EAAOiiE,kBACV,OAGF,MAAMiI,EAAelqE,EAAOiiE,kBAAkBngE,UAAUqoE,SACxDnqE,EAAOiiE,kBAAkBngE,UAAUqoE,SAAW,WAC5C,MAAOC,EAAUC,EAAQC,GAASh/D,UAIlC,GAAIA,UAAUxI,OAAS,GAAyB,mBAAbsnE,EACjC,OAAOF,EAAap+D,MAAMvI,KAAM+H,WAKlC,GAA4B,IAAxB4+D,EAAapnE,SAAsC,IAArBwI,UAAUxI,QACpB,mBAAbsnE,GACT,OAAOF,EAAap+D,MAAMvI,KAAM,IAGlC,MAAMgnE,EAAkB,SAAS9xC,GAC/B,MAAM+xC,EAAiB,GAiBvB,OAhBgB/xC,EAASjjB,SACjBzN,SAAQ0iE,IACd,MAAMC,EAAgB,CACpBhjE,GAAI+iE,EAAO/iE,GACXinB,UAAW87C,EAAO97C,UAClB5rB,KAAM,CACJ4nE,eAAgB,kBAChBC,gBAAiB,oBACjBH,EAAO1nE,OAAS0nE,EAAO1nE,MAE3B0nE,EAAO5kE,QAAQkC,SAAQrC,IACrBglE,EAAchlE,GAAQ+kE,EAAOI,KAAKnlE,MAEpC8kE,EAAeE,EAAchjE,IAAMgjE,KAG9BF,GAIHM,EAAe,SAAS1H,GAC5B,OAAO,IAAIh6B,IAAIvnC,OAAOiG,KAAKs7D,GAAO54D,KAAIxC,GAAO,CAACA,EAAKo7D,EAAMp7D,QAG3D,GAAIsD,UAAUxI,QAAU,EAAG,CACzB,MAAMioE,EAA0B,SAAStyC,GACvC4xC,EAAOS,EAAaP,EAAgB9xC,MAGtC,OAAOyxC,EAAap+D,MAAMvI,KAAM,CAACwnE,EAC/BX,IAIJ,OAAO,IAAIvgD,SAAQ,CAACC,EAAS1U,KAC3B80D,EAAap+D,MAAMvI,KAAM,CACvB,SAASk1B,GACP3O,EAAQghD,EAAaP,EAAgB9xC,MACpCrjB,OACJowD,KAAK6E,EAAQC,IAIb,SAASU,EAA2BhrE,GACzC,KAAwB,iBAAXA,GAAuBA,EAAOiiE,mBACvCjiE,EAAO8pE,cAAgB9pE,EAAOirE,gBAChC,OAIF,KAAM,aAAcjrE,EAAO8pE,aAAahoE,WAAY,CAClD,MAAMioE,EAAiB/pE,EAAOiiE,kBAAkBngE,UAAUsnE,WACtDW,IACF/pE,EAAOiiE,kBAAkBngE,UAAUsnE,WAAa,WAC9C,MAAMY,EAAUD,EAAej+D,MAAMvI,KAAM,IAE3C,OADAymE,EAAQjiE,SAAQwhE,GAAUA,EAAOJ,IAAM5lE,OAChCymE,IAIX,MAAMV,EAAetpE,EAAOiiE,kBAAkBngE,UAAUqyB,SACpDm1C,IACFtpE,EAAOiiE,kBAAkBngE,UAAUqyB,SAAW,WAC5C,MAAMo1C,EAASD,EAAax9D,MAAMvI,KAAM+H,WAExC,OADAi+D,EAAOJ,IAAM5lE,KACNgmE,IAGXvpE,EAAO8pE,aAAahoE,UAAUqoE,SAAW,WACvC,MAAMZ,EAAShmE,KACf,OAAOA,KAAK4lE,IAAIgB,WAAW3E,MAAKhwD,GAK9BsrC,EAAkBtrC,EAAQ+zD,EAAOl2C,OAAO,MAK9C,KAAM,aAAcrzB,EAAOirE,eAAenpE,WAAY,CACpD,MAAMopE,EAAmBlrE,EAAOiiE,kBAAkBngE,UAAU0mE,aACxD0C,IACFlrE,EAAOiiE,kBAAkBngE,UAAU0mE,aACjC,WACE,MAAM2C,EAAYD,EAAiBp/D,MAAMvI,KAAM,IAE/C,OADA4nE,EAAUpjE,SAAQohB,GAAYA,EAASggD,IAAM5lE,OACtC4nE,IAGbrqB,EAA8B9gD,EAAQ,SAASiG,IAC7CA,EAAEkjB,SAASggD,IAAMljE,EAAEmlE,WACZnlE,KAETjG,EAAOirE,eAAenpE,UAAUqoE,SAAW,WACzC,MAAMhhD,EAAW5lB,KACjB,OAAOA,KAAK4lE,IAAIgB,WAAW3E,MAAKhwD,GAC9BsrC,EAAkBtrC,EAAQ2T,EAASkK,OAAO,MAIhD,KAAM,aAAcrzB,EAAO8pE,aAAahoE,cACpC,aAAc9B,EAAOirE,eAAenpE,WACtC,OAIF,MAAMooE,EAAelqE,EAAOiiE,kBAAkBngE,UAAUqoE,SACxDnqE,EAAOiiE,kBAAkBngE,UAAUqoE,SAAW,WAC5C,GAAI7+D,UAAUxI,OAAS,GACnBwI,UAAU,aAActL,EAAOqrE,iBAAkB,CACnD,MAAMh4C,EAAQ/nB,UAAU,GACxB,IAAIi+D,EACApgD,EACAhW,EAoBJ,OAnBA5P,KAAK6lE,aAAarhE,SAAQhC,IACpBA,EAAEstB,QAAUA,IACVk2C,EACFp2D,GAAM,EAENo2D,EAASxjE,MAIfxC,KAAKilE,eAAezgE,SAAQ3B,IACtBA,EAAEitB,QAAUA,IACVlK,EACFhW,GAAM,EAENgW,EAAW/iB,GAGRA,EAAEitB,QAAUA,KAEjBlgB,GAAQo2D,GAAUpgD,EACbU,QAAQzU,OAAO,IAAI8xD,aACxB,4DACA,uBACOqC,EACFA,EAAOY,WACLhhD,EACFA,EAASghD,WAEXtgD,QAAQzU,OAAO,IAAI8xD,aACxB,gDACA,uBAEJ,OAAOgD,EAAap+D,MAAMvI,KAAM+H,YAI7B,SAASggE,EAAkCtrE,GAIhDA,EAAOiiE,kBAAkBngE,UAAUypE,gBACjC,WAEE,OADAhoE,KAAKioE,qBAAuBjoE,KAAKioE,sBAAwB,GAClD3pE,OAAOiG,KAAKvE,KAAKioE,sBACrBhhE,KAAIihE,GAAYloE,KAAKioE,qBAAqBC,GAAU,MAG3D,MAAMnC,EAAetpE,EAAOiiE,kBAAkBngE,UAAUqyB,SACxDn0B,EAAOiiE,kBAAkBngE,UAAUqyB,SACjC,SAAkBd,EAAOroB,GACvB,IAAKA,EACH,OAAOs+D,EAAax9D,MAAMvI,KAAM+H,WAElC/H,KAAKioE,qBAAuBjoE,KAAKioE,sBAAwB,GAEzD,MAAMjC,EAASD,EAAax9D,MAAMvI,KAAM+H,WAMxC,OALK/H,KAAKioE,qBAAqBxgE,EAAOtD,KAE+B,IAA1DnE,KAAKioE,qBAAqBxgE,EAAOtD,IAAIyH,QAAQo6D,IACtDhmE,KAAKioE,qBAAqBxgE,EAAOtD,IAAIpB,KAAKijE,GAF1ChmE,KAAKioE,qBAAqBxgE,EAAOtD,IAAM,CAACsD,EAAQu+D,GAI3CA,GAGX,MAAMG,EAAgB1pE,EAAOiiE,kBAAkBngE,UAAU6nE,UACzD3pE,EAAOiiE,kBAAkBngE,UAAU6nE,UAAY,SAAmB3+D,GAChEzH,KAAKioE,qBAAuBjoE,KAAKioE,sBAAwB,GAEzDxgE,EAAOi8D,YAAYl/D,SAAQsrB,IAEzB,GADsB9vB,KAAK6lE,aAAan7D,MAAKlI,GAAKA,EAAEstB,QAAUA,IAE5D,MAAM,IAAI6zC,aAAa,wBACnB,yBAGR,MAAMwE,EAAkBnoE,KAAK6lE,aAC7BM,EAAc59D,MAAMvI,KAAM+H,WAC1B,MAAMqgE,EAAapoE,KAAK6lE,aACrBv/D,QAAO+hE,IAAqD,IAAxCF,EAAgBv8D,QAAQy8D,KAC/CroE,KAAKioE,qBAAqBxgE,EAAOtD,IAAM,CAACsD,GAAQ+I,OAAO43D,IAGzD,MAAM/B,EAAmB5pE,EAAOiiE,kBAAkBngE,UAAU+nE,aAC5D7pE,EAAOiiE,kBAAkBngE,UAAU+nE,aACjC,SAAsB7+D,GAGpB,OAFAzH,KAAKioE,qBAAuBjoE,KAAKioE,sBAAwB,UAClDjoE,KAAKioE,qBAAqBxgE,EAAOtD,IACjCkiE,EAAiB99D,MAAMvI,KAAM+H,YAGxC,MAAMk+D,EAAkBxpE,EAAOiiE,kBAAkBngE,UAAUizB,YAC3D/0B,EAAOiiE,kBAAkBngE,UAAUizB,YACjC,SAAqBw0C,GAanB,OAZAhmE,KAAKioE,qBAAuBjoE,KAAKioE,sBAAwB,GACrDjC,GACF1nE,OAAOiG,KAAKvE,KAAKioE,sBAAsBzjE,SAAQ0jE,IAC7C,MAAMhC,EAAMlmE,KAAKioE,qBAAqBC,GAAUt8D,QAAQo6D,IAC3C,IAATE,GACFlmE,KAAKioE,qBAAqBC,GAAU36D,OAAO24D,EAAK,GAEC,IAA/ClmE,KAAKioE,qBAAqBC,GAAU3oE,eAC/BS,KAAKioE,qBAAqBC,MAIhCjC,EAAgB19D,MAAMvI,KAAM+H,YAIlC,SAASugE,EAAwB7rE,EAAQikE,GAC9C,IAAKjkE,EAAOiiE,kBACV,OAGF,GAAIjiE,EAAOiiE,kBAAkBngE,UAAUqyB,UACnC8vC,EAAe/3D,SAAW,GAC5B,OAAOo/D,EAAkCtrE,GAK3C,MAAM8rE,EAAsB9rE,EAAOiiE,kBAAkBngE,UAChDypE,gBACLvrE,EAAOiiE,kBAAkBngE,UAAUypE,gBACjC,WACE,MAAMQ,EAAgBD,EAAoBhgE,MAAMvI,MAEhD,OADAA,KAAKyoE,gBAAkBzoE,KAAKyoE,iBAAmB,GACxCD,EAAcvhE,KAAIQ,GAAUzH,KAAKyoE,gBAAgBhhE,EAAOtD,OAGnE,MAAMgiE,EAAgB1pE,EAAOiiE,kBAAkBngE,UAAU6nE,UACzD3pE,EAAOiiE,kBAAkBngE,UAAU6nE,UAAY,SAAmB3+D,GAahE,GAZAzH,KAAK0oE,SAAW1oE,KAAK0oE,UAAY,GACjC1oE,KAAKyoE,gBAAkBzoE,KAAKyoE,iBAAmB,GAE/ChhE,EAAOi8D,YAAYl/D,SAAQsrB,IAEzB,GADsB9vB,KAAK6lE,aAAan7D,MAAKlI,GAAKA,EAAEstB,QAAUA,IAE5D,MAAM,IAAI6zC,aAAa,wBACnB,0BAKH3jE,KAAKyoE,gBAAgBhhE,EAAOtD,IAAK,CACpC,MAAMwkE,EAAY,IAAIlsE,EAAOy0B,YAAYzpB,EAAOi8D,aAChD1jE,KAAK0oE,SAASjhE,EAAOtD,IAAMwkE,EAC3B3oE,KAAKyoE,gBAAgBE,EAAUxkE,IAAMsD,EACrCA,EAASkhE,EAEXxC,EAAc59D,MAAMvI,KAAM,CAACyH,KAG7B,MAAM4+D,EAAmB5pE,EAAOiiE,kBAAkBngE,UAAU+nE,aA6D5D,SAASsC,EAAwBpD,EAAIlvB,GACnC,IAAInwC,EAAMmwC,EAAYnwC,IAOtB,OANA7H,OAAOiG,KAAKihE,EAAGiD,iBAAmB,IAAIjkE,SAAQqkE,IAC5C,MAAMC,EAAiBtD,EAAGiD,gBAAgBI,GACpCE,EAAiBvD,EAAGkD,SAASI,EAAe3kE,IAClDgC,EAAMA,EAAI8B,QAAQ,IAAIjE,OAAO+kE,EAAe5kE,GAAI,KAC5C2kE,EAAe3kE,OAEd,IAAI8J,sBAAsB,CAC/BzO,KAAM82C,EAAY92C,KAClB2G,IAAAA,IAGJ,SAAS6iE,EAAwBxD,EAAIlvB,GACnC,IAAInwC,EAAMmwC,EAAYnwC,IAOtB,OANA7H,OAAOiG,KAAKihE,EAAGiD,iBAAmB,IAAIjkE,SAAQqkE,IAC5C,MAAMC,EAAiBtD,EAAGiD,gBAAgBI,GACpCE,EAAiBvD,EAAGkD,SAASI,EAAe3kE,IAClDgC,EAAMA,EAAI8B,QAAQ,IAAIjE,OAAO8kE,EAAe3kE,GAAI,KAC5C4kE,EAAe5kE,OAEd,IAAI8J,sBAAsB,CAC/BzO,KAAM82C,EAAY92C,KAClB2G,IAAAA,IAnFJ1J,EAAOiiE,kBAAkBngE,UAAU+nE,aACjC,SAAsB7+D,GACpBzH,KAAK0oE,SAAW1oE,KAAK0oE,UAAY,GACjC1oE,KAAKyoE,gBAAkBzoE,KAAKyoE,iBAAmB,GAE/CpC,EAAiB99D,MAAMvI,KAAM,CAAEA,KAAK0oE,SAASjhE,EAAOtD,KAAOsD,WACpDzH,KAAKyoE,gBAAiBzoE,KAAK0oE,SAASjhE,EAAOtD,IAC9CnE,KAAK0oE,SAASjhE,EAAOtD,IAAIA,GAAKsD,EAAOtD,WAClCnE,KAAK0oE,SAASjhE,EAAOtD,KAGhC1H,EAAOiiE,kBAAkBngE,UAAUqyB,SACjC,SAAkBd,EAAOroB,GACvB,GAA4B,WAAxBzH,KAAKipE,eACP,MAAM,IAAItF,aACR,sDACA,qBAEJ,MAAMyB,EAAU,GAAG5+D,MAAM/H,KAAKsJ,UAAW,GACzC,GAAuB,IAAnBq9D,EAAQ7lE,SACP6lE,EAAQ,GAAG1B,YAAYh5D,MAAK5H,GAAKA,IAAMgtB,IAG1C,MAAM,IAAI6zC,aACR,gHAEA,qBAGJ,MAAMuF,EAAgBlpE,KAAK6lE,aAAan7D,MAAKlI,GAAKA,EAAEstB,QAAUA,IAC9D,GAAIo5C,EACF,MAAM,IAAIvF,aAAa,wBACnB,sBAGN3jE,KAAK0oE,SAAW1oE,KAAK0oE,UAAY,GACjC1oE,KAAKyoE,gBAAkBzoE,KAAKyoE,iBAAmB,GAC/C,MAAMU,EAAYnpE,KAAK0oE,SAASjhE,EAAOtD,IACvC,GAAIglE,EAKFA,EAAUv4C,SAASd,GAGnBxJ,QAAQC,UAAU07C,MAAK,KACrBjiE,KAAKqlE,cAAc,IAAIH,MAAM,6BAE1B,CACL,MAAMyD,EAAY,IAAIlsE,EAAOy0B,YAAY,CAACpB,IAC1C9vB,KAAK0oE,SAASjhE,EAAOtD,IAAMwkE,EAC3B3oE,KAAKyoE,gBAAgBE,EAAUxkE,IAAMsD,EACrCzH,KAAKomE,UAAUuC,GAEjB,OAAO3oE,KAAK6lE,aAAan7D,MAAKlI,GAAKA,EAAEstB,QAAUA,KA+BnD,CAAC,cAAe,gBAAgBtrB,SAAQ,SAASrF,GAC/C,MAAMiqE,EAAe3sE,EAAOiiE,kBAAkBngE,UAAUY,GAClDkqE,EAAY,CAAC,CAAClqE,KAClB,MAAM2I,EAAOC,UAGb,OAFqBA,UAAUxI,QACH,mBAAjBwI,UAAU,GAEZqhE,EAAa7gE,MAAMvI,KAAM,CAC7Bs2C,IACC,MAAMlsC,EAAOw+D,EAAwB5oE,KAAMs2C,GAC3CxuC,EAAK,GAAGS,MAAM,KAAM,CAAC6B,KAEtBwF,IACK9H,EAAK,IACPA,EAAK,GAAGS,MAAM,KAAMqH,IAErB7H,UAAU,KAGVqhE,EAAa7gE,MAAMvI,KAAM+H,WAC/Bk6D,MAAK3rB,GAAesyB,EAAwB5oE,KAAMs2C,OAErD75C,EAAOiiE,kBAAkBngE,UAAUY,GAAUkqE,EAAUlqE,MAGzD,MAAMmqE,EACF7sE,EAAOiiE,kBAAkBngE,UAAUgrE,oBACvC9sE,EAAOiiE,kBAAkBngE,UAAUgrE,oBACjC,WACE,OAAKxhE,UAAUxI,QAAWwI,UAAU,GAAGvI,MAGvCuI,UAAU,GAAKihE,EAAwBhpE,KAAM+H,UAAU,IAChDuhE,EAAwB/gE,MAAMvI,KAAM+H,YAHlCuhE,EAAwB/gE,MAAMvI,KAAM+H,YAQjD,MAAMyhE,EAAuBlrE,OAAOmrE,yBAChChtE,EAAOiiE,kBAAkBngE,UAAW,oBACxCD,OAAO2b,eAAexd,EAAOiiE,kBAAkBngE,UAC3C,mBAAoB,CAClB4b,MACE,MAAMm8B,EAAckzB,EAAqBrvD,IAAI5R,MAAMvI,MACnD,MAAyB,KAArBs2C,EAAY92C,KACP82C,EAEFsyB,EAAwB5oE,KAAMs2C,MAI7C75C,EAAOiiE,kBAAkBngE,UAAUizB,YACjC,SAAqBw0C,GACnB,GAA4B,WAAxBhmE,KAAKipE,eACP,MAAM,IAAItF,aACR,sDACA,qBAIJ,IAAKqC,EAAOJ,IACV,MAAM,IAAIjC,aAAa,yFAC2B,aAGpD,GADgBqC,EAAOJ,MAAQ5lE,KAE7B,MAAM,IAAI2jE,aAAa,6CACnB,sBAKN,IAAIl8D,EADJzH,KAAK0oE,SAAW1oE,KAAK0oE,UAAY,GAEjCpqE,OAAOiG,KAAKvE,KAAK0oE,UAAUlkE,SAAQklE,IAChB1pE,KAAK0oE,SAASgB,GAAUhG,YACtCh5D,MAAKolB,GAASk2C,EAAOl2C,QAAUA,MAEhCroB,EAASzH,KAAK0oE,SAASgB,OAIvBjiE,IACgC,IAA9BA,EAAOi8D,YAAYnkE,OAGrBS,KAAKsmE,aAAatmE,KAAKyoE,gBAAgBhhE,EAAOtD,KAG9CsD,EAAO+pB,YAAYw0C,EAAOl2C,OAE5B9vB,KAAKqlE,cAAc,IAAIH,MAAM,wBAK9B,SAASyE,EAAmBltE,EAAQikE,IACpCjkE,EAAOiiE,mBAAqBjiE,EAAOmtE,0BAEtCntE,EAAOiiE,kBAAoBjiE,EAAOmtE,yBAE/BntE,EAAOiiE,mBAKRgC,EAAe/3D,QAAU,IAC3B,CAAC,sBAAuB,uBAAwB,mBAC3CnE,SAAQ,SAASrF,GAChB,MAAMiqE,EAAe3sE,EAAOiiE,kBAAkBngE,UAAUY,GAClDkqE,EAAY,CAAC,CAAClqE,KAIlB,OAHA4I,UAAU,GAAK,IAAiB,oBAAX5I,EACjB1C,EAAOotE,gBACPptE,EAAOwR,uBAAuBlG,UAAU,IACrCqhE,EAAa7gE,MAAMvI,KAAM+H,aAElCtL,EAAOiiE,kBAAkBngE,UAAUY,GAAUkqE,EAAUlqE,MAM1D,SAAS2qE,EAAqBrtE,EAAQikE,GAC3CnjB,EAA8B9gD,EAAQ,qBAAqBiG,IACzD,MAAM8iE,EAAK9iE,EAAEijB,OACb,KAAI+6C,EAAe/3D,QAAU,IAAO68D,EAAGuE,kBACI,WAAvCvE,EAAGuE,mBAAmBC,eACE,WAAtBxE,EAAGyD,eAIT,OAAOvmE,KC/qBJ,SAAS+9D,EAAiBhkE,EAAQikE,GACvC,MAAMC,EAAYlkE,GAAUA,EAAOkkE,UAC7BmH,EAAmBrrE,GAAUA,EAAOqrE,iBAS1C,GAPAnH,EAAUyC,aAAe,SAAS5B,EAAapQ,EAAWiS,GAExD9lB,EAAiB,yBACb,uCACJojB,EAAUC,aAAawC,aAAa5B,GAAaS,KAAK7Q,EAAWiS,MAG7D3C,EAAe/3D,QAAU,IAC3B,oBAAqBg4D,EAAUC,aAAamB,2BAA4B,CAC1E,MAAML,EAAQ,SAASrjE,EAAK6C,EAAGC,GACzBD,KAAK7C,KAAS8C,KAAK9C,KACrBA,EAAI8C,GAAK9C,EAAI6C,UACN7C,EAAI6C,KAIT+oE,EAAqBtJ,EAAUC,aAAawC,aAC9Cl9D,KAAKy6D,EAAUC,cAUnB,GATAD,EAAUC,aAAawC,aAAe,SAAShiE,GAM7C,MALiB,iBAANA,GAAqC,iBAAZA,EAAEqgE,QACpCrgE,EAAI6pB,KAAKnmB,MAAMmmB,KAAKF,UAAU3pB,IAC9BsgE,EAAMtgE,EAAEqgE,MAAO,kBAAmB,sBAClCC,EAAMtgE,EAAEqgE,MAAO,mBAAoB,wBAE9BwI,EAAmB7oE,IAGxB0mE,GAAoBA,EAAiBvpE,UAAU2rE,YAAa,CAC9D,MAAMC,EAAoBrC,EAAiBvpE,UAAU2rE,YACrDpC,EAAiBvpE,UAAU2rE,YAAc,WACvC,MAAM7rE,EAAM8rE,EAAkB5hE,MAAMvI,KAAM+H,WAG1C,OAFA25D,EAAMrjE,EAAK,qBAAsB,mBACjCqjE,EAAMrjE,EAAK,sBAAuB,oBAC3BA,GAIX,GAAIypE,GAAoBA,EAAiBvpE,UAAU6rE,iBAAkB,CACnE,MAAMC,EACJvC,EAAiBvpE,UAAU6rE,iBAC7BtC,EAAiBvpE,UAAU6rE,iBAAmB,SAAShpE,GAMrD,MALkB,UAAdpB,KAAK+2C,MAAiC,iBAAN31C,IAClCA,EAAI6pB,KAAKnmB,MAAMmmB,KAAKF,UAAU3pB,IAC9BsgE,EAAMtgE,EAAG,kBAAmB,sBAC5BsgE,EAAMtgE,EAAG,mBAAoB,wBAExBipE,EAAuB9hE,MAAMvI,KAAM,CAACoB,OCpD5C,SAASwiE,EAAoBnnE,EAAQ6tE,GACtC7tE,EAAOkkE,UAAUC,cACnB,oBAAqBnkE,EAAOkkE,UAAUC,cAGlCnkE,EAAOkkE,UAAUC,eAGvBnkE,EAAOkkE,UAAUC,aAAakD,gBAC5B,SAAyBtC,GACvB,IAAMA,IAAeA,EAAYG,MAAQ,CACvC,MAAM/xD,EAAM,IAAI+zD,aAAa,0DAK7B,OAHA/zD,EAAIzN,KAAO,gBAEXyN,EAAIhP,KAAO,EACJ0lB,QAAQzU,OAAOjC,GAOxB,OAL0B,IAAtB4xD,EAAYG,MACdH,EAAYG,MAAQ,CAAC4I,YAAaD,GAElC9I,EAAYG,MAAM4I,YAAcD,EAE3B7tE,EAAOkkE,UAAUC,aAAawC,aAAa5B,KCnBjD,SAASmD,EAAYloE,GACJ,iBAAXA,GAAuBA,EAAO+tE,eACpC,aAAc/tE,EAAO+tE,cAAcjsE,aAClC,gBAAiB9B,EAAO+tE,cAAcjsE,YAC1CD,OAAO2b,eAAexd,EAAO+tE,cAAcjsE,UAAW,cAAe,CACnE4b,MACE,MAAO,CAACyL,SAAU5lB,KAAK4lB,aAMxB,SAAS+jD,EAAmBltE,EAAQikE,GACzC,GAAsB,iBAAXjkE,IACLA,EAAOiiE,oBAAqBjiE,EAAOguE,qBACvC,QAEGhuE,EAAOiiE,mBAAqBjiE,EAAOguE,uBAEtChuE,EAAOiiE,kBAAoBjiE,EAAOguE,sBAGhC/J,EAAe/3D,QAAU,IAE3B,CAAC,sBAAuB,uBAAwB,mBAC3CnE,SAAQ,SAASrF,GAChB,MAAMiqE,EAAe3sE,EAAOiiE,kBAAkBngE,UAAUY,GAClDkqE,EAAY,CAAC,CAAClqE,KAIlB,OAHA4I,UAAU,GAAK,IAAiB,oBAAX5I,EACjB1C,EAAOotE,gBACPptE,EAAOwR,uBAAuBlG,UAAU,IACrCqhE,EAAa7gE,MAAMvI,KAAM+H,aAElCtL,EAAOiiE,kBAAkBngE,UAAUY,GAAUkqE,EAAUlqE,MAI/D,MAAMurE,EAAmB,CACvBC,WAAY,cACZC,YAAa,eACbC,cAAe,iBACfzD,eAAgB,kBAChBC,gBAAiB,oBAGbyD,EAAiBruE,EAAOiiE,kBAAkBngE,UAAUqoE,SAC1DnqE,EAAOiiE,kBAAkBngE,UAAUqoE,SAAW,WAC5C,MAAOC,EAAUC,EAAQC,GAASh/D,UAClC,OAAO+iE,EAAeviE,MAAMvI,KAAM,CAAC6mE,GAAY,OAC5C5E,MAAKpC,IACJ,GAAIa,EAAe/3D,QAAU,KAAOm+D,EAGlC,IACEjH,EAAMr7D,SAAQ8iE,IACZA,EAAK9nE,KAAOkrE,EAAiBpD,EAAK9nE,OAAS8nE,EAAK9nE,QAElD,MAAOkD,GACP,GAAe,cAAXA,EAAEP,KACJ,MAAMO,EAGRm9D,EAAMr7D,SAAQ,CAAC8iE,EAAMhoE,KACnBugE,EAAM52C,IAAI3pB,EAAGhB,OAAO+jB,OAAO,GAAIilD,EAAM,CACnC9nE,KAAMkrE,EAAiBpD,EAAK9nE,OAAS8nE,EAAK9nE,WAKlD,OAAOqgE,KAERoC,KAAK6E,EAAQC,IAIb,SAASgE,EAAmBtuE,GACjC,GAAwB,iBAAXA,IAAuBA,EAAOiiE,oBACvCjiE,EAAO8pE,aACT,OAEF,GAAI9pE,EAAO8pE,cAAgB,aAAc9pE,EAAO8pE,aAAahoE,UAC3D,OAEF,MAAMioE,EAAiB/pE,EAAOiiE,kBAAkBngE,UAAUsnE,WACtDW,IACF/pE,EAAOiiE,kBAAkBngE,UAAUsnE,WAAa,WAC9C,MAAMY,EAAUD,EAAej+D,MAAMvI,KAAM,IAE3C,OADAymE,EAAQjiE,SAAQwhE,GAAUA,EAAOJ,IAAM5lE,OAChCymE,IAIX,MAAMV,EAAetpE,EAAOiiE,kBAAkBngE,UAAUqyB,SACpDm1C,IACFtpE,EAAOiiE,kBAAkBngE,UAAUqyB,SAAW,WAC5C,MAAMo1C,EAASD,EAAax9D,MAAMvI,KAAM+H,WAExC,OADAi+D,EAAOJ,IAAM5lE,KACNgmE,IAGXvpE,EAAO8pE,aAAahoE,UAAUqoE,SAAW,WACvC,OAAO5mE,KAAK8vB,MAAQ9vB,KAAK4lE,IAAIgB,SAAS5mE,KAAK8vB,OACvCxJ,QAAQC,QAAQ,IAAIsf,MAIrB,SAASmlC,EAAqBvuE,GACnC,GAAwB,iBAAXA,IAAuBA,EAAOiiE,oBACvCjiE,EAAO8pE,aACT,OAEF,GAAI9pE,EAAO8pE,cAAgB,aAAc9pE,EAAOirE,eAAenpE,UAC7D,OAEF,MAAMopE,EAAmBlrE,EAAOiiE,kBAAkBngE,UAAU0mE,aACxD0C,IACFlrE,EAAOiiE,kBAAkBngE,UAAU0mE,aAAe,WAChD,MAAM2C,EAAYD,EAAiBp/D,MAAMvI,KAAM,IAE/C,OADA4nE,EAAUpjE,SAAQohB,GAAYA,EAASggD,IAAM5lE,OACtC4nE,IAGXrqB,EAA8B9gD,EAAQ,SAASiG,IAC7CA,EAAEkjB,SAASggD,IAAMljE,EAAEmlE,WACZnlE,KAETjG,EAAOirE,eAAenpE,UAAUqoE,SAAW,WACzC,OAAO5mE,KAAK4lE,IAAIgB,SAAS5mE,KAAK8vB,QAI3B,SAASm7C,EAAiBxuE,GAC1BA,EAAOiiE,qBACR,iBAAkBjiE,EAAOiiE,kBAAkBngE,aAG/C9B,EAAOiiE,kBAAkBngE,UAAU+nE,aACjC,SAAsB7+D,GACpB81C,EAAiB,eAAgB,eACjCv9C,KAAK6lE,aAAarhE,SAAQwhE,IACpBA,EAAOl2C,OAASroB,EAAOi8D,YAAYjuC,SAASuwC,EAAOl2C,QACrD9vB,KAAKwxB,YAAYw0C,QAMpB,SAASkF,EAAmBzuE,GAG7BA,EAAO0uE,cAAgB1uE,EAAO2uE,iBAChC3uE,EAAO2uE,eAAiB3uE,EAAO0uE,aAI5B,SAASE,EAAmB5uE,GAIjC,GAAwB,iBAAXA,IAAuBA,EAAOiiE,kBACzC,OAEF,MAAM4M,EAAqB7uE,EAAOiiE,kBAAkBngE,UAAUgtE,eAC1DD,IACF7uE,EAAOiiE,kBAAkBngE,UAAUgtE,eACjC,WACEvrE,KAAKwrE,sBAAwB,GAC7B,MAAMC,EAAiB1jE,UAAU,GAC3B2jE,EAAqBD,GACD,kBAAmBA,EACzCC,GAEFD,EAAeE,cAAcnnE,SAASonE,IACpC,GAAI,QAASA,IACM,oBACH3lE,KAAK2lE,EAAcxgB,KAC/B,MAAM,IAAIhkC,UAAU,+BAGxB,GAAI,0BAA2BwkD,KACvBC,WAAWD,EAAcE,wBAA0B,GACvD,MAAM,IAAI5iD,WAAW,2CAGzB,GAAI,iBAAkB0iD,KACdC,WAAWD,EAAcG,eAAiB,GAC9C,MAAM,IAAI7iD,WAAW,mCAK7B,MAAMi8C,EAAcmG,EAAmB/iE,MAAMvI,KAAM+H,WACnD,GAAI2jE,EAAoB,CAQtB,MAAM,OAAC1F,GAAUb,EACXphE,EAASiiE,EAAOgG,mBAChB,cAAejoE,IAEY,IAA5BA,EAAOkoE,UAAU1sE,QAC2B,IAA5CjB,OAAOiG,KAAKR,EAAOkoE,UAAU,IAAI1sE,UACpCwE,EAAOkoE,UAAYR,EAAeE,cAClC3F,EAAO2F,cAAgBF,EAAeE,cACtC3rE,KAAKwrE,sBAAsBzoE,KAAKijE,EAAOkG,cAAcnoE,GAClDk+D,MAAK,YACG+D,EAAO2F,iBACbQ,OAAM,YACAnG,EAAO2F,mBAKtB,OAAOxG,IAKR,SAASiH,EAAkB3vE,GAChC,GAAwB,iBAAXA,IAAuBA,EAAO8pE,aACzC,OAEF,MAAM8F,EAAoB5vE,EAAO8pE,aAAahoE,UAAUytE,cACpDK,IACF5vE,EAAO8pE,aAAahoE,UAAUytE,cAC5B,WACE,MAAMjoE,EAASsoE,EAAkB9jE,MAAMvI,KAAM+H,WAI7C,MAHM,cAAehE,IACnBA,EAAOkoE,UAAY,GAAGz7D,OAAOxQ,KAAK2rE,eAAiB,CAAC,MAE/C5nE,IAKR,SAASuoE,EAAgB7vE,GAI9B,GAAwB,iBAAXA,IAAuBA,EAAOiiE,kBACzC,OAEF,MAAM6N,EAAkB9vE,EAAOiiE,kBAAkBngE,UAAUiuE,YAC3D/vE,EAAOiiE,kBAAkBngE,UAAUiuE,YAAc,WAC/C,OAAIxsE,KAAKwrE,uBAAyBxrE,KAAKwrE,sBAAsBjsE,OACpD+mB,QAAQhU,IAAItS,KAAKwrE,uBACvBvJ,MAAK,IACGsK,EAAgBhkE,MAAMvI,KAAM+H,aAEpC0kE,SAAQ,KACPzsE,KAAKwrE,sBAAwB,MAG1Be,EAAgBhkE,MAAMvI,KAAM+H,YAIhC,SAAS2kE,EAAiBjwE,GAI/B,GAAwB,iBAAXA,IAAuBA,EAAOiiE,kBACzC,OAEF,MAAMiO,EAAmBlwE,EAAOiiE,kBAAkBngE,UAAUquE,aAC5DnwE,EAAOiiE,kBAAkBngE,UAAUquE,aAAe,WAChD,OAAI5sE,KAAKwrE,uBAAyBxrE,KAAKwrE,sBAAsBjsE,OACpD+mB,QAAQhU,IAAItS,KAAKwrE,uBACvBvJ,MAAK,IACG0K,EAAiBpkE,MAAMvI,KAAM+H,aAErC0kE,SAAQ,KACPzsE,KAAKwrE,sBAAwB,MAG1BmB,EAAiBpkE,MAAMvI,KAAM+H,YC3RjC,SAAS8kE,EAAoBpwE,GAClC,GAAsB,iBAAXA,GAAwBA,EAAOiiE,kBAA1C,CAYA,GATM,oBAAqBjiE,EAAOiiE,kBAAkBngE,YAClD9B,EAAOiiE,kBAAkBngE,UAAUypE,gBACjC,WAIE,OAHKhoE,KAAK8sE,gBACR9sE,KAAK8sE,cAAgB,IAEhB9sE,KAAK8sE,kBAGZ,cAAerwE,EAAOiiE,kBAAkBngE,WAAY,CACxD,MAAMwuE,EAAYtwE,EAAOiiE,kBAAkBngE,UAAUqyB,SACrDn0B,EAAOiiE,kBAAkBngE,UAAU6nE,UAAY,SAAmB3+D,GAC3DzH,KAAK8sE,gBACR9sE,KAAK8sE,cAAgB,IAElB9sE,KAAK8sE,cAAcr3C,SAAShuB,IAC/BzH,KAAK8sE,cAAc/pE,KAAK0E,GAI1BA,EAAO0pB,iBAAiB3sB,SAAQsrB,GAASi9C,EAAUtuE,KAAKuB,KAAM8vB,EAC5DroB,KACFA,EAAOg8D,iBAAiBj/D,SAAQsrB,GAASi9C,EAAUtuE,KAAKuB,KAAM8vB,EAC5DroB,MAGJhL,EAAOiiE,kBAAkBngE,UAAUqyB,SACjC,SAAkBd,KAAUs1C,GAU1B,OATIA,GACFA,EAAQ5gE,SAASiD,IACVzH,KAAK8sE,cAEE9sE,KAAK8sE,cAAcr3C,SAAShuB,IACtCzH,KAAK8sE,cAAc/pE,KAAK0E,GAFxBzH,KAAK8sE,cAAgB,CAACrlE,MAMrBslE,EAAUxkE,MAAMvI,KAAM+H,YAG7B,iBAAkBtL,EAAOiiE,kBAAkBngE,YAC/C9B,EAAOiiE,kBAAkBngE,UAAU+nE,aACjC,SAAsB7+D,GACfzH,KAAK8sE,gBACR9sE,KAAK8sE,cAAgB,IAEvB,MAAMjsE,EAAQb,KAAK8sE,cAAclhE,QAAQnE,GACzC,IAAe,IAAX5G,EACF,OAEFb,KAAK8sE,cAAcv/D,OAAO1M,EAAO,GACjC,MAAMmsE,EAASvlE,EAAOi8D,YACtB1jE,KAAK6lE,aAAarhE,SAAQwhE,IACpBgH,EAAOv3C,SAASuwC,EAAOl2C,QACzB9vB,KAAKwxB,YAAYw0C,SAOtB,SAASiH,EAAqBxwE,GACnC,GAAsB,iBAAXA,GAAwBA,EAAOiiE,oBAGpC,qBAAsBjiE,EAAOiiE,kBAAkBngE,YACnD9B,EAAOiiE,kBAAkBngE,UAAU2uE,iBACjC,WACE,OAAOltE,KAAKmtE,eAAiBntE,KAAKmtE,eAAiB,OAGnD,gBAAiB1wE,EAAOiiE,kBAAkBngE,YAAY,CAC1DD,OAAO2b,eAAexd,EAAOiiE,kBAAkBngE,UAAW,cAAe,CACvE4b,MACE,OAAOna,KAAKotE,cAEdnkD,IAAIxG,GACEziB,KAAKotE,eACPptE,KAAKgpB,oBAAoB,YAAahpB,KAAKotE,cAC3CptE,KAAKgpB,oBAAoB,QAAShpB,KAAKqtE,mBAEzCrtE,KAAK8oB,iBAAiB,YAAa9oB,KAAKotE,aAAe3qD,GACvDziB,KAAK8oB,iBAAiB,QAAS9oB,KAAKqtE,iBAAoB3qE,IACtDA,EAAE0iE,QAAQ5gE,SAAQiD,IAIhB,GAHKzH,KAAKmtE,iBACRntE,KAAKmtE,eAAiB,IAEpBntE,KAAKmtE,eAAe13C,SAAShuB,GAC/B,OAEFzH,KAAKmtE,eAAepqE,KAAK0E,GACzB,MAAM8vB,EAAQ,IAAI2tC,MAAM,aACxB3tC,EAAM9vB,OAASA,EACfzH,KAAKqlE,cAAc9tC,WAK3B,MAAMstC,EACJpoE,EAAOiiE,kBAAkBngE,UAAUumE,qBACrCroE,EAAOiiE,kBAAkBngE,UAAUumE,qBACjC,WACE,MAAMU,EAAKxlE,KAiBX,OAhBKA,KAAKqtE,kBACRrtE,KAAK8oB,iBAAiB,QAAS9oB,KAAKqtE,iBAAmB,SAAS3qE,GAC9DA,EAAE0iE,QAAQ5gE,SAAQiD,IAIhB,GAHK+9D,EAAG2H,iBACN3H,EAAG2H,eAAiB,IAElB3H,EAAG2H,eAAevhE,QAAQnE,IAAW,EACvC,OAEF+9D,EAAG2H,eAAepqE,KAAK0E,GACvB,MAAM8vB,EAAQ,IAAI2tC,MAAM,aACxB3tC,EAAM9vB,OAASA,EACf+9D,EAAGH,cAAc9tC,QAIhBstC,EAAyBt8D,MAAMi9D,EAAIz9D,aAK3C,SAASulE,EAAiB7wE,GAC/B,GAAsB,iBAAXA,IAAwBA,EAAOiiE,kBACxC,OAEF,MAAMngE,EAAY9B,EAAOiiE,kBAAkBngE,UACrCguE,EAAkBhuE,EAAUiuE,YAC5BG,EAAmBpuE,EAAUquE,aAC7BrD,EAAsBhrE,EAAUgrE,oBAChCzE,EAAuBvmE,EAAUumE,qBACjCyI,EAAkBhvE,EAAUgvE,gBAElChvE,EAAUiuE,YACR,SAAqBgB,EAAiBC,GACpC,MAAM7jE,EAAW7B,UAAUxI,QAAU,EAAKwI,UAAU,GAAKA,UAAU,GAC7D2lE,EAAUnB,EAAgBhkE,MAAMvI,KAAM,CAAC4J,IAC7C,OAAK6jE,GAGLC,EAAQzL,KAAKuL,EAAiBC,GACvBnnD,QAAQC,WAHNmnD,GAMbnvE,EAAUquE,aACR,SAAsBY,EAAiBC,GACrC,MAAM7jE,EAAW7B,UAAUxI,QAAU,EAAKwI,UAAU,GAAKA,UAAU,GAC7D2lE,EAAUf,EAAiBpkE,MAAMvI,KAAM,CAAC4J,IAC9C,OAAK6jE,GAGLC,EAAQzL,KAAKuL,EAAiBC,GACvBnnD,QAAQC,WAHNmnD,GAMb,IAAIC,EAAe,SAASr3B,EAAak3B,EAAiBC,GACxD,MAAMC,EAAUnE,EAAoBhhE,MAAMvI,KAAM,CAACs2C,IACjD,OAAKm3B,GAGLC,EAAQzL,KAAKuL,EAAiBC,GACvBnnD,QAAQC,WAHNmnD,GAKXnvE,EAAUgrE,oBAAsBoE,EAEhCA,EAAe,SAASr3B,EAAak3B,EAAiBC,GACpD,MAAMC,EAAU5I,EAAqBv8D,MAAMvI,KAAM,CAACs2C,IAClD,OAAKm3B,GAGLC,EAAQzL,KAAKuL,EAAiBC,GACvBnnD,QAAQC,WAHNmnD,GAKXnvE,EAAUumE,qBAAuB6I,EAEjCA,EAAe,SAAS57B,EAAWy7B,EAAiBC,GAClD,MAAMC,EAAUH,EAAgBhlE,MAAMvI,KAAM,CAAC+xC,IAC7C,OAAK07B,GAGLC,EAAQzL,KAAKuL,EAAiBC,GACvBnnD,QAAQC,WAHNmnD,GAKXnvE,EAAUgvE,gBAAkBI,EAGvB,SAASlN,EAAiBhkE,GAC/B,MAAMkkE,EAAYlkE,GAAUA,EAAOkkE,UAEnC,GAAIA,EAAUC,cAAgBD,EAAUC,aAAawC,aAAc,CAEjE,MAAMxC,EAAeD,EAAUC,aACzBgN,EAAgBhN,EAAawC,aAAal9D,KAAK06D,GACrDD,EAAUC,aAAawC,aAAgB5B,GAC9BoM,EAAcC,EAAgBrM,KAIpCb,EAAUyC,cAAgBzC,EAAUC,cACvCD,EAAUC,aAAawC,eACvBzC,EAAUyC,aAAe,SAAsB5B,EAAazsD,EAAI+4D,GAC9DnN,EAAUC,aAAawC,aAAa5B,GACnCS,KAAKltD,EAAI+4D,IACV5nE,KAAKy6D,IAIJ,SAASkN,EAAgBrM,GAC9B,OAAIA,QAAqCz6D,IAAtBy6D,EAAYG,MACtBrjE,OAAO+jB,OAAO,GACnBm/C,EACA,CAACG,MAAOpkB,EAAoBikB,EAAYG,SAIrCH,EAGF,SAASuM,EAAqBtxE,GACnC,IAAKA,EAAOiiE,kBACV,OAGF,MAAMsP,EAAqBvxE,EAAOiiE,kBAClCjiE,EAAOiiE,kBACL,SAA2BuP,EAAUC,GACnC,GAAID,GAAYA,EAASE,WAAY,CACnC,MAAMC,EAAgB,GACtB,IAAK,IAAI9uE,EAAI,EAAGA,EAAI2uE,EAASE,WAAW5uE,OAAQD,IAAK,CACnD,IAAI+uE,EAASJ,EAASE,WAAW7uE,IAC5B+uE,EAAOj/D,eAAe,SACvBi/D,EAAOj/D,eAAe,QACxBmuC,EAAiB,mBAAoB,qBACrC8wB,EAASpjD,KAAKnmB,MAAMmmB,KAAKF,UAAUsjD,IACnCA,EAAOC,KAAOD,EAAO/pD,WACd+pD,EAAO/pD,IACd8pD,EAAcrrE,KAAKsrE,IAEnBD,EAAcrrE,KAAKkrE,EAASE,WAAW7uE,IAG3C2uE,EAASE,WAAaC,EAExB,OAAO,IAAIJ,EAAmBC,EAAUC,IAE5CzxE,EAAOiiE,kBAAkBngE,UAAYyvE,EAAmBzvE,UAEpD,wBAAyByvE,GAC3B1vE,OAAO2b,eAAexd,EAAOiiE,kBAAmB,sBAAuB,CACrEvkD,IAAG,IACM6zD,EAAmBO,sBAM3B,SAASC,EAA0B/xE,GAElB,iBAAXA,GAAuBA,EAAO+tE,eACrC,aAAc/tE,EAAO+tE,cAAcjsE,aACjC,gBAAiB9B,EAAO+tE,cAAcjsE,YAC1CD,OAAO2b,eAAexd,EAAO+tE,cAAcjsE,UAAW,cAAe,CACnE4b,MACE,MAAO,CAACyL,SAAU5lB,KAAK4lB,aAMxB,SAAS6oD,EAAsBhyE,GACpC,MAAM8vE,EAAkB9vE,EAAOiiE,kBAAkBngE,UAAUiuE,YAC3D/vE,EAAOiiE,kBAAkBngE,UAAUiuE,YACjC,SAAqBkC,GACnB,GAAIA,EAAc,MACgC,IAArCA,EAAaC,sBAEtBD,EAAaC,sBACTD,EAAaC,qBAEnB,MAAMC,EAAmB5uE,KAAK6uE,kBAAkBnkE,MAAKy6D,GACf,UAApCA,EAAYv/C,SAASkK,MAAMinB,QACY,IAArC23B,EAAaC,qBAAiCC,EACb,aAA/BA,EAAiBvrE,UACfurE,EAAiBE,aACnBF,EAAiBE,aAAa,YAE9BF,EAAiBvrE,UAAY,WAES,aAA/BurE,EAAiBvrE,YACtBurE,EAAiBE,aACnBF,EAAiBE,aAAa,YAE9BF,EAAiBvrE,UAAY,aAGa,IAArCqrE,EAAaC,qBACnBC,GACH5uE,KAAKurE,eAAe,cAG0B,IAArCmD,EAAaK,sBAEtBL,EAAaK,sBACTL,EAAaK,qBAEnB,MAAMC,EAAmBhvE,KAAK6uE,kBAAkBnkE,MAAKy6D,GACf,UAApCA,EAAYv/C,SAASkK,MAAMinB,QACY,IAArC23B,EAAaK,qBAAiCC,EACb,aAA/BA,EAAiB3rE,UACf2rE,EAAiBF,aACnBE,EAAiBF,aAAa,YAE9BE,EAAiB3rE,UAAY,WAES,aAA/B2rE,EAAiB3rE,YACtB2rE,EAAiBF,aACnBE,EAAiBF,aAAa,YAE9BE,EAAiB3rE,UAAY,aAGa,IAArCqrE,EAAaK,qBACnBC,GACHhvE,KAAKurE,eAAe,SAGxB,OAAOgB,EAAgBhkE,MAAMvI,KAAM+H,YAIlC,SAASknE,EAAiBxyE,GACT,iBAAXA,GAAuBA,EAAOyyE,eAGzCzyE,EAAOyyE,aAAezyE,EAAO0yE,2CCjVxB,SAASC,GAAoB3yE,GAGlC,IAAKA,EAAOotE,iBAAoBptE,EAAOotE,iBAAmB,eACtDptE,EAAOotE,gBAAgBtrE,UACzB,OAGF,MAAM8wE,EAAwB5yE,EAAOotE,gBACrCptE,EAAOotE,gBAAkB,SAAyB/hE,GAQhD,GANoB,iBAATA,GAAqBA,EAAKiqC,WACA,IAAjCjqC,EAAKiqC,UAAUnmC,QAAQ,SACzB9D,EAAOmjB,KAAKnmB,MAAMmmB,KAAKF,UAAUjjB,KAC5BiqC,UAAYjqC,EAAKiqC,UAAUnvB,OAAO,IAGrC9a,EAAKiqC,WAAajqC,EAAKiqC,UAAUxyC,OAAQ,CAE3C,MAAM+vE,EAAkB,IAAID,EAAsBvnE,GAC5CynE,EAAkBr+B,IAAAA,eAAwBppC,EAAKiqC,WAC/Cy9B,EAAqBlxE,OAAO+jB,OAAOitD,EACrCC,GAWJ,OARAC,EAAmBC,OAAS,WAC1B,MAAO,CACL19B,UAAWy9B,EAAmBz9B,UAC9B29B,OAAQF,EAAmBE,OAC3BC,cAAeH,EAAmBG,cAClCr9B,iBAAkBk9B,EAAmBl9B,mBAGlCk9B,EAET,OAAO,IAAIH,EAAsBvnE,IAEnCrL,EAAOotE,gBAAgBtrE,UAAY8wE,EAAsB9wE,UAIzDg/C,EAA8B9gD,EAAQ,gBAAgBiG,IAChDA,EAAEqvC,WACJzzC,OAAO2b,eAAevX,EAAG,YAAa,CACpCmB,MAAO,IAAIpH,EAAOotE,gBAAgBnnE,EAAEqvC,WACpCpxB,SAAU,UAGPje,KAIJ,SAASktE,GAAmBnzE,EAAQikE,GACzC,IAAKjkE,EAAOiiE,kBACV,OAGI,SAAUjiE,EAAOiiE,kBAAkBngE,WACvCD,OAAO2b,eAAexd,EAAOiiE,kBAAkBngE,UAAW,OAAQ,CAChE4b,MACE,YAA6B,IAAfna,KAAK6vE,MAAwB,KAAO7vE,KAAK6vE,SAK7D,MAAMC,EAAoB,SAASx5B,GACjC,IAAKA,IAAgBA,EAAYnwC,IAC/B,OAAO,EAET,MAAMurC,EAAWR,IAAAA,cAAuBoF,EAAYnwC,KAEpD,OADAurC,EAASz7B,QACFy7B,EAAS7jC,MAAK4mC,IACnB,MAAM7rC,EAAQsoC,IAAAA,WAAoBuD,GAClC,OAAO7rC,GAAwB,gBAAfA,EAAMmuC,OACqB,IAApCnuC,EAAMqpC,SAASrmC,QAAQ,YAI5BmkE,EAA0B,SAASz5B,GAEvC,MAAMzwC,EAAQywC,EAAYnwC,IAAIN,MAAM,mCACpC,GAAc,OAAVA,GAAkBA,EAAMtG,OAAS,EACnC,OAAQ,EAEV,MAAMoJ,EAAUmC,SAASjF,EAAM,GAAI,IAEnC,OAAO8C,GAAYA,GAAW,EAAIA,GAG9BqnE,EAA2B,SAASC,GAKxC,IAAIC,EAAwB,MAwB5B,MAvB+B,YAA3BxP,EAAex/C,UAKbgvD,EAJAxP,EAAe/3D,QAAU,IACF,IAArBsnE,EAGsB,MAIA,WAEjBvP,EAAe/3D,QAAU,GAML,KAA3B+3D,EAAe/3D,QAAiB,MAAQ,MAGlB,YAGrBunE,GAGHC,EAAoB,SAAS75B,EAAa25B,GAG9C,IAAInsE,EAAiB,MAKU,YAA3B48D,EAAex/C,SACgB,KAA3Bw/C,EAAe/3D,UACrB7E,EAAiB,OAGnB,MAAM+B,EAAQqrC,IAAAA,YAAqBoF,EAAYnwC,IAC7C,uBAUF,OATIN,EAAMtG,OAAS,EACjBuE,EAAiBgH,SAASjF,EAAM,GAAG+c,OAAO,IAAK,IACX,YAA3B89C,EAAex/C,UACO,IAArB+uD,IAIVnsE,EAAiB,YAEZA,GAGH+gE,EACFpoE,EAAOiiE,kBAAkBngE,UAAUumE,qBACvCroE,EAAOiiE,kBAAkBngE,UAAUumE,qBACjC,WAKE,GAJA9kE,KAAK6vE,MAAQ,KAIkB,WAA3BnP,EAAex/C,SAAwBw/C,EAAe/3D,SAAW,GAAI,CACvE,MAAM,aAACqhE,GAAgBhqE,KAAK+pE,mBACP,WAAjBC,GACF1rE,OAAO2b,eAAeja,KAAM,OAAQ,CAClCma,MACE,YAA6B,IAAfna,KAAK6vE,MAAwB,KAAO7vE,KAAK6vE,OAEzD31D,YAAY,EACZwG,cAAc,IAKpB,GAAIovD,EAAkB/nE,UAAU,IAAK,CAEnC,MAAMqoE,EAAYL,EAAwBhoE,UAAU,IAG9CsoE,EAAaL,EAAyBI,GAGtCE,EAAYH,EAAkBpoE,UAAU,GAAIqoE,GAGlD,IAAItsE,EAEFA,EADiB,IAAfusE,GAAkC,IAAdC,EACL/qE,OAAOgrE,kBACA,IAAfF,GAAkC,IAAdC,EACZhkE,KAAK0O,IAAIq1D,EAAYC,GAErBhkE,KAAK2O,IAAIo1D,EAAYC,GAKxC,MAAMl3B,EAAO,GACb96C,OAAO2b,eAAem/B,EAAM,iBAAkB,CAC5Cj/B,IAAG,IACMrW,IAGX9D,KAAK6vE,MAAQz2B,EAGf,OAAOyrB,EAAyBt8D,MAAMvI,KAAM+H,YAI3C,SAASyoE,GAAuB/zE,GACrC,IAAMA,EAAOiiE,qBACT,sBAAuBjiE,EAAOiiE,kBAAkBngE,WAClD,OAOF,SAASkyE,EAAWC,EAAIlL,GACtB,MAAMmL,EAAsBD,EAAGv8C,KAC/Bu8C,EAAGv8C,KAAO,WACR,MAAM7f,EAAOvM,UAAU,GACjBxI,EAAS+U,EAAK/U,QAAU+U,EAAKid,MAAQjd,EAAKsE,WAChD,GAAsB,SAAlB83D,EAAG9rD,YACH4gD,EAAGpsB,MAAQ75C,EAASimE,EAAGpsB,KAAKt1C,eAC9B,MAAM,IAAIsjB,UAAU,4CAClBo+C,EAAGpsB,KAAKt1C,eAAiB,WAE7B,OAAO6sE,EAAoBpoE,MAAMmoE,EAAI3oE,YAGzC,MAAM6oE,EACJn0E,EAAOiiE,kBAAkBngE,UAAUsyE,kBACrCp0E,EAAOiiE,kBAAkBngE,UAAUsyE,kBACjC,WACE,MAAMC,EAAcF,EAAsBroE,MAAMvI,KAAM+H,WAEtD,OADA0oE,EAAWK,EAAa9wE,MACjB8wE,GAEXvzB,EAA8B9gD,EAAQ,eAAeiG,IACnD+tE,EAAW/tE,EAAEquE,QAASruE,EAAEijB,QACjBjjB,KAYJ,SAASsuE,GAAoBv0E,GAClC,IAAKA,EAAOiiE,mBACR,oBAAqBjiE,EAAOiiE,kBAAkBngE,UAChD,OAEF,MAAM8pC,EAAQ5rC,EAAOiiE,kBAAkBngE,UACvCD,OAAO2b,eAAeouB,EAAO,kBAAmB,CAC9CluB,MACE,MAAO,CACLzK,UAAW,YACXuhE,SAAU,cACVjxE,KAAKkxE,qBAAuBlxE,KAAKkxE,oBAErCh3D,YAAY,EACZwG,cAAc,IAEhBpiB,OAAO2b,eAAeouB,EAAO,0BAA2B,CACtDluB,MACE,OAAOna,KAAKmxE,0BAA4B,MAE1CloD,IAAIlU,GACE/U,KAAKmxE,2BACPnxE,KAAKgpB,oBAAoB,wBACrBhpB,KAAKmxE,iCACFnxE,KAAKmxE,0BAEVp8D,GACF/U,KAAK8oB,iBAAiB,wBAClB9oB,KAAKmxE,yBAA2Bp8D,IAGxCmF,YAAY,EACZwG,cAAc,IAGhB,CAAC,sBAAuB,wBAAwBlc,SAASrF,IACvD,MAAMiyE,EAAa/oC,EAAMlpC,GACzBkpC,EAAMlpC,GAAU,WAcd,OAbKa,KAAKqxE,6BACRrxE,KAAKqxE,2BAA6B3uE,IAChC,MAAM8iE,EAAK9iE,EAAEijB,OACb,GAAI6/C,EAAG8L,uBAAyB9L,EAAG+L,gBAAiB,CAClD/L,EAAG8L,qBAAuB9L,EAAG+L,gBAC7B,MAAMC,EAAW,IAAItM,MAAM,wBAAyBxiE,GACpD8iE,EAAGH,cAAcmM,GAEnB,OAAO9uE,GAET1C,KAAK8oB,iBAAiB,2BACpB9oB,KAAKqxE,6BAEFD,EAAW7oE,MAAMvI,KAAM+H,eAK7B,SAAS0pE,GAAuBh1E,EAAQikE,GAE7C,IAAKjkE,EAAOiiE,kBACV,OAEF,GAA+B,WAA3BgC,EAAex/C,SAAwBw/C,EAAe/3D,SAAW,GACnE,OAEF,GAA+B,WAA3B+3D,EAAex/C,SAAwBw/C,EAAe/3D,SAAW,IACnE,OAEF,MAAM+oE,EAAYj1E,EAAOiiE,kBAAkBngE,UAAUumE,qBACrDroE,EAAOiiE,kBAAkBngE,UAAUumE,qBACnC,SAA8B16D,GAC5B,GAAIA,GAAQA,EAAKjE,MAAuD,IAAhDiE,EAAKjE,IAAIyF,QAAQ,0BAAkC,CACzE,MAAMzF,EAAMiE,EAAKjE,IAAI1I,MAAM,MAAM6I,QAAQumB,GAChB,yBAAhBA,EAAKykB,SACXroC,KAAK,MAEJxM,EAAOwR,uBACP7D,aAAgB3N,EAAOwR,sBACzBlG,UAAU,GAAK,IAAItL,EAAOwR,sBAAsB,CAC9CzO,KAAM4K,EAAK5K,KACX2G,IAAAA,IAGFiE,EAAKjE,IAAMA,EAGf,OAAOurE,EAAUnpE,MAAMvI,KAAM+H,YAI1B,SAAS4pE,GAA+Bl1E,EAAQikE,GAKrD,IAAMjkE,EAAOiiE,oBAAqBjiE,EAAOiiE,kBAAkBngE,UACzD,OAEF,MAAMqzE,EACFn1E,EAAOiiE,kBAAkBngE,UAAUgvE,gBAClCqE,GAA0D,IAAjCA,EAAsBryE,SAGpD9C,EAAOiiE,kBAAkBngE,UAAUgvE,gBACjC,WACE,OAAKxlE,UAAU,IAWkB,WAA3B24D,EAAex/C,SAAwBw/C,EAAe/3D,QAAU,IAClC,YAA3B+3D,EAAex/C,SACZw/C,EAAe/3D,QAAU,IACD,WAA3B+3D,EAAex/C,UACjBnZ,UAAU,IAAiC,KAA3BA,UAAU,GAAGgqC,UAC3BzrB,QAAQC,UAEVqrD,EAAsBrpE,MAAMvI,KAAM+H,YAjBnCA,UAAU,IACZA,UAAU,GAAGQ,MAAM,MAEd+d,QAAQC,aCrWvB,MAAMsrD,GCIC,UAAwB,OAACp1E,GAAU,GAAImN,EAAU,CACtDkoE,YAAY,EACZC,aAAa,EACbC,YAAY,IAGZ,MAAMtX,EAAUnd,EACVmjB,EV8HD,SAAuBjkE,GAE5B,MAAMwV,EAAS,CAACiP,QAAS,KAAMvY,QAAS,MAGxC,QAAsB,IAAXlM,IAA2BA,EAAOkkE,UAE3C,OADA1uD,EAAOiP,QAAU,iBACVjP,EAGT,MAAM,UAAC0uD,GAAalkE,EAEpB,GAAIkkE,EAAUsR,gBACZhgE,EAAOiP,QAAU,UACjBjP,EAAOtJ,QAAU21D,EAAeqC,EAAUuR,UACtC,mBAAoB,QACnB,GAAIvR,EAAU2C,qBACW,IAA3B7mE,EAAO01E,iBAA6B11E,EAAOmtE,0BAC1CntE,EAAO21E,eAKXngE,EAAOiP,QAAU,SACjBjP,EAAOtJ,QAAU21D,EAAeqC,EAAUuR,UACtC,wBAAyB,OACxB,KAAIz1E,EAAOiiE,oBACdiC,EAAUuR,UAAUrsE,MAAM,wBAQ5B,OADAoM,EAAOiP,QAAU,2BACVjP,EAPPA,EAAOiP,QAAU,SACjBjP,EAAOtJ,QAAU21D,EAAeqC,EAAUuR,UACtC,uBAAwB,GAC5BjgE,EAAOogE,oBAAsB51E,EAAO61E,mBAChC,qBAAsB71E,EAAO61E,kBAAkB/zE,UAMrD,OAAO0T,EUpKgBsrC,CAAoB9gD,GAErCo1E,EAAU,CACdnR,eAAAA,EACA6R,WAFc,EAGdjU,eAAgB/gB,EAChB4hB,WAAY5hB,EACZ8hB,gBAAiB9hB,EAEjBp3C,IAAGA,GAIL,OAAQu6D,EAAex/C,SACrB,IAAK,SACH,IAAKsxD,IAAeA,IACf5oE,EAAQkoE,WAEX,OADApX,EAAQ,wDACDmX,EAET,GAA+B,OAA3BnR,EAAe/3D,QAEjB,OADA+xD,EAAQ,wDACDmX,EAETnX,EAAQ,+BAERmX,EAAQY,YAAcD,EAGtBD,GAA0C91E,EAAQikE,GAElD8R,EAA4B/1E,EAAQikE,GACpC8R,EAA2B/1E,GAC3B+1E,EAA8B/1E,EAAQikE,GACtC8R,EAAuB/1E,GACvB+1E,EAAmC/1E,EAAQikE,GAC3C8R,EAAkC/1E,GAClC+1E,EAAwB/1E,GACxB+1E,EAAsC/1E,GACtC+1E,EAAgC/1E,EAAQikE,GAExC6R,GAA+B91E,GAC/B81E,GAA+B91E,GAC/B81E,GAA8B91E,EAAQikE,GACtC6R,GAAkC91E,GAClC81E,GAAkC91E,EAAQikE,GAC1C,MACF,IAAK,UACH,IAAKgS,IAAgBA,IAChB9oE,EAAQmoE,YAEX,OADArX,EAAQ,yDACDmX,EAETnX,EAAQ,gCAERmX,EAAQY,YAAcC,EAGtBH,GAA0C91E,EAAQikE,GAElDgS,EAA6Bj2E,EAAQikE,GACrCgS,EAA+Bj2E,EAAQikE,GACvCgS,EAAwBj2E,GACxBi2E,EAA6Bj2E,GAC7Bi2E,EAA+Bj2E,GAC/Bi2E,EAAiCj2E,GACjCi2E,EAA+Bj2E,GAC/Bi2E,EAA+Bj2E,GAC/Bi2E,EAA8Bj2E,GAC9Bi2E,EAA4Bj2E,GAC5Bi2E,EAA6Bj2E,GAE7B81E,GAA+B91E,GAC/B81E,GAA+B91E,GAC/B81E,GAA8B91E,EAAQikE,GACtC6R,GAAkC91E,GAClC,MACF,IAAK,SACH,IAAKk2E,IAAe/oE,EAAQooE,WAE1B,OADAtX,EAAQ,wDACDmX,EAETnX,EAAQ,+BAERmX,EAAQY,YAAcE,EAGtBJ,GAA0C91E,EAAQikE,GAElDiS,EAAgCl2E,GAChCk2E,EAAiCl2E,GACjCk2E,EAA4Bl2E,GAC5Bk2E,EAA+Bl2E,GAC/Bk2E,EAAgCl2E,GAChCk2E,EAAqCl2E,GACrCk2E,EAA4Bl2E,GAC5Bk2E,EAA4Bl2E,GAE5B81E,GAA+B91E,GAC/B81E,GAA8B91E,EAAQikE,GACtC6R,GAAkC91E,GAClC81E,GAAkC91E,EAAQikE,GAC1C,MACF,QACEhG,EAAQ,wBAIZ,OAAOmX,EDtHPe,CAAe,CAACn2E,OAA0B,oBAAXA,YAAyBsK,EAAYtK,SACtE,gCEbA6B,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EAMlB,MAAM22E,EAAY,GAElB,IAAK,IAAIvzE,EAAI,EAAGA,EAAI,MAAOA,EACzBuzE,EAAU9vE,MAAMzD,EAAI,KAAOd,SAAS,IAAIokB,OAAO,IAYjD1mB,EAAA,QATA,SAAqB42E,EAAKr/C,GACxB,MAAMn0B,EAAIm0B,GAAU,EACds/C,EAAMF,EAGZ,OAAQE,EAAID,EAAIxzE,EAAI,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAM,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAM,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAM,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAMyzE,EAAID,EAAIxzE,EAAI,IAAM,IAAMyzE,EAAID,EAAIxzE,EAAI,KAAOyzE,EAAID,EAAIxzE,EAAI,KAAOyzE,EAAID,EAAIxzE,EAAI,KAAOyzE,EAAID,EAAIxzE,EAAI,KAAOyzE,EAAID,EAAIxzE,EAAI,KAAOyzE,EAAID,EAAIxzE,EAAI,MAAMgiB,4CCjBvUhjB,OAAO2b,eAAe/d,EAAS,KAAM,CACnCge,YAAY,EACZC,IAAK,WACH,OAAO64D,EAAGz4D,WAGdjc,OAAO2b,eAAe/d,EAAS,KAAM,CACnCge,YAAY,EACZC,IAAK,WACH,OAAO84D,EAAI14D,WAGfjc,OAAO2b,eAAe/d,EAAS,KAAM,CACnCge,YAAY,EACZC,IAAK,WACH,OAAO+4D,EAAI34D,WAGfjc,OAAO2b,eAAe/d,EAAS,KAAM,CACnCge,YAAY,EACZC,IAAK,WACH,OAAOg5D,EAAI54D,WAIf,IAAIy4D,EAAKI,EAAuB,EAAQ,OAEpCH,EAAMG,EAAuB,EAAQ,OAErCF,EAAME,EAAuB,EAAQ,OAErCD,EAAMC,EAAuB,EAAQ,OAEzC,SAASA,EAAuB/0E,GAAO,OAAOA,GAAOA,EAAIic,WAAajc,EAAM,CAAEkc,QAASlc,8BCyBvF,SAASg1E,EAAgBC,GACvB,OAAwC,IAAhCA,EAAe,KAAO,GAAK,GAAU,EAuH/C,SAASC,EAAQrrE,EAAG8M,GAClB,MAAM+lC,GAAW,MAAJ7yC,IAAmB,MAAJ8M,GAE5B,OADa9M,GAAK,KAAO8M,GAAK,KAAO+lC,GAAO,KAC9B,GAAW,MAANA,EAerB,SAASy4B,EAAO99D,EAAGxU,EAAGC,EAAG+G,EAAG1F,EAAGM,GAC7B,OAAOywE,GATcx5D,EASQw5D,EAAQA,EAAQryE,EAAGwU,GAAI69D,EAAQrrE,EAAGpF,OATrCq4C,EAS0C34C,GARhDuX,IAAQ,GAAKohC,EAQuCh6C,GAT1E,IAAuB4Y,EAAKohC,EAY5B,SAASs4B,EAAMvyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC/B,OAAO0wE,EAAOryE,EAAIC,GAAKD,EAAIE,EAAGH,EAAGC,EAAG+G,EAAG1F,EAAGM,GAG5C,SAAS4wE,EAAMxyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC/B,OAAO0wE,EAAOryE,EAAIE,EAAID,GAAKC,EAAGH,EAAGC,EAAG+G,EAAG1F,EAAGM,GAG5C,SAAS6wE,EAAMzyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC/B,OAAO0wE,EAAOryE,EAAIC,EAAIC,EAAGH,EAAGC,EAAG+G,EAAG1F,EAAGM,GAGvC,SAAS8wE,EAAM1yE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAG1F,EAAGM,GAC/B,OAAO0wE,EAAOpyE,GAAKD,GAAKE,GAAIH,EAAGC,EAAG+G,EAAG1F,EAAGM,GAxN1CxE,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EAyNlBA,EAAA,QAnMA,SAAaoE,GACX,GAAqB,iBAAVA,EAAoB,CAC7B,MAAM6qB,EAAM+yB,SAAS21B,mBAAmBvzE,IAExCA,EAAQ,IAAIrC,WAAWktB,EAAI5rB,QAE3B,IAAK,IAAID,EAAI,EAAGA,EAAI6rB,EAAI5rB,SAAUD,EAChCgB,EAAMhB,GAAK6rB,EAAIrqB,WAAWxB,GAI9B,OAOF,SAA8BuoC,GAC5B,MAAM7tB,EAAS,GACT85D,EAA0B,GAAfjsC,EAAMtoC,OACjBw0E,EAAS,mBAEf,IAAK,IAAIz0E,EAAI,EAAGA,EAAIw0E,EAAUx0E,GAAK,EAAG,CACpC,MAAM4I,EAAI2/B,EAAMvoC,GAAK,KAAOA,EAAI,GAAK,IAC/BkC,EAAMsJ,SAASipE,EAAO35B,OAAOlyC,IAAM,EAAI,IAAQ6rE,EAAO35B,OAAW,GAAJlyC,GAAW,IAC9E8R,EAAOjX,KAAKvB,GAGd,OAAOwY,EAlBAg6D,CAiCT,SAAoB9rE,EAAGF,GAErBE,EAAEF,GAAO,IAAM,KAAQA,EAAM,GAC7BE,EAAEmrE,EAAgBrrE,GAAO,GAAKA,EAC9B,IAAI9G,EAAI,WACJC,GAAK,UACLC,GAAK,WACLC,EAAI,UAER,IAAK,IAAI/B,EAAI,EAAGA,EAAI4I,EAAE3I,OAAQD,GAAK,GAAI,CACrC,MAAMm8C,EAAOv6C,EACPw6C,EAAOv6C,EACPw6C,EAAOv6C,EACPw6C,EAAOv6C,EACbH,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,GAAI,GAAI,WAChC+B,EAAIoyE,EAAMpyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,WACrC8B,EAAIqyE,EAAMryE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,GAAI,WACpC6B,EAAIsyE,EAAMtyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,YACrC4B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACpC+B,EAAIoyE,EAAMpyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACpC8B,EAAIqyE,EAAMryE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,YACrC6B,EAAIsyE,EAAMtyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,UACrC4B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,EAAG,YACnC+B,EAAIoyE,EAAMpyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,YACrC8B,EAAIqyE,EAAMryE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,OACtC6B,EAAIsyE,EAAMtyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,YACtC4B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,EAAG,YACpC+B,EAAIoyE,EAAMpyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,UACtC8B,EAAIqyE,EAAMryE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,YACtC6B,EAAIsyE,EAAMtyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,GAAI,YACrC4B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACpC+B,EAAIqyE,EAAMryE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACpC8B,EAAIsyE,EAAMtyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,GAAI,WACrC6B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,GAAI,IAAK,WACjC4B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACpC+B,EAAIqyE,EAAMryE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,EAAG,UACpC8B,EAAIsyE,EAAMtyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,WACtC6B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACrC4B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,EAAG,WACnC+B,EAAIqyE,EAAMryE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,GAAI,YACrC8B,EAAIsyE,EAAMtyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,WACrC6B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,GAAI,YACpC4B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,GAAI,YACrC+B,EAAIqyE,EAAMryE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,UACpC8B,EAAIsyE,EAAMtyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,GAAI,YACpC6B,EAAIuyE,EAAMvyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,YACtC4B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,QACpC+B,EAAIsyE,EAAMtyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,YACrC8B,EAAIuyE,EAAMvyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,GAAI,YACrC6B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,UACtC4B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,YACpC+B,EAAIsyE,EAAMtyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACpC8B,EAAIuyE,EAAMvyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,WACrC6B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,IAAK,YACtC4B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,EAAG,WACpC+B,EAAIsyE,EAAMtyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,GAAI,IAAK,WACjC8B,EAAIuyE,EAAMvyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,WACrC6B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,GAAI,UACpC4B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACpC+B,EAAIsyE,EAAMtyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,WACtC8B,EAAIuyE,EAAMvyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,GAAI,WACrC6B,EAAIwyE,EAAMxyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACrC4B,EAAI0yE,EAAM1yE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,GAAI,GAAI,WAChC+B,EAAIuyE,EAAMvyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,GAAI,YACpC8B,EAAIwyE,EAAMxyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,YACtC6B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,UACrC4B,EAAI0yE,EAAM1yE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,IAAK,EAAG,YACpC+B,EAAIuyE,EAAMvyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,GAAI,IAAK,YACrC8B,EAAIwyE,EAAMxyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,IAAK,IAAK,SACtC6B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,YACrC4B,EAAI0yE,EAAM1yE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,EAAG,YACnC+B,EAAIuyE,EAAMvyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,UACtC8B,EAAIwyE,EAAMxyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,IAAK,YACrC6B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,IAAK,GAAI,YACrC4B,EAAI0yE,EAAM1yE,EAAGC,EAAGC,EAAGC,EAAG6G,EAAE5I,EAAI,GAAI,GAAI,WACpC+B,EAAIuyE,EAAMvyE,EAAGH,EAAGC,EAAGC,EAAG8G,EAAE5I,EAAI,IAAK,IAAK,YACtC8B,EAAIwyE,EAAMxyE,EAAGC,EAAGH,EAAGC,EAAG+G,EAAE5I,EAAI,GAAI,GAAI,WACpC6B,EAAIyyE,EAAMzyE,EAAGC,EAAGC,EAAGH,EAAGgH,EAAE5I,EAAI,GAAI,IAAK,WACrC4B,EAAIqyE,EAAQryE,EAAGu6C,GACft6C,EAAIoyE,EAAQpyE,EAAGu6C,GACft6C,EAAImyE,EAAQnyE,EAAGu6C,GACft6C,EAAIkyE,EAAQlyE,EAAGu6C,GAGjB,MAAO,CAAC16C,EAAGC,EAAGC,EAAGC,GArHW4yE,CA6H9B,SAAsBpsC,GACpB,GAAqB,IAAjBA,EAAMtoC,OACR,MAAO,GAGT,MAAM20E,EAAyB,EAAfrsC,EAAMtoC,OAChBya,EAAS,IAAI9b,YAAYm1E,EAAgBa,IAE/C,IAAK,IAAI50E,EAAI,EAAGA,EAAI40E,EAAS50E,GAAK,EAChC0a,EAAO1a,GAAK,KAAsB,IAAfuoC,EAAMvoC,EAAI,KAAcA,EAAI,GAGjD,OAAO0a,EAzIgCm6D,CAAa7zE,GAAuB,EAAfA,EAAMf,qCCpCpEjB,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,QASA,WACE,IAAKk4E,EACH,MAAM,IAAI3lE,MAAM,4GAGlB,OAAO2lE,EAAgBC,IARzB,MAAMD,EAAoC,oBAAX30E,QAA0BA,OAAO20E,iBAAmB30E,OAAO20E,gBAAgBluE,KAAKzG,SAA+B,oBAAb60E,UAAgE,mBAA7BA,SAASF,iBAAkCE,SAASF,gBAAgBluE,KAAKouE,UACvOD,EAAQ,IAAIp2E,WAAW,+BCH7B,SAASwkB,EAAEjgB,EAAG0F,EAAG8M,EAAGpS,GAClB,OAAQJ,GACN,KAAK,EACH,OAAO0F,EAAI8M,GAAK9M,EAAItF,EAEtB,KAAK,EAML,KAAK,EACH,OAAOsF,EAAI8M,EAAIpS,EAJjB,KAAK,EACH,OAAOsF,EAAI8M,EAAI9M,EAAItF,EAAIoS,EAAIpS,GAOjC,SAAS2xE,EAAKrsE,EAAGI,GACf,OAAOJ,GAAKI,EAAIJ,IAAM,GAAKI,EAxB7BhK,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EA+FlBA,EAAA,QAvEA,SAAcoE,GACZ,MAAMk0E,EAAI,CAAC,WAAY,WAAY,WAAY,YACzCC,EAAI,CAAC,WAAY,WAAY,WAAY,UAAY,YAE3D,GAAqB,iBAAVn0E,EAAoB,CAC7B,MAAM6qB,EAAM+yB,SAAS21B,mBAAmBvzE,IAExCA,EAAQ,GAER,IAAK,IAAIhB,EAAI,EAAGA,EAAI6rB,EAAI5rB,SAAUD,EAChCgB,EAAMyC,KAAKooB,EAAIrqB,WAAWxB,IAI9BgB,EAAMyC,KAAK,KACX,MAAMwD,EAAIjG,EAAMf,OAAS,EAAI,EACvBm1E,EAAIpoE,KAAKqoE,KAAKpuE,EAAI,IAClBquE,EAAI,IAAIz2E,MAAMu2E,GAEpB,IAAK,IAAIp1E,EAAI,EAAGA,EAAIo1E,IAAKp1E,EAAG,CAC1B,MAAMwP,EAAM,IAAI5Q,YAAY,IAE5B,IAAK,IAAIyI,EAAI,EAAGA,EAAI,KAAMA,EACxBmI,EAAInI,GAAKrG,EAAU,GAAJhB,EAAa,EAAJqH,IAAU,GAAKrG,EAAU,GAAJhB,EAAa,EAAJqH,EAAQ,IAAM,GAAKrG,EAAU,GAAJhB,EAAa,EAAJqH,EAAQ,IAAM,EAAIrG,EAAU,GAAJhB,EAAa,EAAJqH,EAAQ,GAGnIiuE,EAAEt1E,GAAKwP,EAGT8lE,EAAEF,EAAI,GAAG,IAA2B,GAApBp0E,EAAMf,OAAS,GAAS+M,KAAK+sB,IAAI,EAAG,IACpDu7C,EAAEF,EAAI,GAAG,IAAMpoE,KAAKC,MAAMqoE,EAAEF,EAAI,GAAG,KACnCE,EAAEF,EAAI,GAAG,IAA2B,GAApBp0E,EAAMf,OAAS,GAAS,WAExC,IAAK,IAAID,EAAI,EAAGA,EAAIo1E,IAAKp1E,EAAG,CAC1B,MAAMu1E,EAAI,IAAI32E,YAAY,IAE1B,IAAK,IAAI4E,EAAI,EAAGA,EAAI,KAAMA,EACxB+xE,EAAE/xE,GAAK8xE,EAAEt1E,GAAGwD,GAGd,IAAK,IAAIA,EAAI,GAAIA,EAAI,KAAMA,EACzB+xE,EAAE/xE,GAAKyxE,EAAKM,EAAE/xE,EAAI,GAAK+xE,EAAE/xE,EAAI,GAAK+xE,EAAE/xE,EAAI,IAAM+xE,EAAE/xE,EAAI,IAAK,GAG3D,IAAI5B,EAAIuzE,EAAE,GACNtzE,EAAIszE,EAAE,GACNrzE,EAAIqzE,EAAE,GACNpzE,EAAIozE,EAAE,GACN/xE,EAAI+xE,EAAE,GAEV,IAAK,IAAI3xE,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,MAAMN,EAAI8J,KAAKC,MAAMzJ,EAAI,IACnBgyE,EAAIP,EAAKrzE,EAAG,GAAKuhB,EAAEjgB,EAAGrB,EAAGC,EAAGC,GAAKqB,EAAI8xE,EAAEhyE,GAAKqyE,EAAE/xE,KAAO,EAC3DJ,EAAIrB,EACJA,EAAID,EACJA,EAAImzE,EAAKpzE,EAAG,MAAQ,EACpBA,EAAID,EACJA,EAAI4zE,EAGNL,EAAE,GAAKA,EAAE,GAAKvzE,IAAM,EACpBuzE,EAAE,GAAKA,EAAE,GAAKtzE,IAAM,EACpBszE,EAAE,GAAKA,EAAE,GAAKrzE,IAAM,EACpBqzE,EAAE,GAAKA,EAAE,GAAKpzE,IAAM,EACpBozE,EAAE,GAAKA,EAAE,GAAK/xE,IAAM,EAGtB,MAAO,CAAC+xE,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,GAAWA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,GAAK,IAAMA,EAAE,IAAM,EAAI,IAAa,IAAPA,EAAE,kCC9FxVn2E,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EAElB,IAAI64E,EAAO3B,EAAuB,EAAQ,OAEtC4B,EAAe5B,EAAuB,EAAQ,MAElD,SAASA,EAAuB/0E,GAAO,OAAOA,GAAOA,EAAIic,WAAajc,EAAM,CAAEkc,QAASlc,GAMvF,IAAI42E,EAEAC,EAGAC,EAAa,EACbC,EAAa,EAmFjBl5E,EAAA,QAjFA,SAAY0N,EAASkpE,EAAKr/C,GACxB,IAAIn0B,EAAIwzE,GAAOr/C,GAAU,EACzB,MAAMtyB,EAAI2xE,GAAO,GAEjB,IAAI91E,GADJ4M,EAAUA,GAAW,IACF5M,MAAQi4E,EACvBI,OAAgCtuE,IAArB6C,EAAQyrE,SAAyBzrE,EAAQyrE,SAAWH,EAInE,GAAY,MAARl4E,GAA4B,MAAZq4E,EAAkB,CACpC,MAAMC,EAAY1rE,EAAQ4C,SAAW5C,EAAQ2rE,KAAOR,EAAKx6D,WAE7C,MAARvd,IAEFA,EAAOi4E,EAAU,CAAgB,EAAfK,EAAU,GAAWA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAG3F,MAAZD,IAEFA,EAAWH,EAAiD,OAApCI,EAAU,IAAM,EAAIA,EAAU,KAQ1D,IAAIE,OAA0BzuE,IAAlB6C,EAAQ4rE,MAAsB5rE,EAAQ4rE,MAAQpoD,KAAKgC,MAG3DqmD,OAA0B1uE,IAAlB6C,EAAQ6rE,MAAsB7rE,EAAQ6rE,MAAQL,EAAa,EAEvE,MAAMM,EAAKF,EAAQL,GAAcM,EAAQL,GAAc,IAavD,GAXIM,EAAK,QAA0B3uE,IAArB6C,EAAQyrE,WACpBA,EAAWA,EAAW,EAAI,QAKvBK,EAAK,GAAKF,EAAQL,SAAiCpuE,IAAlB6C,EAAQ6rE,QAC5CA,EAAQ,GAINA,GAAS,IACX,MAAM,IAAIhnE,MAAM,mDAGlB0mE,EAAaK,EACbJ,EAAaK,EACbP,EAAYG,EAEZG,GAAS,YAET,MAAMG,GAA4B,KAAb,UAARH,GAA6BC,GAAS,WACnDt0E,EAAE7B,KAAOq2E,IAAO,GAAK,IACrBx0E,EAAE7B,KAAOq2E,IAAO,GAAK,IACrBx0E,EAAE7B,KAAOq2E,IAAO,EAAI,IACpBx0E,EAAE7B,KAAY,IAALq2E,EAET,MAAMC,EAAMJ,EAAQ,WAAc,IAAQ,UAC1Cr0E,EAAE7B,KAAOs2E,IAAQ,EAAI,IACrBz0E,EAAE7B,KAAa,IAANs2E,EAETz0E,EAAE7B,KAAOs2E,IAAQ,GAAK,GAAM,GAE5Bz0E,EAAE7B,KAAOs2E,IAAQ,GAAK,IAEtBz0E,EAAE7B,KAAO+1E,IAAa,EAAI,IAE1Bl0E,EAAE7B,KAAkB,IAAX+1E,EAET,IAAK,IAAI/sE,EAAI,EAAGA,EAAI,IAAKA,EACvBnH,EAAE7B,EAAIgJ,GAAKtL,EAAKsL,GAGlB,OAAOwqE,IAAO,EAAIkC,EAAaz6D,SAASpZ,iCCpG1C7C,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EAElB,IAAI82E,EAAKI,EAAuB,EAAQ,OAEpCyC,EAAMzC,EAAuB,EAAQ,MAEzC,SAASA,EAAuB/0E,GAAO,OAAOA,GAAOA,EAAIic,WAAajc,EAAM,CAAEkc,QAASlc,GAGvF,IAAIy3E,GADO,EAAI9C,EAAGz4D,SAAS,KAAM,GAAMs7D,EAAIt7D,SAE3Cre,EAAA,QAAkB45E,+BCblBx3E,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,QAiCA,SAAkBiG,EAAMwG,EAASotE,GAC/B,SAASC,EAAanyE,EAAOoyE,EAAWnD,EAAKr/C,GAC3C,MAAM1J,EAAM+oD,GAAOr/C,GAAU,EAI7B,GAHqB,iBAAV5vB,IAAoBA,EApBnC,SAAuBL,GACrBA,EAAM06C,SAAS21B,mBAAmBrwE,IAElC,MAAMlD,EAAQ,GAEd,IAAK,IAAIhB,EAAI,EAAGA,EAAIkE,EAAIjE,SAAUD,EAChCgB,EAAMyC,KAAKS,EAAI1C,WAAWxB,IAG5B,OAAOgB,EAWkC41E,CAAcryE,IAC5B,iBAAdoyE,IAAwBA,EA9BvC,SAAqB5rB,GAEnB,MAAM/pD,EAAQ,GAId,OAHA+pD,EAAKpiD,QAAQ,mBAAmB,SAAUzG,GACxClB,EAAMyC,KAAK+H,SAAStJ,EAAK,QAEpBlB,EAwB0C61E,CAAYF,KAEtD93E,MAAMC,QAAQyF,GACjB,MAAMujB,UAAU,mCAGlB,IAAKjpB,MAAMC,QAAQ63E,IAAmC,KAArBA,EAAU12E,OACzC,MAAM6nB,UAAU,+DAIlB,MAAM9mB,EAAQy1E,EAASE,EAAUzlE,OAAO3M,IAIxC,GAHAvD,EAAM,GAAgB,GAAXA,EAAM,GAAYqI,EAC7BrI,EAAM,GAAgB,GAAXA,EAAM,GAAY,IAEzBwyE,EACF,IAAK,IAAI5M,EAAM,EAAGA,EAAM,KAAMA,EAC5B4M,EAAI/oD,EAAMm8C,GAAO5lE,EAAM4lE,GAI3B,OAAO4M,IAAO,EAAIkC,EAAaz6D,SAASja,GAI1C,IACE01E,EAAa7zE,KAAOA,EACpB,MAAOyN,IAKT,OAFAomE,EAAaI,IAAMA,EACnBJ,EAAa9jD,IAAMA,EACZ8jD,GApET95E,EAAQg2B,IAAMh2B,EAAQk6E,SAAM,EAE5B,IAEgC/3E,EAF5B22E,GAE4B32E,EAFU,EAAQ,OAEGA,EAAIic,WAAajc,EAAM,CAAEkc,QAASlc,GAuBvF,MAAM+3E,EAAM,uCACZl6E,EAAQk6E,IAAMA,EACd,MAAMlkD,EAAM,uCACZh2B,EAAQg2B,IAAMA,+BClCd5zB,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EAElB,IAAI64E,EAAO3B,EAAuB,EAAQ,OAEtC4B,EAAe5B,EAAuB,EAAQ,MAElD,SAASA,EAAuB/0E,GAAO,OAAOA,GAAOA,EAAIic,WAAajc,EAAM,CAAEkc,QAASlc,GA8BvFnC,EAAA,QA5BA,SAAY0N,EAASkpE,EAAKr/C,GACD,iBAAZ7pB,IACTkpE,EAAkB,WAAZlpE,EAAuB,IAAI3L,WAAW,IAAM,KAClD2L,EAAU,MAKZ,MAAMysE,GAFNzsE,EAAUA,GAAW,IAEA4C,SAAW5C,EAAQ2rE,KAAOR,EAAKx6D,WAMpD,GAHA87D,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBvD,EAAK,CACP,MAAMzyE,EAAQozB,GAAU,EAExB,IAAK,IAAIn0B,EAAI,EAAGA,EAAI,KAAMA,EACxBwzE,EAAIzyE,EAAQf,GAAK+2E,EAAK/2E,GAGxB,OAAOwzE,EAGT,OAAO,EAAIkC,EAAaz6D,SAAS87D,iCCnCnC/3E,OAAO2b,eAAe/d,EAAS,aAAc,CAC3C2H,OAAO,IAET3H,EAAA,aAAkB,EAElB,IAAI82E,EAAKI,EAAuB,EAAQ,OAEpCkD,EAAOlD,EAAuB,EAAQ,OAE1C,SAASA,EAAuB/0E,GAAO,OAAOA,GAAOA,EAAIic,WAAajc,EAAM,CAAEkc,QAASlc,GAGvF,IAAIy3E,GADO,EAAI9C,EAAGz4D,SAAS,KAAM,GAAM+7D,EAAK/7D,SAE5Cre,EAAA,QAAkB45E,28HCRX,MAAMx5C,EAA0B,oCAK1Bi6C,EAAa,uBAKbC,EAAuB,uBAKvBC,EAAuB,uBAKvBC,EAAmB,6BAMnBC,EAAuB,uBAMvBC,EAAoB,wCAMpBC,EAAqB,yCAMrBC,EAA2B,0CAK3Bt5C,EAAqB,+BAKrBC,EAAa,uBAKbC,EAAoB,8BAKpBq5C,EAAa,uBAMbC,EACP,0CAKOC,EAAsB,+BAKtBC,EAAyB,kCAKzB93C,EAAoB,8BAKpBS,EAAoB,8BAKpBs3C,EAA4B,qCC/F5BC,EAA2B,uCAK3BC,EAAsB,iCAOtBC,EAA6B,sCAK7BC,EAAmB,mBAKnBC,EAAoB,oBAMpBC,EAAoB,oBAKpBC,EAAkB,kBAKlBC,EAA2B,2BAO3B96C,EAAyB,mCAOzBE,EAAyB,mCAMzBC,EAAsB,gCAKtB46C,EAAsB,+BAKtBx6C,EAAuB,gCAKvB3C,EAA2B,6BAK3Bo9C,EAA+B,8BAK/BC,EAAuB,gCAMvBn8C,EAA4B,uCAK5BC,GAA0B,qCAgB1Bm8C,GAAgB,0BAMhBl6C,GAAS,oBAOTm6C,GAAqB,gCAUrBC,GAA2B,mCAK3BC,GAAqB,gCAOrBC,GAAwB,mCAOxBC,GAAyB,mCAOzBC,GAAgC,0CAQhCC,GAAuB,gCAKvBt6C,GAAmB,6BAKnBu6C,GAAiB,4BAKjBC,GAAY,uBAMZC,GAAmC,8CAKnCv6C,GAA2B,oCAgB3Bw6C,GACP,6CAKOC,GACP,yCAMOC,GACP,0CAOOC,GAAa,uBAKbx5C,GAAuB,gCAMvBy5C,GAAqB,+BAKrBp5C,GAAyB,kCAMzByB,GACP,2CAWOC,GACP,2CAKO23C,GACP,wCAKOC,GAAgB,2BAKhBj4C,GAAkB,4BAKlBC,GAAmB,6BAKnBi4C,GAAmB,8BAQnBC,GAAc,wBAKdC,GAA4B,gCAO5BC,GAAqB,8BAQrBC,GAAgB,0BAQhBp4C,GACP,wCAMOq4C,GAAc,wBAKdC,GAAY,sBAKZC,GAAoB,yBAKpBC,GAAsB,2BAKtBC,GAAmB,8BAKnBC,GAAoB,8BAKpBC,GAAqB,+BAKrBC,GAAkB,4BAQlBr5C,GAAyB,oCAQzBC,GAAyB,oCAYzBE,GAAwB,mCASxBC,GAAqC,gDASrCC,GAAqC,2GCva3C,MAAMi5C,GAAuB,sDCQvBC,GAAoB,wBAMpBC,GACP,oCAMOC,GACP,wCAKOC,GAAU,cAKVC,GAAY,gBAMZC,GAAoB,wBAKpBC,GACP,kCAMOC,GACP,kCAMO14B,GAAU,cAMV24B,GAAoB,0BAKpBC,GAAwB,wBAMxBC,GAAyB,6BCxEhCC,GAA6B,GA6CnC,SAASC,GAAgBtjE,EAAOzN,EAASs4D,GACrC,GAAqB,iBAAV7qD,QAA4C,IAAfA,EAAMlV,KAkB1C,OARAnC,KAAK46E,IAAM,CACPvjE,MAAAA,EACAmqD,YAAa53D,EACbs4D,QAASA,GAAW/jE,MAAMC,QAAQ8jE,GAC5BA,EAAQ17D,MAAM,QACdO,GAGFsQ,EAAMlV,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACDnC,KAAKmC,KAAO04E,GACZ76E,KAAKjB,QACC27E,GAA2B16E,KAAKmC,OAC3BnC,KAAK46E,IAAI1Y,SAAW,IAAIj5D,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDjJ,KAAKmC,KAAO04E,GACZ76E,KAAKjB,QACC27E,GAA2B16E,KAAKmC,OAC3BnC,KAAK46E,IAAI1Y,SAAW,IAAIj5D,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBAAwB,CACzB,MAAMk6D,EAAiB9rD,EAAM8rD,gBAAkB9rD,EAAM6rD,WAKjDt5D,GACOA,EAAQ+3D,SACNO,GAAWA,EAAQt2D,QAAQ,UAAY,KACrB,aAAnBu3D,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXnjE,KAAKmC,KAAO04E,GACZ76E,KAAKjB,QACC27E,GAA2B16E,KAAKmC,MA6CtD,SAA2C24E,EAAsBtZ,GAC7D,GAAIA,GAAeA,EAAYG,OAASH,EAAYG,MAAMb,UACtD,OAAQga,GACR,IAAK,QACD,OAAOtZ,EAAYG,MAAMb,UAAUia,SACvC,IAAK,SACD,OAAOvZ,EAAYG,MAAMb,UAAUka,UACvC,QACI,OAAOxZ,EAAYG,MAAMb,UAAUga,IAAyB,GAIpE,MAAO,GAxDeG,CACE9X,EACAv5D,KAEZ5J,KAAKmC,KAAO04E,GACZ76E,KAAKjB,QACC27E,GAA2B16E,KAAKmC,MAC5BkV,EAAM8rD,gBAEpB,MAGJ,QACInjE,KAAKmC,KAAO04E,GACZ76E,KAAKjB,QACCsY,EAAMtY,SAAW27E,GAA2B16E,KAAKmC,UAGxD,IAAqB,iBAAVkV,EAWd,MAAM,IAAI5I,MAAM,qBAVZisE,GAA2BrjE,IAC3BrX,KAAKmC,KAAOkV,EACZrX,KAAKjB,QAAU6K,GAAW8wE,GAA2BrjE,IAKrDrX,KAAKjB,QAAUsY,EAMvBrX,KAAKmkB,MAAQ9M,EAAM8M,QAAU,IAAI1V,OAAS0V,MAlI9Cu2D,GAA2BG,IACrB,sCACNH,GAA2BG,IACrB,sCACNH,GAA2BG,IACrB,mCACNH,GAA2BG,IACrB,mCACNH,GAA2BG,IACrB,kCACNH,GAA2BG,IACrB,6BACNH,GAA2BG,IACrB,4CACNH,GAA2BG,IACrB,2CACNH,GAA2BG,IACrB,sCACNH,GAA2BG,IACrB,iDACNH,GAA2BG,IACrB,kCACNH,GAA2BG,IACrB,iDA8GNF,GAAgBp8E,UAAYD,OAAOe,OAAOoP,MAAMlQ,WAChDo8E,GAAgBp8E,UAAUK,YAAc+7E,GAuBxC,udCrIO,MAAMO,GAAmB,cAMnBC,GAAY,OAMZC,GAAa,QAwHbC,GAA0B,0BAyB1BC,GAAe,eAwFrB,SAASC,GAAsBrxE,EAAQ41C,GAC1C,MAAO,CACH51C,OAAAA,EACA41C,WAAAA,EACA3xC,OAAQ,aACR3O,KAAM07E,IAeP,MAAMM,GAAoC,SAASC,EAAO37B,GAC7D,MAAM51C,EAAS,2BAEf,MAAO,CACHA,OAAAA,EACAwxE,cAAeD,EACf37B,WAAAA,EACA3xC,OAAQjE,EACR1K,KAAM07E,KA8CDS,GAA0B,SAASzxE,EAAQ41C,EAAa,IACjE,MAAO,CACHtgD,KAAM07E,GACN/sE,OAAQ,iBACRjE,OAAAA,EACA41C,WAAAA,IA0BK87B,GAAoB,SAAS1xE,EAAQ41C,EAAa,IAC3D,MAAO,CACHtgD,KAAM07E,GACNhxE,OAAAA,EACAiE,OAAQ,SACR2xC,WAAAA,IA2BK+7B,GAAiB,SAAS3xE,EAAQ41C,EAAa,IACxD,MAAO,CACHtgD,KAAM07E,GACNhxE,OAAAA,EACAiE,OAAQ,MACR2xC,WAAAA,IAOKg8B,GAA2B,SAASC,GAC7C,MAAO,CACHv8E,KAAM07E,GACNhxE,OAAQ,iBACR6xE,UAAAA,IA+CKC,GAAsB,SAASl8B,GACxC,MAAO,CACHtgD,KAAM07E,GACNhxE,OAAQ,YACR41C,WAAAA,ICndKm8B,GAAc,wBAOdC,GAAkB,6BAKlBC,GAAkB,6BASlBC,GAAmB,6BAKnBC,GAAmB,qDChCzB,MAAMC,GAAS,SAETC,GAAQ,QAERC,GAAU,UAEVC,GAAoB,YAEpBC,GAAS,SAETC,GAAO,OAEPC,GAAW,WAEXC,GAAe,eAEfC,GAAU,UCFjBC,GAAwB,CAC1B,OAAUT,GACV,SAAYA,GACZ,MAASC,GACT,QAAWC,GACX,oBAAqBC,GACrB,OAAUC,IA2Cd,SAASM,KACL,MAAM9K,EAAYvR,UAAUuR,UAE5B,GAAIA,EAAUrsE,MAAM,YAAa,CAC7B,MAAM8C,EAAUupE,EAAUrsE,MAAM,6BAA6B,GAE7D,MAAO,CACH1D,KAAMy6E,GACNj0E,QAAAA,GAED,QAAwC,IAA7BlM,OAAOwgF,kBACrB,MAAO,CACH96E,KAAMy6E,GACNj0E,aAAS5B,GAUrB,SAASm2E,KACL,MAAMhL,EAAYvR,UAAUuR,UAE5B,GAAIA,EAAUrsE,MAAM,eAAgB,CAChC,MAAM8C,EAAUupE,EAAUrsE,MAAM,yBAAyB,GAEzD,MAAO,CACH1D,KAAMw6E,GACNh0E,QAAAA,IASZ,SAASw0E,KACL,MAAMt3E,EACA86D,UAAUuR,UAAUrsE,MAAM,wCAChC,IAAI8C,EAMJ,GAAI9C,GAA+B,gBAAtB86D,UAAUyc,QAA2B,CAC9C,IAAIj7E,EASJ,OAPI0D,GAASA,EAAMtG,OAAS,IACxB4C,EAAO0D,EAAM,GACb8C,EAAU9C,EAAM,IAEpB1D,IAASA,EAAO,gBAChBwG,IAAYA,EAAU,WAEf,CACHxG,KAAM06E,GACNl0E,QAAAA,IC3HZ,MAAM00E,WAA0Bn3D,GAAa,wCAK9B,MAL8B,+GAYzC0gB,QACI5mC,KAAKs9E,SAAW,GAQhB/9E,aACA,OAAOjB,OAAOiG,KAAKvE,KAAKs9E,UAAU/9E,OAStCg2D,QAAQgoB,GACJ,OAAOv9E,KAAKs9E,SAASC,GAWzB5xB,QAAQ4xB,EAASC,GACbx9E,KAAKs9E,SAASC,GAAWC,EAS7B5xB,WAAW2xB,UACAv9E,KAAKs9E,SAASC,GASzB94E,IAAI6D,GACA,MAAM/D,EAAOjG,OAAOiG,KAAKvE,KAAKs9E,UAE9B,KAAI/4E,EAAKhF,QAAU+I,GAInB,OAAO/D,EAAK+D,GAQhBk9C,YACI,OAAOv6B,KAAKF,UAAU/qB,KAAKs9E,WA8H5B,MAAMG,GAAoB,IAvHjC,cAAgCv3D,GAK5BtnB,cACI8+E,QAEA,IACI19E,KAAKs9E,SAAW7gF,OAAOkhF,aACvB39E,KAAK49E,uBAAwB,EAC/B,MAAOC,IAIJ79E,KAAKs9E,WACNxzE,QAAQie,KAAK,8BACb/nB,KAAKs9E,SAAW,IAAID,GACpBr9E,KAAK49E,uBAAwB,GASrCE,yBACI,OAAO99E,KAAK49E,sBAQhBh3C,QACI5mC,KAAKs9E,SAAS12C,QACd5mC,KAAK4nB,KAAK,WAQVroB,aACA,OAAOS,KAAKs9E,SAAS/9E,OAUzBg2D,QAAQgoB,GACJ,OAAOv9E,KAAKs9E,SAAS/nB,QAAQgoB,GAUjC5xB,QAAQ4xB,EAASC,EAAUO,GAAuB,GAC9C/9E,KAAKs9E,SAAS3xB,QAAQ4xB,EAASC,GAE1BO,GACD/9E,KAAK4nB,KAAK,WAQlBgkC,WAAW2xB,GACPv9E,KAAKs9E,SAAS1xB,WAAW2xB,GACzBv9E,KAAK4nB,KAAK,WAUdnjB,IAAInF,GACA,OAAOU,KAAKs9E,SAAS74E,IAAInF,GAQ7BkmD,YACI,GAAIxlD,KAAK89E,yBACL,OAAO99E,KAAKs9E,SAAS93B,YAGzB,MAAMjmD,EAASS,KAAKs9E,SAAS/9E,OACvBy+E,EAAsB,GAE5B,IAAK,IAAI1+E,EAAI,EAAGA,EAAIC,EAAQD,IAAK,CAC7B,MAAMmF,EAAMzE,KAAKs9E,SAAS74E,IAAInF,GAE9B0+E,EAAoBv5E,GAAOzE,KAAKs9E,SAAS/nB,QAAQ9wD,GAGrD,OAAOwmB,KAAKF,UAAUizD,KC3MxBjxD,IAASmB,EAAAA,EAAAA,qDCDf,ODee,cFiKA,MAQXtvB,YAAYq/E,GACR,IAAI97E,EAAMwG,EAGV,GADA3I,KAAKk+E,QAAUC,GAAAA,UAAiBxd,UAAUuR,gBACf,IAAhB+L,EAA6B,CACpC,MAAMG,EArDlB,SAAiBC,GACb,IAAIJ,EACJ,MAAMK,EAAY,CACdnB,GACAH,GACAE,IAIJ,IAAK,IAAI59E,EAAI,EAAGA,EAAIg/E,EAAU/+E,OAAQD,IAElC,GADA2+E,EAAcK,EAAUh/E,KACpB2+E,EACA,OAAOA,EAIf,MAAM97E,EAAOk8E,EAAOh9D,iBAEpB,OAAIlf,KAAQ46E,GACD,CACH56E,KAAM46E,GAAsB56E,GAC5BwG,QAAS01E,EAAO98D,sBAKxB08D,EAhIJ,WACI,MAAM/L,EAAYvR,UAAUuR,UACtB+L,EAAc,CAChB97E,KAAM26E,GACNn0E,aAAS5B,GAGb,GAAImrE,EAAUrsE,MAAM,YAAcqsE,EAAUrsE,MAAM,QAE9C,GAAIqsE,EAAUrsE,MAAM,WAAY,CAE5B,MAAM8C,EAAUupE,EAAUrsE,MAAM,oBAAoB,GAEhDN,OAAOuF,SAASnC,EAAS,IAAM,KAC/Bs1E,EAAY97E,KAAOm6E,GACnB2B,EAAYt1E,QAAUA,QAG1Bs1E,EAAY97E,KAAOm6E,GACnB2B,EAAYt1E,QAAUupE,EAAUrsE,MAAM,oBAAoB,GAIlE,OAAOo4E,EAyGOM,GACVN,GAIG,CACH97E,KAAM26E,GACNn0E,aAAS5B,IAoBuBgL,CAAQ/R,KAAKk+E,SAEzC/7E,EAAOi8E,EAAoBj8E,KAC3BwG,EAAUy1E,EAAoBz1E,aACvBs1E,EAAY97E,QAAQ46E,IAC3B56E,EAAO46E,GAAsBkB,EAAY97E,MACzCwG,EAAUs1E,EAAYt1E,UAEtBxG,EAAO26E,GACPn0E,OAAU5B,GAGd/G,KAAKw+E,MAAQr8E,EACbnC,KAAKy+E,SAAW91E,EAOpB+1E,UACI,OAAO1+E,KAAKw+E,MAOhBG,WACI,OAAO3+E,KAAKw+E,QAAUlC,GAO1BsC,UACI,OAAO5+E,KAAKw+E,QAAUjC,GAO1BnM,YACI,OAAOpwE,KAAKw+E,QAAUhC,GAO1BqC,cACI,OAAO7+E,KAAKw+E,QAAU/B,GAO1BqC,WACI,OAAO9+E,KAAKw+E,QAAU9B,GAO1BqC,SACI,OAAO/+E,KAAKw+E,QAAU7B,GAO1BqC,aACI,OAAOh/E,KAAKw+E,QAAU5B,GAO1BqC,gBACI,OAAOj/E,KAAKw+E,QAAU3B,GAO1BqC,aACI,OAAOl/E,KAAKy+E,SAgBhBU,gBAAgBC,GACZ,GAAIp/E,KAAKy+E,SACL,OAAOz+E,KAAKk+E,QAAQ57D,UAAU88D,GAatCC,qBAAqB12E,GACjB,OAAO3I,KAAKm/E,gBAAgB,CAAE,CAACn/E,KAAKw+E,OAAS,IAAG71E,MAYpD22E,kBAAkB32E,GACd,OAAO3I,KAAKm/E,gBAAgB,CAAE,CAACn/E,KAAKw+E,OAAS,IAAG71E,MAapD42E,iBAAiB52E,GACb,OAAO3I,KAAKm/E,gBAAgB,CAAE,CAACn/E,KAAKw+E,OAAS,IAAG71E,QElUpD/J,cACI8+E,QACA3wD,GAAOtf,KACF,sBAAqBzN,KAAK0+E,mBAAmB1+E,KAAKk/E,gBAU3DM,8BACI,OAAOx/E,KAAKy/E,mBAAqBz/E,KAAK0/E,gBAe1CD,kBACI,OAAQz/E,KAAK2+E,YACN3+E,KAAKg/E,cACLh/E,KAAK++E,UACL/+E,KAAK4+E,aACJ5+E,KAAK0/E,gBAQjBC,eACI,MAAM,UAAEzN,EAAF,eAAa0N,EAAb,SAA6B99D,GAAa6+C,UAEhD,OAAOkf,QAAQ3N,EAAUrsE,MAAM,qBACvB+5E,GAAkBA,EAAiB,GAAK,WAAW35E,KAAK6b,GAWpE49D,gBAEI,OAAO1/E,KAAKk+E,QAAQr7D,SAAS,gBACY,IAA3B89C,UAAUC,mBAC8B,IAAxCD,UAAUC,aAAawC,mBACM,IAA7B3mE,OAAO61E,mBAEdh0E,OAAOiG,KAAK+tE,kBAAkB/zE,WAAWqN,QAAQ,qBAAuB,EAQnFk0E,QACI,MAAO,eAAgBrjF,QAAUA,OAAOsjF,WAAW,6BAA6B17D,QAQpF03C,cACI,OAAQ/7D,KAAKy/E,mBAAqBz/E,KAAKggF,4BAjGX,IAkGrBhgF,KAAKowE,aACLpwE,KAAKi/E,iBACLj/E,KAAK0/E,gBAShBO,qCACI,OAAOjgF,KAAKowE,aAAepwE,KAAKs/E,kBAAkB,MAStDY,qCACI,OAAOlgF,KAAKy/E,mBAAqBz/E,KAAKi/E,gBAQ1CkB,8BAGI,OAAQngF,KAAKowE,cAAgBpwE,KAAK0/E,gBAOtCU,2BACI,OAAOP,QAAQpjF,OAAO61E,mBACf,wBAAyB71E,OAAO61E,kBAAkB/zE,WAClD9B,OAAOirE,qBAC0C,IAA1CjrE,OAAOirE,eAAe2Y,mBAI5BrgF,KAAK0/E,gBAOjBY,4BACI,OAAO3f,UAAUC,mBACuC,IAA1CD,UAAUC,aAAa2f,qBACqB,IAA5C5f,UAAUC,aAAa93C,iBAOzC03D,sCACI,OAAOxgF,KAAKy/E,mBAAqBz/E,KAAKi/E,iBAAmBj/E,KAAK0/E,gBAQlEe,8BACI,YAA6C,IAA/BhkF,OAAOikF,qBACdA,oBAAoBC,oBAAoB/0E,QAAQ,aAAe,EAM1Eg1E,wBACI,YAAwC,IAA1BnkF,OAAOirE,gBACdppE,OAAOiG,KAAKmjE,eAAenpE,WAAWqN,QAAQ,8BAAgC,IAI7E5L,KAAK0/E,gBAQjBmB,wBASI,OAAQ7gF,KAAKowE,YAQjB0Q,6BACI,OAAO9gF,KAAKy/E,mBAAqBz/E,KAAKi/E,iBAAmBj/E,KAAK0/E,gBAQlEqB,cACI,OAAQ/gF,KAAKi/E,gBAOjB+B,uBACI,OAAO,EAOXC,0BACI,YAA4C,IAA9BtgB,UAAUmD,sBACkB,IAA3BnD,UAAUC,mBAET,IADED,UAAUC,aAAakD,gBAa7Cod,2BACI,OAAOrB,QAAQpjF,OAAO0kF,uBAO1BC,4BACI,QAAqC,IAAxB3kF,OAAO8pE,eACb9pE,OAAO8pE,aAAahoE,UAAU8iF,qBACjC,OAAO,EAKX,MAAM55E,EAAS,IAAI65E,eAEnB,IAGI,OAFA7kF,OAAO8kF,YAAY95E,EAAQ,IAAK,CAAEA,KAE3B,EACT,SACE,OAAO,GAOf+5E,mBACI,OAAO3B,QAAQpjF,OAAO8pE,cACf9pE,OAAO8pE,aAAa8Z,iBACpB5jF,OAAO8pE,aAAa8Z,gBAAgB,SAAS9pC,OAAO1oC,MAAKolC,GAA4B,cAAnBA,EAAM7hB,YACxE30B,OAAOirE,gBACPjrE,OAAOirE,eAAe2Y,iBACtB5jF,OAAOirE,eAAe2Y,gBAAgB,SAAS9pC,OAAO1oC,MAAKolC,GAA4B,cAAnBA,EAAM7hB,YAQrFihD,sBACI,OAAQryE,KAAKi/E,gBAQjBwC,uBACI,OAAOzhF,KAAKy/E,kBAQhBO,2BACI,GAAIhgF,KAAKy/E,kBAAmB,CAExB,GAAIz/E,KAAK++E,SAEL,OAAOx5E,OAAOuF,SAAShO,QAAQC,SAASwgB,SAAU,IAQtD,MAAMmkE,EAAK/gB,UAAUuR,UAErB,GAAIwP,EAAG77E,MAAM,UAIT,OAFMN,OAAOuF,SAAS42E,EAAG77E,MAAM,oBAAoB,GAAI,IAM/D,OAAQ,uJE7UhB,MAGMknB,IAASmB,EAAAA,EAAAA,qDAoVf,OAxSA,MAIItvB,cACIoB,KAAK+0B,QAQTA,QAOI/0B,KAAK2hF,UAAW,EAMhB3hF,KAAK4hF,kBAAoB,IAAI97C,IAO7B9lC,KAAKyqC,MAAQ,GAMbzqC,KAAK6hF,oBAAsB,GAO3B7hF,KAAK8hF,eAAiB,GAEtB9hF,KAAK+hF,uBAAuB,CACxB,WAAcphB,UAAUuR,UACxB,aAAgBhxD,GAAQw9D,YAOhCsD,UACIj1D,GAAOhF,KAAK,mCAER/nB,KAAK4hF,mBAAqB5hF,KAAK4hF,kBAAkBrwD,KAAO,GACxDvxB,KAAK4hF,kBAAkBp9E,SAAQmiB,IACI,mBAApBA,EAAQq7D,SACfr7D,EAAQq7D,aAKpBhiF,KAAKiiF,qBAAqB,IAC1BjiF,KAAK2hF,UAAW,EAQpBM,qBAAqB/qD,GACjB,GAAIl3B,KAAK2hF,SACL,OAGJ3hF,KAAK4hF,kBAAoB,IAAI97C,IAAI5O,GAEjCl3B,KAAKkiF,qBAGL,MAAMz3C,EAAQzqC,KAAKyqC,MAEnBzqC,KAAKyqC,MAAQ,KACTA,GACAA,EAAMjmC,SAAQ+yB,GAASv3B,KAAKmiF,WAAW5qD,KAS/C2qD,qBACIliF,KAAK4hF,kBAAkBp9E,SAAQmiB,IAC3B,IACIA,EAAQy7D,kBAAkBpiF,KAAK6hF,qBACjC,MAAOxqE,GACL0V,GAAOhF,KACA,uEAAsB1Q,SAezC0qE,uBAAuBM,GACnBriF,KAAK6hF,mWAAL,IACO7hF,KAAK6hF,oBACLQ,GAGPriF,KAAKkiF,qBAQTI,kBAAkBngF,GACdnC,KAAK8hF,eAAiB3/E,EACtBnC,KAAK+hF,uBAAuB,CAAE,gBAAmB5/E,IAgBrDogF,UAAUC,EAAWH,EAAa,IAC9B,GAAIriF,KAAK2hF,SACL,OAGJ,IAAIpqD,EAAQ,KAEa,iBAAdirD,EACPjrD,EAAQ,CACJ/3B,KAAM07E,GACNhxE,OAAQs4E,EACR9G,cAAe8G,EACfr0E,OAAQq0E,EACR1iC,WAAYuiC,GAEY,iBAAdG,IACdjrD,EAAQirD,GAGPxiF,KAAKyiF,sBAAsBlrD,GAOhCv3B,KAAKmiF,WAAW5qD,GANZxK,GAAO1V,MACF,mCAAkC4T,KAAKF,UAAUwM,MAoB9DkrD,sBAAsBlrD,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAM/3B,OACP+3B,EAAM/3B,KAAO07E,IAGjB,MAAM17E,EAAO+3B,EAAM/3B,KAEnB,OAAIA,IAAS07E,IAAoB17E,IAAS27E,IPxN3B,OOyNR37E,GAAoBA,IAAS47E,IAChCruD,GAAO1V,MAAO,uBAAsB7X,MAE7B,GAGPA,IAAS27E,GACF0E,QAAQtoD,EAAMp1B,OAKzBo1B,EAAMrtB,OAASqtB,EAAMrtB,QAAUqtB,EAAMp1B,MAAQo1B,EAAMmkD,cACnDnkD,EAAMmkD,cAAgBnkD,EAAMmkD,eAAiBnkD,EAAMp1B,MAAQo1B,EAAMrtB,OACjEqtB,EAAMppB,OAASopB,EAAMppB,QAAUopB,EAAMp1B,MAAQo1B,EAAMrtB,QAC5CqtB,EAAMmkD,cAERnkD,EAAMrtB,QAAWqtB,EAAMmkD,eAAkBnkD,EAAMppB,UAQhD3O,IAAS47E,KACT7jD,EAAMmrD,WAAanrD,EAAMmrD,YAAc,sBACvCnrD,EAAMorD,cAAgBprD,EAAMorD,eAAiB,aACjB,eAAxBprD,EAAMorD,eAAmCprD,EAAMqrD,cAC/CrrD,EAAMqrD,YAAc5iF,KAAK8hF,gBAIxBvqD,EAAMmrD,YAAenrD,EAAMsrD,UACxBtrD,EAAMorD,eAAkBprD,EAAMqrD,gBAClC71D,GAAO1V,MACH,gFAGG,IArBX0V,GAAO1V,MACH,6DAEG,IAgCfyrE,iBAAiBvrD,GACb,QAAIv3B,KAAKyqC,QACLzqC,KAAKyqC,MAAM1nC,KAAKw0B,GAIZv3B,KAAKyqC,MAAMlrC,OAxTJ,KAyTPS,KAAKyqC,MAAMl9B,OAAO,EAAG,IAGlB,GAYf40E,WAAW5qD,GACHv3B,KAAK8iF,iBAAiBvrD,IAGtBv3B,KAAK4hF,kBAAkBp9E,SAAQmiB,IAC3B,IACIA,EAAQ47D,UAAUhrD,GACpB,MAAO70B,GACLqqB,GAAOhF,KAAM,kCAAiCrlB,8JCrVlE,MAAMqqB,GAASpoB,EAAAA,MAAAA,6CAQTo+E,GASc,iBAmCdC,GACK,QADLA,GAEK,QAFLA,GAGe,gBAOrB,IAAIC,GAcW,MAAMC,GAOW,6BAAC7rE,EAAO8T,GAC5B+3D,GAAUC,SAAqB,YAAV9rE,GACrB0V,GAAO1V,MAAO,sBAAqBA,UAAc8T,KAUrC,qBAAC9T,EAAO8T,GAIxB,GAHA4B,GAAOhjB,IAAK,yBAAwBsN,SAAa8T,KAGnC,YAAV9T,EACA,OAGJ6rE,GAAUE,oBAAqB,EAG/B,IAAIC,GAAmB,EACnBC,EAAkB,KAEtB,IAAK,MAAMC,KAAqBL,GAAUM,QAAQ73E,SACzC43E,EAAkBE,YACnB12D,GAAOw4B,MAAM,+BACTg+B,EAAkBG,kBAClBL,GAAmB,EACdC,IACDA,EAAkBC,KAM7BF,GAILH,GAAUS,kBAAkBL,GASR,yBAACM,GAIrB,MAAMC,EAAgBD,EAAWE,OAC3BC,EAAYH,EAAWI,eAG7B,IAAK,MAAM9c,KAAUgc,GAAUe,aAC3B,GAAI/c,EAAO1nE,OAASwjF,GAAkB,CAClC,MAAMkB,EAAYhd,EAAO5yD,KAEzB4uE,GAAUiB,aACNP,EACAM,EAAU1kF,KACV0kF,EAAU7sE,MACV6sE,EAAU1e,IAAMue,QACjB,GAAI7c,EAAO1nE,OAASwjF,GAAkB,CAIzC,MAAMoB,EAAYld,EAAO5yD,KAEzB4uE,GAAUC,QAAQkB,gBACdnd,EAAO1B,IAAMue,EACbK,EAAU7sD,MACVssD,EACAO,EAAUA,gBACX,GAAIld,EAAO1nE,OAASwjF,GAA4B,CACnD,MAAM1uE,EAAO4yD,EAAO5yD,KAEpB4uE,GAAUC,QAAQmB,uBACdpd,EAAO1B,IAAMue,EACbzvE,EAAKiwE,YACLV,EACAvvE,EAAK/K,KACL+K,EAAKkwE,WACLlwE,EAAKsuE,aAIjBM,GAAUe,aAAa1kF,OAAS,EAajB,oBAACikE,EAAIhkE,EAAM6X,EAAOmuD,GACjC,IAAIif,EAASptE,EAERotE,IACD13D,GAAOhF,KAAK,uBACZ08D,EAAS,IAAIh2E,MAAM,kBAEnBy0E,GAAUE,oBAAsB5f,EAChC0f,GAAUC,QAAQuB,YAAYlf,EAAIhC,EAAGsgB,OAAQtkF,EAAMilF,GAEnDvB,GAAUe,aAAalhF,KAAK,CACxBvD,KAAMwjF,GACN1uE,KAAM,CACF+C,MAAOotE,EACPjf,GAAAA,EACAhmE,KAAAA,KAkBG,oBAACgkE,EAAIjsC,EAAO6sD,GAC3B,MAAM5e,EAAKhC,GAAMA,EAAGwgB,eACdF,EAAStgB,GAAMA,EAAGsgB,OAEpBZ,GAAUE,oBAAsB5f,EAChC0f,GAAUC,QAAQkB,gBAAgB7e,EAAIjuC,EAAOusD,EAAQM,GAErDlB,GAAUe,aAAalhF,KAAK,CACxB+gF,OAAAA,EACAte,GAAAA,EACAhmE,KAAMwjF,GACN1uE,KAAM,CAAEijB,MAAAA,EACJ6sD,UAAAA,KAaiB,kCAACO,GAC9B,MAAMC,EAAkB,CACpB,yBACA,kBACA,oBAKJ,IAAK,MAAMj4D,KAAci4D,EAAiB,CACtC,MAAMC,EAAiBF,EAAWh4D,GAElCg4D,EAAWh4D,GAAc,YAAYm4D,GACjC,IACI,OAAOD,EAAet8E,MAAMo8E,EAAYG,GAC1C,MAAOpiF,GACL+0B,KAAAA,iBAAsC/0B,KAIlD,MAAMqiF,EAAe,CACjB,yBACA,kBACA,oBAKJ,IAAK,MAAMp4D,KAAco4D,EAAc,CACnC,MAAMF,EAAiBF,EAAWh4D,GAElCg4D,EAAWh4D,GAAc,YAAYm4D,GACjC/3D,GAAOw4B,MAAM54B,EAAYm4D,GACzBD,EAAet8E,MAAMo8E,EAAYG,IAGzC,MAAME,EAAsBL,EAAWD,YAGvCC,EAAWD,YAAc,SAASlf,EAAIhC,EAAIhkE,KAASsI,GAI3CtI,IAASujF,GAQJ7hE,GAAQ+9D,iBACTn1E,SAAWA,QAAQy7C,MAAM,cAAeigB,EAAIhC,EAAIhkE,GAGpDutB,GAAOw4B,MAAM,cAAeigB,EAAIhC,EAAIhkE,KAASsI,GAEjD,IACIk9E,EAAoBvmF,KAAKkmF,EAAYnf,EAAIhC,EAAIhkE,KAASsI,GACxD,MAAOm9E,GACDzlF,IAASujF,GACTj5E,SAAWA,QAAQuN,MAAM,cAAe4tE,GAExCxtD,KAAAA,iBAAsCwtD,KAa3CzB,qBAKP,OAJKP,KACDA,GAAW,IAAIn9C,KAGZm9C,GAiBO,mBAACr5E,GACf,GAAIs5E,GAAUC,QACV,MAAM,IAAI10E,MAAM,mDAEpB,IACI,MAAMy2E,EAAmBC,UAEzBjC,GAAUC,QAAU,IAAI+B,EACxBhC,GAAUkC,2BAA2BlC,GAAUC,SAC/CD,GAAUmC,OAAS,CACfC,UAAW17E,EAAQ07E,UACnBC,SAAU37E,EAAQ27E,UAEtBrC,GAAUsC,YAAc57E,EAAQ47E,YAChCtC,GAAUuC,gBAAkB77E,EAAQ67E,gBAEpC,MAAMC,iVAAe,IAAK97E,EAAQ87E,cAMlC,GAJI97E,EAAQ+7E,kBACRD,EAAaE,mBAAsB,GAAEh8E,EAAQ+7E,oBAAoBzkE,GAAQw9D,cAGzE90E,EAAQk6E,OAAQ,CAEhB,MAAMj+E,EAAQ+D,EAAQk6E,OAAOj+E,MAAM,gBAGnC6/E,EAAaG,OAASj8E,EAAQi8E,QAAWhgF,GAASA,EAAM,IAAO,IAInEq9E,GAAUC,QAAQ2C,WACd5C,GAAUsC,YACVtC,GAAUuC,gBACVvC,GAAUmC,OACVnC,GAAU6C,mBACVh/E,EACA2+E,GAEJ,MAAMM,EAAqBp8E,EAAQo8E,mBAcnC,OAZIA,IACA9C,GAAUC,QAAQ8C,uBAAuBD,GAEzCA,IAAqB/jB,MAAKhwD,IAClBA,GACA8a,GAAOtf,KAAK,2BACNwd,KAAKnmB,MAAMmN,GAAQi0E,cAGhC/Z,OAAM,WAGJ,EACT,MAAOzpE,GAQL,OAJA+0B,KAAAA,iBAAsC/0B,GACtCwgF,GAAUC,QAAU,KACpBp2D,GAAO1V,MAAM3U,IAEN,GAWY,8BACvB,OAAOm9E,QAAQqD,GAAUC,SASG,iCAACgD,EAAa3iB,GAC1C0f,GAAUkD,aAAa5iB,EArYT,mBAqY2C2iB,GASpC,0BAACzjF,EAAG8gE,GACzB,IACI0f,GAAUiB,aACN3gB,EACAuf,GACArgF,EACA8gE,GAAMA,EAAGwgB,gBACf,MAAO3sE,GAIDvN,SAAqC,mBAAlBA,QAAQuN,OAE3BvN,QAAQuN,MAAM,4BAA6BA,IAcpC,oBAACgvE,EAAcC,EAASC,GACvC,OAAO,IAAIjgE,SAAQ,CAACC,EAAS1U,KACzB,GAAIqxE,GAAUC,QACVD,GAAUC,QAAQqD,iBACdH,EACA,CACIhB,OAAQnC,GAAUmC,OAClBiB,QAAAA,EACAC,QAAAA,IAEJ,CAACvwD,EAAQj3B,KACU,YAAXi3B,EACAzP,EAAQxnB,GAER8S,EAAO9S,UAGhB,CACH,MAAMy4B,EAAS,sDAEfzK,GAAO1V,MAAMmgB,GACb3lB,EAAO2lB,OAWU,8BAAC90B,EAAG8gE,GAC7B0f,GAAUiB,aAAa3gB,EAneb,eAme6C9gE,EAAG,MAS1C,qBAAC+jF,EAAMjnF,EAAMgkE,GAC7B,IAAIjsC,EAGAA,EADS,UAAT/3B,EACQinF,EA/dJ,aACC,cAgeGA,EAneL,YACE,cAqeTvD,GAAUkD,aAAa5iB,EAAIjsC,GAe/B34B,YAAY8nF,EAAK98E,GACb5J,KAAK8jF,OAASl6E,EAAQk6E,OACtB9jF,KAAK0mF,IAAMA,EACX1mF,KAAKgkF,eAAiB0C,EAAI1C,eAC1BhkF,KAAK2mF,aAAe/8E,EAAQ+8E,cAxeR,QAyepB3mF,KAAKyjF,WAAY,EAEjBP,GAAUM,QAAQz/C,IAAI/jC,MAElBkjF,GAAUE,qBACVpjF,KAAK0jF,gBAK0B,IAA3BR,GAAUM,QAAQjyD,MAClB2xD,GAAUS,kBAAkB3jF,OAUxC0jF,gBACI32D,GAAOtf,KAAK,eAAgBzN,KAAK2mF,cACjC,IACI,MAAMC,EAAmB,CACrBC,mBACI7mF,KAAK0mF,IAAII,MACH5D,GAAUC,QAAQ4D,aAAaC,KAC/B9D,GAAUC,QAAQ4D,aAAa1Y,QAEvC5lD,EACAy6D,GAAUC,QAAQ8D,aAChBjnF,KAAKgkF,eACLhkF,KAAK2mF,aACLzD,GAAUC,QAAQ+D,YAAYC,UAC9BnnF,KAAK8jF,OACL8C,EACA1D,GAAUkE,uBAElBpnF,KAAKyjF,WAAY,EAEjB,MAAMrpB,EAAyB,YAAf3xC,EAAIuN,OAMpB,OAJKokC,GACDrtC,GAAO1V,MAAM,kCAAmCoR,EAAI1pB,SAGjDq7D,EAET,MAAO/iD,GAGL,OAFAogB,KAAAA,iBAAsCpgB,IAE/B,GAoBfgwE,4BACQ99E,EACAsoB,EACAy1D,EACA9C,EACA5B,GACJ,IAAKM,GAAUC,QACX,OAGJ,MAAMoB,EAAc1yD,EAAUqxD,GAAUmC,OAASiC,EAE7CpE,GAAUE,mBACVF,GAAUC,QAAQmB,uBACdtkF,KAAKgkF,eACLO,EACAvkF,KAAK8jF,OACLv6E,EACAi7E,EACA5B,GAEJM,GAAUe,aAAalhF,KAAK,CACxBvD,KAAMwjF,GACNxd,GAAIxlE,KAAKgkF,eACT1vE,KAAM,CACFiwE,YAAAA,EACA3B,YAAAA,EACAr5E,KAAAA,EACAi7E,WAAAA,KAYhB+C,2BACIrE,GAAUkD,aAAapmF,KAlmBV,mBAymBjBwnF,qBACQtE,GAAUE,oBACVF,GAAUC,QAAQkB,gBACdrkF,KAAKgkF,eACLd,GAAUC,QAAQsE,YAAYC,iBAC9B1nF,KAAK8jF,QAEbZ,GAAUM,QAAQtkB,OAAOl/D,MAM7B2nF,+BACIzE,GAAUiB,aACNnkF,KA/oBc,uBAipBd,KACAA,KAAKgkF,gBAQb4D,sBAAsBllF,GAClBwgF,GAAUiB,aACNnkF,KAlqBK,cAkqB4B0C,EAAG1C,KAAKgkF,gBAQjD6D,uBAAuBnlF,GACnBwgF,GAAUiB,aACNnkF,KA3qBM,eA2qB4B0C,EAAG1C,KAAKgkF,gBAQlD8D,sBAAsBC,GAClB7E,GAAUkD,aACNpmF,KACA+nF,EApqBM,eADF,cA+qBZC,uBAAuB3nF,EAAOkJ,GAC1B,IAAI66E,EAEA76E,IACA66E,EAAY,CAAE76E,KAAAA,IAGlB25E,GAAUkD,aACNpmF,KACAK,EA/qBU,mBACD,kBA+qBT+jF,GAQR6D,uBAAuBvlF,GACnBwgF,GAAUiB,aACNnkF,KAntBa,sBAmtB4B0C,EAAG1C,KAAKgkF,gBAQzDkE,wBAAwBxlF,GACpBwgF,GAAUiB,aACNnkF,KA5tBc,uBA4tB4B0C,EAAG1C,KAAKgkF,gBAQ1DmE,0BAA0BzlF,GACtBwgF,GAAUiB,aACNnkF,KAruBS,kBAquB4B0C,EAAG1C,KAAKgkF,iBAQzDd,GAAUC,QAAU,KAKpBD,GAAUe,aAAe,GAOzBf,GAAUE,oBAAqB,EAM/BF,GAAUsC,YAAc,KAMxBtC,GAAUuC,gBAAkB,KAS5BvC,GAAUmC,OAAS,KChxBnB5oF,OAAOyyE,aAAezyE,OAAOyyE,cAAgBzyE,OAAO0yE,mBAEpD,IAAI3lD,GAAU,KAkEC,SAAS4+D,GAAoB3gF,EAAQ4gF,EAAU54E,GAC1DzP,KAAKyH,OAASA,EACdzH,KAAKsoF,WAAa,KAClBtoF,KAAKuoF,cAAgBF,EACrBroF,KAAKwoF,WAAa,EAClBxoF,KAAKyP,SAAWA,EChFb,SAASg5E,GAAqBC,GACjC,IAAIC,EAAYD,EAMhB,OAJIA,GAAUnjF,OAAOi8B,mBACjBmnD,EAAY,GAGTA,EAAY,EAShB,SAASC,GAAiBC,GAC7B,OAAOA,EAAWtpF,OAAS,EAAIspF,EAAW7hF,QAAO,CAAC9F,EAAGC,IAAMD,EAAIC,IAAK0nF,EAAWtpF,OAAS,EA6BrF,SAASupF,GAAqBD,GACjC,OAAOA,EAAWviF,QAAOzC,GAASA,GAAS,IDpC3CpH,OAAOyyE,eACP1lD,GAAU,IAAI0lD,aAUd1lD,GAAQu/D,SAAWv/D,GAAQu/D,WAgE/BX,GAAoB7pF,UAAU8B,MAAQ,WAClC,IAAK+nF,GAAoBY,wBACrB,OAEJx/D,GAAQpT,SACR,MAAM6yE,EAAWz/D,GAAQ0/D,iBAEzBD,EAASE,sBAxF2B,GAyFpCF,EAASG,QA/FsB,KAiGhB5/D,GAAQ6/D,wBAAwBrpF,KAAKyH,QAE7C+iD,QAAQy+B,GAEfjpF,KAAKsoF,WAAagB,aACd,KACI,MAAM7nF,EAAQ,IAAIxD,WAAWgrF,EAASM,mBAEtCN,EAASO,sBAAsB/nF,GAC/B,MAAM+mF,EA3ElB,SAAoCiB,GAEhC,IAAIC,EAAY,EAEhB,MAAMnqF,EAASkqF,EAAQlqF,OAEvB,IAAK,IAAID,EAAI,EAAGA,EAAIC,EAAQD,IACpBoqF,EAAYD,EAAQnqF,KACpBoqF,EAAYD,EAAQnqF,IAI5B,OAAOusE,aAAa6d,EAAY,KAAO,KAAKC,QAAQ,IA+DzBC,CAA2BnoF,GAM9CzB,KAAKwoF,WA5DjB,SAAsBqB,EAAUC,GAC5B,IAAIjmF,EAAQ,EACZ,MAAMkmF,EAAOD,EAAYD,EAUzB,OAPIhmF,EADAkmF,EAAO,GACCD,EAAY,GACbC,GAAQ,GACPD,EAAY,GAEZD,EAGLhe,WAAWhoE,EAAM8lF,QAAQ,IAgDNK,CAAaxB,EAAYxoF,KAAKwoF,YAChDxoF,KAAKyP,SAASzP,KAAKwoF,cAEvBxoF,KAAKuoF,gBAObH,GAAoB7pF,UAAU0tB,KAAO,WAC7BjsB,KAAKsoF,aACL2B,cAAcjqF,KAAKsoF,YACnBtoF,KAAKsoF,WAAa,OAU1BF,GAAoBY,sBAAwB,WACxC,OAAOnJ,QAAQr2D,KCjFZ,MAAM0gE,GAITtrF,cACIoB,KAAKmqF,QAAU,EACfnqF,KAAKsI,EAAI,EASb8hF,QAAQvmF,GACiB,iBAAVA,IAGX7D,KAAKsI,GAAK,EACVtI,KAAKmqF,QAAUnqF,KAAKmqF,SAAYtmF,EAAQ7D,KAAKmqF,SAAWnqF,KAAKsI,GAOjE+hF,aACI,OAAOrqF,KAAKmqF,SCrFpB,MAAMp9D,IAASmB,EAAAA,EAAAA,6DAUR,MAAMo8D,GAOT1rF,YAAYynB,EAASkkE,GACjBvqF,KAAKwqF,aAAenkE,EACpBrmB,KAAKyqF,UAAY,EACjBzqF,KAAK0qF,YAAc,EACnB1qF,KAAK2qF,yBAA2BJ,EAChCvqF,KAAK6/D,MAAQ,IAAIqqB,GAQrBU,oBACI,MAAO,CACHC,kBA9BI,GA8Be7qF,KAAK6/D,MAAMwqB,cAAwBV,QAAQ,GAC9DmB,cAAe9qF,KAAK0qF,aAS5BK,gBAEI/qF,KAAKgrF,qBAAuBrhE,IACxB,MAAMgd,EAAUhd,EAAKshE,aAErB,IAAK,MAAM93E,KAAQwzB,EACf3mC,KAAKyqF,YACLzqF,KAAK0qF,YAAcp+E,KAAK0O,IAAIhb,KAAK0qF,YAAav3E,EAAK+3E,UAAUvB,QAAQ,IAK7E58D,GAAOtf,KAAK,6DACZzN,KAAKmrF,SAAW,IAAIzK,oBAAoB1gF,KAAKgrF,sBAC7ChrF,KAAKmrF,SAASC,QAAQ,CAAE5rF,KAAM,WAC1B6rF,UAAU,IACd,MAAMr7D,EAAY5C,KAAKgC,MAGvBpvB,KAAKsrF,oBAAsBhC,aAAY,KACnC,MAAMl6D,EAAMhC,KAAKgC,MACXi5D,EAAWroF,KAAKurF,gBACfn8D,EAAMpvB,KAAKurF,gBA/DR,KAgEHn8D,EAAMY,GAhEH,IAiEJ9sB,EAAOlD,KAAKyqF,UAAYpC,EAE9BroF,KAAK6/D,MAAMuqB,QAAQlnF,GACnBlD,KAAKwqF,aAAa5iE,KACd4jE,GAAmCxrF,KAAK4qF,qBAG5C5qF,KAAKyqF,UAAY,EACjBzqF,KAAKurF,eAAiBn+D,KAAKgC,QAC5BpvB,KAAK2qF,0BAOZc,eACIzrF,KAAKmrF,UAAYnrF,KAAKmrF,SAASr9B,aAC/B9tD,KAAKgrF,qBAAuB,KACxBhrF,KAAKsrF,sBACLrB,cAAcjqF,KAAKsrF,qBACnBtrF,KAAKsrF,oBAAsB,OC1FhC,MAAMI,GAAQ,QAKRC,GAAY,YAKZC,GAAQ,QCPfn0D,GAAuB9yB,EAAQ,MAE/BooB,IAASmB,EAAAA,EAAAA,sDASf,SAAS29D,GAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IACzBD,GAAeA,GAAe,EAC/B,EAGJx/E,KAAKkY,MAAOsnE,EAAcC,EAAgB,KAOrD,SAASC,KACLhsF,KAAKisF,KAAO,GACZjsF,KAAKksF,QAAU,CACXn6D,SAAU,EACVo6D,OAAQ,GAEZnsF,KAAKosF,WAAa,GAClBpsF,KAAKqsF,UAAY,EACjBrsF,KAAKizC,MAAQ,GAqDjB,SAASq5C,KAMLtsF,KAAK+3C,UAAY,GAMjB/3C,KAAKksF,QAAU,GAMflsF,KAAKusF,WAAa,KAMlBvsF,KAAKqsB,UAAY,GAkBN,SAASmgE,GAAexI,EAAgByI,EAAqBlC,EAAeC,GACvFxqF,KAAKgkF,eAAiBA,EACtBhkF,KAAK0sF,0BAA4B,KACjC1sF,KAAK2sF,yBAA2B,KAChC3sF,KAAK4sF,mBAAqB,KAC1B5sF,KAAK6sF,oBAAsB,KAC3B7sF,KAAK8sF,wBAA0B,GAC/B9sF,KAAK+sF,sBAAwB,KAC7B/sF,KAAKwqF,aAAeA,EACpBxqF,KAAKgtF,gBAAkB,IAAIV,GAG3BtsF,KAAKitF,yBAA2BR,EAEhCzsF,KAAKktF,YAAc,GACnBltF,KAAKmtF,gBAAkB,KACvBntF,KAAKotF,mBAAqB7C,EAM1BvqF,KAAKqtF,WAAa,IAAIxnD,IA9G1BmmD,GAAUztF,UAAU+uF,QAAU,SAASrB,GACnCjsF,KAAKisF,KAAOA,GAAQ,IAOxBD,GAAUztF,UAAUgvF,cAAgB,SAASnB,GACzCpsF,KAAKosF,WAAaA,GAAc,IAQpCJ,GAAUztF,UAAUivF,WAAa,SAAStB,GACtClsF,KAAKksF,QAAQn6D,UAAYm6D,EAAQn6D,SACjC/xB,KAAKksF,QAAQC,QAAUD,EAAQC,QAOnCH,GAAUztF,UAAUkvF,aAAe,WAC/BztF,KAAKksF,QAAQn6D,SAAW,EACxB/xB,KAAKksF,QAAQC,OAAS,GAO1BH,GAAUztF,UAAUmvF,aAAe,SAASrB,GACxCrsF,KAAKqsF,UAAYA,GAAa,GAGlCL,GAAUztF,UAAUovF,SAAW,SAAS16C,GACpCjzC,KAAKizC,MAAQA,GAAS,IA+E1Bu5C,GAAejuF,UAAUqvF,eAAiB,SAASV,GAC/CltF,KAAKktF,YAAcA,GAMvBV,GAAejuF,UAAU0tB,KAAO,WACxBjsB,KAAK+sF,wBACL9C,cAAcjqF,KAAK+sF,uBACnB/sF,KAAK+sF,sBAAwB,MAG7B/sF,KAAKmtF,kBACLlD,cAAcjqF,KAAKmtF,iBACnBntF,KAAKmtF,gBAAkB,OAQ/BX,GAAejuF,UAAUi6B,cAAgB,SAASnhB,GAC9CogB,GAAqBE,iBAAiBtgB,GACtC0V,GAAO1V,MAAM,kBAAmBA,GAChCrX,KAAKisB,QAMTugE,GAAejuF,UAAU8B,MAAQ,SAASwtF,GAClCA,IACI3sE,GAAQ0/D,yBACR7zD,GAAOtf,KAAK,6DAEhBzN,KAAK+sF,sBAAwBzD,aACzB,KACI,GAAIpoE,GAAQ0/D,wBAAyB,CACjC,MAAMkN,EAAc9tF,KAAKgkF,eAAe+J,eAAe/tF,KAAKktF,aAE5D,IAAK,MAAM3jF,KAAQukF,EACf,GAAIA,EAAY1+E,eAAe7F,GAAO,CAGlC,MAAMi/E,EAAiC,IAApBsF,EAAYvkF,GAE/BvJ,KAAKwqF,aAAa5iE,KACd4jE,GACAxrF,KAAKgkF,eACLz+E,OAAOuF,SAASvB,EAAM,IACtBi/E,GACA,SAKZxoF,KAAKgkF,eAAepd,WACf3E,MAAKiF,IACFlnE,KAAK2sF,yBAAqD,mBAAnBzlB,MAAAA,OAAP,EAAOA,EAAQj1D,QACzCi1D,EAAOj1D,SACPi1D,EACNlnE,KAAKguF,0BACLhuF,KAAK0sF,0BAA4B1sF,KAAK2sF,4BAEzCxgB,OAAM90D,GAASrX,KAAKw4B,cAAcnhB,OAG/CrX,KAAKitF,2BAIb,MAAMgB,EAAe,KAEjBjuF,KAAKgkF,eAAepd,WACf3E,MAAKiF,IACFlnE,KAAK4sF,mBAA+C,mBAAnB1lB,MAAAA,OAAP,EAAOA,EAAQj1D,QACnCi1D,EAAOj1D,SACPi1D,EAEN,IACIlnE,KAAKkuF,qBACP,MAAO72E,GACLogB,GAAqBE,iBAAiBtgB,GACtC0V,GAAO1V,MAAM,kCAAmCA,GAEpDrX,KAAK6sF,oBAAsB7sF,KAAK4sF,sBAEnCzgB,OAAM90D,GAASrX,KAAKw4B,cAAcnhB,MAG3C42E,IACAjuF,KAAKmtF,gBAAkB7D,YAAY2E,EAAcjuF,KAAKotF,qBAM1DZ,GAAejuF,UAAU4vF,sBAAwB,WAE7C,MAAMpC,EAAe,CACjBh6D,SAAU,EACVo6D,OAAQ,GAENL,EAAc,CAChB/5D,SAAU,EACVo6D,OAAQ,GAEZ,IAAIiC,EAAkB,EAClBC,EAAgB,EACpB,MAAMC,EAAc,GACdC,EAAa,GACbh4C,EAAS,GACf,IAEIi4C,EAGAC,EALAC,EAAuB,EACvBC,EAAqB,EAErBC,EAAuB,EACvBC,EAAqB,EAGzB,IAAK,MAAQtlF,EAAMulF,KAAe9uF,KAAKqtF,WAAY,CAE/C,MAAMpB,EAAO6C,EAAU7C,KACjBzsF,EAAOysF,EAAK8C,iBAAmB,WAAa,SAElDhD,EAAavsF,IAASysF,EAAK+C,aAC3BlD,EAAYtsF,IAASysF,EAAKgD,YAG1Bb,GAAmBU,EAAU5C,QAAQn6D,SACrCs8D,GAAiBS,EAAU5C,QAAQC,OAGnC,MAAMr8D,EAAQ9vB,KAAKgkF,eAAekL,eAAe3lF,GAEjD,GAAIumB,EAAO,CACHA,EAAMe,gBACN69D,GAAwBI,EAAU5C,QAAQn6D,SAC1C48D,GAAsBG,EAAU5C,QAAQC,OACxCqC,EAAaM,EAAU77C,QAEvB27C,GAAwBE,EAAU5C,QAAQn6D,SAC1C88D,GAAsBC,EAAU5C,QAAQC,OACxCsC,EAAaK,EAAU77C,OAG3B,MAAMk8C,EAAgBr/D,EAAM4B,mBAE5B,GAAIy9D,EAAe,CACf,MAAM/C,EAAa0C,EAAU1C,WAE7B,GAAIA,EAAWrwD,OACJqwD,EAAWpwD,SACW,IAAtBowD,EAAWrwD,QACY,IAAvBqwD,EAAWpwD,OAAe,CACjC,MAAMozD,EAAkBd,EAAYa,IAAkB,GAEtDC,EAAgB7lF,GAAQ6iF,EACxBkC,EAAYa,GAAiBC,EAEjC,GAA4B,IAAxBN,EAAUzC,UAAiB,CAC3B,MAAMgD,EAAiBd,EAAWY,IAAkB,GAEpDE,EAAe9lF,GAAQulF,EAAUzC,UACjCkC,EAAWY,GAAiBE,EAEhC,GAAIb,GAAcC,EAAY,CAC1B,MAAMa,EAAY,CACd,MAASd,EACT,MAASC,GAGPc,EAAah5C,EAAO44C,IAAkB,GAE5CI,EAAWhmF,GAAQ+lF,EACnB/4C,EAAO44C,GAAiBI,QAG5BxiE,GAAO1V,MAAO,iCAAgCyY,KAItDg/D,EAAUrB,eAGdztF,KAAKgtF,gBAAgBd,QAAU,CAC3B,OAAUmC,EACV,SAAYD,GAGhBpuF,KAAKgtF,gBAAgBd,QAAQzqB,MAAQ,CACjC,OAAUktB,EACV,SAAYD,GAGhB1uF,KAAKgtF,gBAAgBd,QAAQvqB,MAAQ,CACjC,OAAUktB,EACV,SAAYD,GAGhB5uF,KAAKgtF,gBAAgBT,WAAa,CAC9Bh9D,MACIs8D,GACIC,EAAY/5D,SAAW+5D,EAAYK,OACnCJ,EAAah6D,SAAWg6D,EAAaI,QAC7Cp6D,SACI85D,GAAoBC,EAAY/5D,SAAUg6D,EAAah6D,UAC3Do6D,OACIN,GAAoBC,EAAYK,OAAQJ,EAAaI,SAG7D,MAAMqD,EAAiB,GACvB,IAAIC,EAEJnxF,OAAOiG,KAAKvE,KAAK8sF,yBAAyBtoF,SAAQ+E,IAC9C,MAAM,KAAE+K,EAAF,QAAQud,GAAY7xB,KAAK8sF,wBAAwBvjF,GACjDmmF,EAAgBp7E,EAAKtN,QAAO,CAAC2oF,EAAKC,IAAiBD,EAAMC,IAAgBt7E,EAAK/U,OAEpF,GAAIsyB,EACA49D,EAAsBC,MACnB,CACH,MAAM5/D,EAAQ9vB,KAAKgkF,eAAekL,eAAe3pF,OAAOgE,IAExD,GAAIumB,EAAO,CACP,MAAMq/D,EAAgBr/D,EAAM4B,mBAExBy9D,IACAK,EAAeL,GAAiBO,QAKhD1vF,KAAK8sF,wBAA0B,GAE/B9sF,KAAKwqF,aAAa5iE,KACd4jE,GACAxrF,KAAKgkF,eACL,CACI,UAAahkF,KAAKgtF,gBAAgBj1C,UAClC,QAAW/3C,KAAKgtF,gBAAgBd,QAChC,WAAclsF,KAAKgtF,gBAAgBT,WACnC,WAAc+B,EACd,UAAaC,EACb,MAASh4C,EACT,UAAav2C,KAAKgtF,gBAAgB3gE,UAClCojE,oBAAAA,EACAD,eAAAA,IAERxvF,KAAKgtF,gBAAgB3gE,UAAY,IAUrCmgE,GAAejuF,UAAUsxF,oBAAsB,SAAS3tF,GACpD,IAAI2B,EAAQ3B,EAMZ,MAJqB,iBAAV2B,IACPA,EAAQ0B,OAAO1B,IAGfoiB,MAAMpiB,GACC,EAGJyI,KAAK0O,IAAI,EAAGnX,IAavB2oF,GAAejuF,UAAUuxF,kBAAoB,SAAS1gE,EAAK2gE,EAAQC,GAC/D,MAAMC,EAAWjwF,KAAK6vF,oBAAoBzgE,EAAI4gE,IACxCE,EAAclwF,KAAK6vF,oBAAoBE,EAAOC,IAC9CG,EAAiB7jF,KAAK0O,IAAI,EAAGi1E,EAAWC,GAExCE,EAAShhE,EAAIhE,UAAY2kE,EAAO3kE,UACtC,IAAIilE,EAAc,EAOlB,OALID,EAAS,IAETC,EAAc/jF,KAAKkY,MAAwB,EAAjB2rE,EAAsBC,IAG7CC,GAMX7D,GAAejuF,UAAU2vF,mBAAqB,WAC1C,IAAKluF,KAAK6sF,oBACN,OAEJ,MAAMyD,EAAgB,GAEtBtwF,KAAK4sF,mBAAmBpoF,SAAQ4qB,IAE5B,GAAiB,mBAAbA,EAAI5vB,MAA6B4vB,EAAImhE,WAA2B,cAAdnhE,EAAIhH,MAAuB,CAC7E,MAAMooE,EAA2BphE,EAAIohE,yBAC/BC,EAA2BrhE,EAAIqhE,0BAEjCD,GAA4BC,KAC5BzwF,KAAKgtF,gBAAgBj1C,UAAY,CAC7B,SAAYzrC,KAAKkY,MAAMgsE,EAA2B,KAClD,OAAUlkF,KAAKkY,MAAMisE,EAA2B,OAIxD,MAAMC,EAAsB1wF,KAAK4sF,mBAAmBzyE,IAAIiV,EAAIuhE,mBACtDC,EAAqB5wF,KAAK4sF,mBAAmBzyE,IAAIiV,EAAIyhE,kBAI3D,GAAIH,GAAuBE,EAAoB,CAC3C,MAIMvpF,EAAM,GAJY6Z,GAAQu+D,kBAC1BiR,EAAoBrpF,GACpBqpF,EAAoBvtF,WACPutF,EAAoBppF,OAOjCwpF,EAAW,GAJM5vE,GAAQu+D,kBACzBmR,EAAmBvpF,GACnBupF,EAAmBztF,WACPytF,EAAmBtpF,OAE/B9H,EAAOkxF,EAAoBz+C,SAG3B8+C,EAA2B/wF,KAAKgtF,gBAAgB3gE,UAEjD0kE,EAAyBljF,MAAK/K,GAC/BA,EAAEuE,KAAOA,GACNvE,EAAEtD,OAASA,GACXsD,EAAEguF,UAAYA,KACjBC,EAAyBhuF,KAAK,CAC1BsE,GAAAA,EACA7H,KAAAA,EACAsxF,QAAAA,EACAE,IAAKhxF,KAAKgkF,eAAe8C,MACzBmK,mBAAoBL,EAAmBM,cACvCC,oBAAqBT,EAAoBQ,cACzCE,YAAaR,EAAmBQ,YAChCC,IAAgC,IAA3BjiE,EAAIkiE,6BASlB,GAAiB,gBAAbliE,EAAI5vB,MAAuC,iBAAb4vB,EAAI5vB,KAAyB,CAClE,MAAMuwF,EAAS/vF,KAAK6sF,oBAAoB1yE,IAAIiV,EAAIjrB,IAC1CoF,EAAOvJ,KAAK6vF,oBAAoBzgE,EAAI7lB,MAE1C,IAAKwmF,IAAWxmF,EACZ,OAGJ,IAAIulF,EAAY9uF,KAAKqtF,WAAWlzE,IAAI5Q,GAE/BulF,IACDA,EAAY,IAAI9C,GAChBhsF,KAAKqtF,WAAWpkE,IAAI1f,EAAMulF,IAG9B,IAAIC,GAAmB,EACnBtqF,EAAM,kBAEO,iBAAb2qB,EAAI5vB,OACJuvF,GAAmB,EACnBtqF,EAAM,eAGV,IAAI8sF,EAAaniE,EAAI3qB,KAEhB8sF,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,MAAMC,EAAgBxxF,KAAK6vF,oBAAoBE,EAAOtrF,IAChDgtF,EAAcnlF,KAAK0O,IAAI,EAAGu2E,EAAaC,GAEvCE,EAAiB1xF,KAAK6vF,oBAAoBzgE,EAAI6/D,aAC9C0C,EAAoB3xF,KAAK6vF,oBAAoBE,EAAOd,aACpD2C,EAAkBtlF,KAAK0O,IAAI,EAAG02E,EAAiBC,GAarD,GAXA7C,EAAUxB,QAAQ,CACd0B,aAAcyC,EAAcG,EAC5B3C,YAAa2C,EACb7C,iBAAAA,IAQa,gBAAb3/D,EAAI5vB,KAAwB,CAC5B,MAAM4sF,EAAa,CACfpwD,OAAQ5M,EAAIyiE,YACZ91D,MAAO3M,EAAI0iE,YAET3tB,EAAY/0C,EAAI2iE,gBAElB3F,EAAWpwD,QAAUowD,EAAWrwD,OAChC+yD,EAAUvB,cAAcnB,GAE5B0C,EAAUpB,aAAaphF,KAAKkY,MAAM2/C,GAAa,IAE/C2qB,EAAUtB,WAAW,CACjB,SAAYxtF,KAAK8vF,kBAAkB1gE,EAAK2gE,EAAQ,iBAChD,OAAU,SAGdO,EAAc/mF,GAAQvJ,KAAK6vF,oBAAoBzgE,EAAI4iE,WACnDlD,EAAUtB,WAAW,CACjB,SAAY,EACZ,OAAUxtF,KAAK8vF,kBAAkB1gE,EAAK2gE,EAAQ,eAItD,MAAM98C,EAAQjzC,KAAK4sF,mBAAmBzyE,IAAIiV,EAAI6iE,SAE9C,GAAIh/C,EAAO,CAMP,MAAMi/C,EAAiBj/C,EAAM7hB,SAAS3zB,MAAM,KAAK,GAEjDy0F,GAAkBpD,EAAUnB,SAASuE,SAMtC,GAAiB,UAAb9iE,EAAI5vB,MAAoB4vB,EAAI2nB,OAASo7C,KAAoB/iE,EAAIgjE,aAAc,CAClF,MAAMhG,EAAa,CACfpwD,OAAQ5M,EAAIyiE,YACZ91D,MAAO3M,EAAI0iE,YAETO,EAAmBryF,KAAKgkF,eAAesO,eAAeH,IAE5D,KAAKE,MAAAA,OAAD,EAACA,EAAkB9yF,QACnB,OAGJ,MAAMgK,EAAOvJ,KAAKgkF,eAAeuO,aAAaF,EAAiB,IAE/D,IAAK9oF,EACD,OAEJ,IAAIulF,EAAY9uF,KAAKqtF,WAAWlzE,IAAI5Q,GAE/BulF,IACDA,EAAY,IAAI9C,GAChBhsF,KAAKqtF,WAAWpkE,IAAI1f,EAAMulF,IAE1B1C,EAAWpwD,QAAUowD,EAAWrwD,OAChC+yD,EAAUvB,cAAcnB,GAK5B,IAAIjoB,EAAY/0C,EAAI2iE,gBAEpB,IAAK5tB,EAAW,CACZ,MAAM4rB,EAAS/vF,KAAK6sF,oBAAoB1yE,IAAIiV,EAAIjrB,IAEhD,GAAI4rF,EAAQ,CACR,MAAMK,EAAShhE,EAAIhE,UAAY2kE,EAAO3kE,UAElCglE,EAAS,GAAKhhE,EAAIojE,aAGlBruB,GAFkC/0C,EAAIojE,WAAazC,EAAOyC,YAEjBpC,EAAU,KAI3D,IAAKjsB,EACD,OAKR,MAAMsuB,EAAwBzyF,KAAKgkF,eAAe0O,4BAGlDvuB,EAAYsuB,EAAwBnmF,KAAKkY,MAAM2/C,EAAYsuB,GAAyB,EACpF3D,EAAUpB,aAAavpB,OAI/BnkE,KAAKwqF,aAAa5iE,KAAK4jE,GAAkCxrF,KAAKgkF,eAAgBsM,GAC9EtwF,KAAKmuF,yBAMT3B,GAAejuF,UAAUyvF,wBAA0B,WAC1ChuF,KAAK0sF,2BAIV1sF,KAAK2sF,yBAAyBnoF,SAAQ4qB,IAClC,GAAiB,UAAbA,EAAI5vB,KACJ,OAIJ,MAAMgpF,EAAap5D,EAAIo5D,WAEvB,IAAKA,EACD,OAGJ,MAAMloB,EAAkBlxC,EAAIkxC,gBACtB/2D,EAAOvJ,KAAKgkF,eAAe2O,iBAAiBryB,GAElD,GAAI/2D,EAAM,CACN,MAAMsoB,EACAtoB,IAASvJ,KAAKgkF,eAAeuO,aAC/BvyF,KAAKgkF,eAAesO,eAAeH,KAEvCnyF,KAAKwqF,aAAa5iE,KACd4jE,GACAxrF,KAAKgkF,eACLz6E,EACAi/E,EACA32D,QCrrBhB,MAAM9E,GAASpoB,EAAAA,MAAAA,8CAMf,IAAIiuF,GAKAC,IAAoB,EAkCxB,SAASC,GAAsBlpF,GACvBs5E,GAAU6P,wBAIT7P,GAAU8P,YAAY,CACvBxN,YAAa57E,EAAQ47E,YACrBC,gBAAiB77E,EAAQ67E,gBACzBF,SAAU37E,EAAQ27E,SAClBD,UAAW17E,EAAQ07E,UACnBK,gBAAiB/7E,EAAQ+7E,gBACzBK,mBAAoBp8E,EAAQo8E,mBAC5BlC,OAAQl6E,EAAQk6E,OAChB+B,OAAQj8E,EAAQi8E,OAChBH,aAAc97E,EAAQ87E,gBAEtB34D,GAAO1V,MAAM,+CA4EN,SAAS47E,GAAWC,EAAMtpF,GAMrC5J,KAAKmzF,YAAc,IAAIttD,IACvB7lC,KAAKwqF,aAAe,IAAItkE,MACxBlmB,KAAKkzF,KAAOA,EACZlzF,KAAK4J,QAAUA,GAAW,GAE1B5J,KAAKozF,4BACCpzF,KAAK4J,QAAQ47E,aAAexlF,KAAK4J,QAAQ67E,iBAAmBzlF,KAAK4J,QAAQypF,kBAK1B,IAAzCJ,GAAWK,0BACnBtzF,KAAKozF,8BACLpzF,KAAKuzF,iCACCvzF,KAAK4J,QAAQ2pF,iCACfryE,GAAQ+9D,gBACR6T,GAAsB9yF,KAAK4J,SAtIvC,SAA0BA,GACjBipF,KACDz6D,KAAAA,WACIxuB,EAAQ4pF,iBAAmB1Z,IACf,GACE,OACI/yE,GACC,IAAM+rF,GAAsBlpF,KAEnDipF,IAAoB,GA+HhBY,CAAiBzzF,KAAK4J,SAGrB5J,KAAK4J,QAAQk6E,QACd/2D,GAAOhF,KAAK,4BAUpB/nB,KAAK0zF,oBAAsB,IAAI7tD,IAE/BotD,GAAWU,UAAU5vD,IAAI/jC,MA/E7BizF,GAAW9sE,KAAO,SAASvc,GACvBqpF,GAAWW,oBAAsBhqF,EAAQiqF,mBACF,iBAA5BjqF,EAAQkqF,kBACfb,GAAWa,gBAAkBlqF,EAAQkqF,iBAGE,iBAAhClqF,EAAQ6iF,sBACfwG,GAAWxG,oBAAsB7iF,EAAQ6iF,qBAGC,iBAAnC7iF,EAAQmqF,yBACfd,GAAWc,uBAAyBnqF,EAAQmqF,wBAGhDd,GAAWK,0BAA4B1pF,EAAQ0pF,2BAmEnDL,GAAWW,oBAAqB,EAChCX,GAAWxG,oBAAsB,IACjCwG,GAAWa,gBAAkB,IAC7Bb,GAAWK,2BAA4B,EACvCL,GAAWe,UAAYA,GAEvB11F,OAAO2b,eAAeg5E,GAAY,YAAa,CAM3C94E,IAAG,KACMy4E,KACDA,GAAa,IAAI9sD,KAGd8sD,MAQfK,GAAW10F,UAAU01F,iBAAmB,SAASjQ,GAC7ChkF,KAAKk0F,gBAAgBlQ,GAErB,IACI,MAAMmQ,EACA,IAAIC,GACFpQ,EACAiP,GAAWxG,oBACXwG,GAAWa,gBACX9zF,KAAKwqF,cAEb2J,EAAS9zF,MAAM4yF,GAAWW,oBAC1B5zF,KAAKmzF,YAAYlqE,IAAI+6D,EAAe7/E,GAAIgwF,GAC1C,MAAOzxF,GACLqqB,GAAO1V,MAAO,iDAAgD3U,OAItEuwF,GAAWoB,WAAa,GAExBpB,GAAWqB,gBAAkB,SAAS7sF,EAAQgI,GAC1C,IAAKwjF,GAAWW,mBACZ,OAEJ,MAAMS,EAAa,IAAIE,GAAW9sF,EAAQwrF,GAAWxG,oBACjDh9E,GAEJzP,KAAKq0F,WAAWtxF,KAAKsxF,GACrBA,EAAWh0F,SAGf4yF,GAAW10F,UAAUi2F,sBAAwB,SAAS9gF,GAC7Cu/E,GAAWW,oBAGhB5zF,KAAKwqF,aAAa3jE,GAAG2kE,GAA8B93E,IAGvDu/E,GAAW10F,UAAUk2F,yBAA2B,SAAS/gF,GAChDu/E,GAAWW,oBAGhB5zF,KAAKwqF,aAAa72E,eAAe63E,GAA8B93E,IAGnEu/E,GAAW10F,UAAUm2F,0BAA4B,SAAShhF,GACtD1T,KAAKwqF,aAAa3jE,GAAG2kE,GAAkC93E,IAG3Du/E,GAAW10F,UAAUo2F,6BAA+B,SAASjhF,GACzD1T,KAAKwqF,aAAa72E,eACd63E,GAAkC93E,IAG1Cu/E,GAAW10F,UAAUq2F,2BAA6B,SAASlhF,GACvD1T,KAAKwqF,aAAa3jE,GAAG2kE,GAAmC93E,IAG5Du/E,GAAW10F,UAAUs2F,8BAAgC,SAASnhF,GAC1D1T,KAAKwqF,aAAa72E,eACd63E,GACA93E,IAGRu/E,GAAW10F,UAAUu2F,yBAA2B,SAASphF,GACrD1T,KAAKwqF,aAAa3jE,GAAG2kE,GAAkC93E,IAG3Du/E,GAAW10F,UAAUw2F,4BAA8B,SAASrhF,GACxD1T,KAAKwqF,aAAa72E,eAAe63E,GAC7B93E,IASRu/E,GAAW10F,UAAUy2F,0BAA4B,SAASthF,GACtD1T,KAAKwqF,aAAa3jE,GAAG2kE,GAAmC93E,IAS5Du/E,GAAW10F,UAAU02F,qBAAuB,SAASrjE,GAC5C1Q,GAAQu/D,+BAMbzgF,KAAKk1F,yBAA2B,IAAI5K,GAChCtqF,KAAKwqF,aACLyI,GAAWc,wBAEfniE,EAAW/K,GACPsuE,GACA,IAAMn1F,KAAKk1F,yBAAyBnK,kBACxCn5D,EAAW/K,GACPsuE,GACA,IAAMn1F,KAAKk1F,yBAAyBzJ,kBAdpC1+D,GAAOhF,KAAK,kEAuBpBkrE,GAAW10F,UAAUqsF,kBAAoB,WACrC,OAAO5qF,KAAKk1F,yBACNl1F,KAAKk1F,yBAAyBtK,oBAC9B,MASVqI,GAAW10F,UAAU62F,6BAA+B,SAAS1hF,GACzD1T,KAAKwqF,aAAa72E,eAAe63E,GAAmC93E,IASxEu/E,GAAW10F,UAAUqvF,eAAiB,SAASV,GAC3C,IAAK,MAAMiH,KAAYh2F,MAAMw8C,KAAK36C,KAAKmzF,YAAYxnF,UAC1CwoF,EAASnQ,eAAe8C,OACzBqN,EAASvG,eAAeV,IAKpC+F,GAAW10F,UAAUyjF,QAAU,WAC3B,IAQShiF,KAAK0zF,oBAAoBniE,MAC1BvxB,KAAKwqF,aAAa5iE,KAAK4jE,IAE3B,IAAK,MAAM6J,KAAar1F,KAAK0zF,oBAAoB/nF,SAC7C3L,KAAKs1F,cAAcD,EAAU3O,KAEjC,IAAK,MAAM6O,KAASv1F,KAAKmzF,YAAY5uF,OACjCvE,KAAKw1F,iBAAiBD,GAEtBv1F,KAAKwqF,cACLxqF,KAAKwqF,aAAaxgE,qBAlB1B,QAqBIipE,GAAWU,UAAUz0B,OAAOl/D,QAIpCizF,GAAWwC,eAAiB,SAAShuF,GACjC,GAAKwrF,GAAWW,mBAIhB,IAAK,IAAIt0F,EAAI,EAAGA,EAAI2zF,GAAWoB,WAAW90F,OAAQD,IAC9C,GAAI2zF,GAAWoB,WAAW/0F,GAAGmI,SAAWA,EAAQ,CACzBwrF,GAAWoB,WAAW9mF,OAAOjO,EAAG,GAExC,GAAG2sB,OACd,QAUZgnE,GAAW10F,UAAUi3F,iBAAmB,SAASD,GAC7C,MAAMpB,EAAWn0F,KAAKmzF,YAAYh5E,IAAIo7E,GAElCpB,IACAA,EAASloE,OACTjsB,KAAKmzF,YAAYj0B,OAAOq2B,KAQhCtC,GAAW10F,UAAU21F,gBAAkB,SAASxN,GAC5C1mF,KAAKw1F,iBAAiB9O,EAAIviF,KAW9B8uF,GAAW10F,UAAUm3F,eAAiB,SAAShP,EAAKC,GAChD,IAAK3mF,KAAKozF,4BACN,OACG,GAAIpzF,KAAK0zF,oBAAoBlpD,IAAIk8C,EAAIviF,IAGxC,YAFA4oB,GAAO1V,MAAM,gDAKjB0V,GAAOtf,KAAM,0BAAyBi5E,QAEtC,MAAMiP,EACA,IAAIzS,GACFwD,EACA,CACI5C,OAAQ9jF,KAAK4J,QAAQk6E,OACrB6C,aAAAA,IAGZ3mF,KAAK0zF,oBAAoBzqE,IAAIy9D,EAAIviF,GAAIwxF,IASzC1C,GAAW2C,0BAA4B,WACnC,MAAMC,EAAc,IAAI/vD,IAExB,IAAK,MAAMgwD,KAAc7C,GAAWU,UAChC,IAAK,MAAMnwB,KAAMsyB,EAAWpC,oBAAoB/nF,SAC5CkqF,EAAY9xD,IAAIy/B,GAIxB,OAAOqyB,GAMX5C,GAAW10F,UAAU+2F,cAAgB,SAAS5O,GAC1C,MAAMnD,EAAoBvjF,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAEvDo/E,IAUsC,IAAlCvjF,KAAK0zF,oBAAoBniE,MACzBvxB,KAAKwqF,aAAa5iE,KAAK4jE,IAE3BxrF,KAAK0zF,oBAAoBx0B,OAAOwnB,EAAIviF,IAGpCo/E,EAAkBiE,uBAW1ByL,GAAW10F,UAAUw3F,mBAAqB,WACtC,OAAO/1F,KAAKozF,6BAShBH,GAAW10F,UAAUy3F,gCAAkC,SAAStP,EAAKqB,GACjE,MAAMkO,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAASnO,sBAAsBC,IAQvCkL,GAAW10F,UAAUopF,6BAA+B,SAASjB,GACzD,MAAMuP,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAAStO,gCAUjBsL,GAAW10F,UAAU23F,cAAgB,SAASxP,EAAKyP,EAAO32F,GACtD,MAAMy2F,EAAWvP,GAAO1mF,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAEzD++E,GAAUgT,cAAcC,EAAO32F,EAAMy2F,IAUzChD,GAAW10F,UAAUypF,uBACf,SAAS3nF,EAAOkJ,GACd,IAAK,MAAMi6D,KAAMxjE,KAAK0zF,oBAAoB/nF,SACtC63D,EAAGwkB,uBAAuB3nF,EAAOkJ,IAS7C0pF,GAAW10F,UAAUgpF,yBAA2B,SAAS6O,GACrD,IAAK,MAAM5yB,KAAMxjE,KAAK0zF,oBAAoB/nF,SACtC63D,EAAG+jB,2BAIPvnF,KAAKkzF,KAAK3L,yBAAyB6O,IAQvCnD,GAAWoD,0BAA4B,SAASlQ,GAC5C,MAAMmQ,EAAYrD,GAAW2C,4BAE7B,GAAIU,EAAU/kE,KACV,IAAK,MAAMiyC,KAAM8yB,EACbpT,GAAUmT,0BAA0BlQ,EAAa3iB,QAGrD0f,GAAUmT,0BAA0BlQ,EAAa,OAmBzD8M,GAAW10F,UAAU8oF,4BAA8B,SAC3CX,EACAn9E,EACAsoB,EACAxD,EACAm2D,EACA5B,GACJ,MAAMqT,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAAS5O,4BACL99E,EACAsoB,EACAxD,EACAm2D,EACA5B,IAWZqQ,GAAWsD,uBAAyB,SAAS7zF,GACzC,MAAM2U,EACA3U,aAAai4E,GAtiBvB,SAA2CtjE,GACvC,MAAMzH,EAAM,IAAInB,MAkBhB,OAfAmB,EAAIuU,MAAQ9M,EAAM8M,MAGlBvU,EAAIzN,MAAQkV,EAAMlV,MAAQ,kBAAoBkV,EAAMujE,KAAOvjE,EAAMujE,IAAIvjE,OAC9DA,EAAMujE,IAAIvjE,MAAMlV,KAAQ,MAAKkV,EAAMujE,IAAIvjE,MAAMlV,OAAS,IAK7DyN,EAAIuzD,eAAiB9rD,EAAMujE,KAAOvjE,EAAMujE,IAAIpZ,YACtCv2C,KAAKF,UAAU1T,EAAMujE,IAAIpZ,aAAe,GAG9C5xD,EAAI7Q,QAAUsY,EAAMtY,QAEb6Q,EAohBG4mF,CAAkC9zF,GAAKA,EAC3C4zF,EAAYrD,GAAW2C,4BAE7B,GAAIU,EAAU/kE,KACV,IAAK,MAAMiyC,KAAM8yB,EACbpT,GAAUqT,uBAAuBl/E,EAAOmsD,QAG5C0f,GAAUqT,uBAAuBl/E,EAAO,OAUhD47E,GAAW10F,UAAUqpF,sBAAwB,SAASllF,EAAGgkF,GACrD,MAAMuP,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAASrO,sBAAsBllF,IAUvCuwF,GAAW10F,UAAUspF,uBAAyB,SAASnlF,EAAGgkF,GACtD,MAAMuP,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAASpO,uBAAuBnlF,IAUxCuwF,GAAW10F,UAAU0pF,uBAAyB,SAASvlF,EAAGgkF,GACtD,MAAMuP,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAAShO,uBAAuBvlF,IAUxCuwF,GAAW10F,UAAU2pF,wBAA0B,SAASxlF,EAAGgkF,GACvD,MAAMuP,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAAS/N,wBAAwBxlF,IAUzCuwF,GAAW10F,UAAU4pF,0BAA4B,SAASzlF,EAAGgkF,GACzD,MAAMuP,EAAWj2F,KAAK0zF,oBAAoBv5E,IAAIusE,EAAIviF,IAE9C8xF,GACAA,EAAS9N,0BAA0BzlF,IAS3CuwF,GAAWwD,QAAU,SAASzzF,GAC1B,MAAM0zF,EAAe,IAAI5wD,IAMzB,IAAK,MAAM+5B,KAASozB,GAAWU,UAAW,CACtC,GAAI9zB,EAAM0zB,iCACN,OAGA1zB,EAAM6zB,oBAAoBniE,MAC1BmlE,EAAa3yD,IAAI87B,EAAM6zB,oBAAoB/nF,SAAS8I,OAAO5Q,OAInE,GAAI6yF,EAAanlE,KACb,IAAK,MAAMolE,KAAcD,EACrBxT,GAAU0T,mBAAmB5zF,EAAG2zF,QAGpCzT,GAAU0T,mBAAmB5zF,EAAG,OAYxCiwF,GAAW10F,UAAUs4F,aAAe,SAASvQ,EAASC,GAUlD,OAPA0M,GAAWe,UAAUzR,UdllBD,WcolBhB,CACIuU,OAAQxQ,EACRC,QAAAA,IAGDrD,GAAU2T,aAAa72F,KAAK4J,QAAQk6E,OAAQwC,EAASC,IAGhE0M,GAAW/2D,UAAYv3B,EAAAA,MAAAA,UAOvBsuF,GAAW8D,kBAAoB,SAAS1/E,GAChCA,aAAiBsjE,IAAmBtjE,EAAMujE,IAC1CqY,GAAWsD,uBAAuBl/E,GAElC47E,GAAWwD,QAAQp/E,IAa3B47E,GAAW+D,oBAAsB,SAASz/D,EAAO8qD,EAAa,IAC1D,IAAK9qD,EAGD,YAFAxK,GAAOhF,KAAK,iCAKhB,IAAIkvE,EAIAA,EADiB,iBAAV1/D,EACMA,EAEA,CACTp1B,KAAMo1B,EACN8qD,WAAAA,GAIRt1D,GAAOhjB,IAAIkhB,KAAKF,UAAUksE,IAG1Bj3F,KAAKg0F,UAAUzR,UAAUhrD,EAAO8qD,IAUpC4Q,GAAWiE,cAAgB,SAAS1U,EAAWH,EAAa,IACxDriF,KAAKg0F,UAAUzR,UAAUC,EAAWH,qHCryBxC,MAAMt1D,IAASmB,EAAAA,EAAAA,6CAMA,SAASipE,GAA4BvlE,GAChD5xB,KAAK4xB,WAAaA,EAClB5xB,KAAKo3F,cAAgB,GAGrBxlE,EAAW/K,GAAGsuE,IACVrlE,IACI,IAAKA,EAAM+B,YAAcD,EAAWkkE,WAChC,OAEJ,MAAM1vF,EACA0pB,EAAMg3D,MACFl1D,EAAWylE,iBAAmBzlE,EAAW0lE,iBAI7C5Q,EAAOtgF,GAAWA,EAAQ49E,gBAAmB,KAEnDpyD,EAAWkkE,WAAWI,cAClBxP,EACA52D,EAAMynE,UACNznE,EAAM0nE,cAOtBL,GAA4B54F,UAAUk5F,uBAAyB,WAC3D,MAAM7lE,EAAa5xB,KAAK4xB,WAClB8lE,EAAW9lE,EAAW+lE,KAE5B33F,KAAK43F,kBAAoB,IAAI9gE,KAAJ,CAA0B4gE,EAC/C13F,KAAK4xB,WAAW44D,cAEpBkN,EAAS3kF,YAAY8kF,KAAAA,gBAA2BC,IACvCA,EAAchR,OAMfl1D,EAAWmmE,IAAIC,wBAMvBN,EAAS3kF,YAAY8kF,KAAAA,8BAAyC,CAACl9C,EAAM2N,KACjE,MAAM2vC,EAAcrmE,EAAWE,mBAAmBwsB,GAAAA,QAAAA,mBAA2B3D,IAEzEs9C,IACAA,EAAYC,YAAY5vC,GACxB12B,EAAW44D,aAAa5iE,KAAKutE,GAAmD8C,OAIxFP,EAAS3kF,YACL8kF,KAAAA,qBACA,CAACC,EAAeK,MAGXL,EAAchR,OACRl1D,EAAWwmE,kBACVD,EAASL,EAAc9T,mBAIvC0T,EAAS3kF,YAAY8kF,KAAAA,sBACjBQ,IAIIpF,GAAWiE,cAAcpb,GAAyBqW,KAElDvgE,EAAW0mE,kBAAoBD,EAG/BzmE,EAAWmmE,IAAIQ,cAAa,GAAMt2B,MAC9B,KACIrwC,EAAW4mE,gBAAiB,EAC5B5mE,EAAW0mE,kBAAoB,QAElCnsB,OACG90D,IACIua,EAAW0mE,kBAAoB,KAC/BvrE,GAAOhF,KACH,gDAAiD1Q,SAKzEqgF,EAAS3kF,YAAY8kF,KAAAA,sBACjBQ,IAIIpF,GAAWiE,cAAcpb,GAAyBqW,KAElDvgE,EAAW6mE,uBAAyBJ,EAGpCzmE,EAAWmmE,IAAIW,cAAa,GAAMz2B,MAC9B,KACIrwC,EAAW+mE,qBAAsB,EACjC/mE,EAAW6mE,uBAAyB,QAEvCtsB,OACG90D,IACIua,EAAW6mE,uBAAyB,KACpC1rE,GAAOhF,KACH,gDAAiD1Q,SAKzErX,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,gBAC3B1C,IAEJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,WAC3B1C,GAEJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,eAC3B1C,GAGJuC,EAAS3kF,YAAY8kF,KAAAA,YACjB,KACI73F,KAAK4xB,WAAWgnE,eAEhB54F,KAAK4xB,WAAWinE,4BAA6B,EAG7Cv6F,OAAOiG,KAAKmzF,EAASoB,iBAAiBt0F,SAAQC,IAC1C,MAAM8yB,EACAikD,GACG,cAAa/2E,IACd,CAAEZ,MAAO6zF,EAASoB,gBAAgBr0F,KAE1CwuF,GAAWiE,cAAc3/D,MAI7Bj5B,OAAOiG,KAAKmzF,EAASxE,KAAK4F,iBAAiBt0F,SAAQC,IAC/C,MAAM8yB,EACAikD,GACG,QAAO/2E,IACR,CAAEZ,MAAO6zF,EAASxE,KAAK4F,gBAAgBr0F,KAE/CwuF,GAAWiE,cAAc3/D,SAIrCmgE,EAAS3kF,YAAY8kF,KAAAA,sBAAiC,CAACn1F,EAAG0D,KACjDA,EAAQ0gF,OACTl1D,EAAW44D,aAAa5iE,KAAKutE,EACzB4D,EAA2Cr2F,MAIvD1C,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,gBAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,mBAC3B1C,EACA4D,GACJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,+BAC3B1C,EACA4D,GACJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,gCAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,qBAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,kBAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,wBAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,YAC3B1C,EACA4D,GACJrB,EAAS3kF,YACL8kF,KAAAA,aACA,IAAM5E,GAAWiE,cfeY,WACjC,MAAM8B,EAAa,cAEnB,MAAO,CACH9uF,OAAQ8uF,EACRtd,cAAesd,EACfx5F,KAAM07E,IerByB+d,MAEnCvB,EAAS3kF,YAAY8kF,KAAAA,sBACjBC,IACIlmE,EAAWsnE,uBAAuBpB,MAG1C93F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,kBAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,kBAC3B1C,EACA4D,GAEJrB,EAAS3kF,YAAY8kF,KAAAA,uBACjBC,IACIlmE,EAAWunE,uBAAuBrB,MAG1C93F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,cAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,oBAC3B1C,EACA4D,GAEJ/4F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,mBAC3B1C,EACA4D,GAEJrB,EAAS3kF,YAAY8kF,KAAAA,YACjB,KACI5E,GAAWiE,cfyEa,WAChC,MAAMhtF,EAAS,aAEf,MAAO,CACHA,OAAAA,EACAwxE,cAAexxE,EACf1K,KAAM07E,Ie/EuBke,IACzBxnE,EAAW44D,aAAa5iE,KACpButE,EACA4D,MAGZrB,EAAS3kF,YAAY8kF,KAAAA,wBACjBC,IACI7E,GAAW+D,oBACPpb,Gf7MwB,yBe+MpB,CAAEoV,IAAK8G,EAAchR,YAGrC4Q,EAAS3kF,YAAY8kF,KAAAA,wBACjB,CAACzxF,EAASy+C,KAEN,GAAIA,EAAK,CACL,MAAM6M,EAAWpT,GAAAA,QAAAA,mBAA2BuG,GACtCozC,EAAcrmE,EAAWE,mBAAmB4/B,IAAaA,EAEnC,QAAxBtrD,EAAQizF,YACRjzF,EAAQkzF,cAAcrB,GACS,OAAxB7xF,EAAQizF,aACfjzF,EAAQmzF,aAAatB,GAI7BrmE,EAAW44D,aAAa5iE,KACpButE,GACA/uF,MAGZpG,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,6BAC3B1C,IAEJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,kCAC3B1C,IAEJn1F,KAAK43F,kBAAkB5gE,QACnB6gE,KAAAA,mCACA1C,IAEJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,qBAC3B1C,IAEJuC,EAAS8B,gCAA+B,CAACx8F,EAAM29C,KAC3C,MAAMs9C,EAAcrmE,EAAWE,mBAAmB6oB,GAE7Cs9C,GAILA,EAAYwB,YACRz8F,EAAKy7B,QAAQjxB,UAAU,qBAAqBjI,QAC5CvC,EAAK6G,UAGb6zF,EAAS3kF,YAAY8kF,KAAAA,OACjBjmE,EAAW8nE,eAAexzF,KAAK0rB,IACnC8lE,EAAS3kF,YAAY8kF,KAAAA,iBACjBjmE,EAAW+nE,kBAAkBzzF,KAAK0rB,IAEtC5xB,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,iBAC3B1C,IAEJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,yBAC3B1C,IAEJuC,EAAS3kF,YAAY8kF,KAAAA,kBACjBjmE,EAAWgoE,eAAe1zF,KAAK0rB,IACnC5xB,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,wBAC3B1C,IACJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,yBAC3B1C,IACJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,sBAC3B1C,IACJuC,EAAS3kF,YAAY8kF,KAAAA,4BACjBjmE,EAAWioE,wBAAwB3zF,KAAK0rB,IAC5C8lE,EAAS3kF,YAAY8kF,KAAAA,gBACjBjmE,EAAWkoE,aAAa5zF,KAAK0rB,IACjC5xB,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,SAC3B1C,GACJn1F,KAAK43F,kBAAkB5gE,QAAQ6gE,KAAAA,kBAC3B1C,EACA4D,GAEJrB,EAAS3kF,YAAY8kF,KAAAA,qBACjBjmE,EAAWmoE,qBAAqB7zF,KAAK0rB,IAEzC8lE,EAAS3kF,YAAY8kF,KAAAA,oBAA+B/iD,IAChDljB,EAAWooE,mBAAmBllD,GAG1BljB,EAAWkkE,YAAclkE,EAAWqoE,eACpCroE,EAAW/K,GAAGsuE,IACV+E,IACI,MAAMC,EAAY,CACd9iF,MAAO6iF,EAAgBE,WACvBj2F,GAAI,kBACJ6xB,OAAQkkE,EAAgBb,aAG5BpG,GAAWwD,QAAQxrE,KAAKF,UAAUovE,UAKlDzC,EAAS3kF,YAAY8kF,KAAAA,iBACjBjmE,EAAWyoE,kBAAkBn0F,KAAK0rB,IAEtC8lE,EAAS3kF,YAAYunF,KAAAA,kBACjB,CAACC,EAAaC,KACV5oE,EAAW2oE,YAAcA,EACzB3oE,EAAW4oE,aAAeA,EAC1B5oE,EAAW44D,aAAa5iE,KACpButE,EAA2CoF,EAC3CC,MAGZ9C,EAAS3kF,YACL8kF,KAAAA,kBAGA,CAAChzC,EAAK41C,EAAKC,EAAOxjF,KACd,MAAM/S,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAEtCjzB,EAAW44D,aAAa5iE,KACpButE,GACAhxF,EAAIs2F,EAAKvjF,MAGrBwgF,EAAS3kF,YACL8kF,KAAAA,0BAGA,CAAChzC,EAAK41C,EAAKC,EAAOxjF,KACd,MAAM/S,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAEtCjzB,EAAW44D,aAAa5iE,KACpButE,GACAhxF,EAAIs2F,EAAKvjF,MAGrBwgF,EAAS3kF,YAAY8kF,KAAAA,iBACjB,CAAChzC,EAAK7uB,KACF,MAAM7xB,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAChCozC,EAAcrmE,EAAWE,mBAAmB3tB,GAE7C8zF,GAAeA,EAAY0C,UAAY3kE,IAG5CiiE,EAAY0C,QAAU3kE,EACtBpE,EAAW44D,aAAa5iE,KACpButE,GAA2ChxF,EAAI6xB,OAG3D0hE,EAAS3kF,YAAY8kF,KAAAA,uBACjB,CAACl9C,EAAM5jC,KACH,MAAM5S,EAAKm6C,GAAAA,QAAAA,mBAA2B3D,GAChCs9C,EAAcrmE,EAAWE,mBAAmB3tB,GAE9C8zF,EACArmE,EAAW44D,aAAa5iE,KACpButE,EACA8C,EAAalhF,GAEjB6a,EAAW44D,aAAa5iE,KACpButE,GACAhxF,EAAI4S,MAIpB2gF,EAASkD,oBAAoB,cAAc,CAACtmF,EAAMqmC,KAC9C,IAAIs/C,GAAc,EAElB,GAAIroE,EAAWipE,aAAelgD,GAAQ/oB,EAAWqoE,cAC7CA,GAAc,MACX,CACH,MAAMhC,EAAcrmE,EAAWE,mBAAmB6oB,GAE9Cs9C,GAAeA,EAAYgC,gBAC3BA,GAAc,GAItB,IAAKA,EACD,OAGJ,MAAMa,EAA4C,SAA1BxmF,EAAKwrC,WAAW2hB,MAClCs5B,EAA4C,SAA1BzmF,EAAKwrC,WAAW6hB,MAExC,IAAIq5B,GAAU,EAEVF,IAAoBlpE,EAAWqpE,iBAAiBx5B,QAChD7vC,EAAWqpE,iBAAiBx5B,MAAQq5B,EACpCE,GAAU,GAGVD,IAAoBnpE,EAAWqpE,iBAAiBt5B,QAChD/vC,EAAWqpE,iBAAiBt5B,MAAQo5B,EACpCC,GAAU,GAGVA,GACAppE,EAAW44D,aAAa5iE,KACpButE,GACAvjE,EAAWqpE,qBAKnBrpE,EAAWkkE,aAEX4B,EAAS3kF,YAAY8kF,KAAAA,uBACjBzxF,IACIwrB,EAAWkkE,WAAWnO,6BAClBvhF,EAAQ49E,mBAIpB0T,EAAS3kF,YAAY8kF,KAAAA,0BACjB,CAACn1F,EAAG8iE,KACA5zC,EAAWkkE,WAAW3N,0BAA0BzlF,EAAG8iE,QAQnE2xB,GAA4B54F,UAAU28F,kBAAoB,WACtD,MAAMtpE,EAAa5xB,KAAK4xB,WAClBmmE,EAAMnmE,EAAWmmE,IAEvBA,EAAIhlF,YACAooF,KAAAA,mBACAvpE,EAAWwpE,mBAAmBl1F,KAAK0rB,IAEvCmmE,EAAIhlF,YACAooF,KAAAA,qBACAvpE,EAAWypE,qBAAqBn1F,KAAK0rB,IAEzCmmE,EAAIhlF,YAAYooF,KAAAA,0BACZ,CAACG,EAAUC,KACP,GAAI3pE,EAAW4pE,sBAAwBF,GAAY1pE,EAAW+lE,KAAM,CAKhE,GAJA/lE,EAAW4pE,oBAAsBF,EACjC1pE,EAAW44D,aAAa5iE,KACpButE,EAAgDmG,EAAUC,GAE1DA,GAAYA,EAASh8F,OAAQ,CAC7B,MAAM2tF,EAAcqO,EAAS/0F,MAAM,GAG/BorB,EAAWipE,WAAaS,GACxBpO,EAAY3/E,OAAO,EAAG,EAAG+tF,GAIzBpO,EAAY3tF,OlB7fC,GkB8fb2tF,EAAY3/E,OlB9fC,EkB8f6B2/E,EAAY3tF,OlB9fzC,GkBggBjBqyB,EAAWkkE,YAAclkE,EAAWkkE,WAAWlI,eAAeV,GAE9Dt7D,EAAWkkE,YAAclkE,EAAWipE,aAAeS,GAEnD1pE,EAAWkkE,WAAWvO,yBAAyB31D,EAAW+lE,KAAK8D,aAK/E1D,EAAIhlF,YAAYooF,KAAAA,mBAA6B,KACzC,MAAM/rE,EAAM3yB,OAAOi/F,YAAYtsE,MACzB3qB,EAAM,sBAGZsoB,GAAOhjB,IAAK,UAAStF,OAAU2qB,GAC/BwC,EAAW+lE,KAAKmB,gBAAgBr0F,GAAO2qB,EACvC6jE,GAAWiE,cACP1b,GAAkC/2E,EAAK,CAAEZ,MAAOurB,KAEpDwC,EAAW44D,aAAa5iE,KAAKutE,MAGjC4C,EAAIhlF,YAAYooF,KAAAA,2BACZ,CAACxgD,EAAM5jC,KACH,MAAMkhF,EAAcrmE,EAAWE,mBAAmB6oB,GAE9Cs9C,EACArmE,EAAW44D,aAAa5iE,KACpButE,EACA8C,EAAalhF,GAEjBgW,GAAOhF,KAEI,mEAAe4yB,IACtB5jC,MAIhBghF,EAAIhlF,YAAYooF,KAAAA,yBACZ,CAACxgD,EAAM5jC,KACH,MAAMkhF,EAAcrmE,EAAWE,mBAAmB6oB,GAE9Cs9C,EACArmE,EAAW44D,aAAa5iE,KAAKutE,GAA+C8C,EAAalhF,GAEzFgW,GAAOhF,KAAM,oEAAmE4yB,QAI5Fo9C,EAAIhlF,YAAYooF,KAAAA,qBACZ,CAACzU,EAAKr0C,KACGq0C,EAAII,OACLmM,GAAWwD,QACPxrE,KAAKF,UAAU,CACX5mB,GAAI,cACJN,MAAOwuC,QAI3B0lD,EAAIhlF,YAAYooF,KAAAA,sBACZ,CAACzU,EAAKr0C,KACGq0C,EAAII,OACLmM,GAAWwD,QACPxrE,KAAKF,UAAU,CACX5mB,GAAI,eACJN,MAAOwuC,QAK3B0lD,EAAIhlF,YAAYooF,KAAAA,sBACZ,CAACz4F,EAAGgkF,KACA90D,EAAWkkE,WAAWjO,uBAAuBnlF,EAAGgkF,GAC3CA,EAAII,OACLl1D,EAAW44D,aAAa5iE,KAAKutE,EACzB4D,EAA2Cr2F,MAI3Dq1F,EAAIhlF,YAAYooF,KAAAA,qBACZ,CAACz4F,EAAGgkF,KACA90D,EAAWkkE,WAAWlO,sBAAsBllF,EAAGgkF,GAC1CA,EAAII,OACLl1D,EAAW44D,aAAa5iE,KAAKutE,EACzB4D,EAA2Cr2F,MAI3Dq1F,EAAIhlF,YAAYooF,KAAAA,8BACZ,CAACz4F,EAAGgkF,KACA90D,EAAWkkE,WAAW7N,uBAAuBvlF,EAAGgkF,GAC3CA,EAAII,OACLl1D,EAAW44D,aAAa5iE,KAAKutE,EACzB4D,EAA2Cr2F,MAI3Dq1F,EAAIhlF,YAAYooF,KAAAA,+BACZ,CAACz4F,EAAGgkF,KACA90D,EAAWkkE,WAAW5N,wBAAwBxlF,EAAGgkF,GAC5CA,EAAII,OACLl1D,EAAW44D,aAAa5iE,KAAKutE,EACzB4D,EAA2Cr2F,MAI3Dq1F,EAAIhlF,YAAYooF,KAAAA,0BACZ,CAACrrE,EAAOvmB,KAKAumB,EAAM2B,gBAAkB3B,EAAM6rE,YAAcC,KAAAA,SAC5ChqE,EAAWkkE,WAAW9N,wBAAuB,EAAMz+E,OAQnE4tF,GAA4B54F,UAAUs9F,oBAAsB,WACxD,MAAMjqE,EAAa5xB,KAAK4xB,WAExBtzB,OAAOiG,KAAKvE,KAAKo3F,eAAe5yF,SAAQg+E,IACpC5wD,EAAWshE,KAAKv/E,eACZ6uE,EACAxiF,KAAKo3F,cAAc5U,OAE3BxiF,KAAKo3F,cAAgB,IAOzBD,GAA4B54F,UAAUu9F,mBAAqB,WACvD,MAAMlqE,EAAa5xB,KAAK4xB,WAExB5xB,KAAK+7F,2BACDlE,KAAAA,cACAjmE,EAAWoqE,eAAe91F,KAAK0rB,IACnC5xB,KAAK+7F,2BACDlE,KAAAA,cACAjmE,EAAWqqE,eAAe/1F,KAAK0rB,IACnC5xB,KAAK+7F,2BACDlE,KAAAA,eACAjmE,EAAWsqE,gBAAgBh2F,KAAK0rB,IACpC5xB,KAAK+7F,2BACDlE,KAAAA,WACAjmE,EAAWuqE,YAAYj2F,KAAK0rB,IAEhC5xB,KAAK+7F,2BAA2BlE,KAAAA,wBAC5B,CAACuE,EAAYC,KACLzqE,EAAWhoB,QAAQtG,OAAOg5F,mBAI9B1qE,EAAWkpE,gBAAkBsB,EAC7BxqE,EAAWmpE,gBAAkBsB,EAI7BzqE,EAAW0gE,iBAAiB9tF,SAAQsrB,IAChC,OAAQA,EAAM0nE,WACd,KAAKrF,GACDvgE,EAAWkpE,iBAAmBhrE,EAAM22D,OACpC,MACJ,KAAK0L,GACDvgE,EAAWmpE,iBAAmBjrE,EAAM22D,WAK5C70D,EAAW44D,aAAa5iE,KAAKutE,QAGrCn1F,KAAK+7F,2BAA2BlE,KAAAA,+BAC5B0E,IACI3qE,EAAW44D,aAAa5iE,KAAKutE,EAAoDoH,MAGzFv8F,KAAK+7F,2BAA2BlE,KAAAA,uBAC5B,CAACh0F,EAAOk4E,EAAWygB,KACf,MAAMC,EAAmB7qE,EAAW8qE,kBAAkBhyF,MAAK/H,GAAKA,EAAEg6F,WAAaH,IAE/E5qE,EAAW44D,aAAa5iE,KAAKutE,GAA6C,CACtEyH,QAAS/4F,EACTk4E,UAAAA,EACAsc,MAAOoE,OAGnBz8F,KAAK+7F,2BAA2BlE,KAAAA,oCAC5B,CAAC9b,EAAWl3B,KACR,MAAMozC,EAAcrmE,EAAWE,mBAAmBwsB,GAAAA,QAAAA,mBAA2BuG,IAEzEozC,GACArmE,EAAW44D,aAAa5iE,KAAKutE,GAA0D,CACnF8C,YAAAA,EACAlc,UAAAA,OAIhB/7E,KAAK+7F,2BAA2BlE,KAAAA,oCAC5B,CAAC9b,EAAWl3B,KACR,MAAMozC,EAAcrmE,EAAWE,mBAAmBwsB,GAAAA,QAAAA,mBAA2BuG,IAEzEozC,GACArmE,EAAW44D,aAAa5iE,KAAKutE,GAA0D,CACnF8C,YAAAA,EACAlc,UAAAA,OAIhB/7E,KAAK+7F,2BAA2BlE,KAAAA,wBAC5Bh0F,GAAS+tB,EAAW44D,aAAa5iE,KAAKutE,GAA8C,CAAEpZ,UAAWl4E,MACrG7D,KAAK+7F,2BAA2BlE,KAAAA,wBAC5Bh0F,IACI+tB,EAAW44D,aAAa5iE,KAAKutE,GAA8C,CAAEpZ,UAAWl4E,QAOpGszF,GAA4B54F,UAAUw9F,2BAA6B,SAC3DvZ,EAAW9uE,GACf1T,KAAKo3F,cAAc5U,GAAa9uE,EAChC1T,KAAK4xB,WAAWshE,KAAKngF,YAAYyvE,EAAW9uE,IAMhDyjF,GAA4B54F,UAAUs+F,yBAA2B,WAC7D,MAAMjrE,EAAa5xB,KAAK4xB,WAEnBA,EAAWkkE,aAKhBlkE,EAAWkkE,WAAWtB,uBAAsB,CAAC9N,EAAKn9E,EAAMyjB,EAAO6E,KAC3DD,EAAWmmE,IAAI+E,cAAcpW,EAAKn9E,EAAMyjB,EAAO6E,MAMnDD,EAAWkkE,WAAWpB,2BAA0B,KAC5C9iE,EAAW44D,aAAa5iE,KACpButE,MAIHvjE,EAAWhoB,QAAQtG,OAAOy5F,aAC3BnrE,EAAWkkE,WAAWhB,0BAAyB,CAACpO,EAAK7mB,KACjDjuC,EAAW0gE,eAAeH,IAAiB3tF,SAAQsrB,IAC/C,MAAMvmB,EAAOm9E,EAAI6L,aAAaziE,GAEzBvmB,GAASs2D,EAAMzwD,eAAe7F,IAInCumB,EAAMktE,yBAAyBtW,EAAK7mB,EAAMt2D,YC5wBnD,MAAM0zF,GAAsB,gBActB9jB,GAA4B,2BAK5B+jB,GAA6B,2BAK7B9jB,GAAqB,yBAKrB+jB,GAA0B,yBAM1BC,GAAsB,4BAMtB7kB,GAAiB,keCjC9B,MAAMxrD,IAASmB,EAAAA,EAAAA,kEAsCFmvE,GAA8B,CAIvCC,OAAQ,SAQRrjE,SAAU,WAKVsjE,YAAa,cAKbC,UAAW,aAOA,MAAMC,GAwBY,8BACrBC,EACAC,EACAC,EACAC,EACAC,GACJ,OAAKJ,EAKMG,EAIAR,GAA4BC,OAInCp8E,GAAQg/D,qCACH4d,EAGMH,EACAC,EACDP,GAA4BE,YAC5BF,GAA4BG,UAG/BH,GAA4BpjE,SAPxBojE,GAA4BC,OAYpCK,EACDN,GAA4BC,OAC5BD,GAA4BpjE,SA1BvBojE,GAA4BE,YAyCd,8BAACM,EAAcC,GACxC,OAAK58E,GAAQg/D,qCAMN2d,IAAiBC,EAClBT,GAA4BC,OAC5BD,GAA4BE,YALvBF,GAA4BC,OAoB3C1+F,YAAYm5F,EAAKnmE,EAAYhoB,GACzB5J,KAAK+3F,IAAMA,EACX/3F,KAAK4xB,WAAaA,EAQlB5xB,KAAK+9F,YAAc,GAQnB/9F,KAAKg+F,kBAAoB,GAazBh+F,KAAKi+F,kBACsC,iBAA9Br0F,EAAQq0F,kBACXr0F,EAAQq0F,kBA/LY,IAyM9Bj+F,KAAKk+F,eACmC,iBAA3Bt0F,EAAQs0F,eACXt0F,EAAQs0F,eAnMO,IA0NzBl+F,KAAKm+F,kBAAoB,GACzBpxE,GAAOtf,KAAM,0BAAyBzN,KAAKk+F,kBAY3Cl+F,KAAKo+F,sBAAwB,IAAIv4D,IASjC7lC,KAAKq+F,gBAAkB,IAAIx4D,IAQ3B7lC,KAAKs+F,oBAAsB,IAAIz4D,IAUnC04D,uBAAuBp6F,GACnB,OAAOnE,KAAK+3F,IAAI4F,UAAUx5F,GACpBnE,KAAKk+F,eAAiBl+F,KAAKi+F,kBAOrC93E,OAEInmB,KAAKw+F,6BACCx+F,KAAKy+F,4BAA4Bv4F,KAAKlG,MAE5CA,KAAK+3F,IAAIhlF,YACLooF,KAAAA,6BACAn7F,KAAKw+F,8BAGTx+F,KAAK0+F,aAAe1+F,KAAK2+F,8BAA8Bz4F,KAAKlG,MAC5DA,KAAK4xB,WAAW/K,GAAGsuE,GAAkCn1F,KAAK0+F,cAG1D1+F,KAAK4+F,YAAc5+F,KAAK6+F,WAAW34F,KAAKlG,MACxCA,KAAK4xB,WAAW/K,GAAGsuE,GAAiCn1F,KAAK4+F,aAKrD19E,GAAQg/D,uCAERlgF,KAAK8+F,iBAAmB9+F,KAAK++F,gBAAgB74F,KAAKlG,MAClDA,KAAK+3F,IAAIhlF,YACLooF,KAAAA,kBAA6Bn7F,KAAK8+F,kBAEtC9+F,KAAKg/F,mBAAqBh/F,KAAKi/F,kBAAkB/4F,KAAKlG,MACtDA,KAAK+3F,IAAIhlF,YACLooF,KAAAA,oBAA+Bn7F,KAAKg/F,oBAIxCh/F,KAAKk/F,oBAAsBl/F,KAAKo7F,mBAAmBl1F,KAAKlG,MACxDA,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAKk/F,qBAETl/F,KAAKm/F,sBAAwBn/F,KAAKq7F,qBAAqBn1F,KAAKlG,MAC5DA,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAKm/F,uBAITn/F,KAAKo/F,yBACCp/F,KAAKq/F,wBAAwBn5F,KAAKlG,MAGxCA,KAAKs/F,yBACCt/F,KAAKu/F,wBAAwBr5F,KAAKlG,OAG5CA,KAAKw/F,gBAAkBx/F,KAAKw/F,gBAAgBt5F,KAAKlG,MACjDA,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAKw/F,iBAETx/F,KAAKy/F,qBACCz/F,KAAK2+F,8BAA8Bz4F,KAAKlG,MAC9CA,KAAK+3F,IAAIlxE,GACLs0E,KAAAA,oBAA+Bn7F,KAAKy/F,sBAO5Czd,UAEIhiF,KAAK+3F,IAAIpkF,eACLwnF,KAAAA,6BACAn7F,KAAKw+F,8BAELt9E,GAAQg/D,uCACRlgF,KAAK+3F,IAAIpkF,eACLwnF,KAAAA,kBACAn7F,KAAK8+F,kBACT9+F,KAAK+3F,IAAIpkF,eACLwnF,KAAAA,oBACAn7F,KAAKg/F,oBAETh/F,KAAK4xB,WAAW7H,IACZorE,GACAn1F,KAAKk/F,qBACTl/F,KAAK4xB,WAAW7H,IACZorE,GACAn1F,KAAKm/F,wBAGbn/F,KAAK4xB,WAAW7H,IACZorE,GACAn1F,KAAKw/F,iBAETx/F,KAAK+3F,IAAIpkF,eACLwnF,KAAAA,oBAA+Bn7F,KAAKy/F,sBAExCz/F,KAAK4xB,WAAW7H,IACZorE,GAAkCn1F,KAAK0+F,cAE3C1+F,KAAK4xB,WAAW7H,IACZorE,GAAiCn1F,KAAK4+F,aAE1C,MAAMc,EAAiBphG,OAAOiG,KAAKvE,KAAK+9F,aAExC,IAAK,MAAM5O,KAAiBuQ,EACxB1/F,KAAK0rB,aAAayjE,GAClBnvF,KAAK2/F,uBAAuBxQ,GAGhC,IAAK,MAAMhrF,KAAMnE,KAAKs+F,oBACdt+F,KAAKs+F,oBAAoBlvF,eAAejL,IACxCnE,KAAK6+F,WAAW16F,GAKxBnE,KAAKg+F,kBAAoB,GAU7BS,4BAA4BmB,EAAYC,GAEpC9yE,GAAOw4B,MACF,mDAAkDn4B,KAAKgC,WACpDwwE,MAAeC,KAGnBD,IAAe5/F,KAAK4xB,WAAWipE,aAE/B76F,KAAKg+F,kBAAkB4B,GAAcC,EACrC7/F,KAAK8/F,0BAA0BF,IASvCG,wBAAwB9H,EAAa+H,GACjC,GAAI/H,EAAYgI,wBAA0BD,EAAW,CAEjD,MAAMJ,EAAa3H,EAAYiI,QAE/BjI,EAAYkI,qBAAqBH,GAEjCjzE,GAAOw4B,MACF,6BAA4Bn4B,KAAKgC,UAAUwwE,MACxCI,KAGR/M,GAAWwD,QACPxrE,KAAKF,UAAU,CACX5mB,GAAI,mBACJ8zF,YAAa2H,EACb5pE,OAAQgqE,KAIhBhgG,KAAK4xB,WAAW44D,aAAa5iE,KACzButE,GACAyK,EAAYI,IAWxBt0E,aAAayjE,GACLnvF,KAAK+9F,YAAY5O,KACjB1yF,OAAOivB,aAAa1rB,KAAK+9F,YAAY5O,IACrCnvF,KAAK+9F,YAAY5O,GAAiB,MAU1CwQ,uBAAuBxQ,GACnBnvF,KAAKm+F,kBAAkBhP,GAAiB,KAU5CiM,mBAAmBgF,GACVA,EAAYvuE,WACNuuE,EAAY5I,YAAcrF,KAEjCplE,GAAOw4B,MACF,uCACG66C,EAAY1uE,sBAEpB0uE,EAAYv5E,GACRw5E,GACArgG,KAAKo/F,0BACTgB,EAAYv5E,GACRw5E,IACA1E,GAAa37F,KAAKs/F,yBAAyBc,EAAazE,MAWpEN,qBAAqB+E,GACjB,IAAKA,EAAYvuE,WACNuuE,EAAY5I,YAAcrF,GAAiB,CAElD,MAAMyN,EAAaQ,EAAY1uE,mBAE/B3E,GAAOw4B,MAAO,qCAAoCq6C,KAElDQ,EAAYr2E,IACRs2E,GACArgG,KAAKo/F,0BAETp/F,KAAK0rB,aAAak0E,GAClB5/F,KAAK2/F,uBAAuBC,GAE5B5/F,KAAK8/F,0BAA0BF,IAiBvC9B,mBAAmB7F,GACf,IAAK/2E,GAAQg/D,qCACT,OAAO,EAGX,MAAM/7E,EAAK8zF,EAAYiI,QACjBI,EAAsBrI,EAAYsI,8BAClCpC,EAAoBn+F,KAAKm+F,kBAAkBh6F,GAC3CmoD,EAAUtsD,KAAKu+F,uBAAuBp6F,GAE5C,OAAOm8F,GAC6B,iBAAtBnC,GACN/wE,KAAKgC,MAAQ+uE,GAAsB7xC,EAQ/CqyC,gCACI,MAAM6B,EAAexgG,KAAK4xB,WAAW8qE,kBAErC,IAAK,MAAMzE,KAAeuI,EACtBxgG,KAAK8/F,0BAA0B7H,EAAYiI,SAUnDJ,0BAA0B37F,GACtB,MAAM8zF,EAAcj4F,KAAK4xB,WAAWE,mBAAmB3tB,GAEvD,IAAK8zF,EAQD,YAFAlrE,GAAOw4B,MAAO,gDAA+CphD,KAKjE,MAAMs8F,EAAYzgG,KAAK4xB,WAAW8uE,cAC5BC,EAAsB3gG,KAAK4gG,qBAAqBz8F,GAChD08F,EAA+C,IAA/B7gG,KAAK4xB,WAAWkvE,WAIhCjD,EAAe5F,EAAY4F,gBAAkBgD,EAC7C/C,EAAqB99F,KAAK89F,mBAAmB7F,GAC7C0F,EAAY39F,KAAK+3F,IAAI4F,UAAUx5F,GACrC,IAAI48F,EAAoB/gG,KAAKg+F,kBAAkB75F,GAEd,kBAAtB48F,IAGPA,GAAoB,GAGxB,MAAMC,EACAP,EACIhD,GAAmCwD,uBACjCpD,EACAC,GACFL,GAAmCyD,uBACjCH,EACApD,EACAgD,EACA9C,EACAC,GAIRkD,IAAa3D,GAA4BG,WACzCx9F,KAAKmhG,qBAAqBh9F,GAG9B4oB,GAAOw4B,MACF,8BAA6BphD,sBAC1B05F,qBACAkD,yBACAjD,eACA2C,mBACA9C,iCACA1F,EAAYgI,4BAA4Be,KAEhD,MAAMI,EAAsBphG,KAAKs+F,oBAAoBn6F,IAAO,GAI5D,KAAM,QAASi9F,MACN,qBAAsBA,IACxBA,EAAoBpQ,MAAQyP,GAC5BW,EAAoBC,mBAAqBL,EAAU,CAEtD,MAAMM,EAAQl0E,KAAKgC,MAanB,GAXApvB,KAAKuhG,0CAA0Cp9F,EAAIm9F,GAEnDthG,KAAKs+F,oBAAoBn6F,GAAzB,MACOi9F,EADP,CAEIC,iBAAkBL,EAClBhQ,IAAKyP,EACLe,UAAWF,MAKT,cAAethG,KAAKs+F,oBAAoBn6F,IAAM,CAChD,MAAMs9F,EAAcxJ,EAAYyJ,qBAAqBvP,IAEjDh0F,MAAMC,QAAQqjG,IAAuC,IAAvBA,EAAYliG,SAC1CS,KAAKs+F,oBAAoBn6F,GAAIw3F,UAAY8F,EAAY,GAAG9F,YAIpE37F,KAAK+/F,wBAAwB9H,EAAa+I,GAU9CO,0CAA0Cp9F,EAAIm9F,GAC1C,MAAMK,EAA8B3hG,KAAKs+F,oBAAoBn6F,GAEzDw9F,GACG,cAAeA,GACf,cAAeA,GACf,qBAAsBA,GACtB,QAASA,IACZA,EAA4B99F,MAAQy9F,EAAQK,EAA4BH,UACxEvO,GAAWiE,cjB3U+B,SAASp3C,EAAa,IAGxE,MAAO,CACHtgD,KAAM07E,GACN/sE,OAAQ,mBACRjE,OALW,WAMX41C,WAAAA,GiBqUQ8hD,CAAuCD,KAYnDnC,gBAAgBqC,EAAe,GAAIC,EAAgB,IAC/C,MAAM1yE,EAAMhC,KAAKgC,MAEjBrC,GAAOw4B,MAAO,mCAAkCs8C,eAA0BC,QAAoB1yE,KAKzFlO,GAAQg/D,sCACTlgF,KAAK2+F,gCAGT,IAAK,MAAMx6F,KAAM09F,EACb7hG,KAAKo+F,sBAAsBl/B,OAAO/6D,GAClCnE,KAAKmhG,qBAAqBh9F,GAC1B+c,GAAQg/D,sCAAwClgF,KAAK8/F,0BAA0B37F,GAEnF,IAAK,MAAMA,KAAM29F,EAEb9hG,KAAKo+F,sBAAsBn1E,IAAI9kB,EAAIirB,GACnClO,GAAQg/D,sCAAwClgF,KAAK8/F,0BAA0B37F,GAYvFg9F,qBAAqBhS,GACjB,MAAM4S,EAAS/hG,KAAKq+F,gBAAgBlkF,IAAIg1E,GAEpC4S,IACAr2E,aAAaq2E,GACb/hG,KAAKq+F,gBAAgBn/B,OAAOiwB,IAkBpCyR,qBAAqBzR,GACjB,MAAMiP,EACAp+F,KAAKo+F,sBAAsBjkF,IAAIg1E,GAErC,SAAIiP,GACIhxE,KAAKgC,MAAQgvE,GAztBK,OAiuBXp+F,KAAKq+F,gBAAgBlkF,IAAIg1E,IAGpCnvF,KAAKq+F,gBAAgBp1E,IAAIkmE,EAAe5/E,YACpC,IAAMvP,KAAK8/F,0BAA0B3Q,IAruBnB,OAyuBnB,GAQX0P,WAAW16F,GACPnE,KAAKuhG,0CAA0Cp9F,EAAIipB,KAAKgC,cACjDpvB,KAAKs+F,oBAAoBn6F,GASpC46F,gBAAgBjvE,GACZ,MAAMq/D,EAAgBr/D,EAAM4B,mBACtBumE,EAAcj4F,KAAK4xB,WAAWE,mBAAmBq9D,GAGvD,GADApiE,GAAOw4B,MAAO,6BAA4B4pC,IAAiB/hE,KAAKgC,OAC3D6oE,GAML,GADAj4F,KAAKm+F,kBAAkBhP,GAAiB/hE,KAAKgC,OACxC6oE,EAAY4F,eAAgB,CAI7B79F,KAAK0rB,aAAayjE,GAGlB,MAAM7iC,EAAUtsD,KAAKu+F,uBAAuBpP,GAE5CnvF,KAAK+9F,YAAY5O,GAAiB1yF,OAAO8S,YAAW,KAChDwd,GAAOw4B,MACF,6BAA4B4pC,4BACvB7iC,QACVtsD,KAAK0rB,aAAayjE,GAClBnvF,KAAK8/F,0BAA0B3Q,KAChC7iC,SApBHv/B,GAAO1V,MAAO,0BAAyB83E,KA8B/C8P,kBAAkBnvE,GACd,MAAMq/D,EAAgBr/D,EAAM4B,mBAE5B3E,GAAOw4B,MACF,+BAA8B4pC,IAAiB/hE,KAAKgC,OAEzDpvB,KAAK0rB,aAAayjE,GAClBnvF,KAAK2/F,uBAAuBxQ,GAE5BnvF,KAAK8/F,0BAA0B3Q,GASnCkQ,wBAAwBvvE,GACpB,MAAMq/D,EAAgBr/D,EAAM4B,mBAE5B3E,GAAOw4B,MACF,8CAA6C4pC,IAC9Cr/D,EAAMynE,WAEVv3F,KAAK8/F,0BAA0B3Q,GAUnCoQ,wBAAwBzvE,EAAOtwB,GAC3B,MAAM2E,EAAK2rB,EAAM4B,mBACX4vE,EAAQl0E,KAAKgC,MAEnBpvB,KAAKuhG,0CAA0Cp9F,EAAIm9F,GAEnDthG,KAAKs+F,oBAAoBn6F,GAAzB,MACOnE,KAAKs+F,oBAAoBn6F,IAAO,GADvC,CAEIw3F,UAAWn8F,EACXgiG,UAAWF,KCr2BR,MAAMU,GAmBjBpjG,YAAYimD,EAAKjzB,EAAYtD,EAAa2zE,EAAQC,EAASlsE,EAAQmsE,EAAUC,EAAaC,GACtFriG,KAAKsiG,KAAOz9C,EACZ7kD,KAAKuiG,IAAMjkD,GAAAA,QAAAA,mBAA2BuG,GACtC7kD,KAAKwiG,YAAc5wE,EACnB5xB,KAAKyiG,aAAen0E,EACpBtuB,KAAK0iG,eAAgB,EACrB1iG,KAAK2iG,QAAU,GACf3iG,KAAK4iG,MAAQ,OACb5iG,KAAK26F,QAAU3kE,EACfh2B,KAAK6iG,QAAUZ,EACfjiG,KAAK8iG,SAAWZ,EAChBliG,KAAK47D,kBAAoByhC,GAA4BC,OACrDt9F,KAAK+iG,YAAc,GACnB/iG,KAAKgjG,UAAYb,EACjBniG,KAAKijG,aAAeb,EACpBpiG,KAAKkjG,YAAcb,EACnBriG,KAAKu5D,UAAY,IAAIzzB,IASzBq9D,gBACI,OAAOnjG,KAAKwiG,YAMhBY,YAAYjhG,GACR,OAAOnC,KAAK+iG,YAAY5gG,GAW5Bo+F,8BACI,OACIvgG,KAAK0jE,YAAY71D,MACbw1F,GACIA,EAAW7L,YAAcrF,IAClBkR,EAAWC,uBASlCnD,qBAAqBnqE,GACjBh2B,KAAK47D,kBAAoB5lC,EAU7BiqE,sBACI,OAAOjgG,KAAK47D,kBAShB69B,YAAYt3F,EAAM0B,GACd,MAAM0/F,EAAWvjG,KAAK+iG,YAAY5gG,GAE9B0B,IAAU0/F,IACVvjG,KAAK+iG,YAAY5gG,GAAQ0B,EACzB7D,KAAKwiG,YAAYhY,aAAa5iE,KAC1ButE,GACAn1F,KACAmC,EACAohG,EACA1/F,IAQZ6/D,YACI,OAAO1jE,KAAK2iG,QAAQn8F,QAQxBk7F,qBAAqB3lB,GACjB,OAAO/7E,KAAK0jE,YAAYp9D,QAAOwpB,GAASA,EAAM0nE,YAAczb,IAMhEmkB,QACI,OAAOlgG,KAAKuiG,IAMhB5F,SACI,OAAO38F,KAAKsiG,KAMhBtzE,iBACI,OAAOhvB,KAAKyiG,aAMhBe,aACI,OAAOxjG,KAAK8iG,SAMhBzJ,YACI,OAAOr5F,KAAK26F,QAMhBV,cACI,MAAsB,cAAfj6F,KAAK4iG,MAQhBa,WACI,OAAOzjG,KAAK6iG,QAOhBT,cACI,OAAOpiG,KAAKijG,aAOhBZ,aACI,OAAOriG,KAAKkjG,YAMhBQ,eACI,OAAO1jG,KAAK2jG,kBAAkBxR,IAclCwR,kBAAkB5nB,GACd,OAAO/7E,KAAK0jE,YAAY18D,QACpB,CAACmvF,EAAOrmE,IACJqmE,IAAUrmE,EAAM0nE,YAAczb,GAAajsD,EAAMynE,aACrD,GAMRsG,eACI,OAAO79F,KAAK2jG,kBAAkBxR,IAMlCyR,UACI,OAAO5jG,KAAK4iG,MAOhBiB,QAAQC,GACJ9jG,KAAK4iG,MAAQkB,EAOjBC,eAAeC,GACXhkG,KAAKijG,aAAee,EAOxBC,cAAcC,GACVlkG,KAAKkjG,YAAcgB,EAMvBC,eACI,OAAOnkG,KAAK0iG,cAOhB0B,cACI,OAAO99E,QAAQC,QAAQvmB,KAAKu5D,WAShC8qC,WAAWC,GACP,OAAOtkG,KAAKu5D,UAAU/uB,IAAI85D,GAO9BpM,YAAYqM,GACRvkG,KAAKu5D,UAAYgrC,GAAe,IAAIz+D,IAQxC0+D,aACI,OAAOxkG,KAAKykG,SAOhBC,WAAWC,GACP3kG,KAAKykG,SAAWE,GCnTjB,MAAMtpB,GAA0B,oCAS1Bx+C,GAAyB,mCAazBC,GAAoB,8BAMpB8nE,GAAc,wBAOdC,GAAwB,2CC/B9B,MAAMC,GAA2B,0BAK3BC,GAAc,wBAKd3lE,GAAoB,8BAMpB4lE,GAAe,mDCvBb,MAAMC,GAIjBrmG,cACIoB,KAAK0tE,QAAU,IAAIpnD,SAAQ,CAACC,EAAS1U,KACjC7R,KAAKumB,QAAU,IAAIze,KACf9H,KAAKklG,qBACL3+E,KAAWze,IAEf9H,KAAK6R,OAAS,IAAI/J,KACd9H,KAAKklG,qBACLrzF,KAAU/J,OAGlB9H,KAAKiiE,KAAOjiE,KAAK0tE,QAAQzL,KAAK/7D,KAAKlG,KAAK0tE,SACxC1tE,KAAKmsE,MAAQnsE,KAAK0tE,QAAQvB,MAAMjmE,KAAKlG,KAAK0tE,SAM9Cw3B,qBACIx5E,aAAa1rB,KAAKmlG,UAMtBC,iBAAiBC,GACbrlG,KAAKmlG,SAAW51F,YAAW,KACvBvP,KAAK6R,OAAO,IAAIpD,MAAM,cACvB42F,ICpCX,MAAMt4E,IAASmB,EAAAA,EAAAA,0CAITo3E,GAAalrF,OAAO,cAcX,MAAMmrF,GAIjB3mG,cAGI,IAAI4mG,EAAU,GACd,MAAMC,EAAMjiF,SAASmxC,cAAc,iCAEnC,GAAI8wC,EAAK,CACL,MAAMv/B,EAAMu/B,EAAI5gF,IAAIiU,YAAY,KAEhC0sE,EAAW,GAAEC,EAAI5gF,IAAIrd,UAAU,EAAG0+D,MAKtC,MACMw/B,EACA,IAAIzzE,KAAK,CAAG,kBAFGuzE,qCAEgC,CAAEhmG,KAAM,2BACvDmmG,EAAUlpG,OAAOy1B,IAAIC,gBAAgBuzE,GAE3C1lG,KAAK4lG,QAAU,IAAIC,OAAOF,EAAS,CAAExjG,KAAM,gBAC3CnC,KAAK4lG,QAAQxuE,QAAU10B,GAAKqqB,GAAO1V,MAAM3U,GAS7CojG,QAAQ3W,GACJnvF,KAAK4lG,QAAQrkB,YAAY,CACrBwkB,UAAW,UACX5W,cAAAA,IAYR6W,eAAepgF,EAAUmxB,EAAMo4C,GAC3B,IAAIvpE,EAAS0/E,IAKb,GAFA1/E,EAAS0/E,KAAc,EAEnB7oG,OAAO0kF,sBAAuB,CAC9B,MAAMv3E,EAAU,CACZm8F,UAAW,SACX5W,cAAAA,GAGJvpE,EAAS1c,UAAY,IAAIi4E,sBAAsBnhF,KAAK4lG,QAASh8F,OAC1D,CACH,MAAMq8F,EAAkBrgF,EAASy7D,uBAEjCrhF,KAAK4lG,QAAQrkB,YAAY,CACrBwkB,UAAW,SACXG,eAAgBD,EAAgBE,SAChCC,eAAgBH,EAAgBtlF,SAChCwuE,cAAAA,GACD,CAAE8W,EAAgBE,SAAUF,EAAgBtlF,YAYvD0lF,aAAargC,EAAQjvB,EAAMo4C,GACvB,IAAInpB,EAAOs/B,IAKX,GAFAt/B,EAAOs/B,KAAc,EAEjB7oG,OAAO0kF,sBAAuB,CAC9B,MAAMv3E,EAAU,CACZm8F,UAAW,SACX5W,cAAAA,GAGJnpB,EAAO98D,UAAY,IAAIi4E,sBAAsBnhF,KAAK4lG,QAASh8F,OACxD,CACH,MAAM08F,EAAgBtgC,EAAOqb,uBAE7BrhF,KAAK4lG,QAAQrkB,YAAY,CACrBwkB,UAAW,SACXG,eAAgBI,EAAcH,SAC9BC,eAAgBE,EAAc3lF,SAC9BwuE,cAAAA,GACD,CAAEmX,EAAcH,SAAUG,EAAc3lF,YAWnD4lF,OAAOpX,EAAe1qF,EAAK+hG,GACvBxmG,KAAK4lG,QAAQrkB,YAAY,CACrBwkB,UAAW,SACX5W,cAAAA,EACA1qF,IAAAA,EACA+hG,SAAAA,8BC3IM,MACA,MADX,MAEMC,GAAK,MACA,MCGH,MAAMC,GAMjB9nG,YAAY4rF,EAAe,IAAItkE,OAC3BlmB,KAAKwqF,aAAeA,EAGpBxqF,KAAK8oB,iBAAmB9oB,KAAK6mB,GAAK7mB,KAAK+S,YACvC/S,KAAKgpB,oBAAsBhpB,KAAK+pB,IAAM/pB,KAAK2T,eAS/CZ,YAAYyvE,EAAW9uE,GAGnB,OAFA1T,KAAKwqF,aAAaz3E,YAAYyvE,EAAW9uE,GAElC,IAAM1T,KAAKgpB,oBAAoBw5D,EAAW9uE,GASrDC,eAAe6uE,EAAW9uE,GACtB1T,KAAKwqF,aAAa72E,eAAe6uE,EAAW9uE,IC5BpD,MAAMqZ,IAASmB,EAAAA,EAAAA,yCAGTy4E,GAAmB,MACnBC,GACK,QADLA,GAEQ,WAFRA,GAGY,eAHZA,GAIW,cAJXA,GAKY,eAGZC,GAAWzsF,OAAO,WAElB0sF,GAAmB,CACrBC,iBAAkB,mBAClBC,+BAAgC,qCAChCC,wBAAyB,+BAuBtB,MAAMC,WAAmBR,GAI5B9nG,YAAYgzB,GACR8rD,QAEA19E,KAAKmnG,MAAQv1E,EACb5xB,KAAKonG,MAAQ,IAAInC,GACjBjlG,KAAKqnG,UAAOtgG,EACZ/G,KAAKsnG,WAAa,EAClBtnG,KAAKunG,MAAQ,IAAI1hE,IACjB7lC,KAAKwnG,4BAAyBzgG,EAE1BmgG,GAAWnrC,eACX/7D,KAAKynG,gBAELznG,KAAKmnG,MAAMtgF,GAAGsuE,EAAiDn1F,KAAK0nG,2BAA2BxhG,KAAKlG,OACpGA,KAAKmnG,MAAMtgF,GAAGsuE,EAAuCn1F,KAAK2nG,kBAAkBzhG,KAAKlG,OACjFA,KAAKmnG,MAAMtgF,GAAGsuE,GAAiCn1F,KAAK4nG,mBAAmB1hG,KAAKlG,OAC5EA,KAAKmnG,MAAMtgF,GAAGsuE,GACVn1F,KAAK6nG,8BAA8B3hG,KAAKlG,QAE5CA,KAAKonG,MAAMv1F,OAAO,IAAIpD,MAAM,sBAOlB,qBACd,GAAIzO,KAAKwnG,uBACL,MAAM,IAAI/4F,MAAM,iDACb,CACHzO,KAAKwnG,uBAAyB,IAAIvC,SAE5BjlG,KAAKonG,MAEX,MAAMU,EAAW,GACXC,EAAqB/nG,KAAKmnG,MAAMtM,WAEtC,IAAK,MAAM5C,KAAej4F,KAAKmnG,MAAMzK,yBACCzE,EAAYmM,eAEtB55D,IAAIw9D,KAAiBD,EAAqB9P,EAAYiI,SAC1E4H,EAAS/kG,KAAK/C,KAAKioG,iBAAiBhQ,UAItC3xE,QAAQ4hF,WAAWJ,GAIzB9nG,KAAKwnG,uBAAuBjhF,UAC5BvmB,KAAKwnG,4BAAyBzgG,GASpB,qBACd,YAA6B,IAAftK,OAAO0rG,IAUV,gBAAC1jG,GAEZzE,KAAKqnG,KAAO5iG,EACZzE,KAAKsnG,YAGL,MAAMQ,EAAW,GAEjB,IAAK,MAAM7P,KAAej4F,KAAKmnG,MAAMzK,kBAAmB,CACpD,MAAM0L,EAAMnQ,EAAYiI,QAClBmI,EAAUroG,KAAKsoG,uBAAuBrQ,GAG5C,IAAKoQ,EAAQjiG,QAAS,CAClB2mB,GAAOhF,KAAM,oCAAmCqgF,4BAGhD,SAGJ,MAAM/9C,EAAOk+C,KACPj0F,EAAO,CACT,CAACk0F,IAAsB7B,GACvB8B,IAAK,CACDjpG,KAAMonG,GACNtyF,KAAM,CACFo0F,WAAY1oG,KAAK2oG,gBAAgBN,EAAQjiG,SACzCikD,KAAAA,KAINhpD,EAAI,IAAI4jG,GAEd5jG,EAAE+jG,iBAjJM,KAkJR/jG,EAAE8qE,OAAM,KACJnsE,KAAKunG,MAAMroC,OAAO7U,MAEtBrqD,KAAKunG,MAAMt+E,IAAIohC,EAAMhpD,GACrBymG,EAAS/kG,KAAK1B,GAEdrB,KAAK4oG,aAAat0F,EAAM8zF,GAO5B,aAJM9hF,QAAQ4hF,WAAWJ,GAIlB9nG,KAAKsnG,UAQhBuB,iBAAiBpkG,GAGb,OAFAzE,KAAKqnG,KAAO5iG,EAELzE,KAAKsnG,UAOhBwB,wBAAwB7Q,GACpB,MAAMoQ,EAAUroG,KAAKsoG,uBAAuBrQ,GAExCoQ,EAAQjiG,UACRiiG,EAAQjiG,QAAQ2iG,OAChBV,EAAQjiG,aAAUW,GAS1BiiG,+BACI,IAAK,MAAM/Q,KAAej4F,KAAKmnG,MAAMzK,kBACjC18F,KAAK8oG,wBAAwB7Q,GAUlB,sBACflrE,GAAOw4B,MAAM,uBAEb,UACU4iD,IAAIhiF,OAEVnmB,KAAKipG,YAAc,IAAId,IAAIe,QAC3BlpG,KAAKipG,YAAY5pG,SAEjB,MAAM8pG,EAASl+E,KAAKnmB,MAAM9E,KAAKipG,YAAYG,iBAE3CppG,KAAKqpG,OAASF,EAAOG,WAErBv8E,GAAOw4B,MAAO,OAAM4iD,IAAIoB,sBAAsBtgG,KAAK,oBACnDjJ,KAAKonG,MAAM7gF,UACXvmB,KAAKwqF,aAAa5iE,KAAKk/E,GAAiBC,iBAAkB/mG,KAAKqpG,QACjE,MAAO3mG,GACLqqB,GAAO1V,MAAM,2BAA4B3U,GACzC1C,KAAKonG,MAAMv1F,OAAOnP,IAY1BimG,gBAAgBviG,GACZ,MAAMojG,EAAU,GAOhB,YALkBziG,IAAd/G,KAAKqnG,OACLmC,EAAQ/kG,MAAMzE,KAAKqnG,MAAOoC,GAAAA,cAAuBzpG,KAAKqnG,MACtDmC,EAAQhD,SAAWxmG,KAAKsnG,WAGrBlhG,EAAQsjG,QAAQz+E,KAAKF,UAAUy+E,IAU1ClB,uBAAuBrQ,GAGnB,OAFAA,EAAY4O,IAAY5O,EAAY4O,KAAa,GAE1C5O,EAAY4O,IAQA,0BACnB95E,GAAOw4B,MAAM,yBAEPvlD,KAAKonG,MAEX,IAAK,MAAMnP,KAAej4F,KAAKmnG,MAAMzK,kBACjC18F,KAAK4nG,mBAAmB3P,EAAYiI,QAASjI,GAG7Cj4F,KAAKipG,cACLjpG,KAAKipG,YAAYF,OACjB/oG,KAAKipG,iBAAcliG,GAUK,iCAACkxF,EAAalhF,GAC1C,GAAIA,EAAQyxF,MAAyB7B,GACjC,OAGJ,IAAK5vF,EAAQ0xF,IAGT,YAFA17E,GAAOhF,KAAK,uCAKV/nB,KAAKonG,MAEX,MAAMj8E,EAAMpU,EAAQ0xF,IACdL,EAAMnQ,EAAYiI,QAClBmI,EAAUroG,KAAKsoG,uBAAuBrQ,GAE5C,OAAQ9sE,EAAI3rB,MACZ,KAAKonG,GACD,GAAIyB,EAAQjiG,QACR2mB,GAAOhF,KAAM,eAAcqgF,2BAE3BpoG,KAAK2pG,WAAW1R,EAAa,mCAC1B,CAGH,MAAM7xF,EAAU,IAAI+hG,IAAIyB,QAExBxjG,EAAQyjG,gBAAgB7pG,KAAKipG,YAAa99E,EAAI7W,KAAKw1F,MAAO3+E,EAAI7W,KAAKy1F,OACnE1B,EAAQjiG,QAAUA,EAGlB,MAAM4jG,EAAM,CACR,CAACxB,IAAsB7B,GACvB8B,IAAK,CACDjpG,KAAMonG,GACNtyF,KAAM,CACFo0F,WAAY1oG,KAAK2oG,gBAAgBviG,GACjCikD,KAAMl/B,EAAI7W,KAAK+1C,QAK3BrqD,KAAK4oG,aAAaoB,EAAK5B,GACvBpoG,KAAKwqF,aAAa5iE,KAAKk/E,GAAiBE,+BAAgCoB,GAE5E,MAEJ,KAAKxB,GACD,GAAIyB,EAAQjiG,QACR2mB,GAAOhF,KAAM,eAAcqgF,2BAE3BpoG,KAAK2pG,WAAW1R,EAAa,yBAC1B,GAAI9sE,EAAI7W,KAAK+1C,OAASg+C,EAAQ4B,mBAAoB,CACrD,MAAM,WAAEvB,GAAev9E,EAAI7W,KACrBjT,EAAIrB,KAAKunG,MAAMptF,IAAIgR,EAAI7W,KAAK+1C,MAC5BjkD,EAAU,IAAI+hG,IAAIyB,QAExBxjG,EAAQ8jG,eAAelqG,KAAKipG,YAAaP,EAAWt2E,MAGpDpyB,KAAKipG,YAAYkB,qBAAqB/jG,GAGtC,MAAMkO,EAAOlO,EAAQgkG,QAAQ1B,EAAWlpG,KAAMkpG,EAAWt2E,MAEzDi2E,EAAQjiG,QAAUA,EAClBiiG,EAAQ4B,wBAAqBljG,EAE7B/G,KAAKwqF,aAAa5iE,KAAKk/E,GAAiBE,+BAAgCoB,GAExEpoG,KAAKunG,MAAMroC,OAAO/zC,EAAI7W,KAAK+1C,MAC3BhpD,EAAEklB,UAEF,MAAM+P,EAAO+zE,GAAc/1F,GAE3B,GAAIgiB,EAAK7xB,IAAK,CACV,MAAMA,EAAMglG,GAAAA,YAAqBnzE,EAAK7xB,KAChC+hG,EAAWlwE,EAAKkwE,SAEtB6B,EAAQiC,QAAU7lG,EAClBzE,KAAKwqF,aAAa5iE,KAAKk/E,GAAiBG,wBAAyBmB,EAAK3jG,EAAK+hG,SAG/Ez5E,GAAOhF,KAAK,oCAEZ/nB,KAAK2pG,WAAW1R,EAAa,gBAEjC,MAEJ,KAAK2O,GACD75E,GAAO1V,MAAM8T,EAAI7W,KAAK+C,OAEtB,MAEJ,KAAKuvF,GACD,GAAIyB,EAAQjiG,QAAS,CACjB,MAAM,WAAEsiG,GAAev9E,EAAI7W,KAErBgiB,EAAO+zE,GADAhC,EAAQjiG,QAAQgkG,QAAQ1B,EAAWlpG,KAAMkpG,EAAWt2E,OAGjE,QAAiBrrB,IAAbuvB,EAAK7xB,UAAuCsC,IAAlBuvB,EAAKkwE,SAAwB,CACvD,MAAM/hG,IAAM6xB,EAAK7xB,KAAMglG,GAAAA,YAAqBnzE,EAAK7xB,KAC3C+hG,EAAWlwE,EAAKkwE,SAEjB+D,IAAAA,CAAQlC,EAAQiC,QAAS7lG,KAC1B4jG,EAAQiC,QAAU7lG,EAClBzE,KAAKwqF,aAAa5iE,KAAKk/E,GAAiBG,wBAAyBmB,EAAK3jG,EAAK+hG,IAI/E,MAAMwD,EAAM,CACR,CAACxB,IAAsB7B,GACvB8B,IAAK,CACDjpG,KAAMonG,GACNtyF,KAAM,CACFo0F,WAAY1oG,KAAK2oG,gBAAgBN,EAAQjiG,SACzCikD,KAAMl/B,EAAI7W,KAAK+1C,QAK3BrqD,KAAK4oG,aAAaoB,EAAK5B,SAG3Br7E,GAAOw4B,MAAO,kCAAiC6iD,sCAE/CpoG,KAAK2pG,WAAW1R,EAAa,8CAEjC,MAEJ,KAAK2O,GACD,GAAIyB,EAAQjiG,QAAS,CACjB,MAAM,WAAEsiG,GAAev9E,EAAI7W,KAErBgiB,EAAO+zE,GADAhC,EAAQjiG,QAAQgkG,QAAQ1B,EAAWlpG,KAAMkpG,EAAWt2E,OAGjE,QAAiBrrB,IAAbuvB,EAAK7xB,UAAuCsC,IAAlBuvB,EAAKkwE,SAAwB,CACvD,MAAM/hG,IAAM6xB,EAAK7xB,KAAMglG,GAAAA,YAAqBnzE,EAAK7xB,KAC3C+hG,EAAWlwE,EAAKkwE,SAEjB+D,IAAAA,CAAQlC,EAAQiC,QAAS7lG,KAC1B4jG,EAAQiC,QAAU7lG,EAClBzE,KAAKwqF,aAAa5iE,KAAKk/E,GAAiBG,wBAAyBmB,EAAK3jG,EAAK+hG,IAInF,MAAMnlG,EAAIrB,KAAKunG,MAAMptF,IAAIgR,EAAI7W,KAAK+1C,MAElCrqD,KAAKunG,MAAMroC,OAAO/zC,EAAI7W,KAAK+1C,MAC3BhpD,EAAEklB,eAEFwG,GAAOw4B,MAAO,sCAAqC6iD,sCAEnDpoG,KAAK2pG,WAAW1R,EAAa,mDAYzC2P,mBAAmBzjG,EAAI8zF,GACnBlrE,GAAOw4B,MAAO,eAAcphD,UAE5BnE,KAAK8oG,wBAAwB7Q,GAYE,oCAACA,EAAa91F,EAAMohG,EAAUp5D,GAC7D,GACK,iBADGhoC,GAEAgoC,GAAYnqC,KAAKmnG,MAAMqD,gBAAiB,CACxC,MAAMzC,EAAqB/nG,KAAKmnG,MAAMtM,WAChC1L,EAAgB8I,EAAYiI,QAGlC,UAFkCjI,EAAYmM,eAEtB55D,IAAIw9D,KAAiBD,EAAqB5Y,EAAe,CACzEnvF,KAAKwnG,8BACCxnG,KAAKwnG,6BAETxnG,KAAKioG,iBAAiBhQ,GAE5B,MAAMoQ,EAAUroG,KAAKsoG,uBAAuBrQ,GACtC5tC,EAAOk+C,KACPj0F,EAAO,CACT,CAACk0F,IAAsB7B,GACvB8B,IAAK,CACDjpG,KAAMonG,GACNtyF,KAAM,CACFo0F,WAAY1oG,KAAK2oG,gBAAgBN,EAAQjiG,SACzCikD,KAAAA,KAKZrqD,KAAK4oG,aAAat0F,EAAM66E,KAcxCwa,WAAW1R,EAAa5gF,GACpB,MAAM+wF,EAAMnQ,EAAYiI,QAClBtwF,EAAM,CACR,CAAC44F,IAAsB7B,GACvB8B,IAAK,CACDjpG,KAAMonG,GACNtyF,KAAM,CACF+C,MAAAA,KAKZrX,KAAK4oG,aAAah5F,EAAKw4F,GAW3BQ,aAAat0F,EAAM66E,GACfnvF,KAAKmnG,MAAMsD,YAAYn2F,EAAM66E,GAUjC8Y,iBAAiBhQ,GACb,MAAMmQ,EAAMnQ,EAAYiI,QAClBmI,EAAUroG,KAAKsoG,uBAAuBrQ,GAE5C,GAAIoQ,EAAQjiG,QAGR,OAFA2mB,GAAOhF,KAAM,iCAAgCqgF,mCAEtC9hF,QAAQzU,SAGnB,QAAmC9K,IAA/BshG,EAAQ4B,mBAGR,OAFAl9E,GAAOhF,KAAM,iCAAgCqgF,2CAEtC9hF,QAAQzU,SAInB7R,KAAKipG,YAAYyB,uBAAuB,GAExC,MAAMC,EAAS1/E,KAAKnmB,MAAM9E,KAAKipG,YAAY2B,iBACrCb,EAAQzrG,OAAOqN,OAAOg/F,EAAOrB,YAAY,GAE/C,IAAKS,EACD,OAAOzjF,QAAQzU,OAAO,IAAIpD,MAAM,+BAIpCzO,KAAKipG,YAAY4B,yBAEjB,MAAMxgD,EAAOk+C,KACPpiF,EAAO,CACT,CAACqiF,IAAsB7B,GACvB8B,IAAK,CACDjpG,KAAMonG,GACNtyF,KAAM,CACFw1F,MAAO9pG,KAAKqpG,OACZU,MAAAA,EACA1/C,KAAAA,KAKNhpD,EAAI,IAAI4jG,GAcd,OAZA5jG,EAAE+jG,iBAvkBU,KAwkBZ/jG,EAAE8qE,OAAM,KACJnsE,KAAKunG,MAAMroC,OAAO7U,GAClBg+C,EAAQ4B,wBAAqBljG,KAEjC/G,KAAKunG,MAAMt+E,IAAIohC,EAAMhpD,GAErBrB,KAAK4oG,aAAaziF,EAAMiiF,GAGxBC,EAAQ4B,mBAAqB5/C,EAEtBhpD,GAYf,SAASgpG,GAAc/1F,GACnB,IACI,OAAO2W,KAAKnmB,MAAMwP,GACpB,MAAO5R,GACL,MAAO,IAZfwkG,GAAW1/E,OAASs/E,GCvlBpB,MAAM/5E,IAASmB,EAAAA,EAAAA,4CASR,MAAM48E,GAKTlsG,YAAYgzB,GACR5xB,KAAK4xB,WAAaA,EAElB5xB,KAAK+qG,mBAAoB,EACzB/qG,KAAKgrG,UAAW,EAChBhrG,KAAKqnG,UAAOtgG,EACZ/G,KAAKirG,eAAYlkG,EAEjB/G,KAAKkrG,SAAW,IAAIC,GACpBnrG,KAAKorG,YAAc,IAAIlE,GAAWt1E,GAGlC5xB,KAAKqrG,YAAcC,IAAAA,CAAStrG,KAAKurG,gBAtBjB,KAuBhBvrG,KAAKwrG,WAAaF,IAAAA,CAAStrG,KAAKyrG,eAvBhB,KA4BhBzrG,KAAK4xB,WAAW/K,GACZsuE,GACA,KACIn1F,KAAK+qG,mBAAoB,KAEjC/qG,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAK6nG,8BAA8B3hG,KAAKlG,OAC5CA,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAK0rG,qBAAqBxlG,KAAKlG,OACnCA,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAK4nG,mBAAmB1hG,KAAKlG,OAOjCA,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAK2rG,uBAAuBzlG,KAAKlG,OACrCA,KAAK4xB,WAAW/K,GACZsuE,IACArlE,GAASA,EAAM+B,WAAa7xB,KAAK4rG,mBAAmB97E,KACxD9vB,KAAK4xB,WAAWmmE,IAAIlxE,GAChBs0E,KAAAA,oBACA,CAACrrE,EAAO42D,IAAQ1mF,KAAK6rG,2BAA2BnlB,EAAK52D,KACzD9vB,KAAK4xB,WAAW/K,GACZsuE,GACAn1F,KAAK8rG,kBAAkB5lG,KAAKlG,OAGhCA,KAAKorG,YAAYvkF,GACbqgF,GAAW1/E,OAAOu/E,iBAClB/mG,KAAK+rG,iBAAiB7lG,KAAKlG,OAC/BA,KAAKorG,YAAYvkF,GACbqgF,GAAW1/E,OAAOw/E,+BAClBhnG,KAAKgsG,+BAA+B9lG,KAAKlG,OAC7CA,KAAKorG,YAAYvkF,GACbqgF,GAAW1/E,OAAOy/E,wBAClBjnG,KAAKisG,yBAAyB/lG,KAAKlG,OASzB,mBAACsD,GACf,QAASA,EAAO4oG,SAAW5oG,EAAO4oG,QAAQC,eAClCjrF,GAAQkgE,6BACJ99E,EAAO8oG,+BAAiClrF,GAAQggE,6BACrDgmB,GAAWnrC,cAQtBswC,YACI,OAAOrsG,KAAKgrG,SASA,iBAACpO,GACb,GAAIA,IAAY58F,KAAKgrG,SACjB,OASJ,GANAhrG,KAAKirG,iBAAmBjrG,KAAKirG,UAE7BjrG,KAAKirG,UAAY,IAAIhG,GAErBjlG,KAAKgrG,SAAWpO,EAEZA,QACM58F,KAAKorG,YAAYkB,mBACpB,CACH,IAAK,MAAMrU,KAAej4F,KAAK4xB,WAAW8qE,kBACtC18F,KAAKkrG,SAASpF,QAAQ7N,EAAYiI,SAEtClgG,KAAKorG,YAAYpC,+BAGrBhpG,KAAK4xB,WAAW26E,4BAA4B,eAAgB3P,GAE5D58F,KAAK4xB,WAAW46E,wBAGhBxsG,KAAKqnG,OAAOzK,GAAU58F,KAAKysG,eAG3B,MAAM5rG,QAAcb,KAAKorG,YAAYsB,UAAU1sG,KAAKqnG,MAGpDrnG,KAAKkrG,SAAS3E,OAAOvmG,KAAK4xB,WAAWipE,WAAY76F,KAAKqnG,KAAMxmG,GAE5Db,KAAKirG,UAAU1kF,UASnBkmF,eACI,OAAOhwG,OAAOgD,OAAO20E,gBAAgB,IAAIn2E,WAAW,KAQxD2tG,mBAAmB97E,GACf,IAAK,MAAM1pB,KAAWpG,KAAK4xB,WAAW+6E,oBAClC3sG,KAAK4sG,yBAAyBxmG,EAAS0pB,GAS/C67E,uBAAuBvlG,GACnB,MAAMymG,EAAc7sG,KAAK4xB,WAAW0gE,iBAEpC,IAAK,MAAMxiE,KAAS+8E,EAChB7sG,KAAK4sG,yBAAyBxmG,EAAS0pB,GAQ/Ci8E,iBAAiBjC,GACb/8E,GAAOw4B,MAAO,qBAAoBukD,KAGlC9pG,KAAK4xB,WAAW26E,4BAA4B,aAAczC,GAO9D4B,uBACQ1rG,KAAK+qG,mBAAqB/qG,KAAKgrG,UAC/BhrG,KAAKqrG,cAQbzD,mBAAmBzjG,GACfnE,KAAKkrG,SAASpF,QAAQ3hG,GAElBnE,KAAKgrG,UACLhrG,KAAKwrG,aAQbQ,+BAA+B7nG,GAC3B4oB,GAAOw4B,MAAO,iCAAgCphD,cAWlD8nG,yBAAyB9nG,EAAIM,EAAK5D,GAC9BksB,GAAOw4B,MAAO,eAAcphD,uBAE5BnE,KAAKkrG,SAAS3E,OAAOpiG,EAAIM,EAAK5D,GAYC,oCAACo3F,EAAa91F,EAAMohG,EAAUp5D,GAC7D,OAAQhoC,GACR,IAAK,aACD4qB,GAAOw4B,MAAO,eAAc0yC,EAAYiI,iCAAiC/1D,KACzE,MACJ,IAAK,gBACIA,GAAYnqC,KAAKgrG,WAClBhrG,KAAKorG,YAAYtC,wBAAwB7Q,GAEzCj4F,KAAKwrG,eAWI,wBACjBz+E,GAAOw4B,MAAM,mBAEb,MAAMunD,QC/NPz+F,eAAyB0+F,GAE5B,OAAOttG,OAAOutG,OAAOC,UAAU,MAAOF,EAAU,QAAQ,EAAO,CAAE,aAAc,cD6NpDE,CAAUjtG,KAAKqnG,MAChC6F,QCnPP7+F,eAAuBy+F,GAC1B,MAAMK,EAAc,IAAIC,YAGxB,OAAO3tG,OAAOutG,OAAOK,WAAW,CAC5BlrG,KAAM,OACNswD,KAAM06C,EAAYG,OAAO,oBACzBtsG,KAAM,UACNyM,KAAM,IAAIlQ,aACXuvG,EAAU,KD0OYS,CAAQT,GAE7B9sG,KAAKqnG,KAAO,IAAIppG,WAAWivG,GAE3B,MAAMrsG,EAAQb,KAAKorG,YAAYvC,iBAAiB7oG,KAAKqnG,MAErDrnG,KAAKkrG,SAAS3E,OAAOvmG,KAAK4xB,WAAWipE,WAAY76F,KAAKqnG,KAAMxmG,GAS5C,uBAChBksB,GAAOw4B,MAAM,gBAEbvlD,KAAKqnG,KAAOrnG,KAAKysG,eACjB,MAAM5rG,QAAcb,KAAKorG,YAAYsB,UAAU1sG,KAAKqnG,MAEpDrnG,KAAKkrG,SAAS3E,OAAOvmG,KAAK4xB,WAAWipE,WAAY76F,KAAKqnG,KAAMxmG,GAQhEgrG,2BAA2BnlB,EAAK52D,GAC5B,IAAK9vB,KAAKgrG,SACN,OAGJ,MAAMplF,EAAW8gE,EAAI8mB,qBAAqB19E,EAAMA,OAE5ClK,EACA5lB,KAAKkrG,SAASlF,eAAepgF,EAAUkK,EAAM0nE,UAAW1nE,EAAM4B,oBAE9D3E,GAAOhF,KAAM,6BAA4B+H,6BAAiC42D,KAWlFkmB,yBAAyBxmG,EAAS0pB,GAC9B,IAAK9vB,KAAKgrG,SACN,OAGJ,MAAMxlC,EAAKp/D,EAAQ49E,eACbhe,EAASR,GAAMA,EAAGioC,mBAAmB39E,EAAMA,OAE7Ck2C,EACAhmE,KAAKkrG,SAAS7E,aAAargC,EAAQl2C,EAAM0nE,UAAW1nE,EAAM4B,oBAE1D3E,GAAOhF,KAAM,6BAA4B+H,0BAA8B01C,KAS/EsmC,kBAAkBh8E,GACd,GAAI5O,GAAQs+D,+BAAiC1vD,EAAM+B,WAAa/B,EAAM2B,iBAAmB3B,EAAMynE,UAC3F,IAAK,MAAMnxF,KAAWpG,KAAK4xB,WAAW+6E,oBAClC3sG,KAAK4sG,yBAAyBxmG,EAAS0pB,8BEpVvD,MAAM49E,GAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,GAAkC,CAAE,WAAY,OAAQ,QAQ9D,SAASC,GAAkB1sG,EAAGC,GAC1B,IAAI0sG,EAAM,EAMV,OAJAF,GAAgC9/F,MAAKpJ,GACiC,KAAjEopG,EAAQ3sG,EAAEuD,GAAOtD,EAAEsD,GAAS,EAAQvD,EAAEuD,GAAOtD,EAAEsD,KAAU,KAGvDopG,EA+BJ,SAASC,GAAe9wG,GAC3B,MAAMsrD,EAAW,IAAIxiB,IACfioE,EAAa,IAAIjoE,IAWvB,OATAkoE,EAAEhxG,GAAM0N,KAAK,kBACR8E,MAAK,CAACy+F,EAAGjlG,IAAOs/C,EAASvkB,IAAI/6B,EAAGi7C,aAAa,UAClD+pD,EAAEhxG,GAAM0N,KAAK,mBACR8E,MAAK,CAACy+F,EAAGjlG,IAAO+kG,EAAWhqE,IAAI,CAC5BvkC,KAAMwJ,EAAGi7C,aAAa,QACtB9hD,KAAM6G,EAAGi7C,aAAa,QACtB4V,SAAU7wD,EAAGi7C,aAAa,gBAG3B,CACHqE,SAAAA,EACAylD,WAAAA,GAOO,MAAMG,WAAaxH,GAO9B9nG,YAAYuzD,EAAa,GAAIn1D,EAAO,8BAIhC,GAHA0gF,QACA19E,KAAKhD,KAAOA,EACZgD,KAAKmuG,MAAQh8C,EAAWg8C,OACnBnuG,KAAKmuG,MACN,MAAM,IAAI1/F,MACN,uDAIRzO,KAAK2I,QAAU,GACf3I,KAAKouG,MAAQ,IAAItoE,IAIjB9lC,KAAKquG,iBAAmB,IAAIvoE,IAE5B,MAAMwoE,EAAOn8C,EAAWm8C,KAExBA,EAAKv7F,YAAY8kF,KAAAA,iBACbF,GAAQ33F,KAAKuuG,aAAa5W,KAC9B2W,EAAKv7F,YAAY8kF,KAAAA,mBACbF,GAAQ33F,KAAKwuG,gBAAgB7W,KACjCr5F,OAAOiG,KAAK+pG,EAAKF,OAAO5pG,SAAQqgD,IAC5B7kD,KAAKuuG,aAAaD,EAAKF,MAAMvpD,OAGjCvG,GAAAA,QAAAA,aAAqB,OAAQ,mCAC7Bt+C,KAAKmuG,MAAMp0C,WAAWzb,GAAAA,QAAAA,GAAAA,MAa1Byb,WAAWuqC,EAASmK,GAAS,EAAOC,GAAW,GAC3C1uG,KAAKmuG,MAAMp0C,WAAWuqC,GACtBtkG,KAAK2uG,mBAEDD,IAAa1uG,KAAKquG,iBAAiB7jE,IAAI85D,KACvCtkG,KAAKquG,iBAAiBtqE,IAAIugE,GAC1BtkG,KAAKouG,MAAM5pG,SAAQmzF,GAAQ33F,KAAK4uG,gCAAgCjX,MAGhE8W,GACAzuG,KAAKyuG,SAYbx0C,cAAcqqC,EAASmK,GAAS,EAAOC,GAAW,GAC9C1uG,KAAKmuG,MAAMl0C,cAAcqqC,GACzBtkG,KAAK2uG,mBAEDD,GAAY1uG,KAAKquG,iBAAiB7jE,IAAI85D,KACtCtkG,KAAKquG,iBAAiBnvC,OAAOolC,GAC7BtkG,KAAKouG,MAAM5pG,SAAQmzF,GAAQ33F,KAAK4uG,gCAAgCjX,MAGhE8W,GACAzuG,KAAKyuG,SAObA,SACIzuG,KAAKouG,MAAM5pG,SAAQmzF,GAAQA,EAAKvrC,iBAQpCwiD,gCAAgCjX,GAC5B,GAAmC,IAA/B33F,KAAKquG,iBAAiB98E,KACtBomE,EAAKkX,mBAAmB,gBACrB,CACH,MAAMC,EAAW,GAEjB9uG,KAAKquG,iBAAiB7pG,SAAQie,IAC1BqsF,EAAS/rG,KAAK,CACV,QAAW,UACX+8C,WAAY,CAAE,IAAOr9B,QAI7Bk1E,EAAKoX,uBAAuB,WAAY,CAAED,SAAAA,KAUlDE,yBAAyBnqD,EAAK7nD,EAAMsvD,EAAU,KAC1C,OAAOtsD,KAAKivG,cAAcpqD,EAAK7nD,EAAMsvD,GAWzC2iD,cAAcpqD,EAAK7nD,EAAMsvD,GACrB,OAAO,IAAIhmC,SAAQ,CAACC,EAAS1U,IACzB7R,KAAKmuG,MAAM1gG,KAAKo3C,EAAK7nD,GAAMk4B,IACvB3O,EAAQunF,GAAe54E,MACxBrjB,EAAQy6C,KASnBiiD,aAAa5W,GACT33F,KAAKouG,MAAMrqE,IAAI4zD,GACf33F,KAAKkvG,wBAAwBvX,GAE7B33F,KAAK4uG,gCAAgCjX,GAQzC6W,gBAAgB7W,GACZ33F,KAAKouG,MAAMlvC,OAAOy4B,GAOtBuX,wBAAwBvX,GACpBA,EAAKoX,uBAAuB,IAAK,CAC7BjvD,WAAY,CACRkG,MAAO1H,GAAAA,QAAAA,GAAAA,KACPt9C,KA3OH,QA4OGhE,KAAMgD,KAAKhD,KACXy7D,IAAKz4D,KAAK2I,WAQtBwmG,wBAEInvG,KAAKouG,MAAM5pG,SAAQmzF,GAAQ33F,KAAKkvG,wBAAwBvX,KAM5DgX,mBACI3uG,KAAK2I,QAtOb,SAAqBolG,EAAYzlD,GAC7B,MAAM8mD,EAAmBrB,EAAWv8F,KAAKo8F,IAAmB5mG,QACxD,CAACqoG,EAAkBlN,IAAc,GAC7BuL,GAAoB1mG,QAChB,CAACmS,EAAK1U,EAAKyhE,IACP/sD,GACe,IAAR+sD,EAAY,GAAK,MACjBi8B,EAAS19F,GAAO09F,EAAS19F,GAAO,KAC3C,QACH,IACH6qG,EAAiBhnD,EAAS92C,OAAOxK,QACnC,CAACmS,EAAKmrF,IAAa,GAAEnrF,EAAMmrF,MAAY,IAE3C,OAAOlnD,EAAAA,GAAAA,UAASgyD,EAAmBE,GA0NzBC,CAAYvvG,KAAKmuG,MAAM70C,YAAat5D,KAAKmuG,MAAM50C,WAErDv5D,KAAKmvG,iCCzQN,MAAMK,GAAqB,uBAE5BziF,IAASmB,EAAAA,EAAAA,kDA8Cf,GAFoB,IAnCb,cAA0Bw4E,GAI7B9nG,cACI8+E,QACA19E,KAAKyvG,SAAW,CACZC,UAAU,GAQlBC,mBAAkB,SAAED,IAChB3iF,GAAOw4B,MAAM,oBAAqB,CAAEmqD,SAAAA,IACpC1vG,KAAKyvG,SAAW,CACZC,UAAuB,IAAbA,GAEd1vG,KAAKwqF,aAAa5iE,KAAK4nF,GAAoBxvG,KAAKyvG,UAUpDC,WACI,OAAkC,IAA3B1vG,KAAKyvG,SAASC,WCtCvB3iF,IAASmB,EAAAA,EAAAA,yCAQA,MAAM0hF,GAKjBhxG,YAAYixG,GACR7vG,KAAK8vG,aAAeD,EAOpB7vG,KAAK+vG,cAAgB,EAErB/vG,KAAKgwG,iBAAcjpG,EAOnBkpG,iBACA,OAAOjwG,KAAKgwG,YAQhBE,WACIlwG,KAAKmwG,gBAELnwG,KAAK+vG,eAAiB,EAEtB/vG,KAAKowG,uBACCC,GAAAA,iBACEb,IACA,EAAGE,SAAAA,MACKA,EACA1vG,KAAKswG,kBAELtwG,KAAKmwG,mBAIrBE,GAAAA,YAA0BrwG,KAAKswG,kBAQnCA,kBACQtwG,KAAKuwG,iBAUTvwG,KAAK+vG,cAAgBzjG,KAAK2O,IAAI,EAAGjb,KAAK+vG,eACtC/vG,KAAKgwG,YCxEN,SAAwBp8F,EAAO48F,EAAW,IAAK1wC,EAAO,GACzD,OAAOxzD,KAAKC,MAAOD,KAAKE,UAAqC,IAAxBF,KAAK+sB,IAAIymC,EAAMlsD,GAAiB48F,GAAaA,GDuE3DC,CACHzwG,KAAK+vG,cACmB,KAArB/vG,KAAK+vG,cACpB,GAEJhjF,GAAOtf,KAAM,6CAA4CzN,KAAKiwG,gBAE9DjwG,KAAKuwG,eAAiBhhG,YAAW,IAAMvP,KAAK0wG,qBAAqB1wG,KAAKiwG,aAS1EE,gBACQnwG,KAAKuwG,iBACLxjF,GAAOtf,KAAK,oCACZie,aAAa1rB,KAAKuwG,gBAClBvwG,KAAKuwG,oBAAiBxpG,EACtB/G,KAAKgwG,iBAAcjpG,GAU3B2pG,oBACI,MAAM,iBAAEC,GAAqB3wG,KAAK8vG,aAC5Bc,EAAcD,EAAiB90C,iBAGrC,IAAK+0C,EACD,OAGJ7jF,GAAOtf,KAAK,wCAEZ,MAAM6W,EAAM,IAAI4N,IAAIlyB,KAAK8vG,aAAa7nD,SACtC,IAAI,OAAEllC,GAAWuB,EACjB,MAAMusF,EAAU,oBACVC,EAAW/tF,EAAOld,MAAMgrG,GAG1BC,IAA+C,IAAnCA,EAASllG,QAAQglG,GAC7B7tF,EAASA,EAAO9a,QAAQ4oG,EAAU,KAAID,KAG9BE,IACR/tF,IAAmC,IAAzBA,EAAOnX,QAAQ,KAAe,WAAUglG,IAAiB,WAAUA,KAGjFtsF,EAAIvB,OAASA,EAEb/iB,KAAK8vG,aAAa7nD,QAAU3jC,EAAI9lB,WAEhCmyG,EAAiBv6F,SASrBo3B,SACIxtC,KAAKmwG,gBACLnwG,KAAK+vG,cAAgB,EACjB/vG,KAAKowG,yBACLpwG,KAAKowG,yBACLpwG,KAAKowG,uBAAyB,OE1J3B,MAAMW,GAIjBnyG,cACIoB,KAAKgxG,aAAe,KACpBhxG,KAAKixG,mBAAqB,KAS9BC,cAAcC,EAAgBtB,GAC1B,MAAMuB,EAAmBvB,EAAkB9jD,SAE3C8jD,EAAkB9jD,SAAW,IAAIjkD,KAC7B,MAAMupG,EAAavpG,EAAK,GAEpBupG,EAAW57E,SAAS,aACpBz1B,KAAKixG,mBAAqBI,GAK1BF,EAAehoD,YACfnpD,KAAKgxG,aAAe5jF,KAAKgC,OAE7BgiF,EAAiB7oG,MAAMsnG,EAAmB/nG,IASlDwpG,uBACI,OAAOtxG,KAAKixG,mBAQhBM,0BACI,OAAOvxG,KAAKgxG,aACN5jF,KAAKgC,MAAQpvB,KAAKgxG,aAClB,MC/Cd,SAASQ,GAA8B1xC,EAAO,SAI1C,OAAO,cAAcA,EAIjBlhE,eAAekJ,GACX41E,SAAS51E,GACT9H,KAAKmyD,WAAa,KAOtBhsC,KAAKgsC,GACDnyD,KAAKmyD,WAAaA,IAQ9B,SAAeq/C,KAKFC,GACPD,GAA8B9K,IC/B9B35E,IAASmB,EAAAA,EAAAA,2CAwBA,MAAMwjF,WAA6BC,GAW9C/yG,aAAY,+BAAEgzG,EAAF,wBAAkCC,EAAlC,YAA2DC,EAAc,KACjFp0B,QACA19E,KAAK+xG,YAAc,EACnB/xG,KAAKgyG,yBAA2BH,EAChC7xG,KAAKiyG,gCAAkCL,EAEvC5xG,KAAKkyG,aAA+C,iBAAzBJ,EAAYzpB,SAAwBypB,EAAYzpB,SApCrD,IAqCtBroF,KAAKmyG,YAA6C,iBAAxBL,EAAYxlD,QAAuBwlD,EAAYxlD,QAhCpD,IAiCrBtsD,KAAKoyG,cAAiD,iBAA1BN,EAAYO,UAClCP,EAAYO,UA3BK,EA+BvBryG,KAAKsyG,qBAAuBhmG,KAAKkY,MAAM,KAASxkB,KAAKkyG,cACrDlyG,KAAKuyG,kBAAoB,IAAIp0G,MAAM6B,KAAKsyG,sBAO5CnsF,KAAKgsC,GACDurB,MAAMv3D,KAAKgsC,GACX7T,GAAAA,QAAAA,aAAqB,OAAQ,iBAajCk0D,KAAK3tD,EAAKuV,EAAS/iD,EAAOi1C,GACtBtsD,KAAKyyG,6BAEL,MAAMzhD,GAAKxS,EAAAA,GAAAA,KAAI,CACXh/C,KAAM,MACN66D,GAAIxV,IAGRmM,EAAG5vD,EAAE,OAAQ,CAAE4kD,MAAO1H,GAAAA,QAAAA,GAAAA,OACtBt+C,KAAKmyD,WAAWugD,QAAQ1hD,EAAI,CAAE1E,QAAAA,IACzB2V,KAAK7H,EAAS/iD,GAWvBs7F,cAAcC,GACV3oB,cAAcjqF,KAAKsoF,YACnBtoF,KAAKsoF,WAAa7rF,OAAO6sF,aAAY,KAKjC,MAAMl6D,EAAMhC,KAAKgC,MAEjB,GAAIpvB,KAAKiyG,kCAAoC7iF,EAAMpvB,KAAK6yG,iBAOpD,OALA7yG,KAAKyyG,6BAELzyG,KAAK6yG,iBAAmBzjF,OACxBpvB,KAAK+xG,YAAc,GAKvB/xG,KAAKwyG,KAAKI,GAAW,KAIjB5yG,KAAK6yG,iBAAmB7yG,KAAKiyG,kCAAoC7kF,KAAKgC,MAEtEpvB,KAAK+xG,YAAc,KACpB16F,IACCrX,KAAK+xG,aAAe,EACpB,MAAMe,EAAU,SAAOz7F,EAAQ,QAAU,WAErCrX,KAAK+xG,aAAe/xG,KAAKoyG,eACzB36E,KAAAA,iBAAsC,IAAIhpB,MAAMqkG,IAChD/lF,GAAO1V,MAAMy7F,EAAQz7F,GACrBrX,KAAKgyG,0BAA4BhyG,KAAKgyG,4BAEtCjlF,GAAOhF,KAAK+qF,EAAQz7F,KAEzBrX,KAAKmyG,eACTnyG,KAAKkyG,cACRnlF,GAAOtf,KAAM,iCAAgCzN,KAAKkyG,mBAMtDa,eACQ/yG,KAAKsoF,aACL7rF,OAAOwtF,cAAcjqF,KAAKsoF,YAC1BtoF,KAAKsoF,WAAa,KAClBtoF,KAAK+xG,YAAc,EACnBhlF,GAAOtf,KAAK,0BAQpBglG,6BACIzyG,KAAKuyG,kBAAkBxvG,MAAK,IAAIqqB,MAAO26B,WAGnC/nD,KAAKuyG,kBAAkBhzG,OAASS,KAAKsyG,sBACrCtyG,KAAKuyG,kBAAkBt8F,QAY/B+8F,qBACI,MAAMC,EAAgBjzG,KAAKuyG,kBAAkB/rG,QAM7CysG,EAAclwG,MAAK,IAAIqqB,MAAO26B,WAE9B,IAAImrD,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAczuG,SAAQ9B,IAClB,MAAM0wG,EAAkB1wG,EAAIywG,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAazwG,KAMjBwwG,GAAelzG,KAAKkyG,aAGb5lG,KAAK0O,IAAIk4F,EAAa,ICjMrC,MAAMnmF,IAASmB,EAAAA,EAAAA,6CAKA,MAAMmlF,WAAuB3M,GAM7B4M,oBACP,MAAO,CACHC,oBAAqB,sBACrBC,mBAAoB,sBASjBrzD,oBACP,OAAO7B,GAAAA,QAAAA,OAmBX1/C,aAAY,sBAAE60G,EAAF,mBAAyBC,EAAzB,sBAA6CC,EAA7C,WAAoEC,EAApE,MAAgFC,EAAhF,SAAuFC,IAC/Fp2B,QACA19E,KAAK+zG,SAAW,CACZN,2BAAwD,IAA1BA,GAA+CA,EAC7E3B,YAAagC,EACbD,MAAAA,EACAH,wBAAkD,IAAvBA,EAAqC,IAAYnuG,OAAOmuG,GACnFC,sBAAAA,GAGJ3zG,KAAK8vG,aAAe,IAAIxxD,GAAAA,QAAAA,WAAmBs1D,GAC3C5zG,KAAKg0G,eAAiBJ,EAAWK,WAAW,QAAUL,EAAWK,WAAW,QAG5Ej0G,KAAK8vG,aAAalmD,WAAa,EAE/B5pD,KAAKk0G,iBAAmB,IAAIC,GAC5Bn0G,KAAKk0G,iBAAiBhD,cAAclxG,KAAMA,KAAK8vG,cAE/C9vG,KAAKo0G,YAAc,IAAIxE,GAAW5vG,KAAK8vG,cAcvC9vG,KAAKq0G,aAAe,GAIpBr0G,KAAK8lD,oBACD,OACA,IAAI4rD,GAAqB,CACrBE,+BAAgC,IAAM5xG,KAAKuxG,0BAC3CM,wBAAyB,IAAM7xG,KAAKs0G,gCACpCxC,YAAagC,KAIrB9zG,KAAKu0G,uBAAwB,EAQ7BprD,gBACA,MAAMqrD,EAAYx0G,KAAK8vG,cAAgB9vG,KAAK8vG,aAAa3nD,QAAUnoD,KAAK8vG,aAAa3nD,OAAO4P,OAE5F,OAAQ/3D,KAAK26F,UAAYr8C,GAAAA,QAAAA,OAAAA,WAA4Bt+C,KAAK26F,UAAYr8C,GAAAA,QAAAA,OAAAA,aAC7Dt+C,KAAKy0G,kBAAqBD,GAAaA,EAAU5vF,aAAeozC,UAAU08C,MAQnFvG,YACA,OAAOnuG,KAAK8vG,aAAa3B,MAQzB/kD,oBACA,OAA2C,IAApCppD,KAAK8vG,aAAa1mD,cAQzBxL,aACA,OAAO59C,KAAK8vG,aAAalyD,OAQzB62D,uBACA,OAAOz0G,KAAKg0G,eAQZnvD,UACA,OAAO7kD,KAAK8vG,aAAajrD,IAQzBoQ,0BACA,OAAOj1D,KAAK8vG,aAAa3nD,QAAUnoD,KAAK8vG,aAAa3nD,OAAO8M,oBAQ5DloC,aACA,OAAO/sB,KAAK8vG,aAAa/iF,OAQzBnjB,cACA,OAAO5J,KAAK8vG,aAAalmG,QAMzB+qG,iBAAa,MACb,OAAO,UAAA30G,KAAK+zG,SAASjC,mBAAd,eAA2Bl0D,SAAU59C,KAAK49C,OAQjDqK,cACA,OAAOjoD,KAAK8vG,aAAa7nD,QAOzB4rD,UAAMhwG,GACN7D,KAAK+zG,SAASF,MAAQhwG,EAGlB7D,KAAKu0G,uBACLv0G,KAAK40G,yBAST5+E,aACA,OAAOh2B,KAAK26F,QAUhB70C,oBAAoB3jD,EAAMmsD,GACtBtuD,KAAKmC,GAAQmsD,EACbA,EAAOnoC,KAAKnmB,MAQhB03B,cAAc5vB,GACV9H,KAAK8vG,aAAap4E,cAAc5vB,GAUpCojD,OAAOrG,EAAKsG,EAAKC,EAAK37C,KAAa3H,GAC/B9H,KAAK8vG,aAAa5kD,OAAOrG,EAAKsG,EAAKC,EAAKprD,KAAK60G,qBAAqB3uG,KAAKlG,KAAMyP,MAAc3H,GAS/F0iD,QAAQ3F,EAAK4F,EAAMh7C,KAAa3H,GAC5B9H,KAAK8vG,aAAatlD,QAAQ3F,EAAK4F,EAAMzqD,KAAK60G,qBAAqB3uG,KAAKlG,KAAMyP,MAAc3H,GAc5F+sG,qBAAqBC,EAAgB9+E,KAAWluB,GAC5C9H,KAAK26F,QAAU3kE,EAEf,IAAI++E,GAAgB,EAE2D,MAA3E/+E,IAAWsoB,GAAAA,QAAAA,OAAAA,WAA4BtoB,IAAWsoB,GAAAA,QAAAA,OAAAA,UAClDt+C,KAAKg1G,2BAIDh1G,KAAKg0G,gBAAkBh0G,KAAKu0G,uBAC5Bv0G,KAAKi1G,0BAETj1G,KAAKu0G,uBAAwB,EAE7Bv0G,KAAK40G,yBACL50G,KAAKk1G,sBACLl1G,KAAKo0G,YAAY5mE,SACjBxtC,KAAKwyG,KAAKG,eAAc,UAAA3yG,KAAK+zG,SAASjC,mBAAd,eAA2Bl0D,SAAU59C,KAAK49C,SAC3D5nB,IAAWsoB,GAAAA,QAAAA,OAAAA,eAClBt+C,KAAKwyG,KAAKO,eAGVgC,EAAgB/0G,KAAKm1G,yBAChBJ,GACDrpF,aAAa1rB,KAAKo1G,eAIrBL,IACDD,EAAe9+E,KAAWluB,GAC1B9H,KAAKwqF,aAAa5iE,KAAKyrF,GAAeC,OAAOC,oBAAqBv9E,IAS1Eq/E,oBACI,IAAK,MAAMC,KAAYt1G,KAAKq0G,aACxBiB,EAASzjG,OAAO,IAAIpD,MAAM,eAE9BzO,KAAKq0G,aAAe,GAQxBkB,iBACQv1G,KAAK8vG,cAAgB9vG,KAAK8vG,aAAa3nD,SACvCnoD,KAAK8vG,aAAa3nD,OAAO2P,eACzB93D,KAAK8vG,aAAa3nD,OAAOkQ,SAAS,OAS1CvK,cAAchmD,GACV9H,KAAKo0G,YAAY5mE,SACjB9hB,aAAa1rB,KAAKo1G,cAClBp1G,KAAKq1G,oBACLr1G,KAAK8vG,aAAahiD,cAAchmD,GAQpC6jB,SAAS7jB,GACL9H,KAAK8vG,aAAankF,SAAS7jB,GAQ/BypG,0BACI,OAAOvxG,KAAKk0G,iBAAiB3C,0BAQjCD,uBACI,OAAOtxG,KAAKk0G,iBAAiB5C,uBAQjC0D,2BACI,IAAKh1G,KAAK+zG,SAASN,sBAEf,OAGJ,MAAM,iBAAE9C,GAAqB3wG,KAAK8vG,aAE7B9vG,KAAKy0G,iBAEE9D,EAEAA,EAAiB50C,cAEjB40C,EAAiB90C,mBACzB9uC,GAAOtf,KAAK,uCACZkjG,EAAiBh1C,QAAoB,IAHrC5uC,GAAOhF,KAAK,sEAFZgF,GAAOhF,KAAK,+EAFZgF,GAAOhF,KAAK,yDAiBpB6sF,yBACI,MAAM,mBAAElB,GAAuB1zG,KAAK+zG,SAEpC,GAAI/zG,KAAKg0G,gBAAkBN,EAAqB,EAAG,CAC/C1zG,KAAKo1G,cAAgBroF,GAAOtf,KAAM,kCAAiCimG,OACnEhoF,aAAa1rB,KAAKo1G,cAElB,MAAMI,EAAgC9B,EAAmD,GAAhBpnG,KAAKE,SAAgB,IAE9FugB,GAAOw4B,MAAO,2CAA0CiwD,OAExDx1G,KAAKo1G,aAAe7lG,YAChB,IAAMvP,KAAKi1G,0BACNhzC,MAAK,IAAMjiE,KAAK40G,4BACrBY,IAUZP,0BACI,MAAM,MAAEpB,EAAF,sBAASF,GAA0B3zG,KAAK+zG,SACxCzvF,EAAMqvF,GACN3zG,KAAKioD,QAAQhgD,QAAQ,SAAU,YAAYA,QAAQ,QAAS,WAElE,OAAOwtG,MAAMnxF,GACR29C,MAAK/sC,IAGF,IAAK2+E,EACD,OAGJ,MAAM6B,EAAgBxgF,EAASiiC,QAAQh9C,IAAI,iBAEvCu7F,IAAkB7B,IAClB9mF,GAAO1V,MACF,oCAAmCw8F,QAAY6B,KACpD11G,KAAKwqF,aAAa5iE,KAAKyrF,GAAeC,OAAOE,wBAGpDrnC,OAAM90D,IACH0V,GAAO1V,MAAO,wCAAuCiN,IAAO,CAAEjN,MAAAA,OAU1E69F,sBACI,IAAK,MAAMI,KAAYt1G,KAAKq0G,aACxB,GAAIiB,EAAStkD,GAAI,CACbtlC,aAAa4pF,EAAShpD,SAEtB,MAAMqpD,EAAWvoF,KAAKgC,MAAQkmF,EAASj1G,MAEvCL,KAAK6sD,OACDyoD,EAAStkD,IACT/+C,GAAUqjG,EAAS/uF,QAAQtU,KAC3BoF,GAASi+F,EAASzjG,OAAOwF,IACzBs+F,GAIZ31G,KAAKq0G,aAAe,GASxBlgF,KAAKs4B,GACD,IAAKzsD,KAAKmpD,UACN,MAAM,IAAI16C,MAAM,iBAEpBzO,KAAK8vG,aAAa37E,KAAKs4B,GAa3BI,OAAO7K,EAAMvyC,EAAU48C,EAASC,GAC5B,GAAKtsD,KAAKmpD,UAMV,OAAOnpD,KAAK8vG,aAAajjD,OAAO7K,EAAMvyC,EAAU48C,EAASC,GALrDD,EAAQ,iBAgBhBqmD,QAAQ1hD,GAAI,QAAE1E,IACV,OAAO,IAAIhmC,SAAQ,CAACC,EAAS1U,KACzB,GAAI7R,KAAKmpD,UACLnpD,KAAK6sD,OACDmE,GACA/+C,GAAUsU,EAAQtU,KAClBoF,GAASxF,EAAOwF,IAChBi1C,OACD,CACH,MAAMgpD,EAAW,CACbtkD,GAAAA,EACAzqC,QAAAA,EACA1U,OAAAA,EACAxR,MAAO+sB,KAAKgC,MACZk9B,QAAS/8C,YAAW,KAEhB+lG,EAAStkD,QAAKjqD,EAGd8K,OAAO9K,KACRulD,IAGPtsD,KAAKq0G,aAAatxG,KAAKuyG,OAUnChB,gCACQt0G,KAAKy0G,mBACL1nF,GAAOhF,KAAK,yDACZ/nB,KAAKu1G,kBAebnpD,aAAapK,EAAMvyC,EAAU48C,EAASC,GAC7BtsD,KAAKmpD,UAKVnpD,KAAK8vG,aAAa1jD,aAAapK,EAAMvyC,EAAU48C,EAASC,GAJpDD,EAAQ,iBAYhBupD,wBACI,IAAKj1C,UAAUk1C,YAAc71G,KAAK8vG,aAAa1mD,gBAAkBppD,KAAK8vG,aAAa3mD,UAC/E,OAAO,EAGXnpD,KAAK8vG,aAAa9kD,qBAAqB1M,GAAAA,QAAAA,OAAAA,eACvCt+C,KAAK8vG,aAAa1mD,eAAgB,EAElC,MAAMh3B,EAAOpyB,KAAK8vG,aAAa3nD,OAAO+M,aACjC7W,MAAM,CACH7+C,KAAM,cAERuuD,GAAOtP,EAAAA,GAAAA,OAAM,CACfuH,MAAO1H,GAAAA,QAAAA,GAAAA,OACP9+C,KAAM,gBAGV4yB,EAAKi0B,MAAM0H,EAAKtI,QAEhB,MAAMooD,EAAMltC,UAAUk1C,YACoB,IAAtC71G,KAAKioD,QAAQr8C,QAAQ,YAAsB,SAAQ5L,KAAKioD,UAAYjoD,KAAKioD,QACzE3J,GAAAA,QAAAA,UAAkBlsB,EAAKqzB,SAO3B,OALA14B,GAAOtf,KAAM,wCAAuCogG,KAEpD7tG,KAAK8vG,aAAa3nD,OAAOgG,oBACzBnuD,KAAK8vG,aAAa1hD,iBAEX,EAWX+mD,yBACI,MAAM,iBAAExE,GAAqB3wG,KAAK8vG,aAGlC,SAFoBa,IAAoBA,EAAiB90C,mBAGrD77D,KAAKo0G,YAAYlE,WAEV,KCnnBZ,MAAM4F,GAAK,KAOLC,GAAM,MCNbhpF,IAASmB,EAAAA,EAAAA,2CAKA,MAAM8nF,GAOjBp3G,YAAY+4F,GACR33F,KAAKi2G,MAAQte,EAAKzE,KAElBlzF,KAAKk2G,UAAYve,EAEjB33F,KAAKm2G,yBAA2B,CAC5B,CAAChkB,KAAkB,EACnB,CAACA,KAAkB,GAGvBnyF,KAAKo2G,gBAAkB,GACvBp2G,KAAKq2G,gBAAkB,GAEvBr2G,KAAKi2G,MAAMljG,YAAY8kF,KAAAA,uBAAmC73F,KAAK84D,WAAW5yD,KAAKlG,OAQnF+7D,cACI,OAAO8jB,QAAQ7/E,KAAKi2G,MAAMK,8BAM9B36C,OAAOvzC,EAAO2zD,GACV,IAAK/7E,KAAK+7D,gBAAkB/7D,KAAKk2G,UAAUjc,cAIvC,YAHAltE,GAAO1V,MAAO,iBAAgB+Q,6BAAiCpoB,KAAK+7D,8CACpD/7D,KAAKk2G,UAAUjc,iBAKnC,GAAI7xE,IAAUpoB,KAAKm2G,yBAAyBp6B,GAGxC,YAFAhvD,GAAOhF,KAAM,+BAA8BK,mBAAuB2zD,KAMtE,MAAM5wD,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAKi2G,MAAMK,+BAElCnrF,EAAI/pB,EAAE,gBAAiB,CACnBu6D,OAAQvzC,EACR2zD,UAAAA,IACD71B,KAEHlmD,KAAKi2G,MAAM9jD,WAAWh+B,KAAKhJ,GAM/BorF,QAAQx6B,EAAWl3B,GACf,IAAK7kD,KAAK+7D,gBAAkB/7D,KAAKk2G,UAAUjc,cAIvC,YAHAltE,GAAO1V,MAAO,6CAA4CrX,KAAK+7D,8CAC/C/7D,KAAKk2G,UAAUjc,iBAMnC,MAAM9uE,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAKi2G,MAAMK,+BAElCnrF,EAAI/pB,EAAE,gBAAiB,CACnB26E,UAAAA,EACAy6B,eAAgB3xD,IAAOqB,KAE3BlmD,KAAKi2G,MAAM9jD,WAAWh+B,KAAKhJ,GAM/BtZ,OAAOkqE,EAAWl3B,GACd,IAAK7kD,KAAK+7D,gBAAkB/7D,KAAKk2G,UAAUjc,cAIvC,YAHAltE,GAAO1V,MAAO,4CAA2CrX,KAAK+7D,6CAC9C/7D,KAAKk2G,UAAUjc,iBAMnC,MAAM9uE,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAKi2G,MAAMK,+BAElCnrF,EAAI/pB,EAAE,gBAAiB,CACnB26E,UAAAA,EACA06B,eAAgB5xD,IACjBqB,KAEHlmD,KAAKi2G,MAAM9jD,WAAWh+B,KAAKhJ,GAQ/B2tC,WAAWz6D,GACP,MAAM,QAAEq4G,EAAS36B,UAAW11E,EAAtB,QAA6Bu2F,EAA7B,SAAsC+Z,EAAtC,MAAgDte,EAAOue,WAAYC,GAAkBx4G,EAE3F,GAAIw4G,EAAe,CACf,MAAMC,EAAUzwG,IAAU8rF,GACpBnyF,KAAKo2G,gBACLp2G,KAAKq2G,gBACLnnD,EAAU/wD,MAAMC,QAAQy4G,EAAcxwG,IAAUwwG,EAAcxwG,GAAS,GAEzEqwG,EACAI,EAAQxwG,QAAO4B,IAAMgnD,EAAQz5B,SAASvtB,KACjC1D,SAAQqgD,GAAO7kD,KAAKi2G,MAAMzrB,aACtB5iE,KAAKiwE,KAAAA,mCAA+CxxF,EAAOw+C,KAEpEqK,EAAQ5oD,QAAO4B,IAAM4uG,EAAQrhF,SAASvtB,KACjC1D,SAAQqgD,GAAO7kD,KAAKi2G,MAAMzrB,aACtB5iE,KAAKiwE,KAAAA,mCAA+CxxF,EAAOw+C,KAGpEx+C,IAAU8rF,GACVnyF,KAAKo2G,gBAAkBlnD,EAEvBlvD,KAAKq2G,gBAAkBnnD,OAExB,QAAgBnoD,IAAZ61F,GAAyB58F,KAAKm2G,yBAAyB9vG,KAAWu2F,EACzE58F,KAAKm2G,yBAAyB9vG,GAASu2F,EAEvC58F,KAAKi2G,MAAMzrB,aAAa5iE,KAAKiwE,KAAAA,sBAAkC+E,EAASv2F,EAAOgyF,QAC5E,GAAIse,EAAU,CACjB,MAAMp/E,EAAQm/E,EAAU7e,KAAAA,uBAAoCA,KAAAA,uBAE5D73F,KAAKi2G,MAAMzrB,aAAa5iE,KAAK2P,EAAOlxB,KCjJhD,MAAM0mB,IAASmB,EAAAA,EAAAA,oCAOT6oF,GAAgB,QAMP,MAAMC,GAOjBp4G,YAAY+4F,GACR33F,KAAKkzF,KAAOyE,EAAKzE,KACjBlzF,KAAKi3G,SAAWtf,EAEhB,MAAMuf,EAAqBl3G,KAAKm3G,oBAAoBjxG,KAAKlG,MAEzDA,KAAKi3G,SAASnuF,iBACV+uE,KAAAA,mBACAqf,GAEJl3G,KAAKi3G,SAASnuF,iBACV+uE,KAAAA,yBACAqf,GAEJl3G,KAAKi3G,SAASnuF,iBACV+uE,KAAAA,iCACAhzC,IACI7kD,KAAKo3G,aAAevyD,KAShCkX,cACI,OAAO/7D,KAAKkzF,KAAKmkB,eAQrB17C,SACI,OAAK37D,KAAK+7D,cAIH,IAAIz1C,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKi3G,SAASK,gBAAe,EAAM/wF,EAAS1U,MAJrCyU,QAAQzU,OAAO,IAAIpD,MAAM,yBAaxC8oG,UACSv3G,KAAK+7D,eAAkB/7D,KAAKi3G,SAAShd,eAC9Bj6F,KAAKw3G,WAAcx3G,KAAKi3G,SAASQ,oBAI7Cz3G,KAAKi3G,SAASK,gBAAe,GAOjCI,kBACQ13G,KAAKw3G,WACLx3G,KAAKw3G,UAAUG,QACV11C,MAAK,KACFjiE,KAAKw3G,eAAYzwG,EACjBgmB,GAAOtf,KAAK,uBAEf0+D,OAAM,SASnByrC,gBAAgB/yD,GACZ7kD,KAAKo3G,aAAevyD,EAOxBsyD,sBACSn3G,KAAK+7D,eAIU/7D,KAAKi3G,SAASY,QAAU73G,KAAKi3G,SAAShd,eAEvCj6F,KAAKi3G,SAASQ,qBAAuBz3G,KAAKw3G,WAEzDx3G,KAAKiJ,OACAg5D,MAAK,IAAMl1C,GAAOtf,KAAK,uBACvB0+D,OAAMzpE,GAAKqqB,GAAO1V,MAAM,uBAAwB3U,KAW7DuG,KAAKqlB,EAAawpF,GACd,MAAM7d,EAAcj6F,KAAKi3G,SAASY,QAAU73G,KAAKi3G,SAAShd,cAE1D,IAAKj6F,KAAKo3G,aACN,OAAO9wF,QAAQzU,OAAO,IAAIpD,MAAM,kDAGpC,MAAMmoB,EAAW0nB,GAAAA,QAAAA,eAAuBt+C,KAAKo3G,cACvCW,EAAez5D,GAAAA,QAAAA,iBAAyBt+C,KAAKo3G,cAkHnD,OAhHAp3G,KAAKw3G,UAAYx3G,KAAKkzF,KAAK8kB,WACvBphF,EAAU,CACNmhF,aAAAA,EACAE,kBAAkB,EAClBC,cAAc,EACdC,aAAa,IAIjB7pF,GAEAtuB,KAAKw3G,UAAUzI,uBAAuB,OAAQ,CAC1CjvD,WAAY,CAAEkG,MAAO,mCACrBniD,MAAOyqB,IAIX2rE,GACAj6F,KAAKw3G,UAAU5c,oBAAoBmc,IAAe,CAAC/5G,EAAM29C,KACrD36C,KAAKi3G,SAASzsB,aAAa5iE,KAAKiwE,KAAAA,yBAAqCl9C,EAAM,CAAEm9D,MAAO96G,EAAK6G,WAE7F7D,KAAKw3G,UAAU1uF,iBACX+uE,KAAAA,mBAEA,CAACl9C,EAAMy9D,EAAMtjE,EAAMujE,EAAgBnW,EAASlsE,EAAQmsE,EAAUmW,EAASzzD,KAE/DvmD,OAAOqN,OAAO3L,KAAKi3G,SAASsB,SAAS7tG,MAAK1H,GAAKA,EAAE6hD,MAAQA,KAM7D7kD,KAAKi3G,SAASzsB,aAAa5iE,KACvBiwE,KAAAA,wBACAv5C,GAAAA,QAAAA,mBAA2B3D,GAC3By9D,EACAjW,EAAWA,EAASqW,YAASzxG,MAGzC/G,KAAKw3G,UAAU1uF,iBACX+uE,KAAAA,iBAA4Bl9C,IAGxB36C,KAAKi3G,SAASzsB,aAAa5iE,KACvBiwE,KAAAA,sBACAv5C,GAAAA,QAAAA,mBAA2B3D,OAGvC36C,KAAKw3G,UAAU1uF,iBACX+uE,KAAAA,eACA,KAEIv5F,OAAOiG,KAAKvE,KAAKw3G,UAAUe,SACtB/zG,SAAQmC,GAAK3G,KAAKi3G,SAASzsB,aAAa5iE,KACrCiwE,KAAAA,sBAAkCv5C,GAAAA,QAAAA,mBAA2B33C,MAErE3G,KAAKw3G,UAAUiB,QAEfz4G,KAAKw3G,eAAYzwG,EACjBgmB,GAAOtf,KAAK,oCAIpBzN,KAAKw3G,UAAU1uF,iBAAiB+uE,KAAAA,QAAmB6gB,IAC/C,GAAIA,EAKA,OAJA14G,KAAKi3G,SAASzsB,aAAa5iE,KAAKiwE,KAAAA,wBAEhC73F,KAAKw3G,UAAUiB,WASvBz4G,KAAKi3G,SAASnuF,iBACV+uE,KAAAA,yBACA,CAACzB,EAASz7C,EAAM8/C,EAAKke,KACjB5rF,GAAOw4B,MAAO,6BAA4B6wC,KAAWz7C,KAAQ8/C,KACzDrE,IAAYp2F,KAAKi3G,SAASxb,UAE1Bz7F,KAAKi3G,SAAShuG,KAAK0vG,GAEnB34G,KAAK03G,sBAGjB13G,KAAKw3G,UAAU1uF,iBACX+uE,KAAAA,eACA,CAACrgE,EAAQqtB,KAGDA,EACA7kD,KAAKi3G,SAAShuG,QAKlBjJ,KAAKw3G,UAAUiB,QAEfz4G,KAAKi3G,SAASzsB,aAAa5iE,KAAKiwE,KAAAA,cAA0BrgE,OAKlEx3B,KAAKi3G,SAASnuF,iBACV+uE,KAAAA,YACA,KACI73F,KAAK03G,sBAIV,IAAIpxF,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKw3G,UAAU1uF,iBAAiB+uE,KAAAA,YAAuB,KACnDtxE,IAGIuxF,IAAU7d,GACVj6F,KAAKw3G,UAAUzI,uBAAuBgI,GAAe,CAAElzG,MAAOi0G,KACvD93G,KAAKw3G,UAAUprD,kBAG9BpsD,KAAKw3G,UAAU1uF,iBAAiB+uE,KAAAA,gBAA4BhmF,GAC5D7R,KAAKw3G,UAAU1uF,iBAAiB+uE,KAAAA,+BAA2ChmF,GAC3E7R,KAAKw3G,UAAU1uF,iBAAiB+uE,KAAAA,mBAA+BhmF,GAE/D7R,KAAKw3G,UAAUvuG,UASvB2vG,WAAWz0G,GACP,IAAKnE,KAAK+7D,gBAAkB/7D,KAAKi3G,SAAShd,cACtC,OAGJ,MAAMp1C,EAAMvmD,OAAOiG,KAAKvE,KAAKw3G,UAAUe,SAClC7tG,MAAK/D,GAAK23C,GAAAA,QAAAA,mBAA2B33C,KAAOxC,IAE7C0gD,EACA7kD,KAAKw3G,UAAUqB,KAAKh0D,GAEpB93B,GAAO1V,MAAO,wBAAuBlT,oBAQ7C20G,cAAc30G,GACV,IAAKnE,KAAK+7D,gBAAkB/7D,KAAKi3G,SAAShd,cACtC,OAGJ,MAAM8e,EAAgBz6G,OAAOiG,KAAKvE,KAAKw3G,UAAUe,SAC5C7tG,MAAK/D,GAAK23C,GAAAA,QAAAA,mBAA2B33C,KAAOxC,IAEjD,GAAI40G,EAAe,CACf,MAAMl0D,EAAM7kD,KAAKw3G,UAAUe,QAAQQ,GAAel0D,IAC5Cm0D,GACA3/C,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAKi3G,SAASxb,UACtBr6F,EAAE,IAAK,CAAE4kD,MAAO,wCAChB5kD,EAAE,SAAU,CAAEi5D,GAAIxV,IAE3B7kD,KAAKkzF,KAAK/gC,WAAWtF,OAAOmsD,GACxB,SACAt2G,IACIqqB,GAAO1V,MAAO,4BAA2BwtC,IAAOniD,WAGxDqqB,GAAO1V,MAAO,wBAAuB0hG,+CC5TjD,MAAMhsF,IAASmB,EAAAA,EAAAA,2CAIf,IAAI+qF,GAEAC,GAKJ,UAKI57B,SAAUG,GAQVt3D,KAAKgzF,GACDn5G,KAAKs9E,SAAW67B,GAAmB17B,IAOnC27B,wBASA,OARKH,KACDA,GAAqBj5G,KAAKs9E,SAAS/nB,QAAQ,qBACtC0jD,KACDA,GAwDhB,WACI,MAAMl/D,EAAWs/D,KAAAA,mBAIjB,OAFAtsF,GAAOhjB,IAAI,0BAA2BgwC,GAE/BA,EA7D0Bu/D,GACrBt5G,KAAKs9E,SAAS3xB,QAAQ,oBAAqBstD,MAI5CA,IAOPM,gBACA,IAAKL,GAAY,CACb,MAAMM,EAAQx5G,KAAKs9E,SAAS/nB,QAAQ,aAEpC2jD,GAAaM,GAASx5G,KAAKs9E,SAAS/nB,QAAQ,eAExCikD,EACAx5G,KAAKs9E,SAAS3xB,QAAQ,cAAe6tD,GAC7BN,KACRA,GA+ChB,WACI,MAAMO,EAWCC,KAAQA,KAAQA,KAAQA,KAP/B,OAFA3sF,GAAOhjB,IAAI,eAAgB0vG,GAEpBA,EApDkBE,GACb35G,KAAKs9E,SAAS3xB,QAAQ,cAAeutD,KAI7C,OAAOA,IAOPx/D,gBAGA,OAAO15C,KAAKs9E,SAAS/nB,QAAQ,cAO7B7b,cAAUA,GACNA,EACA15C,KAAKs9E,SAAS3xB,QAAQ,YAAajS,GAEnC15C,KAAKs9E,SAAS1xB,WAAW,eAuCrC,SAAS8tD,KACL,MAAQ,GAAEptG,KAAKE,SAAShO,SAAS,eAAeokB,OAAO,EAAG,GCvH9D,MAAM03E,GACA31F,EAAQ,KACRkzF,GAAalzF,EAAQ,MACrB8yB,GAAuB9yB,EAAQ,MAE/BooB,IAASmB,EAAAA,EAAAA,wCAMf,SAAS0rF,GAAsBC,GAC3B,IAAI/hG,EAAQ,EAEZ,OAAO,SAASid,GAEZ,GAAIA,EAGA,YAFAjd,EAAQ,GAMZ,MAAMw0C,EAAUhgD,KAAK+sB,IAAI,EAAGvhB,EAAQ,GAIpC,OAFAA,GAAS,EAEFw0C,EAAUutD,GAaV,SAASC,GAAUljF,EAAUs8D,EAAM7sE,EAASzc,GAuBvD,SAAS8J,EAAS6jB,GACd,GAAIA,EAAMjjB,MAAQijB,EAAMjjB,KAAKolC,UAAW,CACpC,GAAIniB,EAAMjS,SAAW7oB,OAAOgJ,SAAS6f,OAKjC,YAJAyH,GAAOhF,KACF,6CACGwP,EAAMjS,UAIlBy0F,GAASrgE,UAAYniB,EAAMjjB,KAAKolC,WA/BxC15C,KAAK42B,SAAWA,EAChB52B,KAAKg6G,YAAc9mB,EACnBlzF,KAAKi6G,eAAiBL,GAAsB,KAC5C55G,KAAKk6G,oBAAsBN,GAAsB,KAGjD55G,KAAKm6G,qBAAsB,EAC3Bn6G,KAAK4J,QAAUA,EAIf5J,KAAKo6G,mBAAoB,EAEzBp6G,KAAKwqF,aAAenkE,EAEpBrmB,KAAKmyD,WAAanyD,KAAKg6G,YAAY7nD,WAuB/B11D,OAAOqsB,iBACPrsB,OAAOqsB,iBAAiB,UAAWpV,GAAU,GAE7CjX,OAAO49G,YAAY,YAAa3mG,GAMxComG,GAAUv7G,UAAU+7G,sBAAwB,WACxC,OAAOt6G,KAAKm6G,qBAGhBL,GAAUv7G,UAAUg8G,oBAAsB,WACtC,OAAOv6G,KAAKo6G,mBAGhBN,GAAUv7G,UAAUi8G,gBAAkB,SAAS31D,GAG1B,UAFAvG,GAAAA,QAAAA,mBAA2BuG,KAGxC93B,GAAOtf,KACH,gDACJzN,KAAKwqF,aAAa5iE,KAAKiwE,GAAWp6D,cAI1Cq8E,GAAUv7G,UAAUk8G,gBAAkB,SAASC,GACtC16G,KAAK26G,eACN36G,KAAK26G,aAAeD,EACpB3tF,GAAOtf,KAAM,sBAAqBzN,KAAK26G,kBAI/Cb,GAAUv7G,UAAUq8G,gBAAkB,WAClC,OAAO56G,KAAK26G,cAGhBb,GAAUv7G,UAAUs8G,kBAAoB,WAEpC,IAAIC,EAAiB96G,KAAK4J,QAAQuoD,WAAW4oD,MAAMr9F,MAQnD,OAJKo9F,IACDA,EAAkB,SAAQ96G,KAAK4J,QAAQuoD,WAAW4oD,MAAMn9D,UAGrDk9D,GAGXhB,GAAUv7G,UAAUy8G,mBAAqB,WAErC,MAAMh5D,GAAOxD,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK66G,oBACxBr7G,KAAM,SAGJ,UAAEk6C,GAAcqgE,GAChBkB,EAAalB,GAASR,UACtBj2G,EAAStD,KAAK4J,QAAQgoB,WA0D5B,OAxDA7E,GAAOtf,KAAM,eAAcisC,kBAA0BuhE,KAErDj5D,EAAK5gD,EAAE,aAAc,CACjB4kD,MAAO,kCACP2xC,KAAM33F,KAAK42B,SACX,cAAeqkF,IAGfvhE,GACAsI,EAAK3D,MAAM,CAAE,aAAc3E,IAG/BsI,EAAK5gD,EACD,WAAY,CACRe,KAAM,aACN0B,MAAOg8E,QAAQv8E,EAAO43G,cACvBh1D,UAEyBn/C,IAA5BzD,EAAO63G,kBACPn5D,EAAK5gD,EACD,WAAY,CACRe,KAAM,mBACN0B,MAAOP,EAAO63G,mBACfj1D,KAEP5iD,EAAO83G,cACPp5D,EAAK5gD,EACD,WAAY,CACRe,KAAM,eACN0B,MAAOP,EAAO83G,eACfl1D,KAEP5iD,EAAO+3G,YACPr5D,EAAK5gD,EACD,WAAY,CACRe,KAAM,aACN0B,MAAOP,EAAO+3G,aACfn1D,UAGqCn/C,IAA5C/G,KAAK4J,QAAQgoB,WAAWkpE,iBACxB94C,EAAK5gD,EACD,WAAY,CACRe,KAAM,kBACN0B,MAAO7D,KAAK4J,QAAQgoB,WAAWkpE,kBAChC50C,UAEqCn/C,IAA5C/G,KAAK4J,QAAQgoB,WAAWmpE,iBACxB/4C,EAAK5gD,EACD,WAAY,CACRe,KAAM,kBACN0B,MAAO7D,KAAK4J,QAAQgoB,WAAWmpE,kBAChC70C,KAEXlE,EAAKkE,KAEElE,GAIX83D,GAAUv7G,UAAU+8G,eAAiB,SAASC,GAE1C,MAAM7hE,EAAYs0D,EAAEuN,GAAU7wG,KAAK,cAAcu4C,KAAK,cAElDvJ,IACA3sB,GAAOtf,KAAM,wBAAuBisC,KACpCqgE,GAASrgE,UAAYA,IAI7BogE,GAAUv7G,UAAUi9G,mBAAqB,SAASD,GAE9Cv7G,KAAKy6G,gBAAgBzM,EAAEuN,GAAU7wG,KAAK,cAAcu4C,KAAK,aAEzD,MAAMw4D,EACAzN,EAAEuN,GAAU7wG,KACV,6DAC+CnL,OAAS,EAEhEwtB,GAAOtf,KAAM,2BAA0BguG,KAEvCz7G,KAAKm6G,oBAAsBnM,EAAEuN,GAAU7wG,KACnC,2DACiDnL,OAAS,EAE9DwtB,GAAOtf,KACF,oCAAmCzN,KAAKm6G,uBAExCn6G,KAAKm6G,qBAENn6G,KAAKs7G,eAAeC,GAIxB,MAAM/gB,EAAewT,EAAEuN,GAAU7wG,KAAK,eAAeu4C,KAAK,YAE1DjjD,KAAKwqF,aAAa5iE,KAAK0yE,GAAqBr+D,iBACxCw/E,EAAuBjhB,GAGvBwT,EAAEuN,GAAU7wG,KACZ,gEACkDnL,SAClDS,KAAKo6G,mBAAoB,GAG7BrtF,GAAOtf,KAAM,yBAAwBzN,KAAKo6G,sBAa9CN,GAAUv7G,UAAUm9G,wBAA0B,WAC1C,OAAO,IAAIp1F,SAAQC,IAEfvmB,KAAKy6G,gBAAgBz6G,KAAK4J,QAAQuoD,WAAWwoD,cAG7C36G,KAAKmyD,WAAWtF,OACZ7sD,KAAKg7G,sBACL/oG,GAAUjS,KAAK27G,gCAAgC1pG,EAAQsU,KACvDlP,GAASrX,KAAK47G,8BAA8BvkG,EAAOkP,KAMvDvmB,KAAKmyD,WAAWxmC,YAaxBmuF,GAAUv7G,UAAUq9G,8BAAgC,SAASvkG,EAAO5H,GAGhE,MAAMosG,EACA7N,EAAE32F,GAAO3M,KAAK,0BAA0BnL,QACnCyuG,EAAE32F,GAAO3M,KAAK,yBAAyBnL,OAMlD,GAJIs8G,IACA9uF,GAAOtf,KAAK,+BACZssG,GAASrgE,eAAY3yC,GAErBinG,EAAE32F,GAAO3M,KAAK,4BAA4BnL,OAG1C,YAFAS,KAAKwqF,aAAa5iE,KAAKiwE,GAAWn6D,mBAMtC,MAAMo+E,EAAiB9N,EAAE32F,GAAO3M,KAAK,4BAErC,GAAIoxG,EAAev8G,OAAQ,CAEvB,MAAMw8G,EAAYD,EAAe74D,KAAK,cAChC+4D,EAAgBhO,EAAE32F,GAAO3M,KAAK,eACpC,IAAIuxG,EAUJ,OARID,IACAC,EAAWD,EAAczwF,aAE7BvrB,KAAKwqF,aAAa5iE,KACdiwE,GAAWh4D,kBACXk8E,EACAE,GAMR,GAAIjO,EAAE32F,GAAO3M,KAAK,yBAAyBnL,OAWvC,OAVAwtB,GAAOhF,KAAK,uCAAwC1Q,GACnCinC,GAAAA,QAAAA,iBAAyBjnC,EAAM4sC,aAAa,SAE5CjkD,KAAK4J,QAAQuoD,WAAW4oD,MAAMmB,kBAG3Cl8G,KAAKm6G,qBAAsB,QAE/Bn6G,KAAKwqF,aAAa5iE,KAAKiwE,GAAWv7D,yBAItC,MAAM6/E,EAASn8G,KAAKk6G,sBACdpH,EAAU,4BAA2BqJ,IAE3C1kF,GAAqBE,iBAAiB,IAAIlpB,MAAMqkG,IAChD/lF,GAAO1V,MAAMy7F,EAAQz7F,GAGrB,MAAMyjG,EAAiB96G,KAAK66G,oBACtBuB,EAAWD,EAAS,IAKrBN,GACD77G,KAAKwqF,aAAa5iE,KACdiwE,GAAWr6D,mBACXs9E,EACAsB,GAIRp8G,KAAKi6G,gBAAe,GACpBx9G,OAAO8S,YACH,IAAMvP,KAAK07G,0BAA0Bz5C,KAAKxyD,IAC1C0sG,IAYRrC,GAAUv7G,UAAUo9G,gCAAkC,SAC9C1pG,EACAxC,GAQJ,GANAzP,KAAKw7G,mBAAmBvpG,GAGxBjS,KAAKk6G,qBAAoB,GAG0B,SAA/ClM,EAAE/7F,GAAQvH,KAAK,cAAcu4C,KAAK,SAElCjjD,KAAKi6G,gBAAe,GAGpBxqG,QACG,CACH,MAAM0sG,EAASn8G,KAAKi6G,iBAEpBltF,GAAOtf,KAAM,4BAA2B0uG,KACxC1/G,OAAO8S,YACH,IAAMvP,KAAK07G,0BAA0Bz5C,KAAKxyD,IAC1C0sG,KAIZrC,GAAUv7G,UAAUoxD,aAAe,WAC/B,OAAO,IAAIrpC,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKmyD,WAAWtF,OACZ7sD,KAAKg7G,sBACL/oG,IACIjS,KAAKs7G,eAAerpG,GACpBsU,OAEJ81F,GAAWxqG,EAAO,CACdwF,MAAO22F,EAAEqO,GAAS3xG,KAAK,mBAClB4xG,KAAK,WACVv9G,QAASivG,EAAEqO,GAAS3xG,KAAK,iBACpB6gB,eAMrBuuF,GAAUv7G,UAAUg+G,YAAc,SAASC,EAAa/uC,GACpDztE,KAAKy8G,cAAyB,EAAOD,EAAa/uC,IAUtDqsC,GAAUv7G,UAAUk+G,aAAe,SAASC,EAAOC,EAAOC,GACtD,MAAM5rD,GAAKxS,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK66G,oBACtBr7G,KAAM,QACJ6+C,EAAQ,CACV2H,MAAO,kCACP2xC,KAAM33F,KAAK42B,SACX,cAAemjF,GAASR,WAE5B,IAAI/1G,EAAM,WAeV,SAASkhF,EAAYouB,EAAQljG,GACzB6nB,GAAqBE,iBAAiB,IAAIlpB,MAAMqkG,IAChD/lF,GAAO1V,MAAMy7F,EAAQljG,GACrBgtG,EAAUhtG,GAhBV8sG,IACAr+D,EAAMq+D,OAAQ,EACdl5G,EAAO,SAAQA,KAEnBwtD,EAAG5vD,EAAE,YAAai9C,GAclBr+C,KAAKmyD,WAAWtF,OACZmE,GACA/+C,IAEI,IAAIqS,EAAM0pF,EAAE/7F,GAAQvH,KAAK,aAAau4C,KAAK,OAE3C3+B,EAAMu4F,mBAAmBv4F,GACrBA,GACAyI,GAAOtf,KAAM,OAAMjK,MAAQ8gB,KAC3Bq4F,EAAMr4F,IAENogE,EAAa,iBAAgBlhF,mBAAsByO,KAG3DyyE,EAAYx+E,UAAKa,EAAY,OAAMvD,aAI3Cs2G,GAAUv7G,UAAUu+G,iBAAmB,SAASN,EAAa/uC,GACzDztE,KAAKy8G,cAAyB,EAAMD,EAAa/uC,IAGrDqsC,GAAUv7G,UAAUw+G,OAAS,SAASttG,GAClC,MAAMuhD,GAAKxS,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK66G,oBACtBr7G,KAAM,SACJ,UAAEk6C,GAAcqgE,GAEjBrgE,GAKLsX,EAAG5vD,EAAE,SAAU,CACX4kD,MAAO,kCACP,aAActM,IAElB15C,KAAKmyD,WAAWtF,OACZmE,GACA/+C,IAEI,IAAI+qG,EAAYhP,EAAE/7F,GAAQvH,KAAK,UAAUu4C,KAAK,cAE1C+5D,IACAA,EAAYH,mBAAmBG,IAEnCjwF,GAAOtf,KAAM,oBAAmBuvG,IAAa/qG,GAC7C8nG,GAASrgE,eAAY3yC,EACrB0I,EAASutG,MAEb3lG,IACI,MAAMy7F,EAAS,eAEfr7E,GAAqBE,iBAAiB,IAAIlpB,MAAMqkG,IAChD/lF,GAAO1V,MAAMy7F,EAAQz7F,OAzBzB5H,KC3dR,MAAMsd,IAASmB,EAAAA,EAAAA,uCAEFxpB,GAAS,CAClBu4G,YAAYl6D,EAAYm6D,GACpB,IAAK,MAAMv3D,KAASxnD,MAAMw8C,KAAKoI,EAAW+rD,UAAW,CACjD,MAAM9xG,EAAO,CACT8iD,WAAY,GACZgvD,SAAU,GACVr2E,QAASktB,EAAMltB,SAGnB,IAAK,MAAMwqB,KAAQ9kD,MAAMw8C,KAAKgL,EAAM7F,YAChC9iD,EAAK8iD,WAAWmD,EAAK9gD,MAAQ8gD,EAAKp/C,MAEtC,MAAM0nB,EAAO+yB,GAAAA,QAAAA,QAAgBqH,GAEzBp6B,IAIAvuB,EAAK6G,MAAQy6C,GAAAA,QAAAA,YAAoB/yB,IAErC2xF,EAAMn6G,KAAK/F,GACXgD,KAAKi9G,YAAYt3D,EAAO3oD,EAAK8xG,YAGrCqO,YAAYD,EAAOE,GACf,IAAK,IAAI99G,EAAI,EAAGA,EAAI49G,EAAM39G,OAAQD,IAAK,CACnC,MAAMtC,EAAOkgH,EAAM59G,GAEftC,IACAogH,EAAOh8G,EAAEpE,EAAKy7B,QAASz7B,EAAK8iD,YACxB9iD,EAAK6G,OACLu5G,EAAOt6G,EAAE9F,EAAK6G,OAEd7G,EAAK8xG,UACL9uG,KAAKm9G,YAAYngH,EAAK8xG,SAAUsO,GAEpCA,EAAOl3D,SAcvB,SAASm3D,GAA2BtvD,EAAMjK,GACtC,MAAM+pD,EAAM,GAEZ,IAAK,IAAIvuG,EAAI,EAAGA,EAAIyuD,EAAKxuD,OAAQD,IACzByuD,EAAKzuD,GAAGm5B,UAAYqrB,GACpB+pD,EAAI9qG,KAAKgrD,EAAKzuD,IAItB,OAAOuuG,EAWX,MAAMyP,GAAuB,CAAE,QAAS,QAAS,UAKlC,MAAMC,WAAiB7W,GAiBlC9nG,YAAYuzD,EAAYtN,EAAK3O,EAAUsnE,EAAM5zG,GACzC8zE,QACA19E,KAAKkzF,KAAOsqB,EACZx9G,KAAKmyD,WAAaA,EAClBnyD,KAAKy7F,QAAUn9C,GAAAA,QAAAA,kBAA0BuG,GACzC7kD,KAAKy9G,UAAY54D,EACjB7kD,KAAKk2C,SAAWA,EAChBl2C,KAAK09G,oBAAqB,EAC1B3wF,GAAOtf,KAAM,iBAAgBzN,KAAKy9G,aAClCz9G,KAAKu4G,QAAU,GACfv4G,KAAK29G,QAAU,GACf39G,KAAK49G,aAAe,GACpB59G,KAAK69G,qBAAuB,GAC5B79G,KAAK63G,QAAS,EACd73G,KAAK80C,KAAO,KACZ90C,KAAK89G,YAAc,KACnB99G,KAAK+9G,mBAAoB,EACzB/9G,KAAK4J,QAAUA,GAAW,GAC1B5J,KAAKg+G,UACC,IAAIlE,GAAU95G,KAAKy7F,QAASz7F,KAAKkzF,KAAMlzF,KAAKwqF,aAAc,CACxDr4B,WAAYnyD,KAAKkzF,KAAKtpF,QACtBgoB,WAAY5xB,KAAK4J,gBAEe,IAA7B5J,KAAK4J,QAAQuuG,aAA+Bn4G,KAAK4J,QAAQuuG,eAChEn4G,KAAKi+G,MAAQ,IAAIjH,GAAMh3G,OAE3BA,KAAKk+G,aAAe,IAAIlI,GAAah2G,MACrCA,KAAKm+G,gBAAgBv0G,GACrB5J,KAAKo+G,cAAgB,GACrBp+G,KAAKq+G,YAAc,KACnBr+G,KAAKs+G,SAAW,KAChBt+G,KAAK84F,gBAAkB,GACvB94F,KAAKu+G,4BAA8B,KAEnCv+G,KAAKw+G,QAAS,EACdx+G,KAAKy+G,oBAAsBC,GAQ/BP,gBAAgBv0G,EAAU,IACtB5J,KAAK29G,QAAQtjD,GAAKr6D,KAAKy9G,UACvBz9G,KAAK29G,QAAQgB,IAAM,iCACnB3+G,KAAK29G,QAAQT,MAAQ,GAEjBtzG,EAAQg1G,SACR5+G,KAAK29G,QAAQT,MAAMn6G,KAAK,CACpB,QAAW,WACX,MAAS6G,EAAQg1G,UAIrBh1G,EAAQi1G,gBAAkBj1G,EAAQi1G,eAAeC,YACjD9+G,KAAK29G,QAAQT,MAAMn6G,KAAK,CACpB,QAAW,SACX,WAAc,CACVoB,GAAIyF,EAAQi1G,eAAeC,WAC3B94D,MAAO,iCAKnBhmD,KAAK++G,mBAAqB3xF,KAAKgC,MASnCnmB,KAAKitC,EAAUwnE,GAIX,OAHA19G,KAAKk2C,SAAWA,EAChBl2C,KAAK09G,mBAAqBA,EAEnB,IAAIp3F,SAAQC,IACfvmB,KAAK4J,QAAQsuG,cACNnrF,GAAOtf,KAAM,iCAAgCzN,KAAKy7F,YAGnDz7F,KAAK4J,QAAQsuG,aACT5xF,QAAQC,UACRvmB,KAAKg+G,UAAUtC,2BAEjBz5C,MAAK,KACTjiE,KAAKosD,cAAa,GAClBpsD,KAAK69G,qBAAqB96G,KACtB/C,KAAKmyD,WAAWrpC,iBACZuqF,GAAeC,OAAOC,oBACtBvzG,KAAKg/G,oBAAoB94G,KAAKlG,QAEtCumB,UASZ6lC,aAAa6yD,GACT,MAAM5kD,EAAKr6D,KAAK29G,QAAQtjD,GAExB,IAAKr6D,KAAKmyD,aAAenyD,KAAKmyD,WAAWhJ,YAAckR,IAAQr6D,KAAK63G,SAAWoH,EAE3E,OAGJ,MAAMlxD,GAAOtP,EAAAA,GAAAA,OAAM,CAAE4b,GAAAA,IAOjB4kD,IACIj/G,KAAK09G,oBACL3vD,EAAK3sD,EAAE,eAAe8kD,KAG1B6H,EAAK3sD,EAAE,IAAK,CAAE4kD,MAAOhmD,KAAK29G,QAAQgB,MAE9B3+G,KAAKk2C,UACL6X,EAAK3sD,EAAE,YAAY0B,EAAE9C,KAAKk2C,UAAUgQ,KAEpClmD,KAAK4J,QAAQs1G,WACbnxD,EAAK3sD,EAAE,aAAa0B,EAAE9C,KAAK4J,QAAQs1G,WAAWh5D,KAGlD6H,EAAK7H,MAGTxhD,GAAOy4G,YAAYn9G,KAAK29G,QAAQT,MAAOnvD,GAGvC/tD,KAAKm/G,iBAAmB/xF,KAAKgC,MAE7BpvB,KAAKmyD,WAAWh+B,KAAK45B,GACjBkxD,GAKAj/G,KAAKmyD,WAAWxmC,QAQxByzF,UACIryF,GAAOhjB,IAAI,WAAY/J,KAAKy9G,WAC5B,MAAM1vD,GAAOtP,EAAAA,GAAAA,OAAM,CAAE4b,GAAIr6D,KAAKy9G,UAC1Bj+G,KAAM,gBAEVQ,KAAK29G,QAAQp+G,OAAS,GAerBS,KAAKmyD,WAAWsiD,kBAAoBz0G,KAAKmyD,WAAWxmC,QACrD3rB,KAAKmyD,WAAWh+B,KAAK45B,GACrB/tD,KAAKmyD,WAAWxmC,QAMpB0zF,gBAGI,MAAMC,GACA9gE,EAAAA,GAAAA,KAAI,CACFh/C,KAAM,MACN66D,GAAIr6D,KAAKy7F,UAERr6F,EAAE,QAAS,CAAE4kD,MAAO1H,GAAAA,QAAAA,GAAAA,aAE7Bt+C,KAAKmyD,WAAWtF,OAAOyyD,GAASrtG,IAC5B,MAAMusG,EAGM,IAFNxQ,EAAE/7F,GAAQvH,KAAK,+CACZnL,OAGLi/G,IAAWx+G,KAAKw+G,SAChBx+G,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,iBAA6B2mB,GACpDx+G,KAAKw+G,OAASA,GAGlB,MAAMe,EACAvR,EAAE/7F,GAAQvH,KAAK,qEAEjB60G,EAAehgH,OACfS,KAAKw/G,aAAaD,EAAeh0F,QAEjCwB,GAAOhF,KAAK,8BAGhB,MAAM03F,EAAiF,IAAnEzR,EAAE/7F,GAAQvH,KAAK,yCAAyCnL,OAEtEmgH,EACA1R,EAAE/7F,GAAQvH,KAAK,qEAEjB1K,KAAKi+G,OACLj+G,KAAKi+G,MAAMrG,gBAAgB8H,GAAkBA,EAAengH,OAASmgH,EAAen0F,YAASxkB,GAG7F04G,IAAgBz/G,KAAKy3G,qBACrBz3G,KAAKy3G,mBAAqBgI,EAC1Bz/G,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,yBAAqC4nB,OAGjEpoG,IACCogB,KAAAA,iBAAsCpgB,GACtC0V,GAAO1V,MAAM,4BAA6BA,MAUlDmoG,aAAaG,GACL3/G,KAAK2/G,YAAcA,IACf3/G,KAAK2/G,WACL5yF,GAAOhF,KAAM,2BAA0B/nB,KAAK2/G,gBAAgBA,KAEhE3/G,KAAK2/G,UAAYA,EACjB3/G,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,eAA2B8nB,IAO1DC,yBAGI,GAAI5/G,KAAK4J,QAAQquG,iBACb,OAGJ,MAAM4H,GAAUrhE,EAAAA,GAAAA,KAAI,CAAEh/C,KAAM,MACxB66D,GAAIr6D,KAAKy7F,UACRr6F,EAAE,QAAS,CAAE4kD,MAAO,yCACpB5kD,EAAE,IAAK,CAAE4kD,MAAO,gBACbxmD,KAAM,WAEdQ,KAAKmyD,WAAWtF,OAAOgzD,GAASC,IAC5B,IAAK9R,EAAE8R,GAAMp1G,KACL,qEACwCnL,OAAQ,CACpD,MAAMuzG,EAAS,oCAKf,OAHAr7E,KAAAA,iBAAsC,IAAIhpB,MAAMqkG,SAChD/lF,GAAO1V,MAAMy7F,GAKjB,MAAMiN,GAAavhE,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAKy7F,QAC9Bj8F,KAAM,QACL4B,EAAE,QAAS,CAAE4kD,MAAO,yCAEzB+5D,EAAW3+G,EAAE,IAAK,CAAE4kD,MAAO,gBACvBxmD,KAAM,WAEVugH,EAAW3+G,EAAE,QAAS,CAAE,IAAO,cAC1BA,EAAE,SACF0B,EAAE,6CAA6CojD,KAAKA,KAEzD65D,EAAW3+G,EAAE,QAAS,CAAE,IAAO,yBAC1BA,EAAE,SAAS0B,EAAE,UAAUojD,KAAKA,KAEjClmD,KAAKmyD,WAAWtF,OAAOkzD,MAExB1oG,IACCogB,KAAAA,iBAAsCpgB,GACtC0V,GAAO1V,MAAM,0CAA2CA,MAShE2nG,oBAAoBhpF,GAEZA,IAAWq9E,GAAelzD,OAAOK,WACjCxgD,KAAKosD,eAQb4zD,WAAWjyD,GACP,MAAMpT,EAAOoT,EAAK9J,aAAa,QACzBg8D,EAAS,GACTC,EAAWnyD,EAAKtqC,qBAAqB,UAAU,GAEjDy8F,IACAD,EAAOjqF,OAASkqF,EAAStrD,aAAe,IAE5C,IAAIurD,GAAkB,EAClBC,GAAmB,EACvB,MAAMC,EACAtyD,EAAKyB,uBACH,sCAAuC,KAAK,GAC9C8wD,EACAD,GAAYA,EAAS58F,qBAAqB,QAAQ,GAExDw8F,EAAOM,qBACDxyD,EAAKtqC,qBAAqB,eAAelkB,OAE/C0gH,EAAOO,YACDF,GAAeA,EAAYr8D,aAAa,eAC9Cg8D,EAAOnrE,KAAOwrE,GAAeA,EAAYr8D,aAAa,QAGtD,MAAMY,EAAMy7D,GAAeA,EAAYr8D,aAAa,OAEpDg8D,EAAOp7D,IAAMA,EACbo7D,EAAOQ,QACD57D,GAA+D,IAAxDA,EAAIj5C,QAAS,GAAE5L,KAAKg+G,UAAUpD,sBAC3CqF,EAAO5H,eACDxzD,GAAOA,EAAIj5C,QAAQ,KAAO,GACrB5L,KAAK4J,QAAQ82G,eACR77D,EAAIr9C,UAAUq9C,EAAIj5C,QAAQ,KAAO,EAAGi5C,EAAIj5C,QAAQ,MAEhE5L,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,kBAA8B,CACjD8oB,iBAAkBV,EAAO5H,eACzBuI,SAAU7yD,IAGd,MAAM8yD,EAAM9yD,EAAK4G,cAAc,KAE3BksD,GACAA,EAAIC,SAGR,MAAM5D,EAAQ,GAEdx4G,GAAOu4G,YAAYlvD,EAAMmvD,GACzBl9G,KAAKo+G,cAAczjE,GAAQuiE,EAI3B,MAAM6D,EAA6B/jH,IAC/B,MAAMmlG,EAAW,GACX6e,EAAWhkH,EAAK8xG,SAASpkG,MAAKtJ,GAAmB,SAAdA,EAAEq3B,UAE3C,GAAIuoF,EAAU,CACV7e,EAASj7C,KAAO,GAChB,IAAK,MAAMlf,IAAO,CAAE,KAAM,OAAQ,UAAY,CAC1C,MAAM2d,EACAq7D,EAASlS,SAASpkG,MAAKtJ,GAAKA,EAAEq3B,UAAYuP,IAE5C2d,IACAw8C,EAASj7C,KAAKlf,GAAO2d,EAAM9hD,QAIvC,MAAMo9G,EAAYjkH,EAAK8xG,SAASpkG,MAAKtJ,GAAmB,UAAdA,EAAEq3B,UAM5C,OAJIwoF,IACA9e,EAASx3F,MAAQs2G,EAAUp9G,OAGxBs+F,GAGX,IAAK,IAAI7iG,EAAI,EAAGA,EAAI49G,EAAM39G,OAAQD,IAAK,CACnC,MAAMtC,EAAOkgH,EAAM59G,GAEnB,OAAQtC,EAAKy7B,SACb,IAAK,MAAO,CACR,MAAM,WAAEqnB,GAAe9iD,EAEvB,IAAK8iD,EACD,MAEJ,MAAM,KAAEtgD,GAASsgD,EAEjBmgE,EAAO3H,QAAU94G,EACjB,MAEJ,IAAK,OACDygH,EAAO7H,KAAOp7G,EAAK6G,MACnB,MACJ,IAAK,SACDo8G,EAAO97G,GAAKnH,EAAK6G,MACjB,MACJ,IAAK,WACDo8G,EAAO/d,QAAUllG,EAAK6G,MACtB,MACJ,IAAK,WACDo8G,EAAO9d,SAAW4e,EAA2B/jH,GAC7C,MACJ,IAAK,WACDijH,EAAO33D,SAAWtoD,KAAKkhH,iBAAiBlkH,GACxC,MAEJ,IAAK,OAAQ,CACT,MAAM,WAAE8iD,GAAe9iD,EAEvB,IAAK8iD,EACD,MAEJ,MAAM,KAAE39C,GAAS29C,EAEJ,YAAT39C,IACA89G,EAAOt3G,QAAUm3C,EAAWj8C,OAEhC,QAKR,GAAI82C,IAAS36C,KAAKy9G,UAAW,CACzB,MAAM3Z,EACuB,UAAvBmc,EAAOO,YAA0BP,EAAOnrE,KAAO,OAQrD,GANI90C,KAAK80C,OAASgvD,IACd9jG,KAAK80C,KAAOgvD,EACZ9jG,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,mBACA73F,KAAK80C,QAER90C,KAAK63G,OAAQ,CACd73G,KAAK63G,QAAS,EACd,MAAMzoF,EAAMpvB,KAAK84F,gBAAgB,cAC3Br8F,OAAOi/F,YAAYtsE,MAEzBrC,GAAOhjB,IAAI,uBAAwBqlB,GAG/BpvB,KAAKk2C,WACLl2C,KAAKw+G,QAAS,GAMdx+G,KAAK++G,oBAAsB/+G,KAAKm/G,kBAChCn/G,KAAKosD,eAGTpsD,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,aAItB73F,KAAK4J,QAAQquG,kBAAoBj4G,KAAKq/G,sBAExC,QAAYt4G,IAAR89C,EACP93B,GAAOtf,KAAK,2CACT,QAA2B1G,IAAvB/G,KAAKu4G,QAAQ59D,GAEpB36C,KAAKu4G,QAAQ59D,GAAQslE,EACrBlzF,GAAOhjB,IAAI,UAAW4wC,EAAMslE,GAC5BE,OAAoCp5G,IAAlBk5G,EAAOjqF,OACzBoqF,OAAsCr5G,IAAnBk5G,EAAOt3G,QACtBs3G,EAAOQ,QACPzgH,KAAKmhH,WAAWxmE,EAAMslE,EAAO33D,WAK7BtoD,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,kBACAl9C,EACAslE,EAAO7H,KACP6H,EAAOnrE,KACPmrE,EAAO5H,eACP4H,EAAO/d,QACP+d,EAAOjqF,OACPiqF,EAAO9d,SACP8d,EAAO3H,QACP2H,EAAOp7D,IACPo7D,EAAO33D,SACP23D,EAAOM,sBAIXJ,GAAkB,OAEnB,CAGH,MAAMiB,EAAephH,KAAKu4G,QAAQ59D,GAE9BymE,EAAatsE,OAASmrE,EAAOnrE,OAC7BssE,EAAatsE,KAAOmrE,EAAOnrE,KAC3B90C,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,iBAA6Bl9C,EAAMslE,EAAOnrE,OAI9CssE,EAAaZ,cAAgBP,EAAOO,cACpCY,EAAaZ,YAAcP,EAAOO,aAIlCY,EAAa9I,UAAY2H,EAAO3H,UAChC8I,EAAa9I,QAAU2H,EAAO3H,QAC9Bt4G,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,4BACAl9C,EACAslE,EAAO3H,UAGX2H,EAAOQ,UAePW,EAAaX,SAAU,EACvBzgH,KAAKmhH,WAAWxmE,EAAMslE,EAAO33D,WAI7B23D,EAAO3xF,cACP8yF,EAAa9yF,YAAc2xF,EAAO3xF,aAIlC8yF,EAAaprF,SAAWiqF,EAAOjqF,SAC/BmqF,GAAkB,EAClBiB,EAAaprF,OAASiqF,EAAOjqF,QAG7BorF,EAAaz4G,UAAYs3G,EAAOt3G,UAChCy3G,GAAmB,EACnBgB,EAAaz4G,QAAUs3G,EAAOt3G,SAG7B4hG,IAAAA,CAAQ6W,EAAa94D,SAAU23D,EAAO33D,YACvC84D,EAAa94D,SAAW23D,EAAO33D,SAC/BtoD,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,6BAAyCl9C,EAAMslE,EAAO33D,WAMrF,IAAK,IAAIhpD,EAAI,EAAGA,EAAI49G,EAAM39G,OAAQD,IAAK,CACnC,MAAMtC,EAAOkgH,EAAM59G,GAEnB,OAAQtC,EAAKy7B,SACb,IAAK,OACD,IAAKwnF,EAAOQ,QAAS,CACjB,MAAMnyF,EACAtuB,KAAKkzF,KAAKtpF,QAAQy3G,YACd/iE,GAAAA,QAAAA,mBAA2B3D,GAC3BslE,EAAO7H,KAEjBp4G,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,qBACAl9C,EACArsB,GAER,MACJ,IAAK,qBACG2xF,EAAOQ,UAAYzgH,KAAK+9G,oBACxB/9G,KAAK+9G,mBAAoB,EACzB/9G,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,cAE3B,MACJ,IAAK,wBACD,GAAIooB,EAAOQ,QAAS,CAChB,MAAMp+B,EAAa,GAEnB,IAAK,IAAI17E,EAAI,EAAGA,EAAI3J,EAAK8xG,SAASvvG,OAAQoH,IAAK,CAC3C,MAAM,WAAEm5C,GAAe9iD,EAAK8xG,SAASnoG,GAEjCm5C,GAAcA,EAAWr7C,MACzB49E,EAAWviC,EAAWr7C,KAAOq7C,EAAWj8C,OAIhD7D,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,8BAA0CxV,GAE9CriF,KAAKshH,4BAA0E,SAA5Cj/B,EAAW,6BAC9Ct1D,GAAOtf,KAAM,yCAAwCzN,KAAKuhH,gCAE9D,MACJ,IAAK,uBAAwB,CACzB,MAAM,WAAEzhE,GAAe9iD,EAEvB,IAAK8iD,EACD,MAGJ,MAAM,OAAE9pB,GAAW8pB,EAEf9pB,GAAUA,IAAWh2B,KAAKy+G,sBAC1Bz+G,KAAKy+G,oBAAsBzoF,EAC3Bh2B,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,6BACA7hE,IAKR,MAEJ,IAAK,eAAgB,CACjB,MAAMwrF,EAAMxkH,EAAK8iD,WAEjB,IAAK0hE,EACD,MAEJxhH,KAAKq+G,YAAcmD,EAAIC,OAAS,KAChCzhH,KAAKs+G,SAAWkD,EAAIE,KAAO,KAC3B1hH,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,sBACvB,MAEJ,QACI73F,KAAK2hH,YAAY3kH,EAAM29C,IAK3BwlE,GACAngH,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,gBACAl9C,EACAslE,EAAOjqF,QAGXoqF,GACArzF,GAAOtf,KAAM,wBAAuBo3C,MAAQo7D,EAAOt3G,WAU3Du4G,iBAAiBlkH,GACb,MAAMsrD,EAAW,IAAIxiB,IAErB,IAAK,IAAIn/B,EAAI,EAAGA,EAAI3J,EAAK8xG,SAASvvG,OAAQoH,IAAK,CAC3C,MAAM,WAAEm5C,GAAe9iD,EAAK8xG,SAASnoG,GAEjCm5C,GAAcA,EAAW8hE,KACzBt5D,EAASvkB,IAAI+b,EAAW8hE,KAIhC,OAAOt5D,EAQX64D,WAAWxmE,EAAM2N,GACbtoD,KAAK89G,YAAcnjE,EACnB36C,KAAK6hH,cAAgBv5D,EAOzBkxC,+BAA+B9lF,GAC3B1T,KAAKu+G,4BAA8B7qG,EAOvC6tG,6BACI,OAAOvhH,KAAKshH,4BAQhBK,YAAY3kH,EAAM29C,GAGd,IACI,IAAImnE,EAAc9hH,KAAK49G,aAAa5gH,EAAKy7B,SAErCz7B,EAAKy7B,QAAQw7E,WAAW,wBACxB6N,EAAc,CAAE9hH,KAAKu+G,8BAGrBuD,GACAA,EAAYt9G,SAAQmiB,IAChBA,EAAQ3pB,EAAMshD,GAAAA,QAAAA,mBAA2B3D,GAAOA,MAG1D,MAAOj4C,GACL+0B,KAAAA,iBAAsC/0B,GACtCqqB,GAAO1V,MAAO,oBAAmBra,EAAKy7B,gBAAiB/1B,IAS/D+nG,YAAY1rG,EAASgjH,GACjB,MAAM52F,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAKy7F,QACxBj8F,KAAM,cAKU,SAAhBuiH,EACA52F,EAAI/pB,EAAE2gH,EAAa,GAAIhjH,GAEvBosB,EAAI/pB,EAAE2gH,EAAa,CAAE/7D,MAAO,4BAA8BjnD,GAG9DiB,KAAKmyD,WAAWh+B,KAAKhJ,GACrBnrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,qBAAiC94F,GAU5DijH,mBAAmB79G,EAAIpF,EAASgjH,GAC5B,MAAM52F,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAK,GAAEr6D,KAAKy7F,WAAWt3F,IACtC3E,KAAM,SAKU,SAAhBuiH,EACA52F,EAAI/pB,EAAE2gH,EAAahjH,GAASmnD,KAE5B/6B,EAAI/pB,EAAE2gH,EAAa,CAAE/7D,MAAO,4BAA8BjnD,GACrDmnD,KAGTlmD,KAAKmyD,WAAWh+B,KAAKhJ,GACrBnrB,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,6BAAyC94F,GAQjDkjH,WAAWC,GACP,MAAM/2F,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAKy7F,QACxBj8F,KAAM,cAEV2rB,EAAI/pB,EAAE,UAAW8gH,GACjBliH,KAAKmyD,WAAWh+B,KAAKhJ,GASzBg3F,kBAAkBt9D,EAAKu9D,UACZpiH,KAAKo+G,cAAcv5D,GAEtBu9D,IAIJpiH,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,gBAA4BhzC,GAEnD7kD,KAAKg+G,UAAUxD,gBAAgB31D,IAQnCw9D,sBAAsBt0D,EAAMpT,GAExB,GAAIqzD,EAAEjgD,GAAMrjD,KAAK,8CAA8CnL,OAC3D,OAAO,EAIX,MAAM+iH,EAAgBtU,EAAEjgD,GAAMrjD,KAAK,2DAEnC,GAAI43G,EAAc/iH,OAAQ,CACtB,IAAIi4B,EACJ,MAAM+qF,EACAvU,EAAEjgD,GAAMrjD,KACN,kEAUR,OAPI63G,EAAahjH,SACbi4B,EAAS+qF,EAAah3F,QAG1BvrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,cAA0BrgE,EAAQ8qF,EAAcr/D,KAAK,QAC5EjjD,KAAKmyD,WAAWm8C,KAAK8Q,QAAQp/G,KAAKy7F,UAE3B,EAIX,MAAMid,EACA1K,EAAEjgD,GACCrjD,KACG,sEAEHnL,OACHijH,EACAxU,EAAEjgD,GACCrjD,KACG,sEAEHnL,OACHkjH,EAAcnkH,OAAOiG,KAAKvE,KAAKu4G,SAC/BgI,EAAuBvS,EAAEjgD,GAAMrjD,KAAK,eAAenL,OAEzD,GAAIijH,EAAQ,CACR,MAAME,EACA1U,EAAEjgD,GACHrjD,KAAK,8DACV,IAAIi4G,EAMAnrF,EAJAkrF,EAAYnjH,SACZojH,EAAYD,EAAYz/D,KAAK,SAIjC,MAAMs/D,EACAvU,EAAEjgD,GAAMrjD,KACV,+DAGA63G,EAAahjH,SACbi4B,EAAS+qF,EAAah3F,QAM1BvrB,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,OACA6gB,EACAiK,EACArkE,GAAAA,QAAAA,mBAA2B3D,GAC3BnjB,EACA+oF,GAGJ7H,GAIA+J,EAAYj+G,SAAQqgD,IAChB,MAAMo7D,EAASjgH,KAAKu4G,QAAQ1zD,UAErB7kD,KAAKu4G,QAAQ1zD,GACpB7kD,KAAKmiH,kBAAkBt9D,EAAKo7D,EAAOQ,YAEvCzgH,KAAKmyD,WAAWm8C,KAAK8Q,QAAQp/G,KAAKy7F,SAI7B+mB,GACDxiH,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,mBAGpB73F,KAAKu4G,QAAQ59D,GACpB36C,KAAKmiH,kBAAkBxnE,GAAM,IASrCioE,UAAUz3F,EAAKwvB,GACX,MAAMn7C,EAAO2rB,EAAI84B,aAAa,QAE9B,GAAa,UAATzkD,EAAkB,CAClB,MAAMy8G,EAAWjO,EAAE7iF,GAAKzgB,KAAK,eAAe6gB,OAI5C,OAFAvrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,oBAAgCokB,IAEhD,EAGX,MAAMxhB,EAAMuT,EAAE7iF,GAAKzgB,KAAK,SAAS6gB,OAC3B22F,EAAUlU,EAAE7iF,GAAKzgB,KAAK,YAE5B,GAAIw3G,EAAQ3iH,OAAQ,CAChB,MAAMsjH,EAAcX,EAAQ32F,QAExBs3F,GAA+B,KAAhBA,KACf7iH,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,gBAA4BgrB,GACnD91F,GAAOhjB,IAAK,yBAAwB84G,MAK5C,IAAIC,EAAQ9U,EAAE7iF,GAAKzgB,KAAK,UAAUu4C,KAAK,SAEvC,IAAK6/D,IAEDA,EAAQ9U,EAAE7iF,GAAKzgB,KAAK,6BAA6Bu4C,KAAK,SAElD6/D,GAAO,CAEP,MAAMC,EACAD,EAAMj9G,MAAM,2CAElBi9G,EAAS,GAAEC,EAAU,MAAMA,EAAU,MAAMA,EAAU,MAI7D,GAAIpoE,IAAS36C,KAAKy7F,QAAS,CACvB,IAAIunB,EAEJ,GAAIhV,EAAE7iF,GAAKzgB,KAAK,sEAAsEnL,OAClFS,KAAKq/G,qBACF,IAAK2D,EAAShV,EAAE7iF,GAAKzgB,KAAK,4DAClBs4G,EAAOzjH,OAAQ,CAC1B,MAAM0jH,EAAiBjV,EAAE7iF,GAAKzgB,KAAK,4DACnC,IAAIwrC,EAEA+sE,GAAkBA,EAAe1jH,SACjC22C,EAAW+sE,EAAe13F,QAG9BvrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,wBACnBl9C,EAAMqoE,EAAO//D,KAAK,QAASw3C,EAAKvkD,IAI5C,MAAMgtE,EAAclV,EAAE7iF,GAAKzgB,KAAK,iBAAiB6gB,OAEjD,GAAI23F,EAAa,CACb,MAAMC,EAAanjH,KAAKkzF,KAAKkwB,sBAAsBF,GAKnD,GAAIC,QAAwBp8G,IAAV+7G,EAId,YAHA9iH,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,sBACnBl9C,EAAMwoE,GAMd1oB,IACa,SAATj7F,EACAQ,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,yBACfl9C,EAAM8/C,EAAKz6F,KAAKy9G,UAAWqF,GACnB,cAATtjH,GACPQ,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,iBACfl9C,EAAM8/C,EAAKz6F,KAAKy9G,UAAWqF,IAU/CO,gBAAgBt1D,EAAMpT,GAClB,GAAIqzD,EAAEjgD,GACGrjD,KACG,mFAGHnL,OACLwtB,GAAOhjB,IAAI,uBAAwB4wC,GACnC36C,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,wBACpB,GAAImW,EAAEjgD,GACJrjD,KACG,kFAGHnL,OACY++C,GAAAA,QAAAA,iBAAyByP,EAAK9J,aAAa,SAE3CjkD,KAAKkzF,KAAKtpF,QAAQmxG,MAAMmB,gBAKrCl8G,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,kBAGvB9qE,GAAOhF,KAAK,eAAgBgmC,GAC5B/tD,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,sCAEL,GAAImW,EAAEjgD,GAAMrjD,KAAK,8BAA8BnL,OAClDwtB,GAAOhF,KAAK,oDACRgmC,GACJ/tD,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,2BACpB,GAAImW,EAAEjgD,GACRrjD,KACG,0FAEkDnL,OAAQ,CAG9D,MAAM+jH,EAAgBtV,EAAEjgD,GAAMrjD,KAAK,cACnC,IAAI0sG,EAEAkM,EAAc/jH,SACd63G,EAAekM,EAAc/3F,QAGjCvrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,gCAA4Cuf,QAEnErqF,GAAOhF,KAAK,eAAgBgmC,GAC5B/tD,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,oBAS/B0rB,eAAe1+D,EAAK27D,GAChB,MAAMgD,GAAUhlE,EAAAA,GAAAA,KAAI,CAChB6b,GAAIr6D,KAAKy7F,QACTj8F,KAAM,QAET4B,EAAE,QAAS,CAAE4kD,MAAO,yCACpB5kD,EAAE,OAAQ,CACPo/G,YAAAA,EACApI,KAAM95D,GAAAA,QAAAA,mBAA2BuG,KAEpCzjD,EAAE,UAAU0B,EAAG,yCAAwC09G,OACvDt6D,KAAKA,KAAKA,KAEXlmD,KAAKmyD,WAAWtF,OACZ22D,GACAvxG,GAAU8a,GAAOhjB,IAAI,4CAA6C86C,EAAK,KAAM27D,EAAavuG,KAC1FoF,GAAS0V,GAAOhjB,IAAI,yCAA0CsN,KAQtEwhG,KAAKh0D,EAAKrtB,EAAS,yBACf,MAAMisF,GAASjlE,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAKy7F,QAC1Bj8F,KAAM,QACL4B,EAAE,QAAS,CAAE4kD,MAAO,yCACpB5kD,EAAE,OAAQ,CAAEg3G,KAAM95D,GAAAA,QAAAA,mBAA2BuG,GAC1C/P,KAAM,SACT1zC,EAAE,UAAU0B,EAAE00B,GAAQ0uB,KAAKA,KAAKA,KAErClmD,KAAKmyD,WAAWtF,OACZ42D,GACAxxG,GAAU8a,GAAOhjB,IAAI,8BAA+B86C,EAAK5yC,KACzDoF,GAAS0V,GAAOhjB,IAAI,2BAA4BsN,KAYxDqsG,SAASj/G,EAAK2sD,EAAWiS,EAASsgD,GAE9B3jH,KAAKmyD,WAAWtF,QACZrO,EAAAA,GAAAA,KAAI,CACA6b,GAAIr6D,KAAKy7F,QACTj8F,KAAM,QAEL4B,EAAE,QAAS,CAAE4kD,MAAO,0CACzB6nD,IACI,GAAIG,EAAEH,GACGnjG,KACG,0EAEHnL,OAAQ,CACb,MAAMqkH,GACAplE,EAAAA,GAAAA,KAAI,CACF6b,GAAIr6D,KAAKy7F,QACTj8F,KAAM,QAEL4B,EAAE,QAAS,CACR4kD,MAAO,yCAGnB49D,EAAWxiH,EAAE,IAAK,CACd4kD,MAAO,gBACPxmD,KAAM,WAEVokH,EACKxiH,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACF0B,EAAE,6CACFojD,KACAA,KACL09D,EACKxiH,EAAE,QAAS,CAAE,IAAO,8BACpBA,EAAE,SACF0B,EAAE2B,GACFyhD,KACAA,KACL09D,EACKxiH,EAAE,QACE,CAAE,IAAO,yCACbA,EAAE,SACF0B,EAAU,OAAR2B,GAA+B,IAAfA,EAAIlF,OAAe,IAAM,KAC3C2mD,KACAA,KAGDlmD,KAAKy3G,oBACLmM,EACKxiH,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACF0B,EAAE,QACFojD,KACAA,KAKT09D,EACKxiH,EAAE,QAAS,CAAE,IAAO,yBACpBA,EAAE,SACF0B,EAAE,UACFojD,KACAA,KAELlmD,KAAKmyD,WAAWtF,OACZ+2D,GACA,KAII5jH,KAAKk2C,SAAWzxC,EAChB2sD,MAEJiS,QAEJsgD,MAGRtgD,GAYRi0C,eAAe1a,EAASxrC,EAAWiS,GAC3Bu5B,GAAWt+F,OAAOqN,OAAO3L,KAAKu4G,SAASjyG,QAAOtD,IAAMA,EAAEy9G,UAASlhH,QAI/DjB,OAAOqN,OAAO3L,KAAKu4G,SAAS/zG,SAAQxB,IAC5BA,EAAE6hD,MAAQy4D,GAAqB7nF,SAASzyB,EAAEw9G,cAC1CxgH,KAAKkzF,KAAK/gC,WAAWtF,QACjBrO,EAAAA,GAAAA,KAAI,CACA6b,GAAIr6D,KAAKy7F,QACTj8F,KAAM,QACT4B,EAAE,QAAS,CACR4kD,MAAO,yCACV5kD,EAAE,OAAQ,CACP,YAAe,SACf,IAAO4B,EAAE6hD,MACVqB,KAAKA,SAKxB,MAAM1tB,EAAgB6qC,GAAoB,SAE1CrjE,KAAKkzF,KAAK/gC,WAAWtF,QACjBrO,EAAAA,GAAAA,KAAI,CACA6b,GAAIr6D,KAAKy7F,QACTj8F,KAAM,QACP4B,EAAE,QAAS,CAAE4kD,MAAO,0CACvB6nD,IACI,GAAIG,EAAEH,GAAKnjG,KAAK,2EAA2EnL,OAAQ,CAC/F,MAAMskH,GACArlE,EAAAA,GAAAA,KAAI,CACF6b,GAAIr6D,KAAKy7F,QACTj8F,KAAM,QACP4B,EAAE,QAAS,CAAE4kD,MAAO,yCAE3B69D,EAAaziH,EAAE,IAAK,CAChB4kD,MAAO,gBACPxmD,KAAM,WAEVqkH,EACKziH,EAAE,QAAS,CAAE,IAAO,cACpBA,EAAE,SACF0B,EAAE,6CACFojD,KACAA,KACL29D,EACKziH,EAAE,QAAS,CAAE,IAAO,+BACpBA,EAAE,SACF0B,EAAE85F,EAAU,OAAS,SACrB12C,KACAA,KAGDlmD,KAAKw+G,QACLqF,EACKziH,EAAE,QACC,CAAE,IAAO,yCACZA,EAAE,SACF0B,EAAE,KACFojD,KACAA,KAGTlmD,KAAKkzF,KAAK/gC,WAAWtF,OAAOg3D,EAAczyD,EAAW54B,QAErDA,EAAc,IAAI/pB,MAAM,+CAGhC+pB,GAaRsrF,cAAcr/G,EAAKkH,GACf,OAAO3L,KAAK+uG,uBAAuBtqG,EAAKkH,GAU5CojG,uBAAuBtqG,EAAKkH,GACxBA,EAAO8sB,QAAUh0B,EAEjB,MAAMs/G,EAAgB/jH,KAAK29G,QAAQT,MAAM52G,QAAOtJ,GAAQyH,IAAQzH,EAAKy7B,UAGrE,QAA6B,IAAzBsrF,EAAcxkH,QAAgBgrG,IAAAA,CAAQwZ,EAAc,GAAIp4G,KAI5D3L,KAAK6uG,mBAAmBpqG,GACxBzE,KAAK29G,QAAQT,MAAMn6G,KAAK4I,GACxB3L,KAAK++G,mBAAqB3xF,KAAKgC,MAExB,IASX40F,gBAAgBv/G,GACZ,OAAOzE,KAAK29G,QAAQT,MAAMxyG,MAAK1N,GAAQyH,IAAQzH,EAAKy7B,UAOxDo2E,mBAAmBpqG,GACf,MAAMy4G,EAAQl9G,KAAK29G,QAAQT,MAAM52G,QAAOtJ,GAAQyH,IAAQzH,EAAKy7B,UAE7Dz4B,KAAK29G,QAAQT,MAAQA,EACrBl9G,KAAK++G,mBAAqB3xF,KAAKgC,MAQnCwrE,oBAAoBz4F,EAAMwkB,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAIlY,MAAM,+BAEpB,IAAIqzG,EAAc9hH,KAAK49G,aAAaz7G,GAE/B2/G,IACD9hH,KAAK49G,aAAaz7G,GAAQ2/G,EAAc,KAEN,IAAlCA,EAAYl2G,QAAQ+a,GACpBm7F,EAAY/+G,KAAK4jB,GAEjBoG,GAAOhF,KACF,sDAAqD5lB,KASlE8hH,uBAAuB9hH,EAAMwkB,GACzB,MAAMm7F,EAAc9hH,KAAK49G,aAAaz7G,GAChC+hH,EAAapC,EAAcA,EAAYl2G,QAAQ+a,IAAY,GAG7C,IAAhBu9F,EACApC,EAAYv0G,OAAO22G,EAAY,GAE/Bn3F,GAAOhF,KAAM,gBAAe5lB,wBAYpCs+G,QAAQ0D,GACJ,MAAMlE,EAASjgH,KAAKu4G,QAAQ4L,GAE5B,OAAIlE,EACOA,EAAOQ,QAGX,KAMXxmB,cACI,MAAqB,cAAdj6F,KAAK80C,KAOhBsvE,cAAcC,GACV,OAAIrkH,KAAKu4G,QAAQ8L,GACNrkH,KAAKu4G,QAAQ8L,GAASvvE,KAG1B,KAOX4jD,aAAajS,GACTzmF,KAAKskH,sBAAsB79B,GAO/B8R,aAAa9R,GACTzmF,KAAKukH,sBAAsB99B,GAO/B+9B,uBAAuB/9B,GACnB,MAAMg+B,EAAoB,aAG1B,QAAIh+B,IAASzmF,KAAKgkH,gBAAgBS,KAI3BzkH,KAAK+uG,uBACR0V,EACA,CACI5gH,MAAO4iF,EAAKjoF,aAQxB+lH,sBAAsB99B,GAElBzmF,KAAKwkH,uBAAuB/9B,IAASzmF,KAAKosD,eAO9Cs4D,uBAAuBj+B,GACnB,MAAMk+B,EAAoB,aAG1B,QAAIl+B,IAASzmF,KAAKgkH,gBAAgBW,KAI3B3kH,KAAK+uG,uBACR4V,EACA,CACI9gH,MAAO4iF,EAAKjoF,aAQxB8lH,sBAAsB79B,GAClBzmF,KAAK0kH,uBAAuBj+B,IAASzmF,KAAKosD,eAc9Cw4D,qBAAqBhlB,EAAY7jB,GAE7B,MAAMhuB,EAAO/tD,KAAKo+G,cAAe,GAAEp+G,KAAKy7F,WAAWmE,KAEnD,IAAK7xC,EAED,OAAO,KAEX,MAAMz5C,EAAO,CACT6hF,OAAO,EACPwF,eAAW50F,GAEf,IAAI89G,EAAY,KAEhB,GAAI9oC,IAAcoW,GACd0yB,EAAYxH,GAA2BtvD,EAAM,kBAC1C,IAAIguB,IAAcoW,GAcrB,OAFAplE,GAAO1V,MAAO,2BAA0B0kE,KAEjC,KAd+B,CACtC8oC,EAAYxH,GAA2BtvD,EAAM,cAC7C,MAAM+2D,EAAgBzH,GAA2BtvD,EAAM,+BACjDg3D,EAAgB1H,GAA2BtvD,EAAM,aAEnDg3D,EAAcxlH,OAAS,IACvB+U,EAAKqnF,UAAYopB,EAAc,GAAGlhH,OAElCihH,EAAcvlH,OAAS,IACvB+U,EAAK0wG,UAAYF,EAAc,GAAGjhH,QAY1C,OAJIghH,EAAUtlH,OAAS,IACnB+U,EAAK6hF,MAA+B,SAAvB0uB,EAAU,GAAGhhH,OAGvByQ,EAMX2wG,wBACI,QAAIjlH,KAAKg+G,WACEh+G,KAAKg+G,UAAUzD,sBAU9B2K,KAAKx8B,GACD,OAAO1oF,KAAKmyD,WAAWgzD,KAAKD,KAAKx8B,EAAQ,aACrCpqC,GAAAA,QAAAA,kBAA0Bt+C,KAAKy9G,WAAYz9G,KAAKk2C,SAChDl2C,KAAK89G,aAMbsH,SACI,OAAOplH,KAAKmyD,WAAWgzD,KAAKC,SAOhCC,WACI,OAAOrlH,KAAKi+G,MAMhBqH,kBACI,OAAOtlH,KAAKk+G,aAOhBqH,iBACI,OAAOvlH,KAAKq+G,YAMhBmH,cACI,OAAOxlH,KAAKs+G,SAQhBmH,eACI,OAAOzlH,KAAK2/G,UAShB+F,gBAAgB7gE,EAAK4hC,EAAM1K,GACvBhvD,GAAOtf,KAAK,WAAYg5E,GACxB,MAAMk/B,GAAYnnE,EAAAA,GAAAA,KACd,CAAE6b,GAAIr6D,KAAK89G,YACPt+G,KAAM,QACT4B,EAAE,OAAQ,CACP4kD,MAAQ,4BAA2B+1B,IACnCl3B,IAAAA,IAEH/hD,EAAE2jF,EAAKjoF,YACP0nD,KAELlmD,KAAKmyD,WAAWtF,OACZ84D,GACA1zG,GAAU8a,GAAOhjB,IAAI,WAAYkI,KACjCoF,GAAS0V,GAAOhjB,IAAI,iBAAkBsN,KAO9CuuG,OAAO50D,GAGH,GAFaA,EAAG/M,aAAa,UAEhBjkD,KAAK89G,YAGd,YAFA/wF,GAAOhF,KAAK,oCAIhB,MAAM0+D,EAAOunB,EAAEh9C,GAAItmD,KAAK,QAEpB+7E,EAAKlnF,QAA0B,SAAhBknF,EAAKl7D,OACpBvrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,qBAAiCpR,EAAKxjC,KAAK,UAKlEl2B,GAAOhF,KAAK,sFASpB89F,YAAY70D,GAGR,GAFaA,EAAG/M,aAAa,UAEhBjkD,KAAK89G,YAGd,YAFA/wF,GAAOhF,KAAK,oCAIhB,MAAM0+D,EAAOunB,EAAEh9C,GAAItmD,KAAK,QAEpB+7E,EAAKlnF,QAA0B,SAAhBknF,EAAKl7D,OACpBvrB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,qBAAiCpR,EAAKxjC,KAAK,UAKlEl2B,GAAOhF,KAAK,sFAQpB0wF,QACIz4G,KAAK69G,qBAAqBr5G,SAAQs8G,GAAUA,MAC5C9gH,KAAK69G,qBAAuB,GAE5B79G,KAAK63G,QAAS,EASlBF,QACI,OAAO,IAAIrxF,SAAQ,CAACC,EAAS1U,KACzB,MAAMy6C,EAAU/8C,YAAW,IAAMu2G,GAAU,IAAO,KAC5Ct7B,EAAexqF,KAAKwqF,aAQ1B,SAASs7B,EAAUC,GAAW,GAC1Bv7B,EAAa72E,eAAekkF,KAAAA,SAAqBiuB,GACjDp6F,aAAa4gC,GACTy5D,EAEAl0G,EAAO,IAAIpD,MAAM,qEAGjB8X,IAdRvmB,KAAKy4G,QAiBLjuB,EAAa3jE,GAAGgxE,KAAAA,SAAqBiuB,GACrC9lH,KAAKo/G,cC3xDjB,MAAMryF,IAASmB,EAAAA,EAAAA,2CAKA,MAAM83F,WAA4BvU,GAK7C7yG,YAAYs0F,GACRxV,QACA19E,KAAKkzF,KAAOA,EACZlzF,KAAKouG,MAAQ,GAOjBjoF,KAAKgsC,GACDurB,MAAMv3D,KAAKgsC,GAGXnyD,KAAKmyD,WAAWz6B,WAAW13B,KAAKggH,WAAW95G,KAAKlG,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAKmyD,WAAWz6B,WAAW13B,KAAKqiH,sBAAsBn8G,KAAKlG,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAKmyD,WAAWz6B,WAAW13B,KAAKqjH,gBAAgBn9G,KAAKlG,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAKmyD,WAAWz6B,WAAW13B,KAAK4iH,UAAU18G,KAAKlG,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAKmyD,WAAWz6B,WAAW13B,KAAK4lH,OAAO1/G,KAAKlG,MACxC,iCAAkC,KAAM,MAAO,KAAM,MACzDA,KAAKmyD,WAAWz6B,WAAW13B,KAAK6lH,YAAY3/G,KAAKlG,MAC7C,iCAAkC,KAAM,MAAO,KAAM,MAS7Dg4G,WAAWnzD,EAAK3O,EAAUtsC,GACtB,MAAMwsF,EAAU93C,GAAAA,QAAAA,kBAA0BuG,GAE1C,GAAI7kD,KAAKimH,cAAc7vB,GAAU,CAC7B,MAAM0c,EAAS,+BAGf,MADA/lF,GAAO1V,MAAMy7F,GACP,IAAIrkG,MAAMqkG,GAOpB,OALA9yG,KAAKouG,MAAMhY,GAAW,IAAImnB,GAASv9G,KAAKmyD,WAAYtN,EAChD3O,EAAUl2C,KAAKkzF,KAAMtpF,GACzB5J,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,gBAA4B73F,KAAKouG,MAAMhY,IAEpCp2F,KAAKouG,MAAMhY,GAStB6vB,cAAc7vB,GACV,OAAOA,KAAWp2F,KAAKouG,MAO3BgR,QAAQv6D,GACJ7kD,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,kBAA8B73F,KAAKouG,MAAMvpD,WACtC7kD,KAAKouG,MAAMvpD,GAOtBm7D,WAAWjyD,GACP,MAAMpT,EAAOoT,EAAK9J,aAAa,QAG/B,GAAI8J,EAAK9J,aAAa,QAClB,OAAO,EAGX,MAAM0zC,EAAO33F,KAAKouG,MAAM9vD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAKg9C,IAKDqW,EAAEjgD,GAAMrjD,KAAK,sEACYnL,QACzBo4F,EAAKioB,yBAGTjoB,EAAKqoB,WAAWjyD,IAET,GAOXs0D,sBAAsBt0D,GAClB,MAAMpT,EAAOoT,EAAK9J,aAAa,QACzB0zC,EAAO33F,KAAKouG,MAAM9vD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAKg9C,IAILA,EAAK0qB,sBAAsBt0D,EAAMpT,IAE1B,GAOX0oE,gBAAgBt1D,GACZ,MAAMpT,EAAOoT,EAAK9J,aAAa,QACzB0zC,EAAO33F,KAAKouG,MAAM9vD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAKg9C,IAILA,EAAK0rB,gBAAgBt1D,EAAMpT,IAEpB,GAOXioE,UAAUz3F,GAEN,MAAMwvB,EAAOxvB,EAAI84B,aAAa,QACxB0zC,EAAO33F,KAAKouG,MAAM9vD,GAAAA,QAAAA,kBAA0B3D,IAElD,OAAKg9C,IAILA,EAAKirB,UAAUz3F,EAAKwvB,IAEb,GAOXirE,OAAO50D,GACH,MAAMrW,EAAOqW,EAAG/M,aAAa,QACvB0zC,EAAO33F,KAAKouG,MAAM9vD,GAAAA,QAAAA,kBAA0B3D,IAGlD,OAAKg9C,IAILA,EAAKiuB,OAAO50D,IAEL,GAOX60D,YAAY70D,GACR,MAAMrW,EAAOqW,EAAG/M,aAAa,QACvB0zC,EAAO33F,KAAKouG,MAAM9vD,GAAAA,QAAAA,kBAA0B3D,IAGlD,OAAKg9C,IAILA,EAAKkuB,YAAY70D,IAEV,IC3Mf,MAAMjkC,IAASmB,EAAAA,EAAAA,WAAU,gBA2BzB,OAtBA,MAMI/H,KAAKS,GACD5mB,KAAKkmH,qBAAuBrmC,QAAQj5D,EAAMu/F,qBAE1Cp5F,GAAOtf,KAAM,0BAAyBzN,KAAKkmH,wBAQ/CE,+BACI,OAAOpmH,KAAKkmH,uECpBpB,MAAMn5F,GAASpoB,EAAAA,MAAAA,2CAmSf,GAzRuB,CAQnB0hH,aAAc,KAQdlgG,KAAKvc,EAAU,IACX5J,KAAK4J,QAAUA,EACf5J,KAAKqmH,aAAermH,KAAKsmH,4BAEpBtmH,KAAKqmH,cACNt5F,GAAOtf,KAAK,6BAWpB64G,4BACI,OAAIplG,GAAQ69D,SACD,CAAC3tB,EAAWU,KACfr1D,OAAO8pH,YAAYC,oBACfp1D,GACA,CAAC/5C,EAAOmqD,KACJ,IAAIilD,EAmBAA,EADApvG,GAAwB,sBAAfA,EAAMlV,KACF,IAAIw4E,GACbE,IAGS,IAAIF,GACbtjE,EAAOmqD,EAAa,CAAE,YAER,mBAAd1P,GACDA,EAAU20D,OAGtBvlG,GAAQ89D,aACRh/E,KAAK0mH,uBACLxlG,GAAQ+9D,iBAAmB/9D,GAAQ+/D,0BACnCjhF,KAAK2mH,kCACLzlG,GAAQ+/D,0BACRjhF,KAAK4mH,iCAEhB75F,GAAOhjB,IAAI,mCAAoCmX,GAAQw9D,WAEhD,OAQXmoC,uBACI,MAAM,aAAEC,GAAiB9mH,KAAK4J,QAQ9B,QAPck9G,MAAAA,OAAA,EAAAA,EAAcC,SAAS,CACjCC,iBAAiB,EACjBC,aAAc,EACdC,kBAAkB,EAClBC,kBAAkB,IAW1BprD,cACI,OAA6B,OAAtB/7D,KAAKqmH,cAShBK,uBAAuBt1D,EAAWU,GAC9B,GAAIr1D,OAAO2qH,yBAA2B3qH,OAAO2qH,wBAAwBC,kBAAmB,CACpF,MAAM,wBAAEC,EAAF,sBAA2BC,GAA0BvnH,KAAK4J,QAEhEnN,OAAO2qH,wBAAwBC,kBAC3B,CACIE,sBAAuBA,GAAyB,CAAE,SAAU,YAEhE,CAACr/C,EAAUs/C,EAAYC,GAAmB,KACtC,GAAIv/C,EAAU,SACV,IAAIw/C,GAAmB,EAEvB,GAAID,EAAkB,CAClBC,EAAmB,GACnB,MAAMC,EAAsB3nH,KAAK6mH,uBAEE,kBAAxBc,IACPD,EAAmB,CACf3mD,SAAU4mD,IAUC,WAAfH,IACAE,EAAiB5mD,UAAY,CACzBsD,kBAAmB,YAK/B,MAAM5C,EAAc,CAChBC,MAAOimD,EACP/lD,MAAO,CACHb,UAAW,CACPsD,kBAAmB,UACnBC,oBAAqB6D,EACrB0/C,aAAY,UAAEN,MAAAA,OAAF,EAAEA,EAAyBrsG,WAA3B,QA9JX,EA+JDqpD,aAAY,UAAEgjD,MAAAA,OAAF,EAAEA,EAAyBtsG,WAA3B,QA/JX,EAgKDupD,SAAU9nE,OAAOorH,OAAO9rF,MACxByoC,UAAW/nE,OAAOorH,OAAO7rF,UAMrC2kC,UAAUC,aAAawC,aAAa5B,GAC/BS,MAAKx6D,GAAU2pD,EAAU,CACtB3pD,OAAAA,EACAs8D,SAAUmE,EACV4/C,WAAYN,KACZ11D,QAKRA,EAAU,IAAI6oB,GAAgBE,QAGtCjrE,GAAOkiD,EAAU,IAAI6oB,GACjBE,GACAjrE,WAIRkiD,EAAU,IAAI6oB,GAAgBE,MAUtC+rC,gCAAgCn3G,EAAU+oB,GACtC,IAAIsrC,EAGAA,EADAnD,UAAUmD,gBACQnD,UAAUmD,gBAAgB59D,KAAKy6D,WAG/BA,UAAUC,aAAakD,gBAAgB59D,KAAKy6D,UAAUC,cAG5E,MAAM,wBAAE0mD,GAA4BtnH,KAAK4J,QACnC+3D,EAA2C,iBAA5B2lD,GAAuC,CAAEnjD,UAAWmjD,GACnE7lD,EAAQzhE,KAAK6mH,uBAGnBllD,EAAMwC,kBAAoBxC,EAAMwC,UAAUlpD,IAE1C,MAAMumD,EAAc,CAChBG,MAAAA,EACAF,MAAAA,EACAsmD,OAAQ,UAGZh7F,GAAOtf,KAAK,2CAA4C+zD,GAExDsC,EAAgBtC,GACXS,MAAKx6D,IACFgI,EAAS,CACLhI,OAAAA,EACAs8D,SAAUt8D,EAAOtD,QAGxBgoE,OAAM90D,IACH,MAAM2wG,EAAe,CACjBC,UAAW5wG,GAASA,EAAMlV,KAC1B85G,SAAU5kG,GAASA,EAAMtY,QACzBmpH,WAAY7wG,GAASA,EAAM8M,OAG/B4I,GAAO1V,MAAM,wBAAyBmqD,EAAawmD,GAE/CA,EAAa/L,WAAmE,IAAvD+L,EAAa/L,SAASrwG,QAAQ,oBAGvD4sB,EAAc,IAAImiD,GAAgBE,KAKtCriD,EAAc,IAAImiD,GAAgBE,SAU9C8rC,kCAAkCl3G,EAAU+oB,GACxCzL,GAAOtf,KAAK,4CAEZkzD,UAAUC,aAAakD,gBAAgB,CAAEnC,OAAO,IAC3CM,MAAKx6D,IACFgI,EAAS,CACLhI,OAAAA,EACAs8D,SAAUt8D,EAAOtD,QAExBgoE,OAAM,KACH3zC,EAAc,IAAImiD,GAAgBE,SAW9CstC,2BAA2BC,GACvBr7F,GAAOtf,KAAM,uCAAsC26G,KAEnDpoH,KAAK4J,QAAQ09G,wBAA0B,CACnCrsG,IAxRyB,EAyRzBD,IAAKotG,KClSXr7F,IAASmB,EAAAA,EAAAA,qCAOTm6F,GAAU,CACZC,mBAAmB/8F,GAIRA,EAAOA,EAAKtjB,QAAQ,iBAAkB,IAAMsjB,EAEvDg9F,UAAUC,EAAWC,GACjB,IACIxyE,EAAK5D,EADL/9B,EAAO,KAeX,OAZK+9B,EAAQg2E,GAAQK,SAASF,EAAW,eAAgBC,MAC7CxyE,EACEoyE,GAAQK,SACNF,EACA,aACAC,MACZn0G,EAAO,CACH+9B,MAAOg2E,GAAQM,cAAct2E,GAC7B4D,IAAKoyE,GAAQO,YAAY3yE,KAI1B3hC,GAEXq0G,cAAc97F,GACHA,EAAKrlB,UAAU,IAE1BqhH,cAAcC,GACF,eAAcA,IAE1BF,YAAY/7F,GACDA,EAAKrlB,UAAU,IAE1BuhH,YAAY9yE,GACA,aAAYA,IAExB+yE,SAASn8F,GACEA,EAAKrlB,UAAU,GAS1ByhH,mBAAmBC,GACf,MAAMC,EAAWD,EAAUx+G,MAAKmiB,GAAQA,EAAKjhB,QAAQ,UAAY,IAEjE,IAAKu9G,EACD,OAGJ,MAAMjnH,EAAIinH,EAAS3hH,UAAU2hH,EAASv9G,QAAQ,UAAY,GAE1D,OAAOy8G,GAAQC,mBAAmBpmH,IAEtC42C,WAAWjsB,GACP,MAAMvY,EAAO,GACPnN,EAAQ0lB,EAAKrlB,UAAU,GAAG/J,MAAM,KAUtC,OARA6W,EAAKjO,MAAQc,EAAM8O,QACnB3B,EAAKhN,KAAOH,EAAM8O,QAClB3B,EAAK+zB,MAAQlhC,EAAM8O,QACa,KAA5B9O,EAAMA,EAAM5H,OAAS,IACrB4H,EAAMwQ,MAEVrD,EAAK2kC,IAAM9xC,EAEJmN,GAEX80G,WAAWzyE,GAEF,KAAIA,EAAMtwC,SAASswC,EAAMrvC,QAAQqvC,EAAMtO,SACpCsO,EAAMsC,IAAIhwC,KAAK,OAE3BogH,YAAYx8F,GACR,MAAMvY,EAAO,GACb,IAAInN,EAAQ0lB,EAAKrlB,UAAU,GAAG/J,MAAM,KAQpC,OANA6W,EAAKnQ,GAAKgD,EAAM8O,QAChB9O,EAAQA,EAAM,GAAG1J,MAAM,KACvB6W,EAAKnS,KAAOgF,EAAM8O,QAClB3B,EAAKg1G,UAAYniH,EAAM8O,QACvB3B,EAAKw+B,SAAW3rC,EAAM5H,OAAS4H,EAAM8O,QAAU,IAExC3B,GAQXi1G,aAAa18F,GACT,MAAM1lB,EAAQ0lB,EAAKrlB,UAAU,IAAI/J,MAAM,KAQvC,MAAO,CAPU0J,EAAM,GACNA,EAAM,GAGHA,EAAM5H,OAAS,EAAI4H,EAAM,GAAK,OAKtDqiH,YAAYxgH,GACR,IAAI6jB,EACG,YAAW7jB,EAAGi7C,aAAa,SAASj7C,EAAGi7C,aAAa,WACnDj7C,EAAGi7C,aAAa,eAOxB,OALIj7C,EAAGi7C,aAAa,aACmB,MAAhCj7C,EAAGi7C,aAAa,cACnBp3B,GAAS,IAAG7jB,EAAGi7C,aAAa,eAGzBp3B,GAEX48F,YAAY58F,GACR,MAAMvY,EAAO,GACPnN,EAAQ0lB,EAAKrlB,UAAU,GAAG/J,MAAM,KAStC,OAPA6W,EAAK0zB,IAAM7gC,EAAM8O,QACjB3B,EAAK,gBAAkBnN,EAAM8O,QAC7B3B,EAAK,cAAgBnN,EAAM8O,QACvB9O,EAAM5H,SACN+U,EAAK,kBAAoBnN,EAAM8B,KAAK,MAGjCqL,GAEXogC,iBAAiB7nB,GACb,MAAMvY,EAAO,GACPnN,EAAQ0lB,EAAKrlB,UAAU,IAAI/J,MAAM,KAMvC,OAJA6W,EAAKtT,KAAOmG,EAAM8O,QAClB3B,EAAKo1G,YAAcviH,EAAM8O,QAGlB3B,GAEXm/B,UAAU5mB,GACN,MAAMvY,EAAO,GACb,IAAInN,EAAQ0lB,EAAKpvB,MAAM,KAEvB0J,EAAM8O,QACN9O,EAAQA,EAAM8B,KAAK,KAAKxL,MAAM,KAC9B,IAAK,IAAI6B,EAAI,EAAGA,EAAI6H,EAAM5H,OAAQD,IAAK,CACnC,IAAImF,EAAM0C,EAAM7H,GAAG7B,MAAM,KAAK,GAE9B,KAAOgH,EAAIlF,QAAqB,MAAXkF,EAAI,IACrBA,EAAMA,EAAI+C,UAAU,GAExB,MAAM3D,EAAQsD,EAAM7H,GAAG7B,MAAM,KAAK,GAE9BgH,GAAOZ,EACPyQ,EAAKvR,KAAK,CAAEZ,KAAMsC,EACdZ,MAAAA,IACGY,GAEP6P,EAAKvR,KAAK,CAAEZ,KAAM,GACd0B,MAAOY,IAInB,OAAO6P,GAEXq1G,kBAAkB98F,GACd,MAAMklB,EAAY,GACZ63E,EAAQ/8F,EAAKpvB,MAAM,KAEzBs0C,EAAUC,WAAa43E,EAAM,GAAGpiH,UAAU,IAC1CuqC,EAAU3qC,UAAYwiH,EAAM,GAC5B73E,EAAUE,SAAW23E,EAAM,GAAGtoG,cAC9BywB,EAAUx7B,SAAWqzG,EAAM,GAC3B73E,EAAU1qC,GAAKuiH,EAAM,GACrB73E,EAAUzqC,KAAOsiH,EAAM,GAGvB73E,EAAUvyC,KAAOoqH,EAAM,GACvB73E,EAAUpuC,WAAa,EACvB,IAAK,IAAIrE,EAAI,EAAGA,EAAIsqH,EAAMrqH,OAAQD,GAAK,EACnC,OAAQsqH,EAAMtqH,IACd,IAAK,QACDyyC,EAAU,YAAc63E,EAAMtqH,EAAI,GAClC,MACJ,IAAK,QACDyyC,EAAU,YAAc63E,EAAMtqH,EAAI,GAClC,MACJ,IAAK,aACDyyC,EAAUpuC,WAAaimH,EAAMtqH,EAAI,GACjC,MACJ,IAAK,UACDyyC,EAAUruC,QAAUkmH,EAAMtqH,EAAI,GAC9B,MACJ,QACIytB,GAAOw4B,MACF,sCACGqkE,EAAMtqH,UAAUsqH,EAAMtqH,EAAI,OAS1C,OANAyyC,EAAU83E,QAAU,IAIpB93E,EAAU5tC,GAAKmI,KAAKE,SAAShO,SAAS,IAAIokB,OAAO,EAAG,IAE7CmvB,GAEX+3E,kBAAkBC,GACd,IAAIl9F,EAAO,CACN,eAAck9F,EAAK/3E,aACpB+3E,EAAK3iH,UACL2iH,EAAK93E,SACL83E,EAAKxzG,SACLwzG,EAAK1iH,GACL0iH,EAAKziH,KACL,MACAyiH,EAAKvqH,MACPyJ,KAAK,KAGP,OADA4jB,GAAQ,IACAk9F,EAAKvqH,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGuqH,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5Bn9F,GAAQ,QACRA,GAAQ,IACRA,GAAQk9F,EAAK,YACbl9F,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQk9F,EAAK,YACbl9F,GAAQ,KAchB,OAVIk9F,EAAKC,gBAAgB,aACrBn9F,GAAQ,UACRA,GAAQ,IACRA,GAAQk9F,EAAKrmH,QACbmpB,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQk9F,EAAKC,gBAAgB,cAAgBD,EAAKpmH,WAAa,IAExDkpB,GAEXo9F,UAAU7/G,GAIN,MAAMkK,EAAO,IAAIuxB,IACXoO,EAAQ7pC,EAAK3M,MAAM,QAEzB,IAAK,IAAI6B,EAAI,EAAGA,EAAI20C,EAAM10C,OAAQD,IAC9B,GAAiC,YAA7B20C,EAAM30C,GAAGkI,UAAU,EAAG,GAAkB,CAExC,MAAM+B,EAAO0qC,EAAM30C,GAAG7B,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhD6W,EAAK6F,IAAI5Q,IACV+K,EAAK2U,IAAI1f,EAAM,IAGnB+K,EAAK6F,IAAI5Q,GAAMxG,KAAKkxC,EAAM30C,IAIlC,OAAOgV,GASX41G,oBAAoBhB,GAChB,MAAMiB,EAAiBjB,EAAUx+G,MAAK0/G,GAAeA,EAAYx+G,QAAQ,UAAY,IAGrF,OAAOu+G,MAAAA,OAAP,EAAOA,EAAgB3iH,UAAU2iH,EAAev+G,QAAQ,UAAY,IAExEy+G,YAAYx9F,GACR,MAAM1lB,EAAQ0lB,EAAKjK,OAAO,IAAInlB,MAAM,KAC9B6W,EAAO,GAMb,OAJAA,EAAK4+B,GAAK/rC,EAAM8O,QAChB3B,EAAK9U,KAAO2H,EAAM8O,QAClB3B,EAAKvQ,OAASoD,EAEPmN,GAEX8+B,YAAYvmB,GACR,MAAM1lB,EAAQ0lB,EAAKjK,OAAO,GAAGnlB,MAAM,KAC7B6W,EAAO,GAYb,OAVAA,EAAKzQ,MAAQsD,EAAM8O,SACc,IAA7B3B,EAAKzQ,MAAM+H,QAAQ,KACnB0I,EAAKjR,UAAY,QAEjBiR,EAAKjR,UAAYiR,EAAKzQ,MAAM+e,OAAOtO,EAAKzQ,MAAM+H,QAAQ,KAAO,GAC7D0I,EAAKzQ,MAAQyQ,EAAKzQ,MAAM+e,OAAO,EAAGtO,EAAKzQ,MAAM+H,QAAQ,OAEzD0I,EAAK++B,IAAMlsC,EAAM8O,QACjB3B,EAAKvQ,OAASoD,EAEPmN,GAEXo0G,SAAS4B,EAAUC,EAAQ11E,GACvB,IAAIZ,EAAQq2E,EAAS7sH,MAAM,QAE3B,IAAK,IAAI6B,EAAI,EAAGA,EAAI20C,EAAM10C,OAAQD,IAC9B,GAAI20C,EAAM30C,GAAGkI,UAAU,EAAG+iH,EAAOhrH,UAAYgrH,EACzC,OAAOt2E,EAAM30C,GAGrB,IAAKu1C,EACD,OAAO,EAIXZ,EAAQY,EAAYp3C,MAAM,QAC1B,IAAK,IAAIkJ,EAAI,EAAGA,EAAIstC,EAAM10C,OAAQoH,IAC9B,GAAIstC,EAAMttC,GAAGa,UAAU,EAAG+iH,EAAOhrH,UAAYgrH,EACzC,OAAOt2E,EAAMttC,GAIrB,OAAO,GAEX6jH,UAAUF,EAAUC,EAAQ11E,GACxB,IAAIZ,EAAQq2E,EAAS7sH,MAAM,QAC3B,MAAMgtH,EAAU,GAEhB,IAAK,IAAInrH,EAAI,EAAGA,EAAI20C,EAAM10C,OAAQD,IAC1B20C,EAAM30C,GAAGkI,UAAU,EAAG+iH,EAAOhrH,UAAYgrH,GACzCE,EAAQ1nH,KAAKkxC,EAAM30C,IAG3B,GAAImrH,EAAQlrH,SAAWs1C,EACnB,OAAO41E,EAIXx2E,EAAQY,EAAYp3C,MAAM,QAC1B,IAAK,IAAIkJ,EAAI,EAAGA,EAAIstC,EAAM10C,OAAQoH,IAC1BstC,EAAMttC,GAAGa,UAAU,EAAG+iH,EAAOhrH,UAAYgrH,GACzCE,EAAQ1nH,KAAKkxC,EAAMttC,IAI3B,OAAO8jH,GAEXC,kBAAkB79F,GAKd,GAAmC,IAA/BA,EAAKjhB,QAAQ,cAEbihB,EAAQ,KAAIA,SACT,GAA8B,iBAA1BA,EAAKrlB,UAAU,EAAG,IAMzB,OALAulB,GAAOhF,KACH,kEAEJgF,GAAOhF,KAAK8E,GAEL,KAE6B,SAApCA,EAAKrlB,UAAUqlB,EAAKttB,OAAS,KAE7BstB,EAAOA,EAAKrlB,UAAU,EAAGqlB,EAAKttB,OAAS,IAE3C,MAAMwyC,EAAY,GACZ63E,EAAQ/8F,EAAKpvB,MAAM,KAEzB,GAAiB,QAAbmsH,EAAM,GAIN,OAHA78F,GAAOhF,KAAK,uCACZgF,GAAOhF,KAAK8E,GAEL,KAEXklB,EAAUC,WAAa43E,EAAM,GAAGpiH,UAAU,IAC1CuqC,EAAU3qC,UAAYwiH,EAAM,GAC5B73E,EAAUE,SAAW23E,EAAM,GAAGtoG,cAC9BywB,EAAUx7B,SAAWqzG,EAAM,GAC3B73E,EAAU1qC,GAAKuiH,EAAM,GACrB73E,EAAUzqC,KAAOsiH,EAAM,GAGvB73E,EAAUvyC,KAAOoqH,EAAM,GAEvB73E,EAAUpuC,WAAa,IACvB,IAAK,IAAIrE,EAAI,EAAGA,EAAIsqH,EAAMrqH,OAAQD,GAAK,EACnC,OAAQsqH,EAAMtqH,IACd,IAAK,QACDyyC,EAAU,YAAc63E,EAAMtqH,EAAI,GAClC,MACJ,IAAK,QACDyyC,EAAU,YAAc63E,EAAMtqH,EAAI,GAClC,MACJ,IAAK,aACDyyC,EAAUpuC,WAAaimH,EAAMtqH,EAAI,GACjC,MACJ,IAAK,UACDyyC,EAAUruC,QAAUkmH,EAAMtqH,EAAI,GAC9B,MACJ,QACIytB,GAAOw4B,MAAO,oBAAmBqkE,EAAMtqH,UAAUsqH,EAAMtqH,EAAI,OASnE,OANAyyC,EAAU83E,QAAU,IAIpB93E,EAAU5tC,GAAKmI,KAAKE,SAAShO,SAAS,IAAIokB,OAAO,EAAG,IAE7CmvB,GAEX44E,oBAAoBZ,GAChB,IAAIl9F,EAAO,eAEXA,GAAQk9F,EAAK9lE,aAAa,cAC1Bp3B,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,aAC1Bp3B,GAAQ,IAER,IAAIolB,EAAW83E,EAAK9lE,aAAa,YAmBjC,OAfI/iC,GAAQkvD,aAA0C,WAA3Bn+B,EAAS3wB,gBAChC2wB,EAAW,OAGfplB,GAAQolB,EACRplB,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,YAC1Bp3B,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,MAC1Bp3B,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,QAC1Bp3B,GAAQ,IACRA,GAAQ,MACRA,GAAS,IAAGk9F,EAAK9lE,aAAa,UAC9Bp3B,GAAQ,IACAk9F,EAAK9lE,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACG8lE,EAAK9lE,aAAa,aACX8lE,EAAK9lE,aAAa,cACzBp3B,GAAQ,QACRA,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,YAC1Bp3B,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,YAC1Bp3B,GAAQ,KAchB,MAV+B,QAA3BolB,EAAS3wB,gBACTuL,GAAQ,UACRA,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,WAC1Bp3B,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQk9F,EAAK9lE,aAAa,eAAiB,IAEnC,GAAEp3B,SAQd+9F,sBAAsBC,GAClB,MAAMn+G,EAAWm+G,EAAWphH,MACvBxC,KAAIyC,GAAYA,EAASvF,KACzBmC,QAAO,CAACiD,EAAM1I,EAAOY,IAAUA,EAAMmK,QAAQrC,KAAU1I,IACvDtB,OACCoN,EACCk+G,EAAWpgH,YAAcogH,EAAWpgH,WAAWlL,QAAW,EAEjE,GAAImN,EAAW,GAAmB,IAAdC,EAEhB,OAEJ,IAAIb,EAAc,KAElB,GAAiB,IAAbY,EACAZ,EAAc++G,EAAWphH,MAAM,GAAGtF,QAC/B,GAAiB,IAAbuI,EAAgB,CAEvB,MAAME,EACAi+G,EAAWpgH,WAAWC,MACpBC,GAA6B,QAApBA,EAAMC,YAEnBgC,IACAd,EAAcc,EAASnD,MAAMhM,MAAM,KAAK,SAEzC,GAAIiP,GAAY,EAAG,CAEtB,MAAMlC,EACAqgH,EAAWpgH,WAAWC,MACpBC,GAA6B,QAApBA,EAAMC,YAEnBJ,IACAsB,EAActB,EAASf,MAAMhM,MAAM,KAAK,IAIhD,OAAOqO,GAOXg/G,aAAY,IACD9yF,KAAAA,UAAqB,EAAG,YAYnC1uB,iBAAiBV,EAAOW,EAAMC,GAC1B,IAAK,IAAIlK,EAAI,EAAGA,EAAIsJ,EAAMa,MAAMlK,SAAUD,EAAG,CACzC,MAAMyrH,EAAWniH,EAAMa,MAAMnK,GAE7B,GAAIyrH,EAAS5mH,KAAOoF,GACbwhH,EAASnnH,YAAc4F,EAC1B,OAAOuhH,EAASlnH,QAa5BmnH,gBAAgBC,GACLA,EACFxhH,MACAhM,MAAM,KACNwJ,KAAI4D,GAAWC,SAASD,EAAS,MAS1CqgH,SAAQ,CAAC/kH,EAAK3G,IACH2G,EAAIE,MAAMqE,MAAK1H,GAAKA,EAAExD,OAASA,IAO1C2rH,SAAShlH,GACL,MAAMilH,EACAjlH,EAAI1I,MAAM,MAAM6I,QAAOumB,GAAQA,EAAKonF,WAAW,kBAErD,GAAImX,EAAW7rH,OAAS,EACpB,OAAO6rH,EAAW,GAAGxoG,OAAO,eAAerjB,SAWnD8rH,YAAY10E,EAAO20E,GACf,IAAK30E,IAAU20E,EACX,OAGJ,MAAMC,EAAuB50E,EAAMlwC,IAC9BH,QAAOG,GAAOA,EAAIwsC,OAASxsC,EAAIwsC,MAAM3xB,gBAAkBgqG,EAAUhqG,gBACjEra,KAAIR,GAAOA,EAAIsQ,UAEpB,GAAIw0G,EAAsB,CAGtB,MAAMC,EACA70E,EAAM9tC,SACPrK,WACAf,MAAM,KACNwJ,KAAItE,GAAKmI,SAASnI,EAAG,MAE1B,IAAK,MAAMuwC,KAAMq4E,EAAqBl6G,UAAW,CAC7C,MAAMo6G,EAAeD,EAAa5/G,QAAQsnC,GAE1Cs4E,EAAaj+G,OAAOk+G,EAAc,GAClCD,EAAax4G,QAAQkgC,GAEzByD,EAAM9tC,SAAW2iH,EAAaviH,KAAK,OAc3CyiH,WAAW9iH,EAAO0iH,EAAWK,GAAc,GACvC,IAAK/iH,IAAU0iH,EACX,OAGJ,MAAMM,EAAU,GAChB,IAAIC,EAAY,GAChB,MAAMC,EAAqBR,EAAUhqG,gBAAkByqG,KAAAA,MAAsBJ,EAE7E,IAAK,MAAMllH,KAAOmC,EAAMnC,IAChBA,EAAIwsC,OACDxsC,EAAIwsC,MAAM3xB,gBAAkBgqG,EAAUhqG,gBACrCwqG,EACAF,EAAQ7oH,KAAK0D,EAAIsQ,SAEjB80G,EAAU9oH,KAAK0D,EAAIsQ,UAY/B,GANI+0G,IACAD,EAAYjjH,EAAMlC,KACbJ,QAAOiB,GAAQqkH,EAAQhgH,QAAQrE,EAAKwP,UAAY,GAAKxP,EAAKjE,OAAOmyB,SAAS,yBAC1ExuB,KAAIM,GAAQA,EAAKwP,WAGtB80G,EAAUtsH,OAAS,EAAG,CAGtB,MAAMysH,EAAUH,EAAU5kH,KAAIM,GAAS,OAAMA,MACvC0kH,EAASrjH,EAAMlC,KAAKJ,QACtBiB,IAA0C,IAAlCykH,EAAQpgH,QAAQrE,EAAKjE,UAEjCuoH,EAAU9oH,QAAQkpH,EAAOhlH,KAAIM,GAAQA,EAAKwP,WAK1C,MAIMm1G,EAJStjH,EAAMC,SAChBrK,WACAf,MAAM,KACNwJ,IAAI1B,QACce,QAAO4sC,IAAiC,IAA3B24E,EAAUjgH,QAAQsnC,KAE/B,IAAnBg5E,EAAQ3sH,QAERqJ,EAAMtB,KAAO,EACbsB,EAAMvF,UAAY8oH,KAAAA,SAClBvjH,EAAMC,SAAW,KAEjBD,EAAMC,SAAWqjH,EAAQjjH,KAAK,KAGlCL,EAAMnC,IAAMmC,EAAMnC,IAAIH,QAClBiB,IAA2C,IAAnC2kH,EAAQtgH,QAAQrE,EAAKwP,WACjCnO,EAAMlC,KAAOkC,EAAMlC,KAAKJ,QACpBiB,IAA2C,IAAnC2kH,EAAQtgH,QAAQrE,EAAKwP,WAC7BnO,EAAMwjH,SACNxjH,EAAMwjH,OAASxjH,EAAMwjH,OAAO9lH,QACxBiB,IAA2C,IAAnC2kH,EAAQtgH,QAAQrE,EAAKwP,eAMjD,MCzrBe,SAASs1G,GAAIlmH,GACxB,MAAME,EAAQF,EAAI1I,MAAM,UAExB,IAAK,IAAI6B,EAAI,EAAGC,EAAS8G,EAAM9G,OAAQD,EAAIC,EAAQD,IAAK,CACpD,IAAIgtH,EAAU,KAAIjmH,EAAM/G,KAEpBA,IAAMC,EAAS,IACf+sH,GAAU,QAEdjmH,EAAM/G,GAAKgtH,EAEf,MAAMlmH,EAAW,GAAEC,EAAM4P,cAEzBjW,KAAKqG,MAAQA,EACbrG,KAAK0uD,IAAMtoD,EAAUC,EAAM4C,KAAK,IAChCjJ,KAAKoG,QAAUA,ECjBnB,SAASmmH,GAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOjtH,SAAWktH,EAAOltH,OACzB,OAAO,EAGX,IAAK,IAAID,EAAI,EAAGiH,EAAIimH,EAAOjtH,OAAQD,EAAIiH,EAAGjH,IAEtC,GAAIktH,EAAOltH,aAAcnB,OAASsuH,EAAOntH,aAAcnB,OAEnD,IAAKquH,EAAOltH,GAAGotH,OAAOD,EAAOntH,IACzB,OAAO,OAER,GAAIktH,EAAOltH,KAAOmtH,EAAOntH,GAG5B,OAAO,EAIf,OAAO,EAQI,SAASqtH,GAAUC,EAAOC,GAGrC,GAFA7sH,KAAK4sH,MAAQA,EACb5sH,KAAK6sH,SAAWA,GACXD,EACD,MAAM,IAAIn+G,MAAM,yBACb,IAAKo+G,EACR,MAAM,IAAIp+G,MAAM,4BDbxB49G,GAAI9tH,UAAUuuH,SAAU,EAMxBT,GAAI9tH,UAAUwuH,qBAAsB,EAMpCV,GAAI9tH,UAAUyuH,qBAAsB,EAKpCX,GAAI9tH,UAAU0uH,gBAAkB,WAC5B,MAAMC,EAAa,GAEnB,IAAK,IAAIC,EAAa,EAAGA,EAAantH,KAAKqG,MAAM9G,OAAQ4tH,IAAc,CACnE,MAGM9mH,EAAQ,CACV8mH,WAAAA,EACAv2G,IAJEyxG,GAAAA,SACEA,GAAAA,SAAiBroH,KAAKqG,MAAM8mH,GAAa,WAI7C1jH,MAAO,GACPgB,WAAY,IAGhByiH,EAAWC,GAAc9mH,EAEzBgiH,GAAAA,UAAkBroH,KAAKqG,MAAM8mH,GAAa,WAAW3oH,SAAQqoB,IACzD,MAAMugG,EAAWvgG,EAAKrlB,UAAU,GAAG/J,MAAM,KAAK,GAIzC4I,EAAMoD,MAAM2jH,KACb/mH,EAAMoD,MAAM2jH,GAAY,CACpB7jH,KAAM6jH,EACNn5E,MAAO,KAGf5tC,EAAMoD,MAAM2jH,GAAUn5E,MAAMlxC,KAAK8pB,MAErCw7F,GAAAA,UAAkBroH,KAAKqG,MAAM8mH,GAAa,iBAAiB3oH,SAAQqoB,IAC/D,MAAMq5C,EAAMr5C,EAAKjhB,QAAQ,KACnBhB,EAAYiiB,EAAKjK,OAAO,EAAGsjD,GAAKtjD,OAAO,IACvCnZ,EAAQojB,EAAKjK,OAAO,GAAKhY,EAAUrL,QAAQ9B,MAAM,KAEnDgM,EAAMlK,QACN8G,EAAMoE,WAAW1H,KAAK,CAClB6H,UAAAA,EACAnB,MAAAA,OAMhB,OAAOyjH,GAQXb,GAAI9tH,UAAU8uH,aAAe,SAAS9jH,GAElC,MAAM+jH,EAASttH,KAAKitH,kBACpB,IAAIh7G,GAAS,EAWb,OATA3T,OAAOiG,KAAK+oH,GAAQ9oH,SAAQ2oH,IACpBl7G,GAGAq7G,EAAOH,GAAY1jH,MAAMF,KACzB0I,GAAS,MAIVA,GAIXo6G,GAAI9tH,UAAUgvH,SAAW,SAASvrE,EAAMwrE,GAEpCnF,GAAAA,UAAkBroH,KAAKoG,QAAS,YAAY5B,SAAQqoB,IAChD,MAAM1lB,EAAQ0lB,EAAKpvB,MAAM,KACnBmN,EAAYzD,EAAM8O,QAAQ2M,OAAO,GAEvCo/B,EAAK5gD,EAAE,QAAS,CAAE4kD,MAAO,kCACrBp7C,UAAAA,IACJ,IAAK,IAAIjE,EAAI,EAAGA,EAAIQ,EAAM5H,OAAQoH,IAC9Bq7C,EAAK5gD,EAAE,UAAW,CAAEe,KAAMgF,EAAMR,KAAMu/C,KAE1ClE,EAAKkE,QAGT,IAAK,IAAI5mD,EAAI,EAAGA,EAAIU,KAAKqG,MAAM9G,OAAQD,IAAK,CACxC,MAAMq3C,EAAQ0xE,GAAAA,WAAmBroH,KAAKqG,MAAM/G,GAAG7B,MAAM,QAAQ,IAE7D,GAAsB,UAAhBk5C,EAAMtwC,OACa,UAAhBswC,EAAMtwC,OACU,gBAAhBswC,EAAMtwC,MACX,SAGJ,IAAIkD,EACJ,MAAMkkH,EAAYpF,GAAAA,SAAiBroH,KAAKqG,MAAM/G,GAAI,WAG9CiK,IADAkkH,GACOA,EAAUjmH,UAAU,GAAG/J,MAAM,KAAK,GAK7CukD,EAAK5gD,EAAE,UAAW,CAAEssH,QAASF,EACzBrrH,KAAMw0C,EAAMtwC,QAChB,MAAMsnH,EAAWtF,GAAAA,SAAiBroH,KAAKqG,MAAM/G,GAAI,UAEjD,GAAIquH,EAAU,CAEV,MAAM/2G,EAAMyxG,GAAAA,SAAiBsF,GAE7B3rE,EAAK3D,MAAM,CAAEl8C,KAAMyU,IAGvB,GAAoB,UAAhB+/B,EAAMtwC,OAAqC,UAAhBswC,EAAMtwC,MAAmB,CACpD27C,EAAK5gD,EAAE,cACH,CAAE4kD,MAAO,6BACL3/C,MAAOswC,EAAMtwC,QACjBkD,GACAy4C,EAAK3D,MAAM,CAAE90C,KAAAA,IAEjB,IAAK,IAAI5C,EAAI,EAAGA,EAAIgwC,EAAMsC,IAAI15C,OAAQoH,IAAK,CACvC,MAAMinH,EACAvF,GAAAA,SACEroH,KAAKqG,MAAM/G,GACV,YAAWq3C,EAAMsC,IAAItyC,MAE9Bq7C,EAAK5gD,EAAE,eAAgBinH,GAAAA,YAAoBuF,IAI3C,MAAMC,EACAxF,GAAAA,SACEroH,KAAKqG,MAAM/G,GACV,UAASq3C,EAAMsC,IAAItyC,MAE5B,GAAIknH,EAAW,CACX,MAAMC,EAAiBzF,GAAAA,UAAkBwF,GAGzC,IAAK,IAAI1+G,EAAI,EAAGA,EAAI2+G,EAAevuH,OAAQ4P,IACvC6yC,EAAK5gD,EAAE,YAAa0sH,EAAe3+G,IAAI+2C,KAK/ClmD,KAAK+tH,eAAezuH,EAAG0iD,EAAMrL,EAAMsC,IAAItyC,IAEvCq7C,EAAKkE,KAGT,GAAI38C,EAAM,CACN,MAAM2B,EAAUm9G,GAAAA,UAAkBroH,KAAKqG,MAAM/G,IAE7C,IAAK,MAAQ0uH,EAAeC,KAAoB/iH,EAAS,CACrD,MAAMgjH,EAAa7F,GAAAA,oBAA4B4F,GAE/CjsE,EAAK5gD,EAAE,SAAU,CACbmI,KAAMykH,EACN7rH,KAAMgsH,GAAAA,+BAA8CD,OAAannH,EACjEi/C,MAAO,oCAGX,MAAM75C,EAAOk8G,GAAAA,mBAA2B4F,GAGpC9hH,IACA61C,EAAK5gD,EAAE,aACP4gD,EAAK3D,MAAM,CAAEl8C,KAAM,SACnB6/C,EAAK3D,MAAM,CAAEx6C,MAAOsI,IACpB61C,EAAKkE,MAGTlE,EAAKkE,KAKHmiE,GAAAA,UAAkBroH,KAAKqG,MAAM/G,GAAI,iBAExBkF,SAAQqoB,IACnB,MAAMq5C,EAAMr5C,EAAKjhB,QAAQ,KACnBhB,EAAYiiB,EAAKjK,OAAO,EAAGsjD,GAAKtjD,OAAO,IACvCnZ,EAAQojB,EAAKjK,OAAO,GAAKhY,EAAUrL,QAAQ9B,MAAM,KAEnDgM,EAAMlK,SACNyiD,EAAK5gD,EAAE,aAAc,CAAEwJ,UAAAA,EACnBo7C,MAAO,oCACXv8C,EAAMjF,SAAQhC,GAAKw/C,EAAK5gD,EAAE,SAAU,CAAEmI,KAAM/G,IAAK0jD,OACjDlE,EAAKkE,SAKjB,MAAMkoE,EAAW/F,GAAAA,UAAkBroH,KAAKqG,MAAM/G,GAAI,UAElD,GAAI8uH,EAAS7uH,QAAU2hB,GAAQ8/D,uBAAwB,CAGnD,MAAMqtC,EAAOD,EACRnnH,KAAIqnH,GAAWA,EAAQ7wH,MAAM,KAAK,KAClCwJ,KAAIsnH,GAAWA,EAAQ9wH,MAAM,KAAK,KAEvC4wH,EAAK7pH,SAAQ4mD,IACTpJ,EAAK5gD,EAAE,SAAU,CACbgqD,IAAAA,EACApF,MAAO,oCAEXhE,EAAKkE,QAGHmiE,GAAAA,SAAiBroH,KAAKqG,MAAM/G,GAAI,kBAGlC0iD,EAAK5gD,EAAE,YAAa,CAChBwJ,UAAW,MACXo7C,MAAO,oCAEXqoE,EAAK7pH,SAAQ4mD,IACTpJ,EAAK5gD,EAAE,SAAU,CAAEgqD,IAAAA,IAAOlF,QAE9BlE,EAAKkE,MAITmiE,GAAAA,SAAiBroH,KAAKqG,MAAM/G,GAAI,eAChC0iD,EAAK5gD,EAAE,YAAY8kD,KAIvBlmD,KAAK+tH,eAAezuH,EAAG0iD,EAAM,KAG7B,MAAMwsE,EAAcnG,GAAAA,UAAkBroH,KAAKqG,MAAM/G,GAAI,aAErD,IAAK,IAAIqH,EAAI,EAAGA,EAAI6nH,EAAYjvH,OAAQoH,IAAK,CACzC,MAAM8nH,EAASpG,GAAAA,YAAoBmG,EAAY7nH,IAS/C,GAPAq7C,EAAK5gD,EAAE,aAAc,CACjB4kD,MAAO,wCACP3S,IAAKo7E,EAAOp7E,IACZlvC,GAAIsqH,EAAO5qH,QAIX4qH,EAAOr/G,eAAe,aAGtB,OAAQq/G,EAAOprH,WACf,KAAK8oH,KAAAA,SACDnqE,EAAK3D,MAAM,CAAEooB,QAAS,cACtB,MACJ,KAAK0lD,KAAAA,SACDnqE,EAAK3D,MAAM,CAAEooB,QAAS,cACtB,MACJ,KAAK0lD,KAAAA,SACDnqE,EAAK3D,MAAM,CAAEooB,QAAS,SACtB,MACJ,KAAK0lD,KAAAA,SACDnqE,EAAK3D,MAAM,CAAEooB,QAAS,SAM9BzkB,EAAKkE,KAETlE,EAAKkE,KAITlmD,KAAK0uH,kBAAkBpvH,EAAG0iD,GAE1B,MAAMh/C,EAAIhD,KAAKqG,MAAM/G,GAEjB+oH,GAAAA,SAAiBrlH,EAAI,KAAImpH,KAAAA,WAA2BnsH,KAAKoG,SACzD47C,EAAK3D,MAAM,CAAEooB,QAAS,SACf4hD,GAAAA,SAAiBrlH,EAAI,KAAImpH,KAAAA,WAA2BnsH,KAAKoG,SAChE47C,EAAK3D,MAAM,CAAEooB,QAAS,cACf4hD,GAAAA,SAAiBrlH,EAAI,KAAImpH,KAAAA,WAA2BnsH,KAAKoG,SAChE47C,EAAK3D,MAAM,CAAEooB,QAAS,cACf4hD,GAAAA,SAAiBrlH,EAAI,KAAImpH,KAAAA,WAA2BnsH,KAAKoG,UAChE47C,EAAK3D,MAAM,CAAEooB,QAAS,SAKP,MAAf9vB,EAAMrvC,MAAiB+gH,GAAAA,SAAiBrlH,EAAG,gBAAiBhD,KAAKoG,UAEjE47C,EAAK3D,MAAM,CAAEooB,QAAS,aAE1BzkB,EAAKkE,KAIT,OAFAlE,EAAKkE,KAEElE,GAGXqqE,GAAI9tH,UAAUmwH,kBAAoB,SAASvB,EAAYnrE,GACnDA,EAAK5gD,EAAE,aAGP,MAAMutH,EACAtG,GAAAA,SAAiBroH,KAAKqG,MAAM8mH,GAAa,aAAcntH,KAAKoG,SAElE,GAAIuoH,EAAS,CACT,MAAMC,EAAYvG,GAAAA,aAAqBsG,GAEvC3sE,EAAK5gD,EAAE,UAAW,CACd4kD,MAAO,yCACP0iC,OAAQkmC,EAAU,GAClB38E,SAAU28E,EAAU,KAIpBA,EAAUrvH,OAAS,GACnByiD,EAAK3D,MAAM,CAAE+mB,QAASwpD,EAAU,KAEpC5sE,EAAKkE,KAKHmiE,GAAAA,UACEroH,KAAKqG,MAAM8mH,GACX,iBACAntH,KAAKoG,SAEA5B,SAAQqoB,IACjB,MAAM68F,EAAcrB,GAAAA,iBAAyBx7F,GAE7C68F,EAAY1jE,MAAQ,8BACpBhE,EAAK5gD,EAAE,eAAe0B,EAAE4mH,EAAYA,oBAC7BA,EAAYA,YAEnB,MAAMmF,EACAxG,GAAAA,SACEroH,KAAKqG,MAAM8mH,GACX,WACAntH,KAAKoG,SAETyoH,IACAnF,EAAYoF,MAAQD,EAAUjsG,OAAO,IAEzCo/B,EAAK3D,MAAMqrE,GACX1nE,EAAKkE,QAET,MAAM6oE,EAAgB1G,GAAAA,UAAkBroH,KAAKqG,MAAM8mH,GAAantH,KAAKoG,SAEjE2oH,IACAA,EAAc/oE,MAAQ,uCACtBhE,EAAK3D,MAAM0wE,GAIL1G,GAAAA,UACEroH,KAAKqG,MAAM8mH,GACX,eACAntH,KAAKoG,SAEE5B,SAAQqoB,IACnB,MAAMklB,EAAYs2E,GAAAA,kBAA0Bx7F,GAExC7sB,KAAK8sH,UACL/6E,EAAU1qC,GAAK,WAEnB,MAAM4qC,EACAF,GAA2C,iBAAvBA,EAAUE,SAC1BF,EAAUE,SAAS3wB,cACnB,GAELthB,KAAK+sH,sBACe,QAAb96E,GAAmC,WAAbA,IAC1BjyC,KAAKgtH,qBAAoC,QAAb/6E,GAGpC+P,EAAK5gD,EAAE,YAAa2wC,GAAWmU,SAGvClE,EAAKkE,MAITmmE,GAAI9tH,UAAUwvH,eAAiB,SAASZ,EAAYnrE,EAAMgtE,GAEhD3G,GAAAA,UACEroH,KAAKqG,MAAM8mH,GACV,aAAY6B,KAEfxqH,SAAQqoB,IACV,MAAMoiG,EAAW5G,GAAAA,YAAoBx7F,GAEf,YAAlBoiG,EAASzvH,MACTwiD,EAAK5gD,EAAE,kBAAmB,CACtB4kD,MAAO,qCACPniD,MAAOorH,EAASlrH,OAAO,KAE3Bi+C,EAAKkE,OAELlE,EAAK5gD,EAAE,UAAW,CACd4kD,MAAO,qCACPxmD,KAAMyvH,EAASzvH,OAEfyvH,EAASlrH,OAAOxE,OAAS,GACzByiD,EAAK3D,MAAM,CAAE,QAAW4wE,EAASlrH,OAAO,KAE5Ci+C,EAAKkE,UAKjBmmE,GAAI9tH,UAAU2wH,iBAAmB,SAASltE,EAAMgtE,GAC5C,IAAI7oH,EAAM,GACV,MAAMgpH,EACAntE,EAAKt3C,KACH,gEAsBR,OApBIykH,EAAsB5vH,SACtB4G,GAAO,uBACHgpH,EAAsBlsE,KAAK,SAC3B98C,GAAOgpH,EAAsBlsE,KAAK,SAElC98C,GAAO,IAEXA,GAAO,QAGc67C,EAAKt3C,KAAK,wDAElB8E,MAAK,CAACy+F,EAAG95D,KACtBhuC,GAAQ,aAAY6oH,KAAe76E,EAAG8P,aAAa,UAC/C9P,EAAGpvB,aAAa,aAChB5e,GAAQ,IAAGguC,EAAG8P,aAAa,cAE/B99C,GAAO,UAGJA,GAIXkmH,GAAI9tH,UAAU6wH,WAAa,SAASC,GAChC,MAAM31E,EAAYtsB,KAAKgC,MAGvBpvB,KAAK0uD,IACE,cAAMhV,yCAMb,MAAM41E,EACAthB,EAAEqhB,GAAQ3kH,KAAK,mDAEjB4kH,EAAO/vH,QACP+vH,EAAO9/G,MAAK,CAAC02D,EAAKv7D,KACd,MAAM4kH,EACAvhB,EAAErjG,GACCD,KAAK,YACLzD,KAAI,CAACgnG,EAAGvoG,IAAYA,EAAQu+C,aAAa,UACzC9pC,MAELo1G,EAAShwH,OAAS,IAClBS,KAAK0uD,KACG,WACA/jD,EAAMs5C,aAAa,cACZt5C,EAAMs5C,aAAa,WAC1BsrE,EAAStmH,KAAK,eAKlCjJ,KAAKoG,QAAUpG,KAAK0uD,IACpB2gE,EAAO3kH,KAAK,YAAY8E,MAAK,CAACy+F,EAAGvoG,KAC7B,MAAM1C,EAAIhD,KAAKwvH,aAAaxhB,EAAEtoG,IAE9B1F,KAAKqG,MAAMtD,KAAKC,MAWpBhD,KAAK0uD,IAAM1uD,KAAKoG,QAAUpG,KAAKqG,MAAM4C,KAAK,KAI9CojH,GAAI9tH,UAAUixH,aAAe,SAAS9pH,GAClC,MAAM0E,EAAO1E,EAAQgF,KAAK,gBACpB2hB,EAAY3mB,EAAQgF,KAAK,4DAC/B,IAAIvE,EAAM,GACV,MAAMizC,EAAO/sB,EAAU3hB,KACnB,4DAEErE,EAAQ,CAAEA,MAAO+D,EAAK64C,KAAK,SAEjC58C,KAAa,KAUb,GATgC,aAA5BX,EAAQu9C,KAAK,aAEb58C,EAAMiB,KAAO,KAEb+kB,EAAU3hB,KAAK,qDAAqDnL,OACpE8G,EAAMgiC,MAAQ+Q,EAAK75C,OAAS,YAAc,YAE1C8G,EAAMgiC,MAAQ,WAEd+Q,EAAK75C,OAAQ,CACb4G,GAAQ,iBAAgBE,EAAMiB,kBAC1B8xC,EAAK6J,KAAK,gBACd98C,GAAQ,aAAYizC,EAAK6J,KAAK,aAAa7J,EAAK6J,KAAK,cAErD,MAAMwsE,EAAcr2E,EAAK6J,KAAK,WAG1B98C,GADAspH,EACQ,IAAGA,QAEJ,YAGXppH,EAAM4yC,IACA7uC,EACGM,KAAK,iBACLzD,KAAI,CAACgnG,EAAGr7D,IAAgBA,EAAYqR,aAAa,QACjD9pC,MACThU,GAAQ,GAAEkiH,GAAAA,WAAmBhiH,SA6CjC,OA1CAF,GAAO,uBACFizC,EAAK75C,SACN4G,GAAO,+BAIPkmB,EAAU9sB,SACN8sB,EAAU42B,KAAK,WACf98C,GAAQ,GAAEkiH,GAAAA,cAAsBh8F,EAAU42B,KAAK,iBAE/C52B,EAAU42B,KAAK,SACf98C,GAAQ,GAAEkiH,GAAAA,YAAoBh8F,EAAU42B,KAAK,eAEjD52B,EAAU3hB,KAAK,qDAAqD8E,MAAK,CAACy+F,EAAGyb,KACzEvjH,GAAQ,iBAAgBujH,EAAYzlE,aAAa,UACjD99C,GAAQ,IAAG6nG,EAAE0b,GAAan+F,SAC1BplB,GAAO,OACHujH,EAAY3kG,aAAa,WACzB5e,GAAQ,WAAUujH,EAAYzlE,aAAa,oBAMvD53B,EAAU3hB,KAAK,cACV8E,MAAK,CAACy+F,EAAGl8D,KACN,IAAIE,EAAWF,EAAUkS,aAAa,YAEtChS,EAC0B,iBAAbA,EAAwBA,EAAS3wB,cAAgB,GAEzDthB,KAAK+sH,sBACe,QAAb96E,GAAmC,WAAbA,IAC1BjyC,KAAKgtH,qBAAoC,QAAb/6E,IAEzBjyC,KAAK8sH,SACZ/6E,EAAUmR,aAAa,KAAM,WAGjC/8C,GAAOkiH,GAAAA,oBAA4Bt2E,OAGnCrsC,EAAQu9C,KAAK,YACrB,IAAK,YACD98C,GAAQ,KAAIgmH,KAAAA,eACZ,MACJ,IAAK,YACDhmH,GAAQ,KAAIgmH,KAAAA,eACZ,MACJ,IAAK,OACDhmH,GAAQ,KAAIgmH,KAAAA,eACZ,MACJ,IAAK,OACDhmH,GAAQ,KAAIgmH,KAAAA,eAqFhB,OAlFAhmH,GAAQ,SAAQT,EAAQu9C,KAAK,cAMzB74C,EAAKM,KAAK,aAAanL,SACvB4G,GAAO,kBAGXiE,EAAKM,KAAK,iBAAiB8E,MAAK,CAACy+F,EAAGr7D,KAChCzsC,GAAQ,GAAEkiH,GAAAA,YAAoBz1E,SAC1Bo7D,EAAEp7D,GAAaloC,KAAK,cAAcnL,SAClC4G,GAAQ,UAASysC,EAAYqR,aAAa,SAC1C99C,GACO6nG,EAAEp7D,GACAloC,KAAK,cACLzD,KAAI,CAACyoH,EAAI37E,KACN,MAAM5xC,EAAO4xC,EAAUkQ,aAAa,QAEpC,OACK9hD,EAAQ,GAAEA,KAAU,IACf4xC,EAAUkQ,aAAa,YAEpC9pC,MACAlR,KAAK,MACd9C,GAAO,QAIXA,GAAOnG,KAAKkvH,iBAAiBlhB,EAAEp7D,GAAcA,EAAYqR,aAAa,UAI1E99C,GAAOnG,KAAKkvH,iBAAiB9kH,EAAM,KAGnCA,EACKM,KAAK,8DACL8E,MAAK,CAACy+F,EAAG0hB,KACNxpH,GACQ,YAAWwpH,EAAO1rE,aAAa,SAC/B0rE,EAAO1rE,aAAa,gBAIpC75C,EACKM,KAAK,wDACL8E,MAAK,CAACy+F,EAAGgd,KACN,MAAMrgH,EAAYqgH,EAAUhnE,aAAa,aACnCx6C,EACAukG,EAAEid,GACCvgH,KAAK,WACLzD,KAAI,CAACyoH,EAAIvhH,IAAWA,EAAO81C,aAAa,UACxC9pC,MAEL1Q,EAAMlK,SACN4G,GAAQ,gBAAeyE,KAAanB,EAAMR,KAAK,eAK3DmB,EACKM,KAAK,oDACL8E,MAAK,CAACy+F,EAAG9/F,KACN,MAAM5E,EAAO4E,EAAO81C,aAAa,QAEjC+pD,EAAE7/F,GACGzD,KAAK,cACL8E,MAAK,CAACkgH,EAAI37E,KACP,MAAM5xC,EAAO4xC,EAAUkQ,aAAa,QACpC,IAAIpgD,EAAQkwC,EAAUkQ,aAAa,SAEnCpgD,EAAQwkH,GAAAA,mBAA2BxkH,GACnCsC,GAAQ,UAASoD,KAAQpH,IACrB0B,GAASA,EAAMtE,SACf4G,GAAQ,IAAGtC,KAEfsC,GAAO,aAIhBA,GCxpBXwmH,GAAUpuH,UAAUqxH,YAAc,WAE9B,MAAMC,EAAW7vH,KAAK4sH,MAAMK,kBACtB6C,EAAe9vH,KAAK6sH,SAASI,kBAC7B8C,EAAW,GAoFjB,OAlFAzxH,OAAOiG,KAAKurH,GAActrH,SAAQwrH,IAC9B,MAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhB5xH,OAAOiG,KAAK2rH,EAAYzmH,OAAOjF,SAAQ+E,MACe,IAA9CjL,OAAOiG,KAAK0rH,EAAQxmH,OAAOmC,QAAQrC,IAY5B2mH,EAAYzmH,MAAMF,GAAM0qC,OACpBg8E,EAAQxmH,MAAMF,GAAM0qC,YAGcltC,IADvBkpH,EAAQxmH,MAAMF,GAAM0qC,MAAMvpC,MAC5CmiB,IAAkC,IAA1BA,EAAKjhB,QAAQ,iBAEoB7E,IADtBmpH,EAAYzmH,MAAMF,GAAM0qC,MAAMvpC,MACjDmiB,IAAkC,IAA1BA,EAAKjhB,QAAQ,cAfpBmkH,EAASC,KACVD,EAASC,GAAkB,CACvB7C,WAAY+C,EAAY/C,WACxBv2G,IAAKs5G,EAAYt5G,IACjBnN,MAAO,GACPgB,WAAY,KAGpBslH,EAASC,GAAgBvmH,MAAMF,GAAQ2mH,EAAYzmH,MAAMF,OAyBjE2mH,EAAYzlH,WAAWjG,SAAQ2rH,IAG3B,IAAI1gE,GAAU,EAEd,IAAK,IAAInwD,EAAI,EAAGA,EAAI2wH,EAAQxlH,WAAWlL,OAAQD,IAAK,CAChD,MAAM8wH,EAAcH,EAAQxlH,WAAWnL,GAEvC,GAAI6wH,EAAevlH,YAAcwlH,EAAYxlH,WACtC2hH,GAAY4D,EAAe1mH,MAAO2mH,EAAY3mH,OAAQ,CAEzDgmD,GAAU,EACV,OAIHA,IAIIsgE,EAASC,KACVD,EAASC,GAAkB,CACvB7C,WAAY+C,EAAY/C,WACxBv2G,IAAKs5G,EAAYt5G,IACjBnN,MAAO,GACPgB,WAAY,KAGpBslH,EAASC,GAAgBvlH,WAAW1H,KAAKotH,QAvE7CJ,EAASC,GAAkBE,KA4E5BH,GAMXpD,GAAUpuH,UAAUgvH,SAAW,SAAS8C,GACpC,MAAMC,EAAgBtwH,KAAK4vH,cAE3B,IAAIW,GAAW,EA4Df,OA1DAjyH,OAAOiG,KAAK+rH,GAAe9rH,SAAQ2oH,IAC/BoD,GAAW,EACX,MAAMlqH,EAAQiqH,EAAcnD,GAE5BkD,EAAOjvH,EAAE,UAAW,CAAEe,KAAMkE,EAAMuQ,MAElCy5G,EAAOjvH,EAAE,cACL,CAAE4kD,MAAO,6BACL3/C,MAAOA,EAAMuQ,MAKrBtY,OAAOiG,KAAK8B,EAAMoD,OAAOjF,SAAQgsH,IAC7B,MAAMC,EAAYpqH,EAAMoD,MAAM+mH,GACxBtH,EAAYuH,EAAUx8E,MACtBi6E,EAAa7F,GAAAA,oBAA4Ba,GAE/CmH,EAAOjvH,EAAE,SAAU,CAAE4kD,MAAO,oCAC5BqqE,EAAOhyE,MAAM,CACTl8C,KAAMgsH,GAAAA,+BAA8CD,OAAannH,EACjEwC,KAAMknH,EAAUlnH,OAIpB,MAAM4C,EAAOk8G,GAAAA,mBAA2Ba,GAEpC/8G,IACAkkH,EAAOjvH,EAAE,aACTivH,EAAOhyE,MAAM,CAAEl8C,KAAM,SACrBkuH,EAAOhyE,MAAM,CAAEx6C,MAAOsI,IACtBkkH,EAAOnqE,MAGXmqE,EAAOnqE,QAIX7/C,EAAMoE,WAAWjG,SAAQymH,IACjBA,EAAUxhH,MAAMlK,SAEhB8wH,EAAOjvH,EAAE,aAAc,CACnBwJ,UAAWqgH,EAAUrgH,UACrBo7C,MAAO,oCAGXilE,EAAUxhH,MAAMjF,SAAQ+E,IACpB8mH,EAAOjvH,EAAE,SAAU,CAAEmI,KAAAA,IAChB28C,QAETmqE,EAAOnqE,SAIfmqE,EAAOnqE,KACPmqE,EAAOnqE,QAGJqqE,6BCjNX,MAAMxjG,IAASmB,EAAAA,EAAAA,yCAKA,MAAMwiG,GAIjB9xH,cACIoB,KAAK2wH,OAAStiH,KAAAA,MAAYrO,KAAK4wH,mBAAmB1qH,KAAKlG,MAAO,GAC9DA,KAAK6wH,UAAW,EAMpBjqF,QACI5mC,KAAK2wH,OAAO36G,OAMhB46G,mBAAmBz9G,EAAM29G,GACrB,IACI39G,EAAK29G,GACP,MAAOz5G,GACL0V,GAAO1V,MAAO,gBAAeA,MAAAA,OAAhB,EAAgBA,EAAO8M,SACpC2sG,EAAiBz5G,IAqBzBtU,KAAKoQ,EAAM1D,GACHzP,KAAK6wH,SACLphH,GAAYA,EAAS,IAAIhB,MAAM,+BAInCzO,KAAK2wH,OAAO5tH,KAAKoQ,EAAM1D,GAO3BshH,WACI/wH,KAAK6wH,UAAW,kBC/DjB,MAAMG,GAAU,UAQV1zB,GAAS,SAOT2zB,GAAQ,QCdflkG,IAASmB,EAAAA,EAAAA,4CAOA,MAAMgjG,WAAsBxqB,GAcvC9nG,YACQusD,EACAgmE,EACAve,EACAzgD,EACAi/D,EACAnjD,EACAojD,GACJ3zC,QACA19E,KAAKmrD,IAAMA,EACXnrD,KAAKmxH,SAAWA,EAChBnxH,KAAK4yG,UAAYA,EACjB5yG,KAAKmyD,WAAaA,EAClBnyD,KAAKoxH,iBAAmBA,EACxBpxH,KAAKiuE,SAAWA,EAOhBjuE,KAAKqxH,YAAcA,EAMnBrxH,KAAKsxH,SAAU,EAKftxH,KAAKuxH,cAAgB,GAMrBvxH,KAAK23F,KAAO,KAMZ33F,KAAKooB,MAAQ,KAMbpoB,KAAK+3F,IAAM,KAOXy5B,mBACA,OAAOxxH,KAAKqxH,YAAcrxH,KAAKmxH,SAAWnxH,KAAK4yG,UAO/C6e,mBACA,OAAOzxH,KAAKqxH,YAAcrxH,KAAK4yG,UAAY5yG,KAAKmxH,SAapDrrC,WAAW6R,EAAMI,EAAKnuF,GAClB,GAAmB,OAAf5J,KAAKooB,MAAgB,CACrB,MAAM0qF,EACC,kCAAiC9yG,KAAKmrD,oCAC3BnrD,KAAKooB,QAGvB,MADA2E,GAAO1V,MAAMy7F,GACP,IAAIrkG,MAAMqkG,GAEpB9yG,KAAK23F,KAAOA,EACZ33F,KAAK+3F,IAAMA,EACX/3F,KAAKooB,MAAQspG,GACb1xH,KAAK2xH,aAAa/nH,GAStB+nH,aAAa/nH,IAWbgoH,iBAAiBrC,IAQjBz6F,WACI,OAAO90B,KAAKooB,MAUhBypG,WAAWtC,IAOXuC,cAAcvC,IAiBdwC,UAAU33D,EAAS43D,EAASpoH,IAW5BqoH,YAAY5C,EAAQj1D,EAAS43D,IAK7BE,mBACI,OAAOlyH,KAAKqxH,YAAcrxH,KAAKmxH,SAAWnxH,KAAK4yG,WCvMvD,SAIsC,iDCEzBuf,GAAqB,sBAOrBC,GAA0B,0BCIxB,MAAMC,WAAuB3rB,GAOxC4rB,aAAa/oH,GACT,MAAM,IAAIkF,MAAM,mBAcpB8jH,iBAAiBC,EAAOz2C,GACpB,MAAM,IAAIttE,MAAM,oBChCxB,MAAMse,IAASmB,EAAAA,EAAAA,iDAMA,MAAMukG,WAA2BJ,GAI5CzzH,cACI8+E,QAUA19E,KAAK0yH,WAAa,IAAI7sF,IAMtB7lC,KAAK03F,SAAW,KAOpBi7B,YAAYh7B,GACR,MAAMi7B,EAAc5yH,KAAK03F,SAEzB13F,KAAK03F,SAAWC,EACZi7B,IACAA,EAAY3O,uBACR,aAAcjkH,KAAK6yH,mBACvBD,EAAY3O,uBACR,aAAcjkH,KAAK8yH,mBACvBF,EAAY3O,uBACR,YAAajkH,KAAK+yH,oBAEtBp7B,IAEA33F,KAAK6yH,kBAAoB,CAAC71H,EAAM29C,KAC5B36C,KAAKwqF,aAAa5iE,KACdorG,GACAr4E,EAAMw3C,GAAgC,SAAfn1F,EAAK6G,QAEpC8zF,EAAKiD,oBAAoB,aAAc56F,KAAK6yH,mBAE5C7yH,KAAK8yH,kBAAoB,CAAC91H,EAAM29C,KAC5B36C,KAAKwqF,aAAa5iE,KACdorG,GACAr4E,EAAMw3C,GAAgC,SAAfn1F,EAAK6G,QAEpC8zF,EAAKiD,oBAAoB,aAAc56F,KAAK8yH,mBAE5C9yH,KAAK+yH,kBAAoB,CAAC/1H,EAAM29C,KAC5B36C,KAAKwqF,aAAa5iE,KACdorG,GACAr4E,EAAM39C,EAAK6G,QAEnB8zF,EAAKiD,oBAAoB,YAAa56F,KAAK+yH,oBAOnDR,iBAAiBC,EAAOz2C,GACpB,GAAI/7E,KAAK03F,SACL,OAAO13F,KAAK03F,SAASktB,qBAAqB4N,EAAOz2C,GAErDhvD,GAAO1V,MAAM,kDAMjBi7G,aAAa/oH,GACT,OAAOvJ,KAAK0yH,WAAWv4G,IAAI5Q,GAS/B0pH,aAAa1pH,EAAMq2F,GACf,GAAoB,iBAATr2F,EACP,MAAM,IAAI6d,UAAW,QAAO7d,uBAEhCvJ,KAAK0yH,WAAWzpG,IAAI1f,EAAMq2F,IC9ElC,MAAM7yE,IAASmB,EAAAA,EAAAA,8CAOTglG,GAAa,IAkDJ,MAAMC,WAAwBjC,GASjB,yBAACkC,GACrB,MAAMC,EAAgBD,EAAe1oH,KAAK,0BAE1C,GAAI2oH,EAAc9zH,OAAQ,CACtB,MAAMknE,EAAU4sD,EAAc,GAAGpvE,aAAa,WAE9C,GAAgB,SAAZwiB,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,EAIf,OAAO,KASe,2BAAC2sD,GACvB,MAAME,EAAoBF,EAAe1oH,KAAK,2CAE9C,OAAO4oH,EAAkB/zH,OAASgG,OAAO+tH,EAAkB/nG,QAAU,KAqBzE3sB,YACQusD,EACAgmE,EACAve,EACAzgD,EACAi/D,EACAnjD,EACA6Y,EACAuqC,GACJ3zC,MACIvyB,EACAgmE,EACAve,EAAWzgD,EAAYi/D,EAAkBnjD,EAAUojD,GAWvDrxH,KAAKuzH,iBAAmB,KAQxBvzH,KAAKwzH,wBAAqBzsH,EAQ1B/G,KAAKyzH,wBAAqB1sH,EAQ1B/G,KAAK0zH,6BAA+B,KAYpC1zH,KAAK2zH,2BAA6B,KAOlC3zH,KAAK4zH,6BAA0B7sH,EAgB/B/G,KAAK6zH,mBAAoB,EAYzB7zH,KAAK8zH,oBAAqB,EAS1B9zH,KAAK+zH,oBAAqB,EAE1B/zH,KAAKg0H,kBAAmB,EACxBh0H,KAAKi0H,QAAS,EAQdj0H,KAAK8mF,MAAQA,EAOb9mF,KAAKk0H,8BAA2BntH,EAMhC/G,KAAKm0H,eAAiB,IAAI1B,GAO1BzyH,KAAKo0H,kBAAoB,IAAI1D,GAO7B1wH,KAAKq0H,cAAe,EAQpBr0H,KAAKs0H,2BAAwBvtH,EAE7B/G,KAAKu0H,eAAiB,GACtBv0H,KAAKu0H,eAAexxH,KAChBovD,EAAWrpC,iBACPuqF,GAAeC,OAAOC,oBACtBvzG,KAAKw0H,oBAAoBtuH,KAAKlG,QAGtCA,KAAKy0H,iDAA8C1tH,EAUvD2tH,kBACI,OAAO10H,KAAKooB,QAAUspG,GAO1BC,aAAa/nH,GAAS,UAClB5J,KAAK8sH,QAAUjtC,QAAQj2E,EAAQkjH,SAC/B9sH,KAAKg0H,kBAAmB,EACxBh0H,KAAK4J,QAAUA,EAMf5J,KAAK20H,aAAc,EAMnB30H,KAAK40H,WAAY,EACjB50H,KAAK60H,oBAAsBh1C,QAAQj2E,EAAQirH,qBAC3C70H,KAAK80H,oBAAsBj1C,QAAQj2E,EAAQkrH,qBAE3C,MAAMC,EAAY,CAAE7Z,WAAYtxG,EAAQsxG,YAqBxC,GAnBItxG,EAAQorH,cACRD,EAAUE,SA1SI,KA4SlBF,EAAUG,uBAAwB,EAClCH,EAAUI,wBAA0BvrH,EAAQurH,wBAC5CJ,EAAUK,aAAexrH,EAAQwrH,aACjCL,EAAUM,eAAiBzrH,EAAQyrH,eACnCN,EAAUjO,aAAel9G,EAAQk9G,aACjCiO,EAAU7oH,gBAAkBlM,KAAKkM,gBAC3BgV,GAAQmxD,wBACFnxD,GAAQkvD,aACLlvD,GAAQw+D,kBACPx+D,GAAQu+D,mBAGLz/E,KAAK8mF,MAHR,oBAIEl9E,EAAQonF,WAJV,aAIE,EAAaskC,6BAJf,mBAKE1rH,EAAQ0rH,6BALV,WAOZt1H,KAAK8mF,MAAO,CAEZiuC,EAAUQ,kBAAmB,EAC7B,MAAMC,EAAqBx1H,KAAKy1H,2BAA2B7rH,QAEzB,IAAvB4rH,IACPT,EAAUS,mBAAqBA,OAEhC,SAEHT,EAAUQ,iBACJ3rH,EAAQ2rH,kBACF3rH,EAAQ8rH,aAAe9rH,EAAQ+rH,aAC/B/rH,EAAQwrH,cAAgBxrH,EAAQwrH,aAAaQ,iBAAmB7J,GAAclyF,KAI1Fk7F,EAAUG,sBAAwBH,EAAUQ,oBACa,iBAAhD,UAAO3rH,EAAQ09G,+BAAf,aAAO,EAAiCtsG,OACtC,UAAApR,EAAQ09G,+BAAR,eAAiCtsG,KX9WnB,GWkXzBi4E,GAAWe,UAAUjS,uBAAuB,CAAEmzC,sBAAuBH,EAAUG,wBAG/EtrH,EAAQmzF,cACRg4B,EAAUh4B,aAAc,GAG5B/8F,KAAKgkF,eACChkF,KAAK+3F,IAAI89B,qBACH71H,KAAKm0H,eACLn0H,KAAKiuE,SACLjuE,KAAK8mF,MACLiuC,GAEZ/0H,KAAKgkF,eAAe8xC,eAAiBC,IACjC,IAAKA,EAMD,OAIJ,MAAMhkF,EAAYgkF,EAAGhkF,UACf3iB,EAAM3yB,OAAOi/F,YAAYtsE,MAE/B,GAAI2iB,EAAW,CAC6B,OAApC/xC,KAAK2zH,6BACL3zH,KAAK2zH,2BAA6BvkG,GAItC,IAAI6iB,EAAWF,EAAUE,SAEzB,GAAwB,iBAAbA,EAEP,GADAA,EAAWA,EAAS3wB,cACH,QAAb2wB,GAAmC,WAAbA,GACtB,GAAIjyC,KAAK80H,oBACL,YAED,GAAiB,QAAb7iF,GACHjyC,KAAK60H,oBACL,YAIJ70H,KAAK+zH,qBAEb9gC,GAAWiE,cACP5b,GACA,CACI06C,MAAO,YACPnyH,MAAOurB,EAAMpvB,KAAK2zH,2BAClB3iC,IAAKhxF,KAAK8mF,MACVmvC,UAAWj2H,KAAKqxH,cAExBrxH,KAAK+zH,oBAAqB,GAE9B/zH,KAAKk2H,iBAAiBnkF,IAU1B/xC,KAAKgkF,eAAemyC,uBAAyB,KACE,WAAvCn2H,KAAKgkF,eAAe/a,eACpBjpE,KAAK40H,WAAY,EAC6B,WAAvC50H,KAAKgkF,eAAe/a,gBACgB,WAAxCjpE,KAAKgkF,eAAezS,iBACvBvxE,KAAK23F,KAAKnN,aAAa5iE,KAAKiwE,KAAAA,iBAA6B73F,OAUjEA,KAAKgkF,eAAeoyC,2BAA6B,KAC7C,MAAMhnG,EAAM3yB,OAAOi/F,YAAYtsE,MAC/B,IAAIinG,GAAW,EAuBf,OArBKr2H,KAAK8mF,QACN9mF,KAAK23F,KAAKmB,gBACL,aAAY94F,KAAKgkF,eAAe9S,sBAC/B9hD,GAEVrC,GAAOhjB,IAAK,cAAa/J,KAAKgkF,eAAe9S,sBAAsBlxE,KAAK8mF,MAAQ,MAAQ,WAAY13D,GAEpG6jE,GAAWiE,cvDvQU,oBuDyQjB,CACIlG,IAAKhxF,KAAK8mF,MACV1+D,MAAOpoB,KAAKgkF,eAAe9S,mBAC3B,gBAAmBlxE,KAAKgkF,eAAe/a,eACvCqtD,UAAWt2H,KAAK20H,YAChB9wH,MAAOurB,IAGfpvB,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,6BACA73F,KACAA,KAAKgkF,eAAe9S,oBAChBlxE,KAAKgkF,eAAe9S,oBAC5B,IAAK,WACDlxE,KAAK0zH,6BAA+BtkG,EACpC,MACJ,IAAK,YAGD,GAA2C,WAAvCpvB,KAAKgkF,eAAe/a,eAA6B,CACjDotD,GAAW,EACX,MAAME,GAA2Bv2H,KAAK4J,QAAQ4sH,kBACvCx2H,KAAK23F,KAAK4pB,8BAEbvhH,KAAK20H,aAAe4B,IACpBv2H,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,oBAAgC73F,MAW5C,IAAKA,KAAKq0H,eACFr0H,KAAK40H,WACFyB,GACCr2H,KAAKkM,iBAAmBlM,KAAKqxH,aAAenwG,GAAQu+D,mBAAqB,CAEjFwT,GAAWiE,cACP5b,GACA,CACI06C,MAAO,WACPnyH,MAAOurB,EAAMpvB,KAAK0zH,6BAClB1iC,IAAKhxF,KAAK8mF,MACVmvC,UAAWj2H,KAAKqxH,cAMxB,MAAMoF,EACAnqH,KAAK2O,IACHjb,KAAK0zH,6BACL1zH,KAAK2zH,4BAEb3zH,KAAKs0H,sBAAwBllG,EAAMqnG,EAEnCxjC,GAAWiE,cACP5b,GACA,CACI06C,MAAO,gBACPnyH,MAAO7D,KAAKs0H,sBACZtjC,IAAKhxF,KAAK8mF,MACVmvC,UAAWj2H,KAAKqxH,cAGxBrxH,KAAKq0H,cAAe,EACpBr0H,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,uBAAmC73F,MAE3CA,KAAK20H,aAAc,EACnB,MACJ,IAAK,eACD30H,KAAK20H,aAAc,EAIf30H,KAAK40H,WACL50H,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,uBAAmC73F,MAE3C,MACJ,IAAK,SACDA,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,sBAAkC73F,QAU9CA,KAAKgkF,eAAe0yC,wBAA0B,KAC1C,MAAMC,EAAW32H,KAAKgkF,eAAe9S,mBAGhC,WADGlxE,KAAKgkF,eAAezS,iBAMP,iBAAbolD,GACA32H,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,sBAAkC73F,OAUlDA,KAAKgkF,eAAe4yC,oBAAsB,KACtC,MAAMxuG,EAAQpoB,KAAKgkF,eAAe/a,eAC5B4tD,EAAoB72H,KAAKgkF,eAAe6yC,kBAE9C,GAAI72H,KAAKkM,iBAA6B,WAAVkc,GACrByuG,GAAsD,iBAA1BA,EAAkB1wH,IAAkB,CACnE4mB,GAAOw4B,MAAO,GAAEvlD,qCAAqCA,KAAKgkF,4BAA4B57D,KACtF,MAAM0uG,EAAehG,IACjB,MAAMiG,EAAS,IAAI1K,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAE5DnG,KAAKi3H,eACAh1D,MAAK,KACF,MAAMi1D,EAAS,IAAI7K,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAE5DnG,KAAKm3H,mBAAmBJ,EAAQG,GAChCpG,MAEJA,IAGR9wH,KAAKo0H,kBAAkBrxH,KACnB+zH,GACAz/G,IACQA,EACA0V,GAAO1V,MAAO,GAAErX,iCAAkCqX,GAElD0V,GAAOw4B,MAAO,GAAEvlD,+CAOpCA,KAAKm0H,eAAexB,YAAY3yH,KAAK23F,MAQzCy/B,8BACI,GAAIp3H,KAAK8mF,MACL,OAAO9mF,KAAKk0H,yBAWpBgC,iBAAiBnkF,GACb,MAAMslF,EAAW,IAAIhL,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAE9D,GAAI4rC,GAAaA,EAAUA,UAAUxyC,SAAWS,KAAKg0H,iBAAkB,CACnE,MAAMsD,EAAMjP,GAAAA,UAAkBgP,EAAShxH,MAAM0rC,EAAU49B,eAAgB0nD,EAASjxH,SAC1EmxH,EAAQlP,GAAAA,kBAA0Bt2E,EAAUA,WAElD,IAAMulF,IAAOC,EAAQ,CACjB,MAAMC,EAAgB,6BAKtB,OAHA//F,KAAAA,iBAAsC,IAAIhpB,MAAM+oH,SAChDzqG,GAAO1V,MAAMmgH,GAIjBF,EAAItxE,MAAQ,uCAERhmD,KAAKsxH,SAC6B,IAA9BtxH,KAAKuxH,cAAchyH,QACnBgQ,YAAW,KAC2B,IAA9BvP,KAAKuxH,cAAchyH,SAGvBS,KAAKy3H,kBAAkBz3H,KAAKuxH,eAC5BvxH,KAAKuxH,cAAgB,MApnBV,KAunBnBvxH,KAAKuxH,cAAcxuH,KAAKgvC,IAExB/xC,KAAKy3H,kBAAkB,CAAE1lF,SAG7BhlB,GAAOhjB,IAAK,GAAE/J,yCAGdA,KAAKg0H,kBAAmB,EAUhCyD,kBAAkBvwH,GACd,IAAKlH,KAAK00H,gBAAgB,qBAEtB,OAGJ3nG,GAAOhjB,IAAK,GAAE/J,0BAA0BirB,KAAKF,UAAU7jB,MACvD,MAAM6iH,GAAOvrE,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK4yG,UACxBpzG,KAAM,QACL4B,EAAE,SAAU,CAAE4kD,MAAO,oBAClB97C,OAAQ,iBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAEZksE,EAAW,IAAIhL,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAE9D,IAAK,IAAIyQ,EAAM,EAAGA,EAAMygH,EAAShxH,MAAM9G,OAAQqX,IAAO,CAClD,MAAM8gH,EAAQxwH,EAAWZ,QAAO0C,GAAMA,EAAG2mE,gBAAkB/4D,IACrD+/B,EACA0xE,GAAAA,WAAmBgP,EAAShxH,MAAMuQ,GAAKnZ,MAAM,QAAQ,IAE3D,GAAIi6H,EAAMn4H,OAAS,EAAG,CAClB,MAAM+3H,EACAjP,GAAAA,UAAkBgP,EAAShxH,MAAMuQ,GAAMygH,EAASjxH,SAEtDkxH,EAAItxE,MAAQ,uCACZ+jE,EAAK3oH,EAAE,UAAW,CACdssH,QAAS1tH,KAAKwxH,eAAiBxxH,KAAKmxH,SAC9B,YAAc,YACpBhvH,KAAMu1H,EAAM,GAAGhoD,OAASgoD,EAAM,GAAGhoD,OAAS/4B,EAAMtwC,QACjDjF,EAAE,YAAak2H,GAClB,IAAK,IAAIh4H,EAAI,EAAGA,EAAIo4H,EAAMn4H,OAAQD,IAAK,CACnC,MAAMyyC,EACAs2E,GAAAA,kBAA0BqP,EAAMp4H,GAAGyyC,WAIrC/xC,KAAK8sH,UACL/6E,EAAU1qC,GAAK,WAEnB0iH,EAAK3oH,EAAE,YAAa2wC,GAAWmU,KAInC,MAAMyxE,EACAtP,GAAAA,SACEgP,EAAShxH,MAAMuQ,GACf,iBAAkBygH,EAASjxH,SAEnC,GAAIuxH,EAAiB,CACjB,MAAMx+G,EAAMkvG,GAAAA,iBAAyBsP,GAErCx+G,EAAIy+G,UAAW,EACf7N,EAAK3oH,EACD,cACA,CAAE4kD,MAAO,gCACRljD,EAAEqW,EAAIuwG,oBACJvwG,EAAIuwG,YACXK,EAAK1rE,MAAMllC,GACX4wG,EAAK7jE,KAET6jE,EAAK7jE,KACL6jE,EAAK7jE,MAOblmD,KAAKmyD,WAAWtF,OACZk9D,EAAM,KAAM/pH,KAAK63H,sBAAsB9N,GAAOmJ,IAUtD4E,4BACI,MAAMC,GACAv5E,EAAAA,GAAAA,KAAI,CACF6b,GAAIr6D,KAAK4yG,UACTpzG,KAAM,QACT4B,EAAE,SAAU,CAAE4kD,MAAO,oBAClB97C,OAAQ,eACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MACb/pD,EAAE,YAAa,CAAE4kD,MAAO,oCACxBljD,EAAE,UACFojD,KAELlmD,KAAKuzH,kBACEwE,EAAY32H,EACX,iBAAkB,CACd4kD,MAAO,kCACP7hD,GAAInE,KAAKuzH,mBAGrBvzH,KAAKmyD,WAAWugD,QACZqlB,EAAa,CAMTzrE,QAAS,KAEZ6f,MAAMnsE,KAAK63H,sBAAsBE,IAM1CnG,iBAAiB5vE,GACb,GAA2C,WAAvChiD,KAAKgkF,eAAe/a,eAGpB,YAFAl8C,GAAOhF,KAAM,GAAE/nB,uDAKnB,MAAMg4H,EAAgB,GAEtBh2E,EAAKt3C,KAAK,gCACL8E,MAAK,CAAC02D,EAAKn0B,KACR,IAAIllB,EAAOw7F,GAAAA,oBAA4Bt2E,GAEvCllB,EAAOA,EAAK5kB,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,MAAMgwH,EAAe,IAAIpuD,gBAAgB,CACrC8F,cAAe,EAOfD,OAAQ,GACR39B,UAAWllB,IAGfmrG,EAAcj1H,KAAKk1H,MAGtBD,EAAcz4H,QAsBnBwtB,GAAOw4B,MAAO,GAAEvlD,oBAAoBg4H,EAAcz4H,+BAClDS,KAAKo0H,kBAAkBrxH,MAbF+tH,IACjB,IAAK,MAAMoH,KAAgBF,EACvBh4H,KAAKgkF,eAAezW,gBAAgB2qD,GAC/Bj2D,MACG,IAAMl1C,GAAOw4B,MAAO,GAAEvlD,8BACtB4P,GAAOmd,GAAO1V,MAAO,GAAErX,+BAAgC4P,KAGnEkhH,IACA/jG,GAAOw4B,MAAO,GAAEvlD,yCAlBhB+sB,GAAO1V,MAAO,GAAErX,kCAAmCgiD,EAAK,IAAMA,EAAK,GAAGm2E,WA6B9EC,aAAa7I,GAEHvhB,EAAEuhB,GAAU7kH,KACV,gEAGF8E,MAAK,CAAClQ,EAAG+4H,KACX,MAAM9uH,EAAOhE,OAAO8yH,EAAYp0E,aAAa,SAEzCjkD,KAAK8mF,MAEL9mF,KAAKm0H,eAAelB,aAChB1pH,EAAM+0C,GAAAA,QAAAA,mBAA2Bt+C,KAAK4yG,YAE1C5E,EAAEqqB,GACG3tH,KAAK,gDACL8E,MAAK,CAAC8oH,EAAIC,KACP,MAAM/F,EAAQ+F,EAAgBt0E,aAAa,SAn0BnE,IAAuBu0E,EAq0BKhG,GAASA,EAAMjzH,SACX0mB,MAAM1c,IAASA,EAAO,EACtBwjB,GAAOhF,KAAM,GAAE/nB,qBAAqBuJ,wBAA2BipH,KAE/DxyH,KAAKm0H,eAAelB,aAChB1pH,GA10BbivH,EA20B2BhG,EA10BvCl0E,GAAAA,QAAAA,mBAA2Bk6E,IAAoBA,WAu1BtDC,uBACQz4H,KAAKgkF,eACLhkF,KAAKgkF,eAAey0C,uBAEpB1rG,GAAO1V,MAAO,GAAErX,6DAOxB04H,0BACI,OAAO14H,KAAKgkF,eAAe00C,0BAuB/BzG,YAAY0G,EAAav+D,EAAS43D,EAASnlB,GACvC7sG,KAAK44H,oBACDD,GACA,KAII34H,KAAK64H,kBAAkBz+D,EAAS43D,KAEpCA,EACAnlB,GAWRmW,OAAOnW,EAAc,IACjB,IAAK7sG,KAAKqxH,YACN,MAAM,IAAI5iH,MAAM,+CAoBpBse,GAAOw4B,MAAO,GAAEvlD,2BAChBA,KAAKo0H,kBAAkBrxH,MAnBF+tH,IACjB,MAAMgI,EAAY,GAElB,IAAK,MAAMC,KAAclsB,EACrBisB,EAAU/1H,KAAK/C,KAAKgkF,eAAepzD,SAASmoG,EAAY/4H,KAAKqxH,cAGjE/qG,QAAQhU,IAAIwmH,GACP72D,MAAK,IAAMjiE,KAAKgkF,eAAexX,YAAYxsE,KAAKoxH,oBAChDnvD,MAAK+2D,GAAYh5H,KAAKgkF,eAAeza,oBAAoByvD,KACzD/2D,MAAK,KAGFjiE,KAAKi5H,oBAAoBj5H,KAAKgkF,eAAegzC,iBAAiB7wH,QAEjE87D,MAAK,IAAM6uD,MAAoBz5G,GAASy5G,EAAiBz5G,QAM9DA,IACQA,EACA0V,GAAO1V,MAAO,GAAErX,oBAAqBqX,GAErC0V,GAAOw4B,MAAO,GAAEvlD,gCAehCi5H,oBAAoBD,GAChB,IAAI7yG,GAAOq4B,EAAAA,GAAAA,KAAI,CACX6b,GAAIr6D,KAAK4yG,UACTpzG,KAAM,QACP4B,EAAE,SAAU,CACX4kD,MAAO,oBACP97C,OAAQ,mBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAGd,IAAIkhE,GAAI2M,GAAUzL,SACdpnG,EACAnmB,KAAKqxH,YAAc,YAAc,aACrClrG,EAAOA,EAAKs/B,OACZ14B,GAAOw4B,MAAO,GAAEvlD,0BAA2BmmB,GAC3CnmB,KAAKmyD,WAAWtF,OAAO1mC,GACnB,KACI4G,GAAOtf,KAAM,GAAEzN,6CAEnBqX,IACI0V,GAAO1V,MAAO,GAAErX,gCAAiCqX,KAErD67G,IAORgG,UAAUC,GACN,IAAKn5H,KAAKqxH,YACN,MAAM,IAAI5iH,MAAM,oDAEpBzO,KAAK44H,oBACDO,GACA,KAEI,GADApsG,GAAOtf,KAAM,GAAEzN,8BACXA,KAAKkM,iBAAmBgV,GAAQu+D,kBAAmB,CAGnD,MAAM25C,EAAYp5H,KAAKgkF,eAAe6yC,kBAAkB1wH,IAClD0wH,EAAoB,IAAI5oH,sBAAsB,CAChDzO,KAAM,QACN2G,IAAKizH,IAGTp5H,KAAKq5H,sBAAsBxC,OAGnCx/G,IACI0V,GAAO1V,MAAO,GAAErX,0BAA2BqX,MAmBvDuhH,oBAAoBU,EAAqBl/D,EAAS43D,EAASnlB,EAAc,IA+DrE9/E,GAAOw4B,MAAO,GAAEvlD,wCAChBA,KAAKo0H,kBAAkBrxH,MA/DF+tH,IACjB,MAAMgI,EAAY,GAElB,IAAK,MAAMhpG,KAAS+8E,EAChBisB,EAAU/1H,KAAK/C,KAAKgkF,eAAepzD,SAASd,EAAO9vB,KAAKqxH,cAG5D,MAAMkI,EACAv5H,KAAKw5H,yBAAyBF,GAC9BG,EACAz5H,KAAKgkF,eAAegzC,iBAAiB7wH,IAMrCuzH,EAHA1rB,EAAEsrB,GACC5uH,KAAK,4DAEwBu4C,KAAK,MAEvCy2E,IAAoB15H,KAAKuzH,mBACzBvzH,KAAKuzH,iBAAmBmG,GAG5BpzG,QAAQhU,IAAIwmH,GACP72D,MAAK,IAAMjiE,KAAKi3H,aAAasC,EAAa7qE,OAC1CuT,MAAK,KA2BF,GA1BIjiE,KAAKooB,QAAUspG,KACf1xH,KAAKooB,MAAQspG,IAeT1xH,KAAK8mF,OACA9mF,KAAK6zH,oBAAqB7zH,KAAK4zH,yBACpC5zH,KAAK25H,qBAQTF,EAAa,CACb,MAAMG,EACA,IAAIvN,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAEnDnG,KAAKm3H,mBACD,IAAI9K,GAAIoN,GAAcG,OAGjC33D,MAAK,IAAM6uD,MAAoBz5G,GAASy5G,EAAiBz5G,QAM9DA,IACQA,GACA0V,GAAO1V,MAAO,GAAErX,yCAAyCqX,KACzD26G,EAAQ36G,KAER0V,GAAOw4B,MAAO,GAAEvlD,sCAChBo6D,QAYhBy/D,eAAeC,EAAY,KAAMC,EAAW,MACxC,MAAMC,EAAUh6H,KAAKgkF,eAAe00C,0BAEpC,GAAI14H,KAAK00H,mBAAqBoF,IAAcE,EAAS,CACjDjtG,GAAOtf,KAAM,GAAEzN,mCAAmCg6H,QAAcF,KAChE95H,KAAKgkF,eAAe61C,eAAeC,EAAWC,GAG9C,MAAMjD,EAAehG,IACjB9wH,KAAKi3H,eAAeh1D,MAChB,KACIl1C,GAAOw4B,MAAO,GAAEvlD,oCAET8wH,OACRz5G,IACC0V,GAAO1V,MAAO,GAAErX,oCAAoCqX,KAE7Cy5G,EAAiBz5G,OAIpC0V,GAAOw4B,MAAO,GAAEvlD,mCAGhBA,KAAKo0H,kBAAkBrxH,KAAK+zH,IAcpCmD,iBAAiBC,EAAiB9/D,EAAS43D,GACvC,GAAIhyH,KAAK4J,QAAQuwH,mBAAoB,CACjC,MAAMh0H,EAAM,IAAIkmH,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAKzD,OAHAnG,KAAKo6H,oBAAoBj0H,EAAKi0D,EAAS43D,QACvChyH,KAAK23F,KAAKnN,aAAa5iE,KAAKiwE,KAAAA,qBAAiC73F,MAIjEA,KAAK23F,KAAKnN,aAAa5iE,KAAKiwE,KAAAA,eAA2B73F,MAMvD,MAAMq6H,EAAgBH,EAAgBI,QAEtCJ,EACKxvH,KAAK,yBACLu4C,KAAK,UAAW,YAQrBi3E,EACKxvH,KAAK,+BACLo2G,SACLoZ,EACKxvH,KAAK,mCACLo2G,SAML,MAAMyZ,EAAiBL,EAAgBxvH,KAAK,kCAE5C6vH,EAAet3E,KAAK,OAAQ,SAC5Bs3E,EAAehvG,KAAK,+DAGpBvrB,KAAK44H,oBACDsB,GACA,KAEIl6H,KAAK44H,oBACDyB,GACA,KACI,MAAMhD,EACA,IAAIhL,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAEnDnG,KAAKo6H,oBAAoB/C,EAAUj9D,EAAS43D,GAE5ChyH,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,oBACA73F,KACAq6H,KAERrI,KAERA,GAYR6G,kBAAkBz+D,EAAS43D,GAGvB,MAAMqF,EAAW,IAAIhL,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KACxDq0H,GAASh8E,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK4yG,UAC1BpzG,KAAM,QACL4B,EAAE,SAAU,CAAE4kD,MAAO,oBAClB97C,OAAQ,iBACR+rH,UAAWj2H,KAAKwxH,aAChBiJ,UAAWz6H,KAAKyxH,aAChBtmE,IAAKnrD,KAAKmrD,MAEdnrD,KAAK80H,sBACLuC,EAAStK,qBAAsB,GAE/B/sH,KAAK60H,sBACLwC,EAASrK,qBAAsB,GAE/BhtH,KAAK8sH,UACLuK,EAASvK,SAAU,GAEvBuK,EAAS9J,SACLiN,EACAx6H,KAAKwxH,eAAiBxxH,KAAKmxH,SAAW,YAAc,aAExDpkG,GAAOtf,KAAM,GAAEzN,+BACf+sB,GAAOw4B,MAAMi1E,EAAO/0E,QACpBzlD,KAAKmyD,WAAWtF,OAAO2tE,EACnBpgE,EACAp6D,KAAK63H,sBAAsB2C,GAAQnjH,IAC/B26G,EAAQ36G,GAIRrX,KAAK23F,KAAKnN,aAAa5iE,KACnBiwE,KAAAA,uBAAmC73F,SAE3CkzH,IA4BRyG,oBACI,MAAMe,EAAiB16H,KAAK4zH,wBACtBntD,EAAUzmE,KAAK6zH,kBAAoB,OAAS,OAElD,IAAI8G,GACEn8E,EAAAA,GAAAA,KAAI,CACF6b,GAAIr6D,KAAK4yG,UACTpzG,KAAM,QAEL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ,iBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAEb/pD,EAAE,UAAW,CACVe,KAAM,QACNskE,QAAAA,SAGkB,IAAnBi0D,IACPC,EAAgBA,EACXv5H,EAAE,mBAAoB,CAAE4kD,MAAO,mCAC/BljD,EAAE43H,IAGX3tG,GAAOtf,KAAM,GAAEzN,+CAA+CymE,wBAA8Bi0D,KAC5F3tG,GAAOw4B,MAAMo1E,EAAcl1E,QAE3BzlD,KAAKmyD,WAAWtF,OACZ8tE,EACA,KACA36H,KAAK63H,sBAAsB8C,GAC3BzH,IASR0H,2BAA2BF,GACvB3tG,GAAOtf,KAAM,GAAEzN,uDAAuD06H,KAEtE16H,KAAK4zH,wBAA0B8G,EAE3B16H,KAAK8mF,MAGD9mF,KAAKooB,QAAUspG,IACf1xH,KAAK25H,oBAGT35H,KAAK+3F,IAAI6iC,2BAA2BF,GAc5CN,oBAAoB/C,EAAUj9D,EAAS43D,GACnC,MAAM6I,GAAkBr8E,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK4yG,UACnCpzG,KAAM,QACL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ,mBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAGlBksE,EAAShxH,MAAM7B,SAAQ,CAACs2H,EAAY50D,KAChC,MAAMvvB,EAAQ0xE,GAAAA,WAAmByS,EAAWr9H,MAAM,QAAQ,IAE1Do9H,EAAgBz5H,EAAE,UACd,CACIssH,QACI1tH,KAAKwxH,eAAiBxxH,KAAKmxH,SACrB,YACA,YACVhvH,KAAMw0C,EAAMtwC,QAGpBgxH,EAAS3I,kBAAkBxoD,EAAK20D,GAChCA,EAAgB30E,QAGpBn5B,GAAOtf,KAAM,GAAEzN,iCACf+sB,GAAOw4B,MAAMs1E,EAAgBp1E,QAE7BzlD,KAAKmyD,WAAWtF,OAAOguE,EACnBzgE,EACAp6D,KAAK63H,sBAAsBgD,EAAiB7I,GAC5CkB,IAcR6H,oBAAoB3gE,EAAS43D,GAGzB,MAAMgJ,GAAkBx8E,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK4yG,UACnCpzG,KAAM,QACL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ,mBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAGlBp+B,GAAOtf,KAAM,GAAEzN,mCACf+sB,GAAOw4B,MAAMy1E,EAAgBv1E,QAE7BzlD,KAAKmyD,WAAWtF,OAAOmuE,EACnB5gE,EACAp6D,KAAK63H,sBAAsBmD,EAAiBhJ,GAC5CkB,IASR+H,uBACI,OAAIj7H,KAAK00H,kBACE10H,KAAKgkF,eAAek3C,gBAGxB50G,QAAQC,UASnB40G,yBAAyBT,GACrB,GAAI16H,KAAK00H,kBAAmB,CAKxB,GAJA3nG,GAAOtf,KAAM,GAAEzN,kCAAkC06H,MAI5C16H,KAAK8mF,OAAS5lE,GAAQ+9D,sBAA6C,IAAnBy7C,EAAgC,CACjF,MAAMU,EAAcV,EAAiB,EAErC,OAAO16H,KAAKq7H,wBAAuB,EAAMD,GAG7C,OAAOp7H,KAAKgkF,eAAem3C,yBAAyBT,GAGxD,OAAOp0G,QAAQC,UASnB+0G,sCACI,OAAIt7H,KAAK00H,kBACE10H,KAAKgkF,eAAes3C,sCAGxBh1G,QAAQC,UAMnBwrG,UAAU33D,EAAS43D,EAASpoH,GACxB,GAAI5J,KAAKooB,QAAUspG,GAAnB,CAIA,IAAK9nH,GAAWi2E,QAAQj2E,EAAQ2xH,sBAAuB,CACnD,MAAMC,GACAh9E,EAAAA,GAAAA,KAAI,CACF6b,GAAIr6D,KAAK4yG,UACTpzG,KAAM,QAEL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ,oBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAEb/pD,EAAE,UACFA,EAAGwI,GAAWA,EAAQ4tB,QAAW,WACjC0uB,KAELt8C,GAAWA,EAAQ6xH,kBACnBD,EACKp6H,EAAE,QACF0B,EAAE8G,EAAQ6xH,mBACVv1E,KACAA,KAELs1E,EAAiBt1E,KAGrBlmD,KAAKuzH,kBACEiI,EAAiBp6H,EAChB,iBAAkB,CACd4kD,MAAO,kCACP7hD,GAAInE,KAAKuzH,iBACTmI,QAAS9xH,IAAsC,IAA3BA,EAAQ+xH,iBAC7Bz1E,KAEXn5B,GAAOtf,KAAM,GAAEzN,kCACf+sB,GAAOw4B,MAAMi2E,EAAiB/1E,QAE9BzlD,KAAKmyD,WAAWtF,OACZ2uE,EACAphE,EACAp6D,KAAK63H,sBAAsB2D,EAAkBxJ,GAC7CkB,SAEJnmG,GAAOtf,KAAM,GAAEzN,0CAInBA,KAAKmyD,WAAWk9D,OAAO0C,UAAU/xH,KAAKmrD,MAQ1CywE,aAAaC,EAAiBC,GAI1B/uG,GAAOtf,KAAM,GAAEzN,0BAA2B67H,EAAiBC,GAE3D97H,KAAKu0H,eAAe/vH,SAAQmP,GAAkBA,MAC9C3T,KAAKu0H,eAAiB,GAElBv0H,KAAKy0H,6CACLz0H,KAAKy0H,8CAGTz0H,KAAKg5D,QAQTw7D,oBAAoBx+F,GACZA,IAAWq9E,GAAelzD,OAAOK,WAAaxgD,KAAKwzH,qBACnDzmG,GAAOtf,KAAM,GAAEzN,yCACfA,KAAKm3H,mBACDn3H,KAAKwzH,mBACLxzH,KAAKyzH,qBAcjBsI,4BAA4BC,EAAeC,GACvC,MAAMC,EAAc,GACd5/H,EAAO0D,KAiEb,OA/DAguG,EAAEguB,GAAexsH,MAAK,CAAC2sH,EAAIz2H,KACvB,MAAMvD,EAAO6rG,EAAEtoG,GAASu9C,KAAK,QAC7B,IAAIhP,EAAQ,GAEZ+5D,EAAEtoG,GACGgF,KAAK,uDACL8E,MAAK,WAEF,MAAM5E,EAAY5K,KAAKikD,aAAa,aAC9Bx6C,EACAukG,EAAEhuG,MACC0K,KAAK,WACLzD,KAAI,WAED,OAAOjH,KAAKikD,aAAa,WAE5B9pC,MAEL1Q,EAAMlK,SACN00C,GAAU,gBAAerpC,KAAanB,EAAMR,KAAK,eAMvD+kG,EAAEtoG,GAASgF,KACT,mDAGJ8E,MAAK,WACL,MAAMjG,EAAOykG,EAAEhuG,MAAMijD,KAAK,QAEtBg5E,EAAiB5O,aAAa9jH,KAG5BjN,EAAK4P,kBAAmB5P,EAAKwqF,QACxB/5D,GAAOhF,KAAM,GAAEzrB,2CAA8CiN,KAMxEykG,EAAEhuG,MAAM0K,KAAK,cAAc8E,MAAK,WAC5BykC,GAAU,UAAS1qC,KAAQykG,EAAEhuG,MAAMijD,KAAK,UACpC+qD,EAAEhuG,MAAMijD,KAAK,UAAY+qD,EAAEhuG,MAAMijD,KAAK,SAAS1jD,SAC/C00C,GAAU,IAAG+5D,EAAEhuG,MAAMijD,KAAK,YAE9BhP,GAAS,aAKjBgoF,EAAiB51H,MAAM7B,SAAQ,CAAC6B,EAAO+1H,KAC9B/T,GAAAA,SAAiBhiH,EAAQ,SAAQlE,OAGjC+5H,EAAYE,KACbF,EAAYE,GAAM,IAEtBF,EAAYE,IAAOnoF,SAIpBioF,EAOXG,gBAAgBr6E,GACZhiD,KAAKs8H,0BAAyB,EAAgBt6E,GAOlDu6E,mBAAmBv6E,GACfhiD,KAAKs8H,0BAAyB,EAAoBt6E,GAUtDw6E,2BAA2Br4H,GACvB,IAAIs4H,EAAe,GAEnB,MAAM3F,EAAe4F,IACjB,MAAMC,EAAiB38H,KAAKgkF,eAAe44C,iCAAiCz4H,GAE5E,GAAIw4H,EAAep9H,OAAQ,CACvB,MAAMk6H,EAAc,IAAIpN,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAC3DozH,EAAev5H,KAAK68H,2BAA2BF,GAErDF,EAAez8H,KAAKgkF,eAAe84C,mBAAmB34H,GACtDnE,KAAKi3H,aAAasC,EAAa7qE,KAC1BuT,MAAK,KACF,MAAM86D,EAAc,IAAI1Q,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAEjEnG,KAAKm3H,mBAAmBsC,EAAasD,GACrCL,OAEHvwD,OAAMv8D,GAAO8sH,EAAe9sH,UAEjC8sH,KAIR,OAAO,IAAIp2G,SAAQ,CAACC,EAAS1U,KACzBkb,GAAOw4B,MAAO,GAAEvlD,+DAA+DmE,KAE/EnE,KAAKo0H,kBAAkBrxH,KACnB+zH,GACAz/G,IACQA,GACA0V,GAAO1V,MAAO,GAAErX,yCAA0CqX,GAC1DxF,EAAOwF,KAEP0V,GAAOtf,KAAM,GAAEzN,yCACfumB,EAAQk2G,UAc5BH,yBAAyBU,EAAOh7E,GAC5B,MAAMi7E,EAAYD,EAAQ,kBAAoB,qBAE1CA,GACAh9H,KAAKo4H,aAAap2E,GAoDtBj1B,GAAOw4B,MAAO,GAAEvlD,eAAei9H,UAG/Bj9H,KAAKo0H,kBAAkBrxH,MApDF+tH,IACjB,IAAK9wH,KAAKgkF,eAAegzC,mBACjBh3H,KAAKgkF,eAAegzC,iBAAiB7wH,IAAK,CAC9C,MAAM+2H,EAAU,GAAED,qCAKlB,OAHAlwG,GAAO1V,MAAM6lH,QACbpM,EAAiBoM,GAKrBnwG,GAAOhjB,IAAK,GAAE/J,mBAAmBi9H,KAEjC,MAAMxD,EAAc,IAAIpN,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAC3DA,EAAM,IAAIkmH,GAAIrsH,KAAKgkF,eAAe6yC,kBAAkB1wH,KACpDg3H,EACAH,EACIh9H,KAAK+7H,4BAA4B/5E,EAAM77C,GACvCnG,KAAKo9H,+BAA+Bp7E,EAAM77C,GAC9CozH,EACAyD,EACIh9H,KAAKq9H,wBAAwBF,GAC7Bn9H,KAAK68H,2BAA2BM,GAOpCtG,EAAoB,IAAI5oH,sBAAsB,CAChDzO,KAAM,QACN2G,IAAKozH,EAAa7qE,OAENsuE,GAASh9H,KAAKkM,iBAAmBlM,KAAK8mF,OAAS5lE,GAAQu+D,kBACjEz/E,KAAKq5H,sBAAsBxC,GAC3B72H,KAAKi3H,aAAasC,EAAa7qE,MAE7BuT,MAAK,KACT,MAAM23D,EAAc,IAAIvN,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAEjE4mB,GAAOhjB,IAAK,GAAE/J,QAAQi9H,UACtBj9H,KAAKm3H,mBAAmBsC,EAAaG,GACrC9I,OACDz5G,IACC0V,GAAO1V,MAAO,GAAErX,QAAQi9H,YAAqB5lH,GAC7Cy5G,EAAiBz5G,SAe7BmiH,yBAAyBrhC,GACrB,MAAMihC,EAAY,IAAI/M,GAAI,IAe1B,OAbIrsH,KAAK80H,sBACLsE,EAAUrM,qBAAsB,GAEhC/sH,KAAK60H,sBACLuE,EAAUpM,qBAAsB,GAEhChtH,KAAK8sH,UACLsM,EAAUtM,SAAU,GAGxBsM,EAAUhK,WAAWj3B,GACrBn4F,KAAKo4H,aAAapqB,EAAE7V,GAASztF,KAAK,aAE3B0uH,EAUXyD,2BAA2BF,GACvB,MAAMvD,EAAYp5H,KAAKkM,gBACjB,IAAImgH,GAAIrsH,KAAKgkF,eAAeA,eAAe6yC,kBAAkB1wH,KAC7D,IAAIkmH,GAAIrsH,KAAKgkF,eAAe6yC,kBAAkB1wH,KAmDpD,OAjDAw2H,EAAen4H,SAAQ,CAACyvC,EAAOiyB,MAE3BjyB,EAAQA,EAAMx2C,MAAM,SACdka,MACF3X,KAAKkM,gBACL+nC,EAAMzvC,SAAQqoB,IACV,MAAMjW,EAAMwiH,EAAU/yH,MAAMi3H,WAAU10H,GAASA,EAAM6sB,SAAS5I,KAE9D,GAAIjW,GAAO,EAeP,KANK5W,KAAKkM,iBAAoBlM,KAAKkM,kBAAoBlM,KAAK8mF,SACxDsyC,EAAU/yH,MAAMuQ,GAAOwiH,EAAU/yH,MAAMuQ,GAAK3O,QAAS,GAAE4kB,QAAY,KAKnE7sB,KAAK8mF,MAAO,OACZ,MAAM/K,EAAS,UAAGssC,GAAAA,WAAmB+Q,EAAU/yH,MAAMuQ,GAAKnZ,MAAM,QAAQ,WAAzD,aAAG,EAA2D4I,MACvEk3H,EAAmBv9H,KAAKgkF,eAAew5C,yBAAyBzhD,GAAW,GAEjF,CAAEowC,KAAAA,SAAyBA,KAAAA,UAA0B3nH,SAAQnB,IACzD+1H,EAAU/yH,MAAMuQ,GAAOwiH,EAAU/yH,MAAMuQ,GAClC3O,QAAS,KAAI5E,IAAc,KAAIk6H,aAMxCnE,EAAU/yH,MAAMuQ,GAAOwiH,EAAU/yH,MAAMuQ,GAClC3O,QAAS,KAAIkkH,KAAAA,WAA4B,KAAIA,KAAAA,eAK9Dl4E,EAAMzvC,SAAQqoB,IACVusG,EAAU/yH,MAAM6/D,GACVkzD,EAAU/yH,MAAM6/D,GAAKj+D,QAAS,GAAE4kB,QAAY,UAI9DusG,EAAU1qE,IAAM0qE,EAAUhzH,QAAUgzH,EAAU/yH,MAAM4C,KAAK,IAElDmwH,EAUXiE,wBAAwBnB,GACpB,MAAM9C,EAAY,IAAI/M,GAAIrsH,KAAKgkF,eAAe6yC,kBAAkB1wH,KAmBhE,OAjBA+1H,EAAY13H,SAAQ,CAACyvC,EAAOiyB,KAKxB,GAJAkzD,EAAU/yH,MAAM6/D,IAAQjyB,EAIpBj0C,KAAK8mF,OAAS9mF,KAAKkM,gBAAiB,OACpC,MAAM6vE,EAAS,UAAGssC,GAAAA,WAAmB+Q,EAAU/yH,MAAM6/D,GAAKzoE,MAAM,QAAQ,WAAzD,aAAG,EAA2D4I,MACvEk3H,EAAmBv9H,KAAKgkF,eAAew5C,yBAAyBzhD,GAAW,GAEjF,CAAEowC,KAAAA,SAAyBA,KAAAA,UAA0B3nH,SAAQnB,IACzD+1H,EAAU/yH,MAAM6/D,GAAOkzD,EAAU/yH,MAAM6/D,GAClCj+D,QAAS,KAAI5E,IAAc,KAAIk6H,YAIhDnE,EAAU1qE,IAAM0qE,EAAUhzH,QAAUgzH,EAAU/yH,MAAM4C,KAAK,IAElDmwH,EAYXnC,aAAawG,GACT,GAA2C,WAAvCz9H,KAAKgkF,eAAe/a,eAA6B,CACjD,MAAM5xD,EAAQ,IAAI5I,MAAM,4CAIxB,OAFAzO,KAAK23F,KAAKnN,aAAa5iE,KAAKiwE,KAAAA,qBAAiCxgF,EAAOrX,MAE7DsmB,QAAQzU,OAAOwF,GAG1B,MAAM+hH,EACAqE,GAAqBz9H,KAAKgkF,eAAe6yC,kBAAkB1wH,IAEjE,IAAKizH,EAAW,CACZ,MAAM/hH,EAAQ,IAAI5I,MAAO,kEAAiEzO,KAAKooB,SAI/F,OAFApoB,KAAK23F,KAAKnN,aAAa5iE,KAAKiwE,KAAAA,qBAAiCxgF,EAAOrX,MAE7DsmB,QAAQzU,OAAOwF,GAG1B,MAAMw/G,EAAoB,IAAI5oH,sBAAsB,CAChDzO,KAAMQ,KAAKqxH,YAAc,SAAW,QACpClrH,IAAKizH,IAGT,OAAIp5H,KAAKqxH,YACErxH,KAAK09H,sBAAsB7G,GAG/B72H,KAAKq5H,sBAAsBxC,GAStCwC,sBAAsBxC,GAGlB,OAFA9pG,GAAOw4B,MAAO,GAAEvlD,gDAETA,KAAKgkF,eAAelf,qBAAqB+xD,GAC3C50D,MAAK,KACFl1C,GAAOw4B,MAAO,GAAEvlD,qCAETA,KAAKgkF,eAAepX,aAAa5sE,KAAKoxH,kBACxCnvD,MAAKzuC,IACFzG,GAAOw4B,MAAO,GAAEvlD,+CAETA,KAAKgkF,eAAeza,oBAAoB/1C,SAWnEkqG,sBAAsB7G,GAGlB,OAFA9pG,GAAOw4B,MAAO,GAAEvlD,oCAETA,KAAKgkF,eAAexX,YAAYxsE,KAAKoxH,kBACvCnvD,MAAK07D,IACF5wG,GAAOw4B,MAAO,GAAEvlD,+CAETA,KAAKgkF,eAAeza,oBAAoBo0D,GAC1C17D,MAAK,KACFl1C,GAAOw4B,MAAO,GAAEvlD,gDAGTA,KAAKgkF,eAAelf,qBAAqB+xD,SAiBpE+G,aAAaC,EAAUC,GACnB,MAAMhH,EAAehG,IACjB/jG,GAAOw4B,MAAO,GAAEvlD,gDAAgD69H,iBAAwBC,KAExF,MAAMrE,EAAcz5H,KAAKgkF,eAAegzC,iBAAiB7wH,IAEpDnG,KAAKkM,kBAKFlM,KAAKgkF,eAAep6E,QAAQsrH,uBACzB2I,GAAYC,GAAYA,EAASrsG,gBAMpCzxB,KAAKgkF,eAAe+5C,qBAInBF,GAAYC,GAAYA,EAASrsG,eAMlCzxB,KAAKgkF,eAAe+5C,oBAGbF,GAAYA,EAASpsG,iBAAmBqsG,IAK/C99H,KAAKgkF,eAAe+5C,oBACpB/9H,KAAKgkF,eAAey0C,yBAI5Bz4H,KAAKgkF,eAAe45C,aAAaC,EAAUC,GACtC77D,MAAK+7D,IACF,IAAItwD,EAAUpnD,QAAQC,UAetB,OAbAwG,GAAOw4B,MAAO,GAAEvlD,uDACZg+H,2BAA2Ch+H,KAAKooB,SAEhD41G,IACIH,GAAYC,IACb99H,KAAKooB,QAAUspG,KAClBhkD,EAAU1tE,KAAKi3H,eAAeh1D,MAAK,KAC/B,MAAM86D,EAAc,IAAI1Q,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KAEjEnG,KAAKm3H,mBAAmB,IAAI9K,GAAIoN,GAAcsD,OAI/CrvD,EAAQzL,MAAK,KAChB,GAAI67D,GAAYA,EAASrsG,eAKrB,OAJA1E,GAAOw4B,MAAO,GAAEvlD,sDAITA,KAAKgkF,eAAes3C,sCACtBr5D,MAAK,IAAMjiE,KAAKgkF,eAAem3C,6BAC/Bl5D,MAAK,IAAMjiE,KAAKgkF,eAAek3C,wBAI/Cj5D,MAAK,IAAM6uD,MAAoBz5G,GAASy5G,EAAiBz5G,MAGlE,OAAO,IAAIiP,SAAQ,CAACC,EAAS1U,KACzBkb,GAAOw4B,MAAO,GAAEvlD,8CAA8C69H,kBAAyBC,KAEvF99H,KAAKo0H,kBAAkBrxH,KACnB+zH,GACAz/G,IACQA,GACA0V,GAAO1V,MAAO,GAAErX,4BAA6BqX,GAC7CxF,EAAOwF,KAEP0V,GAAOtf,KAAM,GAAEzN,6BACfumB,WAgBpB62G,+BAA+Ba,EAAkBhC,GAC7C,MAAMU,EAAiB,GA2DvB,OAzDA3uB,EAAEiwB,GAAkBzuH,MAAK,CAAC2sH,EAAIz2H,KAC1B,MAAMvD,EAAO6rG,EAAEtoG,GAASu9C,KAAK,QAC7B,IAAIhP,EAAQ,GAEZ+5D,EAAEtoG,GACGgF,KAAK,uDACL8E,MAAK,WAEF,MAAM5E,EAAY5K,KAAKikD,aAAa,aAC9Bx6C,EACAukG,EAAEhuG,MACC0K,KAAK,WACLzD,KAAI,WACD,OAAOjH,KAAKikD,aAAa,WAE5B9pC,MAEL1Q,EAAMlK,SACN00C,GACQ,gBAAerpC,KACfnB,EAAMR,KAAK,eAK/B,MAAMQ,EAAQ,GAIRukG,EAAEtoG,GAASgF,KACT,mDAEJ8E,MAAK,WAEL,MAAMjG,EAAOykG,EAAEhuG,MAAMijD,KAAK,QAE1Bx5C,EAAM1G,KAAKwG,MAEf0yH,EAAiB51H,MAAM7B,SAAQ,CAAC6B,EAAO+1H,KAC9B/T,GAAAA,SAAiBhiH,EAAQ,SAAQlE,OAGjCw6H,EAAeP,KAChBO,EAAeP,GAAM,IAEzB3yH,EAAMjF,SAAQ+E,IACV,MAAM2/G,EACAb,GAAAA,UAAkBhiH,EAAQ,UAASkD,KAErC2/G,EAAU3pH,SACVo9H,EAAeP,IAAQ,GAAElT,EAAUjgH,KAAK,kBAGhD0zH,EAAeP,IAAOnoF,SAIvB0oF,EAeXuB,qBAAqBC,EAAeC,GAChC,MAAMC,EACA,IAAIhS,GAAIrsH,KAAKgkF,eAAegzC,iBAAiB7wH,KACnD,IAAIm4H,EAAU,IAAI3R,GAAUyR,EAAQC,GACpC,MAAME,EAAaD,EAAQ1O,cAE3B,GAAItxH,OAAOiG,KAAKg6H,GAAYh/H,OAGxB,OAFAwtB,GAAO1V,MAAO,GAAErX,kCAAkCm+H,IAAiBI,IAE5D,EAGXD,EAAU,IAAI3R,GAAU0R,EAAiBD,GACzC,MAAMI,EAAeF,EAAQ1O,cAE7B,OAAItxH,OAAOiG,KAAKi6H,GAAcj/H,SAC1BwtB,GAAO1V,MAAO,GAAErX,qCAAqCm+H,IAAiBK,IAE/D,GAcfC,iBAAiB3uG,GACb,OAAO9vB,KAAK0+H,6BACR,EAA2B5uG,GAC1BmyC,MAAK,KAGF,GAAInyC,EAAM2B,gBAAkBvQ,GAAQs+D,8BAChC,OAAOx/E,KAAKi7H,uBACPh5D,MAAK,IAAMjiE,KAAKs7H,wCAChBr5D,MAAK,IAAMjiE,KAAKm7H,gCAarCwD,kBAAkB7uG,GACd,OAAO9vB,KAAK0+H,6BACR,EAA2B5uG,GAUnC4uG,4BAA4BE,EAAQ9uG,GAChC,IAAKA,EACD,OAAOxJ,QAAQzU,OAAO,kCAE1B,MAAMssH,EAAgBS,EAAS,kBAAoB,iBAC7C9H,EAAehG,IACjB,MAAMpqC,EAAM1mF,KAAKgkF,eAEjB,IAAK0C,EAKD,YAJAoqC,EACK,iBAAgBqN,yCAKzB,MAAMU,EAAcn4C,EAAIswC,iBAAiB7wH,KAEnCy4H,EACIl4C,EAAIo4C,gBAAgBhvG,GACpB42D,EAAIq4C,eAAejvG,IAGxBmyC,MAAK+7D,IACEA,GAAqBa,GAAen4C,EAAImwC,kBAAkB1wH,IAC1DnG,KAAKi3H,eACAh1D,MAAK,KAIFjiE,KAAKk+H,qBACDC,EAAe,IAAI9R,GAAIwS,IAC3B/N,OAGRA,MAGRA,IAKR,OAFA/jG,GAAOw4B,MAAO,GAAEvlD,eAAem+H,UAExB,IAAI73G,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKo0H,kBAAkBrxH,KACnB+zH,GACAz/G,IACQA,GACA0V,GAAO1V,MAAO,GAAErX,QAAQm+H,YACxBtsH,EAAOwF,KAEP0V,GAAOw4B,MAAO,GAAEvlD,QAAQm+H,UACxB53G,WAgBpB80G,uBAAuB2D,EAAa5D,GAChC,IAAKp7H,KAAKgkF,eACN,OAAO19D,QAAQzU,OACX,uEAIR,MAAMotH,EAAcD,EAAc,eAAiB,iBAC7CE,EAAc9D,EAAc,eAAiB,iBAEnDruG,GAAOtf,KAAM,GAAEzN,oBAAoBk/H,MAAgBD,UAEnD,MAAMnI,EAAehG,IACjB,MAAMqO,EAAkBn/H,KAAKooB,QAAUspG,GAMjC0N,EACAp/H,KAAKgkF,eAAeq7C,uBAAuBL,GAE7Ch/H,KAAK6zH,oBAAsBuH,IAC3Bp7H,KAAK6zH,kBAAoBuH,EAUrBp7H,KAAK8mF,OAASq4C,GACdn/H,KAAK25H,qBAIb,MAAM2F,EACAt/H,KAAKgkF,eAAeu7C,uBAClBv/H,KAAK6zH,mBAAqB7zH,KAAK8zH,oBAInCqL,IACQC,GAAsBE,GAC9Bt/H,KAAKi3H,eACAh1D,KACG6uD,EACAA,GAERA,KAIR,OAAO,IAAIxqG,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKo0H,kBAAkBrxH,KACnB+zH,GACAz/G,IACQA,GACA0V,GAAO1V,MAAO,GAAErX,aAAak/H,MAAgBD,kBAC7CptH,EAAOwF,KAEP0V,GAAOw4B,MAAO,GAAEvlD,aAAak/H,MAAgBD,gBAC7C14G,WAgBpBi5G,eAAepM,GACX,MAAMqM,EACAtM,GAAgBuM,kBAAkBtM,GAClCuM,EACAxM,GAAgByM,oBAAoBxM,GAGtCuM,IACA5yG,GAAOtf,KAAM,GAAEzN,0CAA0C2/H,KACzD3/H,KAAKk0H,yBAA2ByL,EAChC3/H,KAAKwqF,aAAa5iE,KACdi4G,GAAqD7/H,OAGrC,OAApBy/H,GAoBJ1yG,GAAOw4B,MAAO,GAAEvlD,oDAAoDy/H,OAEpEz/H,KAAKo0H,kBAAkBrxH,MAdF+tH,IACb9wH,KAAK00H,gBAAgB,mBACd10H,KAAK8/H,yBAAyBL,GAGrCz/H,KAAKi3H,eACAh1D,KAAK6uD,EAAkBA,GAE5BA,OAQJz5G,IACQA,EACA0V,GAAO1V,MAAO,GAAErX,+BAAgCqX,GAEhD0V,GAAOw4B,MAAO,GAAEvlD,6CAA6Cy/H,gBA3BrE1yG,GAAO1V,MACF,GAAErX,8EAyCf8/H,yBAAyBC,GACrB,MAAMC,EACuB,SAAvBD,GAC6B,cAAvBA,GAAsC//H,KAAKqxH,aACpB,cAAvB0O,IAAuC//H,KAAKqxH,YAOxD,OALI2O,IAAwBhgI,KAAK8zH,qBAC7B/mG,GAAOw4B,MAAO,GAAEvlD,iCAAiCggI,KACjDhgI,KAAK8zH,mBAAqBkM,GAGvBhgI,KAAKgkF,eAAeu7C,uBACvBv/H,KAAK6zH,mBAAqB7zH,KAAK8zH,oBAQvCqD,mBAAmBiH,EAAQ6B,GAEvB,GAAIjgI,KAAKooB,QAAUspG,GAGf,YAFA3kG,GAAOhF,KAAM,GAAE/nB,iCAAiCA,KAAKooB,kBAKzD,IAAKpoB,KAAKmyD,WAAWhJ,UAQjB,OANKnpD,KAAKwzH,qBACNxzH,KAAKwzH,mBAAqB4K,GAE9Bp+H,KAAKyzH,mBAAqBwM,OAC1BlzG,GAAOhF,KAAM,GAAE/nB,oEAKnBA,KAAKwzH,wBAAqBzsH,EAC1B/G,KAAKyzH,wBAAqB1sH,EAG1B,IAAIm5H,EAAY,IAAIvT,GAAUsT,EAAQ7B,GACtC,MAAMtd,GAAStiE,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK4yG,UAC1BpzG,KAAM,QACL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ,gBACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAGM+0E,EAAU3S,SAASzM,KAGvC/zF,GAAOtf,KAAM,GAAEzN,8BACf+sB,GAAOw4B,MAAMu7D,EAAOr7D,QACpBzlD,KAAKmyD,WAAWtF,OACZi0D,EAAQ,KACR9gH,KAAK63H,sBAAsB/W,GAASoS,KAI5CgN,EAAY,IAAIvT,GAAUyR,EAAQ6B,GAClC,MAAMl8F,GAAMya,EAAAA,GAAAA,KAAI,CAAE6b,GAAIr6D,KAAK4yG,UACvBpzG,KAAM,QACL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ,aACR+rH,UAAWj2H,KAAKwxH,aAChBrmE,IAAKnrD,KAAKmrD,MAIO+0E,EAAU3S,SAASxpF,KAGxChX,GAAOtf,KAAM,GAAEzN,2BACf+sB,GAAOw4B,MAAMxhB,EAAI0hB,QACjBzlD,KAAKmyD,WAAWtF,OACZ9oB,EAAK,KAAM/jC,KAAK63H,sBAAsB9zF,GAAMmvF,KAsBxD2E,sBAAsBjiG,EAASgnF,GAC3B,OAAOujB,IAEH,MAAM9oH,EAAQ,GAGR+oH,EAAapyB,EAAEmyB,GAAaz1H,KAAK,SAEvC,GAAI01H,EAAW7gI,OAAQ,CACnB8X,EAAMzW,KAAOw/H,EAAWn9E,KAAK,QAC7B,MAAMo9E,EAAiBryB,EAAEmyB,GAAaz1H,KAAK,gBAEvC21H,EAAe9gI,SACf8X,EAAMmgB,OAAS6oG,EAAe,GAAG5nG,SAGrC,MAAM6nG,EAAcF,EAAW11H,KAAK,SAEhC41H,EAAY/gI,SACZ8X,EAAM8T,IAAMm1G,EAAY/0G,QAI3B40G,IACD9oH,EAAMmgB,OAAS,WAGnBngB,EAAMjR,QAAUpG,KAAKxB,WAEjBo+G,EACAA,EAAUvlG,GACHrX,KAAKooB,QAAUspG,IACM,mBAAjBr6G,EAAMmgB,OAMjBzK,GAAOw4B,MAAO,GAAEvlD,sBAAsBirB,KAAKF,UAAU1T,MAErDogB,KAAAA,iBACI,IAAIhpB,MACC,iBAAgBwc,KAAKF,UAAU1T,QASpDkpH,wBACI,OAAOvgI,KAAKgkF,eAAew8C,qBAM/BxnE,QACIh5D,KAAKooB,MAAQspG,GACb1xH,KAAKs0H,2BAAwBvtH,EAEzB/G,KAAKgkF,iBACLhkF,KAAKgkF,eAAe8xC,eAAiB,KACrC91H,KAAKgkF,eAAeoyC,2BAA6B,KACjDp2H,KAAKgkF,eAAe4yC,oBAAsB,KAC1C52H,KAAKgkF,eAAemyC,uBAAyB,MAGjDppG,GAAOw4B,MAAO,GAAEvlD,mCAGhBA,KAAKo0H,kBAAkBxtF,QAEvB7Z,GAAOw4B,MAAO,GAAEvlD,6BAChBA,KAAKo0H,kBAAkBrxH,MAAK25H,IAExB18H,KAAKm0H,eAAexB,YAAY,MAGhC3yH,KAAKgkF,gBAAkBhkF,KAAKgkF,eAAehrB,QAC3C0jE,IACA3vG,GAAOw4B,MAAO,GAAEvlD,+BAGpB+sB,GAAOw4B,MAAO,GAAEvlD,oCAGhBA,KAAKo0H,kBAAkBrD,WAO3BvyH,WACI,MAAQ,2BAA0BwB,KAAK8mF,MAAQ,MAAQ,mBAAmB9mF,KAAKqxH,mBAAmBrxH,KAAKmrD,OAS3GsqE,4BAA2B,UAAEgL,IACzB,IAAKA,IAAcA,EAAUC,uBACzB,OAMJ,MAAM77E,EAAM7kD,KAAKkyH,mBAEjB,OAAOh5F,EAAAA,GAAAA,aAAY2rB,GAAO,GAAM,GCxoFxC,MAAM93B,IAASmB,EAAAA,EAAAA,6CAYf,SAASyyG,GAAuBnO,EAAOoO,GACnC,MAAM5jI,EAAOohD,OAAO,SAAU,CAC1B4H,MAAO,kCACPz8C,KAAMq3H,EAAkBp+H,EACxBL,KAAMgsH,GAAAA,+BAA8CyS,EAAkBt4H,OAAIvB,IAc9E,OAXI65H,EAAkB59H,GAClBhG,EAAKoE,EAAE,YAAa,CAChBe,KAAM,OACN0B,MAAO+8H,EAAkB59H,IAC1BkjD,KAEPlpD,EAAKoE,EAAE,YAAa,CAChB4kD,MAAO,2BACPwsE,MAAAA,IACDtsE,KAEIlpD,EAAKA,KAQhB,SAAS6jI,GAA0BC,GAC/B,MAAM9jI,EAAOohD,OAAO,aAAc,CAC9B4H,MAAO,kCACPp7C,WAsIepH,EAtIUs9H,EAAqB,GAuItC,MAARt9H,EACO,MACQ,MAARA,EACA,MAGJ,QAPX,IAAuBA,EAnInB,IAAK,IAAIlE,EAAI,EAAGA,EAAIwhI,EAAqBvhI,OAAQD,IAC7CtC,EAAKoE,EAAE,SAAU,CACb4kD,MAAO,kCACPz8C,KAAMu3H,EAAqBxhI,KAC5B4mD,KAGP,OAAOlpD,EAAKA,KAehB,SAAS+jI,GAAuB/vE,EAAIgwE,GAAgB,MAChD,IAAI1qG,EAEJ,IACIA,EAAOrL,KAAKnmB,MAAMk8H,EAAepsE,aACnC,MAAOv9C,GAGL,OAFA0V,GAAO1V,MAAO,sDAAqD2pH,EAAepsE,eAE3E,KAGX,KAAI,UAACt+B,SAAD,aAAC,EAAMtpB,SAEP,OAAO,KAIX,MAAMi0H,EAAsBC,GAA2BlwE,EAAImhC,IACrDgvC,EAAsBD,GAA2BlwE,EAAImhC,IACrDjnF,EAAU,IAAI26B,IAEpB,IAAK,MAAM2sF,KAASl8F,EAAKtpB,QACrB,GAAIspB,EAAKtpB,QAAQoC,eAAeojH,GAAQ,CACpC,MAAM/oH,EAAQ,GACR23H,EAAe9qG,EAAKtpB,QAAQwlH,GAI5B6O,GAAeD,MAAAA,OAAA,EAAAA,EAAc7hI,SAAU6hI,EAAa,GACpDE,GAAkBF,MAAAA,OAAA,EAAAA,EAAc7hI,QAAS,GAAK6hI,EAAa,GAC3DG,GAAeH,MAAAA,OAAA,EAAAA,EAAc7hI,QAAS,GAAK6hI,EAAa,GACxDI,GAAkBJ,MAAAA,OAAA,EAAAA,EAAc7hI,QAAS,GAAK6hI,EAAa,GAEjE,GAAIC,MAAAA,OAAJ,EAAIA,EAAc9hI,OAAQ,OACtB,IAAK,IAAID,EAAI,EAAGA,EAAI+hI,EAAa9hI,OAAQD,IACrC6hI,EAAoB9uG,YAAYsuG,GAAuBnO,EAAO6O,EAAa/hI,KAI/EmK,EAAM1G,KAAN,UAAWs+H,EAAa,UAAxB,aAAW,EAAiB7+H,GAGhC,GAAI8+H,MAAAA,OAAJ,EAAIA,EAAiB/hI,OACjB,IAAK,IAAID,EAAI,EAAGA,EAAIgiI,EAAgB/hI,OAAQD,IACxC6hI,EAAoB9uG,YAAYwuG,GAA0BS,EAAgBhiI,KAGlF,GAAIiiI,MAAAA,OAAJ,EAAIA,EAAchiI,OAAQ,OACtB,IAAK,IAAID,EAAI,EAAGA,EAAIiiI,EAAahiI,OAAQD,IACrC2hI,EAAoB5uG,YAAYsuG,GAAuBnO,EAAO+O,EAAajiI,KAE/EmK,EAAM1G,KAAN,UAAWw+H,EAAa,UAAxB,aAAW,EAAiB/+H,GAGhC,GAAIg/H,MAAAA,OAAJ,EAAIA,EAAiBjiI,OACjB,IAAK,IAAID,EAAI,EAAGA,EAAIkiI,EAAgBjiI,OAAQD,IACxC2hI,EAAoB5uG,YAAYwuG,GAA0BW,EAAgBliI,KAGlF4L,EAAQ+d,IAAIupG,EAAO/oH,GAI3B,OAAOyB,EAUX,SAASg2H,GAA2BlwE,EAAI+qB,GACpC,MAAMszC,EAASrhB,EAAEh9C,GAAItmD,KAAK,UAAU,GACpC,IACI4rC,EADA5wC,EAAUsoG,EAAEqhB,GAAQ3kH,KAAM,iBAAgBqxE,OAyB9C,OAtBIr2E,EAAQnG,OACRmG,EAAUA,EAAQ,IAGlBA,EAAU04C,OAAO,UAAW,CACxBj8C,KAAM45E,IACP/+E,KACHqyH,EAAOh9F,YAAY3sB,IAGvB4wC,EAAc03D,EAAEtoG,GAASgF,KAAK,eAE1B4rC,EAAY/2C,OACZ+2C,EAAcA,EAAY,IAE1BA,EAAc8H,OAAO,cAAe,CAChC4H,MAAO,6BACP3/C,MAAO01E,IACR/+E,KACH0I,EAAQ2sB,YAAYikB,IAGjBA,EAyBX,SAASmrF,GAAoBp1G,GACzB,MAAMnlB,EAAa8mG,EAAE3hF,GAAW3hB,KAAK,cAC/Bg3H,EAAkB,GAexB,OAZAx6H,EAAWsI,MAAK,CAACy+F,EAAGl8D,KAChB,MAAM+N,EAAa/N,EAAU+N,WACvB6hF,EAAiB,GAEvB,IAAK,IAAIriI,EAAI,EAAGA,EAAIwgD,EAAWvgD,OAAQD,IAAK,CACxC,MAAM2jD,EAAOnD,EAAWxgD,GAExBqiI,EAAe5+H,KAAM,GAAEkgD,EAAK9gD,SAAS8gD,EAAKp/C,SAE9C69H,EAAgB3+H,KAAK4+H,EAAe14H,KAAK,SAGtCy4H,EAMI,MAAME,WAA+BjwB,GAQhD/yG,YAAYs0F,EAAM1I,EAAcq3C,GAC5BnkD,QACA19E,KAAKkzF,KAAOA,EACZlzF,KAAKwqF,aAAeA,EACpBxqF,KAAK8hI,SAAW,GAChB9hI,KAAK+hI,aAAeF,EAAUG,IAC9BhiI,KAAKiiI,aAAeJ,EAAU7wC,IAC9BhxF,KAAKoxH,iBAAmB,CACpBziD,qBAAqB,EACrBI,qBAAqB,GAQ7B5oD,KAAKgsC,GACDurB,MAAMv3D,KAAKgsC,GACXnyD,KAAKmyD,WAAWz6B,WAAW13B,KAAKkiI,SAASh8H,KAAKlG,MAC1C,oBAAqB,KAAM,MAAO,KAAM,MAOhDkiI,SAASlxE,GACL,MAAM7F,EAAM6iD,EAAEh9C,GAAItmD,KAAK,UAAUu4C,KAAK,OAChC/4C,EAAS8jG,EAAEh9C,GAAItmD,KAAK,UAAUu4C,KAAK,UACnCk/E,EAAUnxE,EAAG/M,aAAa,QAG1B+lD,GAAMxrD,EAAAA,GAAAA,KAAI,CAAEh/C,KAAM,SACpB66D,GAAI8nE,EACJh+H,GAAI6sD,EAAG/M,aAAa,QAGxB,IAAIm+E,EAAOpiI,KAAK8hI,SAAS32E,GAEzB,GAAe,qBAAXjhD,EAA+B,CAC/B,IAAKk4H,EAcD,OAbAp4B,EAAI3rD,MAAM,CAAE7+C,KAAM,UAClBwqG,EAAI5oG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,iBAAkB,CACjB4kD,MAAO,wCAEVE,KACA9kD,EAAE,kBAAmB,CAClB4kD,MAAO,6BAEfj5B,GAAOhF,KAAM,uBAAsBojC,KACnCp+B,GAAOw4B,MAAMyL,GACbhxD,KAAKmyD,WAAWh+B,KAAK61E,IAEd,EAIX,GAAIm4B,IAAYC,EAAKxvB,UAcjB,OAbA7lF,GAAOhF,KACH,8BAA+BojC,EAAKi3E,EAAKxvB,UAAW5hD,GACxDg5C,EAAI3rD,MAAM,CAAE7+C,KAAM,UAClBwqG,EAAI5oG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,iBAAkB,CACjB4kD,MAAO,wCAEVE,KACA9kD,EAAE,kBAAmB,CAClB4kD,MAAO,6BAEfhmD,KAAKmyD,WAAWh+B,KAAK61E,IAEd,OAER,QAAajjG,IAATq7H,EAYP,OATAp4B,EAAI3rD,MAAM,CAAE7+C,KAAM,UAClBwqG,EAAI5oG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,sBAAuB,CACtB4kD,MAAO,wCAEVE,KACLn5B,GAAOhF,KAAK,uBAAwBojC,EAAK6F,GACzChxD,KAAKmyD,WAAWh+B,KAAK61E,IAEd,EAEX,MAAM56E,EAAM3yB,OAAOi/F,YAAYtsE,MAKzB03D,EAAgD,UAAxCxoC,GAAAA,QAAAA,mBAA2B6jF,GAInCE,EAAer0B,EAAEh9C,GAAItmD,KAAK,uBAEhC,GAAI23H,MAAAA,OAAJ,EAAIA,EAAc9iI,OAAQ,OACtB,IAAI+iI,EAEJv1G,GAAOtf,KAAM,mCAAkCvD,sCAC/C,IAAK,IAAI5K,EAAI,EAAGA,EAAI+iI,EAAa9iI,OAAQD,IAErCgjI,EAAkBvB,GAAuB/vE,EAAIqxE,EAAa/iI,IAG9D,aAAIgjI,SAAJ,aAAI,EAAiB/wG,KAAM,CACvB,MAAMgxG,EAAa,GAEnB,IAAK,MAAMC,KAAYF,EAAgB/9H,OACnCg+H,EAAWx/H,KAAM,GAAEy/H,MAAaF,EAAgBnoH,IAAIqoH,OAExDz1G,GAAOw4B,MAAO,YAAWr7C,UAAei4H,kBAAwBI,EAAWt5H,KAAK,UAOxF,OAAQiB,GACR,IAAK,mBAAoB,CACrB6iB,GAAOhjB,IAAI,sCAAuCqlB,GAClD,MAAMqzG,EAAaz0B,EAAEh9C,GAAItmD,KAAK,qBAG9B,GADAo8E,GAAS/5D,GAAOw4B,MAAO,YAAWr7C,UAAei4H,KAC7CM,MAAAA,OAAJ,EAAIA,EAAYljI,OAAQ,CACpB,MAAM68F,EAAaqmC,EAAWx/E,KAAKkvC,IAC7BkK,EAAaomC,EAAWx/E,KAAKkvC,IAEnCnyF,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,uBACe,SAAfuE,EACe,SAAfC,GAER,MAAMpuB,EAAW6Y,EAAQ9mF,KAAKiiI,aAAejiI,KAAK+hI,aAElDK,EACM,IAAIjP,GACFnlB,EAAEh9C,GAAItmD,KAAK,UAAUu4C,KAAK,OAC1B+qD,EAAEh9C,GAAI/N,KAAK,MACXk/E,EACAniI,KAAKmyD,WACLnyD,KAAKoxH,iBAILnmG,KAAKnmB,MAAMmmB,KAAKF,UAAUkjD,IAC1B6Y,GACgB,GAExB9mF,KAAK8hI,SAASM,EAAKj3E,KAAOi3E,EAC1BpiI,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,cAA0BuqC,EAAMp0B,EAAEh9C,GAAItmD,KAAK,WAAY0kB,GAC9E,MAEJ,IAAK,iBAAkB,CACnB,MAAM3lB,EAAQ,GACR8lH,EAAWvhB,EAAEh9C,GAAItmD,KAAK,kBAG5B,IAAK,MAAMhF,KAAW6pH,EAAU,CAC5B,MAAMhmH,EAAOykG,EAAEtoG,GAASgF,KAAK,eAAeu4C,KAAK,QAEjD15C,GAAQE,EAAM1G,KAAKwG,GAEvBwjB,GAAOw4B,MAAO,YAAWr7C,UAAei4H,gBAAsB14H,KAC9DzJ,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,cAA0BuqC,EAAMp0B,EAAEh9C,GAAItmD,KAAK,YAClE,MAEJ,IAAK,iBAAkB,CACnB,MAAMsxB,EAASgyE,EAAEh9C,GAAItmD,KAAK,iDAE1BqiB,GAAOw4B,MAAO,YAAWr7C,UAAei4H,6BAAmCnmG,MAAAA,OAA9D,EAA8DA,EAAQzQ,UACnF62G,EAAK5C,eAAexxB,EAAEh9C,GAAItmD,KAAK,YAC/B,MAEJ,IAAK,iBAAkB,CACnB,MAAMxD,EAAau6H,GAAoBzzB,EAAEh9C,GAAItmD,KAAK,6BAElDqiB,GAAOw4B,MAAO,YAAWr7C,UAAei4H,oBAA0Bj7H,EAAW+B,KAAK,SAClFjJ,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,eAA2BuqC,EAAMp0B,EAAEh9C,GAAItmD,KAAK,YACnE,MAEJ,IAAK,oBAAqB,CACtBqiB,GAAOhjB,IAAI,iBAAkBq4H,EAAKj3E,KAClC,IAAI0wE,EAAkB,KAClBC,EAAa,KAEb9tB,EAAEh9C,GAAItmD,KAAK,kBAAkBnL,SAC7Bs8H,EACM7tB,EAAEh9C,GAAItmD,KAAK,yBAAyB,GAAG+tB,QAC7CqjG,EAAa9tB,EAAEh9C,GAAItmD,KAAK,uBAAuB6gB,QAEnDwB,GAAOw4B,MAAO,YAAWr7C,UAAei4H,uBAA6BrG,KACrE97H,KAAK+xH,UAAUqQ,EAAKj3E,IAAK0wE,EAAiBC,GAC1C97H,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,WAAuBuqC,EAAMvG,EAAiBC,GACrE,MAEJ,IAAK,oBAAqB,OACtB/uG,GAAOtf,KAAK,oCAAqC2hB,GACjD,MAAM/C,EAAY2hF,EAAEh9C,GAAItmD,KAAK,4BACvBxD,EAAau6H,GAAoBp1G,GACjCq2G,EAAW10B,EAAE3hF,GAAW42B,KAAK,SAC7B0/E,EAAS30B,EAAE3hF,GAAW42B,KAAK,OAC3B2/E,EAAe,UAAG50B,EAAE3hF,GAAW3hB,KAAK,uBAArB,aAAG,EAAmC6gB,OAE3DwB,GAAOw4B,MAAO,YAAWr7C,UAAei4H,mBAAyBO,aACpDC,uBAA4BC,iBAA+B17H,EAAW+B,KAAK,SAExFgqF,GAAWiE,cAActb,GxD3W/B,6BwD6WU,CACIoV,IAAKlK,EACLjjF,MAAOurB,KAGfgzG,EAAKnI,iBAAiBjsB,EAAEh9C,GAAItmD,KAAK,YAAY,KACzC,MAAMm4H,EAAcpmI,OAAOi/F,YAAYtsE,MAEvCrC,GAAOtf,KAAK,sCAAuCo1H,GACnD5vC,GAAWiE,cAActb,GxD9WnC,4BwDgXc,CACIoV,IAAKlK,EACLjjF,MAAOg/H,QAEhBxrH,IACCogB,KAAAA,iBAAsCpgB,GACtC0V,GAAO1V,MAAM,2BAA4BA,GACzC+qH,EAAKrH,yBAET,MAEJ,IAAK,aACDqH,EAAK/F,gBAAgBruB,EAAEh9C,GAAItmD,KAAK,oBAChC,MACJ,IAAK,gBACD03H,EAAK7F,mBAAmBvuB,EAAEh9C,GAAItmD,KAAK,oBACnC,MACJ,QACIqiB,GAAOhF,KAAK,gCAAiC7d,GAC7C8/F,EAAI3rD,MAAM,CAAE7+C,KAAM,UAClBwqG,EAAI5oG,EAAE,QAAS,CAAE5B,KAAM,WAClB4B,EAAE,cACC,CAAE4kD,MAAO,wCACZE,KAKT,OAFAlmD,KAAKmyD,WAAWh+B,KAAK61E,IAEd,EAUX84B,oBAAoBC,EAAI/7C,GACpB,MAAMo7C,EACA,IAAIjP,GACFn7F,KAAAA,gBAA2B,IAC3B+qG,EACA/7C,EACAhnF,KAAKmyD,WACLnyD,KAAKoxH,iBACLpxH,KAAKiiI,cACK,GACM,GAIxB,OAFAjiI,KAAK8hI,SAASM,EAAKj3E,KAAOi3E,EAEnBA,EASXrQ,UAAU5mE,EAAK0wE,EAAiBC,GACxB97H,KAAK8hI,SAAS1yH,eAAe+7C,KACI,UAA7BnrD,KAAK8hI,SAAS32E,GAAK/iC,OACnBpoB,KAAK8hI,SAAS32E,GAAKywE,aAAaC,EAAiBC,UAE9C97H,KAAK8hI,SAAS32E,IAO7B63E,4BAcIhjI,KAAKmyD,WAAWtF,QACZrO,EAAAA,GAAAA,KAAI,CAAEh/C,KAAM,MACR66D,GAAIr6D,KAAKkzF,KAAKtpF,QAAQmxG,MAAMn9D,SAC3Bx8C,EAAE,WAAY,CAAE4kD,MAAO,yBAC5Bi9E,GAASjjI,KAAKkjI,gCAAgCD,KAC9CE,IACIp2G,GAAOhF,KAAK,qEAAsEo7G,GAClFnjI,KAAKmyD,WAAWtF,QACZrO,EAAAA,GAAAA,KAAI,CAAEh/C,KAAM,MACR66D,GAAIr6D,KAAKkzF,KAAKtpF,QAAQmxG,MAAMn9D,SAC3Bx8C,EAAE,WAAY,CAAE4kD,MAAO,yBAC5Bo9E,GAASpjI,KAAKkjI,gCAAgCE,KAC9CC,IACIt2G,GAAOhF,KAAK,kCAAmCs7G,GAC/Ct2G,GAAOhF,KAAK,qEAYhCm7G,gCAAgCr1B,GAC5B,MAAMy1B,EAAa,GAEnBt1B,EAAEH,GAAKnjG,KAAK,qBAAqB8E,MAAK,CAAC02D,EAAKl9D,KAGxC,MAAMu6H,EAAO,GACP/jI,GAFNwJ,EAAKglG,EAAEhlG,IAESi6C,KAAK,QAErB,OAAQzjD,GACR,IAAK,OACD+jI,EAAKj1D,KAAQ,QAAOtlE,EAAGi6C,KAAK,UACxBj6C,EAAGi6C,KAAK,UACRsgF,EAAKj1D,MAAS,IAAGtlE,EAAGi6C,KAAK,WAE7BqgF,EAAWvgI,KAAKwgI,GAChB,MACJ,IAAK,OACL,IAAK,QAAS,CACVA,EAAKj1D,KAAQ,GAAE9uE,KACf+jI,EAAKxpF,SAAW/wC,EAAGi6C,KAAK,YACxBsgF,EAAKj1D,MAAQtlE,EAAGi6C,KAAK,QACRj6C,EAAGi6C,KAAK,UAGjBsgF,EAAKj1D,MAAS,IAAGtlE,EAAGi6C,KAAK,WAE7B,MAAM52B,EAAYrjB,EAAGi6C,KAAK,aAEtB52B,GAA2B,QAAdA,IACbk3G,EAAKj1D,MAAS,cAAajiD,KAG/Bk3G,EAAKC,WAAax6H,EAAGi6C,KAAK,aACfsgF,EAAKC,WAChBF,EAAWvgI,KAAKwgI,GAChB,WAKR,MAAM35H,EAAU5J,KAAKkzF,KAAKtpF,QAG1B,IAAK,IAAItK,EAAIgkI,EAAW/jI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,MAAMqH,EAAI2F,KAAKC,MAAMD,KAAKE,UAAYlN,EAAI,IACpCmkI,EAAOH,EAAWhkI,GAExBgkI,EAAWhkI,GAAKgkI,EAAW38H,GAC3B28H,EAAW38H,GAAK88H,EAGpB,IAAIn9H,EAYJ,OATIA,EADAsD,EAAQ85H,WACClhI,GAAKA,EAAE8rE,KAAK2lC,WAAW,QAGvBzxG,GAAKA,EAAE8rE,KAAK2lC,WAAW,SAAYzxG,EAAE8rE,KAAK1iE,QAAQ,kBAAoB,EAGnF5L,KAAK+hI,aAAa5zD,WAAam1D,EAAWh9H,OAAOA,GACjDtG,KAAKiiI,aAAa9zD,WAAam1D,EAExBA,EAAW/jI,OAAS,EAM/BokI,SACI,MAAMrvH,EAAO,GAgBb,OAdAhW,OAAOiG,KAAKvE,KAAK8hI,UAAUt9H,SAAQ2mD,IAC/B,MACMqa,EADUxlE,KAAK8hI,SAAS32E,GACX64B,eAEfxe,GAAMA,EAAGo+D,YAETtvH,EAAM,UAAS62C,KAAS,CACpBy4E,UAAWp+D,EAAGo+D,UACd/jE,MAAO2F,EAAG3F,MACVv7C,IAAK7nB,OAAOgJ,SAAS4d,UAK1B/O,GCnpBf,MAAMuvH,WAAsBlyB,GAIxB/yG,cACI8+E,QACA19E,KAAK+J,IAAM,GAOfoc,KAAKgsC,GACDurB,MAAMv3D,KAAKgsC,GACXnyD,KAAKmyD,WAAWpG,SAAW/rD,KAAK8jI,YAAY59H,KAAKlG,MACjDA,KAAKmyD,WAAWnG,UAAYhsD,KAAK+jI,YAAY79H,KAAKlG,MAOtD8jI,YAAYr3E,GACRzsD,KAAK+J,IAAIhH,KAAK,EAAE,IAAIqqB,MAAO26B,UAAW,WAAY0E,IAOtDs3E,YAAYt3E,GACRzsD,KAAK+J,IAAIhH,KAAK,EAAE,IAAIqqB,MAAO26B,UAAW,WAAY0E,KChC1D,MAAM1/B,IAASmB,EAAAA,EAAAA,2CAET81G,GAAa,kBAKJ,MAAMC,WAA6BtyB,GAK9CxrF,KAAKgsC,GACDurB,MAAMv3D,KAAKgsC,GAEXnyD,KAAKmyD,WAAWz6B,WACZ13B,KAAKkkI,OAAOh+H,KAAKlG,MAAOgkI,GAAY,KAAM,MAAO,KAAM,MAO/DE,OAAOlzE,GACHjkC,GAAOtf,KAAK,UAAWujD,GAa3Bk0D,KAAK7qD,EAAI1f,EAAM/jB,EAAUutG,EAAUrmB,GAC/B,OAAO,IAAIx3F,SAAQ,CAACC,EAAS1U,KACzB,IAAKisG,EAGD,YAFAjsG,EAAO,IAAIpD,MAAM,oBAIrB,MAAMggD,GAAMjQ,EAAAA,GAAAA,KAAI,CACZh/C,KAAM,MACN66D,GAAIyjD,IAGRrvD,EAAIrtD,EAAE,OAAQ,CACV4kD,MAAOg+E,GACP3pE,GAAAA,EACA1f,KAAAA,IAEJ8T,EAAIrtD,EAAE,SAAU,CACZe,KAAM,cACN0B,MAAO+yB,IACRsvB,KAECi+E,GAAYA,EAAS5kI,QACrBkvD,EAAIrtD,EAAE,SAAU,CACZe,KAAM,kBACN0B,MAAOsgI,IACRj+E,KAGPlmD,KAAKmyD,WAAWtF,OACZ4B,GACAx8C,IACI8a,GAAOtf,KAAK,eAAgBwE,GAG5B,MAAMy/C,EAAWs8C,EAAE/7F,GAAQvH,KAAK,OAAOu4C,KAAK,OAE5CjjD,KAAKokI,aAAe1yE,EAAS9uC,OAAO,QAAQrjB,QAC5CwtB,GAAOtf,KAAM,2BAA0BzN,KAAKokI,gBAC5C79G,OAEJlP,IACI0V,GAAOtf,KAAK,cAAe4J,GAC3BxF,EAAOwF,SAUvB+tG,SACI,OAAO,IAAI9+F,SAAQ,CAACC,EAAS1U,KACzB,IAAK7R,KAAKokI,aAIN,OAHAvyH,EAAO,IAAIpD,MAAM,6BACjBse,GAAOhF,KAAK,uBAKhB,MAAM0mC,GAAMjQ,EAAAA,GAAAA,KAAI,CACZh/C,KAAM,MACN66D,GAAIr6D,KAAKokI,eAGb31E,EAAIrtD,EAAE,SAAU,CACZ4kD,MAAOg+E,KAGXhkI,KAAKmyD,WAAWtF,OAAO4B,GAAKx8C,IACxB8a,GAAOtf,KAAK,iBAAkBwE,GAC9BjS,KAAKokI,aAAe,KACpB79G,OACDlP,IACC0V,GAAOtf,KAAK,gBAAiB4J,GAC7BrX,KAAKokI,aAAe,KACpBvyH,EAAO,IAAIpD,MAAM,yBCjHjC,MAAMse,IAASmB,EAAAA,EAAAA,2CAkBf,IAAIm2G,IAAmB,EAQvB,MAAMC,GAA8B,6BAO9BC,GACA,wDCpBAx3G,IAASmB,EAAAA,EAAAA,mCAKTs2G,GAAgB,4DAwDf,MAAMC,GAAuB,CAChC,CAAEn2D,KAAM,6CASCk6B,GAAsB,OAMtBk8B,GAAiB,mCAOjB18B,GAAe,8BAKb,MAAMwV,WAAa9W,GAiB9B9nG,YAAYgL,EAAS+6H,GAAO,MACxBjnD,QACA19E,KAAKmyD,WAAa,KAClBnyD,KAAK4kI,sBAAuB,EAC5B5kI,KAAK84F,gBAAkB,GACvB94F,KAAK4J,QAAUA,EACf5J,KAAK2kI,MAAQA,EACb3kI,KAAK6kI,mBAAoB,EDtF7BvmF,GAAAA,QAAAA,IAAc,SAAStxB,EAAO7B,GAe1B,OATA4B,GAAO+3G,MAAM,UAAW93G,EAAO7B,GACZ,iBAARA,IAC6B,IAA7BA,EAAIvf,QAAQ,cAC0C,IAAtDuf,EAAIvf,QAAQ,uCAEnBohB,EAAQsxB,GAAAA,QAAAA,SAAAA,MAIJtxB,GACR,KAAKsxB,GAAAA,QAAAA,SAAAA,OAGwB,IAArB+lF,IACOC,GAA4Br+H,KAAKklB,KACxC4B,GAAOw4B,MAAM,yBACb8+E,IAAmB,GAEvB,MACJ,KAAK/lF,GAAAA,QAAAA,SAAAA,KACDvxB,GAAOhF,KAAM,YAAWoD,KACxB,MAAM45G,EAAmBR,GAAuBx/F,KAAK5Z,GAEjD45G,GAAgD,IAA5BA,EAAiBxlI,SACrC8kI,GAAkBv5H,SAASi6H,EAAiB,GAAI,IAChDh4G,GAAOw4B,MAAO,2BAA0B8+E,OAE5C,MACJ,KAAK/lF,GAAAA,QAAAA,SAAAA,MACL,KAAKA,GAAAA,QAAAA,SAAAA,MAEDnzB,EAAO,YAAWA,IAClBsM,KAAAA,iBAAsC,IAAIhpB,MAAM0c,IAChD4B,GAAO1V,MAAM8T,KAarBmzB,GAAAA,QAAAA,mBAA6B,WACzB,OAAO+lF,IAGX/lF,GAAAA,QAAAA,gBAA0B,SAAStoB,GAC/B,OAAQA,GACR,KAAKsoB,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,MACD,MAAO,QACX,KAAKA,GAAAA,QAAAA,OAAAA,WACD,MAAO,aACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,eACD,MAAO,iBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,KAAKA,GAAAA,QAAAA,OAAAA,UACD,MAAO,YACX,KAAKA,GAAAA,QAAAA,OAAAA,aACD,MAAO,eACX,KAAKA,GAAAA,QAAAA,OAAAA,cACD,MAAO,gBACX,KAAKA,GAAAA,QAAAA,OAAAA,SACD,MAAO,WACX,QACI,MAAO,YFlFfA,GAAAA,QAAAA,oBAA4B,SAAU,IAAIulF,IG6FtC,MAAM/vB,EAAWlqG,EAAQkqG,UAAY,GAGrCA,EAASl2D,OAASh0C,EAAQmxG,MAAMn9D,OAEhC59C,KAAKmyD,WArGb,UAA0B,sBACtBshD,EADsB,WAEtBG,EAAa,aAFS,MAGtBC,EAHsB,MAItB8wB,EAJsB,mBAKtBjxB,EALsB,sBAMtBC,EANsB,SAOtBG,IAQA,OALI6wB,IAEA/wB,GAAe,IAA+B,IAA7BA,EAAWhoG,QAAQ,KAAc,IAAM,YAAY+4H,KAGjE,IAAItxB,GAAe,CACtBI,sBAAAA,EACAG,WAAAA,EACAF,mBAAAA,EACAC,sBAAAA,EACAG,SAAAA,EACAD,MAAAA,IAgFkBmxB,CAAiB,CAC/BvxB,sBAAuB7pG,EAAQ6pG,sBAG/BG,WAAYhqG,EAAQgqG,YAAchqG,EAAQq7H,KAC1CN,MAAAA,EACAjxB,mBAAoB9pG,EAAQ8pG,mBAC5BC,sBAAuB/pG,EAAQ+pG,sBAC/BG,SAAAA,EACAD,MAAK,UAAEjqG,EAAQi1G,sBAAV,aAAE,EAAwBhL,QAInC7zG,KAAKmyD,WAAWtrC,GAAGwsF,GAAeC,OAAOE,oBAAoB,KAEzD,MAAM0xB,EAAU,CACZC,eAAe,EACfC,aAAcplI,KAAKmyD,WAAWqgD,KAAKQ,qBACnCqyB,wBAAyBrlI,KAAKmyD,WAAWo/C,2BAI7CvxG,KAAKwqF,aAAa5iE,KACd09G,GACAC,QACAx+H,OACAA,EACAm+H,MAGRllI,KAAKwlI,sBAELxlI,KAAKg3C,KAAO,IAAIk3D,GAAKluG,KAAKmyD,WAA6B,gCAGvDnyD,KAAKylI,mBAOLz3B,EAAEvxG,QAAQoqB,GAAG,uBAAuBkvG,IAChC/1H,KAAK8tD,WAAWioE,GAAI5pD,OAAM,YAUlCs5D,mBAGIzlI,KAAKg3C,KAAK+iB,WAAW,qBACrB/5D,KAAKg3C,KAAK+iB,WAAW,8BACrB/5D,KAAKg3C,KAAK+iB,WAAW,wCACrB/5D,KAAKg3C,KAAK+iB,WAAW,+BACrB/5D,KAAKg3C,KAAK+iB,WAAW,0CACrB/5D,KAAKg3C,KAAK+iB,WAAW,kCACrB/5D,KAAKg3C,KAAK+iB,WAAW,kCACrB/5D,KAAKg3C,KAAK+iB,WAAW,yCAIf/5D,KAAK4J,QAAQsxG,YAAeh6F,GAAQkvD,aAAelvD,GAAQo+D,kBAAkB,KAC/Et/E,KAAKg3C,KAAK+iB,WAAW,sBAEU,IAA/B/5D,KAAK4J,QAAQ87H,eAA0BxkH,GAAQsgE,oBAC/CxhF,KAAKg3C,KAAK+iB,WAAW,mCAGc,IAA5B/5D,KAAK4J,QAAQ+7H,YAA8B3lI,KAAK4J,QAAQ+7H,aAC/D3lI,KAAKg3C,KAAK+iB,WAAW,yBAIpB74C,GAAQkvD,kBAAkD,IAA3BpwE,KAAK4J,QAAQg8H,YAA6B5lI,KAAK4J,QAAQg8H,WACvF5lI,KAAKg3C,KAAK+iB,WAAW,wBASzB/5D,KAAKg3C,KAAK+iB,WAAW,qBACrB/5D,KAAKg3C,KAAK+iB,WAAW,qBAKjB74C,GAAQu+D,oBAAoD,IAA/Bz/E,KAAK4J,QAAQi8H,gBAC1C94G,GAAOtf,KAAK,sBACZzN,KAAKg3C,KAAK+iB,WAAW,kCAGrB/5D,KAAKmyD,WAAWgzD,MAChBnlH,KAAKg3C,KAAK+iB,WAAW,0BAGrB+wC,GAAc/uC,YAAY/7D,KAAK4J,UAC/B5J,KAAKg3C,KAAK+iB,WAAWiuC,IAAc,GAAO,GAOlD89B,gBACI,OAAO9lI,KAAKmyD,WAchB4zE,kBAAkBC,EAAc,GAAIhwG,EAAQ7K,GACxC,MAAMiE,EAAM3yB,OAAOi/F,YAAYtsE,MACzB62G,EAAY3nF,GAAAA,QAAAA,gBAAwBtoB,GAAQ1U,cAQlD,GANAthB,KAAK84F,gBAAgBmtC,GAAa72G,EAClCrC,GAAOhjB,IACF,kBAAiBk8H,IAAY96G,EAAO,IAAGA,KAAS,QACjDiE,GAEJpvB,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,0BAAsCmuC,EAAahwG,EAAQ7K,GAC9E6K,IAAWsoB,GAAAA,QAAAA,OAAAA,WAA4BtoB,IAAWsoB,GAAAA,QAAAA,OAAAA,SAE9Ct+C,KAAKkmI,qBACLlmI,KAAKmyD,WAAW29C,aAAaljD,cAAc5sD,KAAKkmI,oBAChDlmI,KAAKkmI,mBAAqB,MAG9BlmI,KAAKmmI,eAAiBnmI,KAAKmyD,WAAWk9D,OAAO2T,4BAE7Cj2G,GAAOtf,KAAM,iBAAgBzN,KAAKmyD,WAAWtN,OAG7C7kD,KAAKomI,cAELpmI,KAAKmmI,eAAiBnmI,KAAKg3C,KAAKg4D,yBAAyBhvG,KAAK4J,QAAQmxG,MAAMn9D,QACvEqkB,MAAK,EAAG3Z,SAAAA,EAAUylD,WAAAA,MACVzlD,EAAS9d,IAAI8T,GAAAA,QAAAA,GAAAA,OACdvxB,GAAO1V,MAAO,yBACVrX,KAAK4J,QAAQmxG,MAAMn9D,0DAG3B59C,KAAKqmI,4BACDt4B,OAAYhnG,MAEnBolE,OAAM90D,IACH,MAAMy7F,EAAS,0BAEfr7E,KAAAA,iBACI,IAAIhpB,MAAO,GAAEqkG,MAAWz7F,MAC5B0V,GAAO1V,MAAMy7F,EAAQz7F,MAI7BrX,KAAKmmI,eAAgB,EAEjBH,EAAY9vF,WACZl2C,KAAK6kI,mBAAoB,GAEzB7kI,KAAKmyD,YAAcnyD,KAAKmyD,WAAWhJ,WAChC7K,GAAAA,QAAAA,mBAA2Bt+C,KAAKmyD,WAAWtN,MAG9C7kD,KAAKwqF,aAAa5iE,KACd09G,GACAhnF,GAAAA,QAAAA,mBAA2Bt+C,KAAKmyD,WAAWtN,WAEhD,GAAI7uB,IAAWsoB,GAAAA,QAAAA,OAAAA,SACN,+BAARnzB,EACAnrB,KAAKsmI,2BAA4B,EAEjCtmI,KAAKumI,kBAAmB,EAE5BvmI,KAAKwmI,aAAer7G,EACR,cAARA,GACAnrB,KAAKwqF,aAAa5iE,KACd09G,GACAC,GAAmCp6G,QAExC,GAAI6K,IAAWsoB,GAAAA,QAAAA,OAAAA,MAClBt+C,KAAKwmI,aAAer7G,OACjB,GAAI6K,IAAWsoB,GAAAA,QAAAA,OAAAA,aAA6B,CAE/Ct+C,KAAKmyD,WAAWqgD,KAAKO,eACrB,MAAM0zB,EAA2B5mD,QAAQ7/E,KAAK4kI,sBACxC1H,EAAS/xG,GAAOnrB,KAAKwmI,aAE3B,GAAIxmI,KAAKsmI,0BAELtmI,KAAKwqF,aAAa5iE,KACd09G,GACAC,SACD,GAAIvlI,KAAKumI,iBACZvmI,KAAKwqF,aAAa5iE,KACd09G,GACAC,GACArI,OACAn2H,EACA/G,KAAK0mI,0CACN,GAAID,EACPzmI,KAAKwqF,aAAa5iE,KACd09G,GAA+CpI,OAChD,CAMHnwG,GAAO1V,MAAM,4BAIb,MAAMgtH,EAAkB/lF,GAAAA,QAAAA,qBAEpB+lF,GAAmB,KAAOA,EAAkB,IAC5CrkI,KAAKwqF,aAAa5iE,KACd09G,GACAC,GACArI,GAAU,oBACQn2H,EAClB/G,KAAK0mI,qCAET1mI,KAAKwqF,aAAa5iE,KACd09G,GACAC,GACArI,GAAU,gCACQn2H,EAClB/G,KAAK0mI,2CAGd,GAAI1wG,IAAWsoB,GAAAA,QAAAA,OAAAA,SAAyB,CAC3C,MAAMqoF,EAAuB3mI,KAAK8lI,gBAAgBx0B,uBAGlDtxG,KAAKwqF,aAAa5iE,KACd09G,GACAC,GACAp6G,GAAOnrB,KAAK4mI,8BAA8BD,GAC1CX,IAWZK,4BAA4Bt4B,EAAYzlD,GAEpCylD,EAAWvpG,SAAQ29F,IAaf,GAZsB,kBAAlBA,EAAS3iG,OACTQ,KAAKs2G,6BAA+BnU,EAAShgG,MAG3B,iBAAlBggG,EAAS3iG,OACTQ,KAAK6mI,6BAA+B1kC,EAAShgG,MAG3B,wBAAlBggG,EAAS3iG,OACTQ,KAAK8mI,mCAAqC3kC,EAAShgG,MAGjC,eAAlBggG,EAAS3iG,KAAuB,CAChCQ,KAAKq3G,gBAAiB,EACtB,MAAM0vB,EAAuBtkH,IACzBA,EAAEje,SAAQwiI,IACFA,EAAGhnE,SAAS,0BACZhgE,KAAKwqF,aAAa5iE,KAAK09G,QAK/Bh9E,EACAy+E,EAAqBz+E,GAErB65C,EAAShgG,MAAQnC,KAAKg3C,KAAKg4D,yBAAyB7M,EAAShgG,KAAMggG,EAAS3iG,MACvEyiE,MAAK,EAAG3Z,SAAU7lC,KAAQskH,EAAqBtkH,KAC/C0pD,OAAMzpE,GAAKqqB,GAAOhF,KAAK,qCAAsCrlB,GAAKA,EAAE3D,WAI3D,UAAlBojG,EAAS3iG,OACTQ,KAAK4J,QAAQi1G,eAAehL,MAAQ7zG,KAAKmyD,WAAW0hD,MAAQ1R,EAAShgG,MAGnD,WAAlBggG,EAAS3iG,OACTQ,KAAK4J,QAAQi1G,eAAeooB,OAASjnI,KAAKmyD,WAAW80E,OAAS9kC,EAAShgG,UAI3EnC,KAAKs2G,8BACFt2G,KAAK6mI,8BACL7mI,KAAK8mI,qCACR9mI,KAAKmyD,WAAWz6B,WAAW13B,KAAKknI,kBAAkBhhI,KAAKlG,MAAO,KAAM,UAAW,KAAM,MAU7F4mI,8BAA8Bz7G,GAC1B,IAAKA,EACD,OAAO,KAGX,MAAM9G,EAAUmgH,GAAcz/F,KAAK5Z,GAEnC,OAAO9G,EAAUA,EAAQ,GAAK,KAQlC4mC,SAASpG,EAAK3O,GA4BVl2C,KAAKomI,cAGLpmI,KAAKmmI,eAAgB,EAEjBnmI,KAAKmyD,WAAW29C,cAAgB9vG,KAAKmyD,WAAW29C,aAAa3/C,eAC7DnwD,KAAKkmI,mBAAqBlmI,KAAKmyD,WAAW29C,aAAa3/C,eACnDnwD,KAAKmnI,iBAAiBjhI,KAAKlG,MAC3B,KACA,WAGJ+sB,GAAOhF,KAAK,gEAGhB/nB,KAAKmyD,WAAW3H,QACZ3F,EACA3O,EACAl2C,KAAK+lI,kBAAkB7/H,KAAKlG,KAAM,CAC9B6kD,IAAAA,EACA3O,SAAAA,KAUZixF,iBAAiBh8G,GAEb,GAAwC,IAApC6iF,EAAE7iF,GAAKzgB,KAAK,aAAanL,QAAiD,IAAjCyuG,EAAE7iF,GAAKzgB,KAAK,UAAUnL,OAC/D,OAGJS,KAAKmmI,eAAgB,EAErB,MAAMiB,EAAkBpnI,KAAKmyD,WAAWk9D,OAAO6T,gCAAgC/3G,IAEzE,SAAEm9B,EAAF,WAAYylD,GAAeD,GAAe3iF,GAEhDnrB,KAAKqmI,4BAA4Bt4B,EAAYzlD,IAEzC8+E,GAAmBr5B,EAAWx8E,KAAO,GAAK+2B,EAAS/2B,KAAO,KAC1DvxB,KAAKmyD,WAAW29C,aAAaljD,cAAc5sD,KAAKkmI,oBAChDlmI,KAAKkmI,mBAAqB,MAWlCh7E,OAAOthD,GACH5J,KAAKomI,cAGLpmI,KAAKmmI,eAAgB,EAErB,MAAM/2G,EAAMpvB,KAAK84F,gBAAgBuuC,UAAY5qI,OAAOi/F,YAAYtsE,MAEhErC,GAAOhjB,IAAI,8BAA+BqlB,GAC1CpvB,KAAKmyD,WAAWjH,OAAOthD,EAAQi7C,IAAKj7C,EAAQuhD,IACxCrgD,SAASlB,EAAQwhD,IAAK,IAAM,EAC5BprD,KAAK+lI,kBAAkB7/H,KAAKlG,KAAM,CAC9B6kD,IAAKj7C,EAAQi7C,IACb3O,SAAUtsC,EAAQssC,YAQ9BkwF,cACIpmI,KAAKsmI,2BAA4B,EACjCtmI,KAAKumI,kBAAmB,EACxBvmI,KAAKwmI,kBAAez/H,EACpB/G,KAAK4kI,0BAAuB79H,EAQhCyjD,QAAQ3F,EAAK3O,GACT,IAAK2O,EAAK,CACN,MAAM,gBAAEq3D,EAAF,OAAmBt+D,GAAW59C,KAAK4J,QAAQmxG,MACjD,IAAIusB,EAAeprB,GAAmBt+D,EAStC,MAAM,SAAEn4C,GAAahJ,OAErB,GAAIy/G,EAAiB,CACjB,MAAMn5F,EAAStd,GAAYA,EAASsd,QAE/BA,IAA4C,IAAlCA,EAAOnX,QAAQ,eACnB5L,KAAK2kI,SACZ2C,EAAe1pF,GAKvBiH,EAAMyiF,GAAiB7hI,GAAYA,EAAS8hI,SAGhD,OAAOvnI,KAAKirD,SAASpG,EAAK3O,GAa9B8hE,WAAWphF,EAAUhtB,EAAS49H,GAE1B,IAAI/rC,EAAW,GAAEz7F,KAAKynI,WAAW7wG,EAAUhtB,EAAQmuG,iBAEnD,MAAM2vB,EAAcF,EACdA,EAAiBxnI,KAAKmyD,WAAWtN,IAAK7kD,KAAK6kI,mBAC3C7sG,KAAAA,gBAA2B,GAAG1W,cAKpC,OAHAyL,GAAOtf,KAAM,OAAMzN,KAAKmyD,WAAWtN,0BAA0B6iF,KAC7DjsC,GAAWisC,EAEJ1nI,KAAKmyD,WAAWm8C,KAAK0J,WAAWvc,EAAS,KAAM7xF,GAU1D69H,WAAW7wG,EAAUgnB,GACjB,MAAQ,GAAEhnB,KAAYgnB,GAAkB59C,KAAK4J,QAAQmxG,MAAM4sB,IAAIrmH,gBASnE2kG,cAAcrvF,EAAUgnB,GACpB,OAAO59C,KAAKmyD,WAAWm8C,KAAK2X,cAAcjmH,KAAKynI,WAAW7wG,EAAUgnB,IAQxE++C,SACI,OAAO38F,KAAKmyD,WAAWtN,IAO3B+iF,eACI,MAAMvY,EAASrvH,KAAKmyD,WAAWk9D,OAG/B,OAAOA,EAASA,EAAOsU,SAAW,GAMtCkE,aACI,OAAQ7nI,KAAKmyD,WAAWplC,QAAU,IAAIhjB,KAAO,KAMjDm7G,QAAQp9G,GACJ9H,KAAKmyD,WAAWgzD,KAAKD,QAAQp9G,GASjC0qG,KAAKlmD,GACD,OAAO,IAAIhmC,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKmyD,WAAWqgD,KAAKA,KAAKxyG,KAAKmyD,WAAWwiD,WAAYpuF,EAAS1U,EAAQy6C,MAO/Ew7E,cACI,OAAO9nI,KAAKmyD,WAAWk9D,OAAOyS,SAUlCh0E,WAAWioE,GACP,OAAI/1H,KAAK4kI,qBACE5kI,KAAK4kI,qBACJ5kI,KAAKmyD,YAIjBnyD,KAAK4kI,qBAAuB,IAAIt+G,SAAQC,IACpC,MAAMwhH,EAAqB,CAAC/B,EAAahwG,KACjCA,IAAWsoB,GAAAA,QAAAA,OAAAA,eACX/3B,IACAvmB,KAAKwqF,aAAa72E,eAAekkF,KAAAA,0BAAsCkwC,KAI/E/nI,KAAKwqF,aAAa3jE,GAAGgxE,KAAAA,0BAAsCkwC,MAG/D/nI,KAAKgoI,uBAAuBjS,GAErB/1H,KAAK4kI,sBAhBDt+G,QAAQC,UA4BvByhH,uBAAuBjS,GAWnB,IAFC/1H,KAAKmyD,WAAWsiD,kBAAoBz0G,KAAKmyD,WAAWxmC,SAEhD3rB,KAAKmyD,WAAWsiD,kBAAjB,MAAqCshB,EAA0C,CAC/E,MAAMkS,EAASlS,EAAGv2H,KAElB,IAAe,iBAAXyoI,GAAwC,WAAXA,KAI7BjoI,KAAKmyD,WAAWvoD,QAAQktD,MAAO,EAG3B92D,KAAKmyD,WAAWyjD,yBAEhB,OAKZ51G,KAAKmyD,WAAWrE,cAEqB,IAAjC9tD,KAAKmyD,WAAWvoD,QAAQktD,MACxB92D,KAAKmyD,WAAWxmC,QAOxB65G,sBACI,MAAM3D,EAAY,CACdG,IAAK,CAAE7zD,WAAY,IACnB6iB,IAAK,CAAE7iB,WAAY,KAGjB+5D,EAAkBloI,KAAK4J,QAAQonF,KAC9BhxF,KAAK4J,QAAQonF,IAAIm3C,aAAgB1D,GAEpCtmI,MAAMC,QAAQ8pI,KACdn7G,GAAOtf,KAAK,qBAAsBy6H,GAClCrG,EAAU7wC,IAAI7iB,WAAa+5D,GAG3BloI,KAAK4J,QAAQonF,KAAOhxF,KAAK4J,QAAQonF,IAAIo3C,qBACrCr7G,GAAOtf,KAAK,6BACRzN,KAAK4J,QAAQonF,IAAIo3C,oBAErBvG,EAAU7wC,IAAIo3C,mBACRpoI,KAAK4J,QAAQonF,IAAIo3C,oBAG3BpoI,KAAKmyD,WAAWrM,oBAAoB,OAAQ,IAAIkgE,GAAoBhmH,OACpEA,KAAKmyD,WAAWrM,oBAAoB,SAAU,IAAI87E,GAAuB5hI,KAAMA,KAAKwqF,aAAcq3C,IAClG7hI,KAAKmyD,WAAWrM,oBAAoB,OAAQ,IAAIm+E,IASpDyC,oCACI,MAAMxB,EAAU,GAGhB,GAAIllI,KAAK4J,QAAQi1G,gBACV7+G,KAAK4J,QAAQi1G,eAAehL,OAC5B7zG,KAAKmyD,WAAW8C,oBAAqB,CAGxC,MAAMozE,EAAaroI,KAAKmyD,WAAW8C,oBAC9B3jB,OAAO7zC,MAAM,WACZ05D,EAAU,GAEhBkxE,EAAW7jI,SAAQqoB,IACf,MAAM1lB,EAAQ0lB,EAAKpvB,MAAM,MACnB25D,EAASjwD,EAAM8O,QACfpS,EAAQsD,EAAM8B,KAAK,MAEzBkuD,EAAQC,GAAUvzD,KAItBqhI,EAAQC,cACFnlI,KAAK4J,QAAQi1G,eAAehL,QACtB18C,EAAQ,iBAUxB,OAJA+tE,EAAQE,aAAeplI,KAAKmyD,WAAWqgD,KAAKQ,qBAC5CkyB,EAAQG,wBAA0BrlI,KAAKmyD,WAAWo/C,0BAG3C2zB,EAQX39C,yBAAyB6O,GAErB,IAAKp2F,KAAK6mI,+BAAiCzwC,EACvC,OAGJ,MAAMjrE,GAAMkuC,EAAAA,GAAAA,MAAK,CAAEgB,GAAIr6D,KAAK6mI,+BAE5B17G,EAAI/pB,EAAE,eAAgB,CAClB4kD,MAAO,2BACP2xC,KAAMvB,IACLlwC,KAELlmD,KAAKmyD,WAAWh+B,KAAKhJ,GAYzBi4F,sBAAsBklB,GAElB,IAAKA,EACD,OAAO,EAGX,IACI,MAAMhyG,EAAOrL,KAAKnmB,MAAMwjI,GASxB,GAAIhyG,GAAwB,iBAATA,EAAmB,CAClC,MAAM92B,EAAO82B,EAAKkyE,IAElB,QAAoB,IAAThpG,EACP,OAAO82B,EAGXvJ,GAAOw4B,MAAM,yDACM,UAAW/lD,IAEpC,MAAOkD,GAGL,OAFAqqB,GAAO1V,MAAO,sBAAqBixH,IAAc5lI,IAE1C,EAGX,OAAO,EAUXwkI,kBAAkB/7G,GACd,MAAMwvB,EAAOxvB,EAAI84B,aAAa,QAE9B,GAAMtJ,IAAS36C,KAAK6mI,8BACblsF,IAAS36C,KAAK8mI,oCACdnsF,IAAS36C,KAAKs2G,6BACjB,OAAO,EAGX,MAAM4M,EAAclV,EAAE7iF,GAAKzgB,KAAK,iBAC3B6gB,OACC43F,EAAanjH,KAAKojH,sBAAsBF,GAE9C,OAAKC,IAImC,iBAApCA,EAAW3a,KAA2C2a,EAAWolB,MACjEvoI,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,uBAAmCsrB,EAAWolB,OAC1B,wBAApCplB,EAAW3a,KAAkD2a,EAAWqlB,kBAC/ExoI,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,8BAA0CsrB,EAAWqlB,mBACjC,kBAApCrlB,EAAW3a,KAClBxoG,KAAKwqF,aAAa5iE,KAAKiwE,KAAAA,uBAAmCsrB,IAGvD,ICh5BA,SAASslB,IAA2B,GAE/CtkI,EAF+C,SAG/C+xC,EAH+C,iBAI/CsxF,EAJ+C,kBAQ/CkB,EAR+C,aAW/CC,IAEA,IACIC,EADAC,GAAW,EAEX31C,EAAO,IAAIsqB,GAAKx9G,KAAKmyD,WAAWvoD,SAEpC,MAAM9M,EAAU,IAAIwpB,SAAQ,CAACC,EAAS1U,KAIlC+2H,EAAgB/2H,EAGhBqhF,EAAKngF,YACDsoE,IACA,KACI6X,OAAOnsF,KAEfmsF,EAAKngF,YACD8pB,IACA,KACQgsG,IAKJH,GAAqBA,IAGRx1C,EAAK8kB,WACdh4G,KAAK4J,QAAQzH,KACbnC,KAAK4J,QAAQtG,OACbkkI,GAGCxpB,UAAUruD,eACVsS,MAAK,KACFixB,GAAQA,EAAKplC,aAET+6E,IAOJ7oI,KAAKiJ,KAAK0/H,GAEVpiH,QAEH4lD,OAAM,EAAG90D,MAAAA,EAAOtY,QAAAA,MACbm0F,EAAKplC,aAELj8C,EAAO,CACHi3H,oBAAqBzxH,EACrBtY,QAAAA,WAIpBm0F,EAAKngF,YACD+pB,IACA,CAACisG,EAAiBhqI,EAASinI,KACvBn0H,EAAO,CACHk3H,gBAAAA,EACA/C,YAAAA,EACAjnI,QAAAA,IAEJm0F,OAAOnsF,KAGf8hI,GAAY31C,EAAK1oC,QAAQrmD,EAAI+xC,MAgBjC,OANAp5C,EAAQ0wC,OAAS,KACbq7F,GAAW,EACXD,EAAc,IACd11C,GAAQA,EAAKplC,cAGVhxD,ECpJX,MAAMiwB,IAASmB,EAAAA,EAAAA,4CASR,MAAM86G,GAcTpqI,YAAYgzB,EAAYhoB,GACpB5J,KAAK4xB,WAAaA,EAClB5xB,KAAK4J,QAAUA,EAGf5J,KAAKipI,cAAgBr/H,EAAQq/H,gBAAkBld,KAAAA,SACzChlH,EACA/G,KAAKkpI,kBAAkBt/H,EAAQq/H,eAGrC,MAAME,EAAWnpI,KAAKkpI,kBAAkBt/H,EAAQu/H,UAC1CC,EAAWppI,KAAKkpI,kBAAkBt/H,EAAQw/H,UAEhDppI,KAAKqpI,kBAAoBF,GAAYnpI,KAAKspI,kBAAkBH,GAAYA,EAAWpd,KAAAA,IACnF/rH,KAAKupI,kBAAoBH,GAAYppI,KAAKspI,kBAAkBF,GAAYA,EAAWrd,KAAAA,IACnFh/F,GAAOw4B,MAAO,iDAAgDvlD,KAAKqpI,wCACxDrpI,KAAKupI,qBAIZroH,GAAQkvD,aAAepwE,KAAKqpI,oBAAsBtd,KAAAA,MAClD/rH,KAAKqpI,kBAAoBtd,KAAAA,KAG7B/rH,KAAK4xB,WAAW/K,GACZsuE,IACA,IAAMn1F,KAAKwpI,0BACfxpI,KAAK4xB,WAAW/K,GACZsuE,IACA,IAAMn1F,KAAKwpI,0BACfxpI,KAAK4xB,WAAW/K,GACZsuE,IACA/uF,GAAWpG,KAAKypI,sBAAsBrjI,KAU9C8iI,kBAAkBj2F,GACd,MAAqB,iBAAVA,EACA30C,OAAOqN,OAAOogH,MAAerhH,MAAK7G,GAASA,IAAUovC,EAAM3xB,gBAG/D,KAUXgoH,kBAAkB1T,GAGd,SAAI10G,GAAQkvD,cAAelvD,GAAQ+9D,kBAI5BxiF,OAAOirE,gBACPjrE,OAAOirE,eAAe2Y,iBACtB5jF,OAAOirE,eAAe2Y,gBAAgB,SAAS9pC,OACjD1oC,MAAKolC,GAASA,EAAM7hB,SAAS9P,gBAAmB,SAAQs0G,MAWjE6T,sBAAsBC,GAClB,MAAM9T,EAAiB8T,EAAa5iD,MAAQ9mF,KAAKupI,kBAAoBvpI,KAAKqpI,kBACpEJ,EAAgBjpI,KAAKipI,eAAiBjpI,KAAKspI,kBAAkBtpI,KAAKipI,eAClEjpI,KAAKipI,cACL,KAENjpI,KAAKwpI,sBAAsBE,EAAc9T,EAAgBqT,GAW7DO,sBAAsBE,EAAe,KAAM9T,EAAiB,KAAMqT,EAAgB,MAC9E,MAAM7iI,EAAUsjI,GAA8B1pI,KAAK4xB,WAAW0lE,iBACxDqyC,EAAe/T,GAAkC51H,KAAKqpI,kBAC5D,IAAIO,EAAgBD,EAEpB,GAAIvjI,IAAYA,EAAQ0gF,QAAU9mF,KAAK4J,QAAQigI,sBAAuB,CAClE,MAAMC,EAAqB9pI,KAAK4xB,WAAW8qE,kBAAkBz1F,KAAIgxF,GAAeA,EAAYiI,UAE5F,IAAK,MAAM6pC,KAAUD,EAAoB,CACrC,MAAME,EAAgB5jI,EAAQ+tH,eAAe5B,iBAAiBwX,EAAQ53C,IAChE83C,EAAYD,MAAAA,OAAH,EAAGA,EAAehlB,WAI7BilB,GACGA,IAAcN,GACZzoH,GAAQkvD,aAAe65D,IAAcle,KAAAA,MAC1C6d,EAAgBK,IAI5B7jI,GAAWA,EAAQyzH,eAAe+P,EAAeX,GAUrDiB,oBACI,OAAOlqI,KAAKqpI,wfCvJpB,MAAMt8G,IAASmB,EAAAA,EAAAA,2CAMA,MAAMi8G,GAWjBvrI,YAAYolF,EAAgBomD,EAAO/jH,GAC/B,IAAK29D,IAAmBomD,EACpB,MAAM,IAAIhjH,UAAU,kDACjB,GAAI48D,GAAkBomD,EACzB,MAAM,IAAIhjH,UAAU,qDA4BxB,GAzBI48D,EACAj3D,GAAOw4B,MAAM,qCAEbx4B,GAAOw4B,MAAO,6BAA4B6kF,MAK9CpqI,KAAKqqI,SAAW,KAGhBrqI,KAAKsqI,cAAgBjkH,EAIrBrmB,KAAKuqI,MAAQ,KAGbvqI,KAAKwqI,oBAAqB,EAG1BxqI,KAAKyqI,mBAAoB,EAIrBzmD,EAAgB,CAChB,MAAM0mD,EACA1mD,EAAenT,kBACb,mBAAoB,CAChB5+B,SAAU,uCAItBjyC,KAAK2qI,eAAeD,GACpB1qI,KAAKuqI,MAAQ,mBAGNH,IACPpqI,KAAKwqI,oBAAqB,EAC1BxqI,KAAK4qI,OAASR,EACdpqI,KAAK6qI,kBASbA,iBAEI,MAAMC,EAAK,IAAI9yE,UAAUh4D,KAAK4qI,QAG9B5qI,KAAK2qI,eAAeG,GACpB9qI,KAAKuqI,MAAQ,YAQjBQ,0BACI,IAAIC,EAAW,EAEf,MAAMC,EAAS,KACPjrI,KAAKkrI,WAGTlrI,KAAK6qI,eAAe7qI,KAAK4qI,QACzBI,EAAW1+H,KAAK2O,IAAe,EAAX+vH,EAAc,IAClChrI,KAAKmrI,cAAgB57H,WAAW07H,EAAmB,IAAXD,KAG5ChrI,KAAKmrI,cAAgB57H,WAAW07H,EAAmB,IAAXD,GAQ5CI,yBACQprI,KAAKmrI,gBACLz/G,aAAa1rB,KAAKmrI,eAClBnrI,KAAKmrI,mBAAgBpkI,GAU7BskI,0BAA0BC,GACtB,IAAKtrI,KAAKwqI,mBACN,OAEJ,MAAM,KAAE5pI,EAAF,OAAQ42B,GAAW8zG,EAEzBr4C,GAAWiE,c/DqZ2B,SAASt2F,EAAM42B,GACzD,MAAO,CACHh4B,KAAM07E,GACNhxE,OAAQ,uBACR41C,WAAY,CACRl/C,KAAAA,EACA42B,OAAAA,I+D3ZqB+zG,CAA+B3qI,EAAM42B,IAC9Dx3B,KAAKwqI,oBAAqB,EAC1BxqI,KAAKsqI,cAAclkH,KAAK+0E,KAAAA,mBAA6B,KACjDn7F,KAAKorI,yBACLprI,KAAKwqI,oBAAqB,KAE9BxqI,KAAK+qI,0BAOLS,WACA,OAAOxrI,KAAKuqI,MAMhBvxE,QAII,GAHAh5D,KAAKyqI,mBAAoB,EACzBzqI,KAAKorI,yBACLprI,KAAKwqI,oBAAqB,EACtBxqI,KAAKqqI,SAAU,CACf,IACIrqI,KAAKqqI,SAASrxE,QAChB,MAAO3hD,IAETrX,KAAKqqI,SAAW,MASxBa,SACI,OAAOlrI,KAAKqqI,WAA0C,SAA7BrqI,KAAKqqI,SAASzlH,YAChC5kB,KAAKqqI,SAASzlH,aAAeozC,UAAU08C,MAQlD+2B,yBAAyB10H,GACrB/W,KAAKmsD,MAAL,IACIu/E,aAAc,iBACX30H,IAaX0zF,YAAYpwC,EAAItjD,GACZ/W,KAAKmsD,MAAM,CACPu/E,aAAc,kBACdC,WAAY50H,EACZsjD,GAAAA,IAQRuxE,oBAAoB/nI,GAChBkpB,GAAOhjB,IAAK,iBAAgBlG,MAE5B7D,KAAKmsD,MAAM,CACPu/E,aAAc,oBACdG,MAAOhoI,IAYfioI,6BAA6BC,GACzBh/G,GAAOhjB,IAAK,+BAA8BgiI,MAE1C/rI,KAAKmsD,MAAM,CACPu/E,aAAc,gCACdM,kBAAmBD,IAS3BE,mCAAmCC,GAC/Bn/G,GAAOhjB,IAAK,uDAAsDmiI,OAClElsI,KAAKmsD,MAAM,CACPu/E,aAAc,0BACdhR,eAAgBwR,IASxBC,uCAAuC3qE,GACnCz0C,GAAOhjB,IAAK,yCAAwCkhB,KAAKF,UAAUy2C,MACnExhE,KAAKmsD,MAAL,IACIu/E,aAAc,4BACXlqE,IASX4qE,qBAAqBzwC,GACjB5uE,GAAOw4B,MAAO,+CAA8Co2C,KAC5D37F,KAAKmsD,MAAM,CACPu/E,aAAc,mBACd/vC,UAAAA,IAORgvC,eAAe55D,GACX,MAAM1qD,EAAUrmB,KAAKsqI,cAErBv5D,EAAQ9Y,OAAS,KACblrC,GAAOtf,KAAM,GAAEzN,KAAKuqI,wBAQpBlkH,EAAQuB,KAAKuzE,KAAAA,oBAGjBpqB,EAAQ35C,QAAUG,IAGK,cAAfv3B,KAAKuqI,OACLx9G,GAAO1V,MAAO,kBAAiBkgB,EAAMx4B,YAI7CgyE,EAAQzY,UAAY,EAAGhkD,KAAAA,MAEnB,IAAIjW,EAEJ,IACIA,EAAM4sB,KAAKnmB,MAAMwP,GACnB,MAAO+C,GAIL,OAHAogB,KAAAA,iBAAsCpgB,QACtC0V,GAAO1V,MAAM,4CAA6C/C,EAAM+C,GAKpE,MAAMq0H,EAAertI,EAAIqtI,aAEzB,OAAQA,GACR,IAAK,qCAAsC,CACvC,MAAM,wBAAEW,EAAF,iBAA2BC,EAAmB,IAAOjuI,EAE3D0uB,GAAOw4B,MAAO,qBAAoB8mF,yBAA+CC,KACjFjmH,EAAQuB,KAAKuzE,KAAAA,yBAAoCkxC,EAAyBC,GAC1E,MAEJ,IAAK,wCAAyC,CAC1C,MAAM9J,EAAWnkI,EAAImkI,SACf3iC,EAA0B,SAAfxhG,EAAIkuI,OAErBx/G,GAAOtf,KAAM,uCAAsC+0H,YAAmB3iC,KACtEx5E,EAAQuB,KAAKuzE,KAAAA,6BAAwCqnC,EAAU3iC,GAE/D,MAEJ,IAAK,kBACDx5E,EAAQuB,KAAKuzE,KAAAA,0BAAqC98F,EAAIs8C,KAAMt8C,EAAIstI,YAEhE,MAEJ,IAAK,gBACDtlH,EAAQuB,KAAKuzE,KAAAA,wBAAmC98F,EAAIs8C,KAAMt8C,GAE1D,MAEJ,IAAK,4BAA6B,CAE9B,MAAMmuI,EAAiBnuI,EAAImuI,eAE3Bz/G,GAAOtf,KAAM,4BAA2B++H,KACxCnmH,EAAQuB,KAAKuzE,KAAAA,uBAAkCqxC,GAE/C,MAEJ,IAAK,yBAA0B,CAC3B,MAAMC,EAAmBpuI,EAAIouI,iBAEzBA,IACA1/G,GAAOtf,KAAM,2BAA0Bwd,KAAKF,UAAU0hH,MACtDpmH,EAAQuB,KAAKuzE,KAAAA,iCAA4CsxC,IAE7D,MAEJ,IAAK,cACD1/G,GAAOtf,KAAM,iCAAgCpP,EAAIsK,YACjD,MAEJ,QACIokB,GAAOw4B,MAAM,mCAAoClnD,GAMjDgoB,EAAQuB,KAAM,mBAAkB8jH,IAAgBrtI,KAKxD0yE,EAAQ3Y,QAAU7gC,IACdxK,GAAOtf,KAAM,sBAAoBzN,KAAKyqI,kBAAoB,SAAW,WAElD,cAAfzqI,KAAKuqI,QACAvqI,KAAKyqI,oBACN19G,GAAO1V,MAAO,mBAAkBkgB,EAAM32B,QAAQ22B,EAAMC,UACpDx3B,KAAKqrI,0BAA0B9zG,KAKvCv3B,KAAKqqI,SAAW,MAIpBrqI,KAAKqqI,SAAWt5D,EAUpB5kB,MAAMugF,GACF,MAAM37D,EAAU/wE,KAAKqqI,SAErB,IAAKrqI,KAAKkrI,SAEN,MADAn+G,GAAO1V,MAAM,2CACP,IAAI5I,MAAM,qBAGpBsiE,EAAQ58C,KAAKlJ,KAAKF,UAAU2hH,2EC9XpC,MAAM3/G,IAASmB,EAAAA,EAAAA,sCAKXhN,GAAQ6/D,eACRp8E,EAAQ,KAGZ,MAAM6lF,GAAe,IAAItkE,MASnBymH,GAAsB,CACxBhrE,MAAO,CACH3lC,OAAQ,CACJilC,MAAO,IACPjmD,IAAK,IACLC,IAAK,KAET8gB,MAAO,CACHklC,MAAO,KACPjmD,IAAK,KACLC,IAAK,OAOjB,IAAI2xH,GAAsB,UAEtBC,IAAqB,EAGrBC,IAAY,EAGZC,IAAa,EAGbC,IAAY,EAGZC,IAAa,EAGblmB,GAAS,KAEb,MAAMmmB,GAA0B1pH,SAASG,cAAc,SACjDwpH,QAC6C,IAAtCD,GAAwBE,UAErC,IACIC,GADAC,GAAmB,GAMvB,SAASC,MA0FT,SAASC,GAAyBC,EAAIhmI,GAClC,MAAMimI,EACA7tD,QAAQp4E,IAAWA,EAAO0pB,iBAAiB5xB,OAAS,EACpDouI,EACA9tD,QAAQp4E,IAAWA,EAAOg8D,iBAAiBlkE,OAAS,EACpDquI,EAAqB,IAEE,IAAzBH,EAAG7hI,QAAQ,WACXgiI,EAAmBjsE,MAAQgsE,IAEF,IAAzBF,EAAG7hI,QAAQ,WACXgiI,EAAmBnsE,MAAQisE,GAG/BljD,GAAa5iE,KAAKuzE,KAAAA,oBAA+ByyC,GA4CrD,SAASC,GAA0BC,GAC/B,MAAMC,EACAD,EAAWxnI,QAAOjF,GAAgB,eAAXA,EAAE01C,OAAuBx3C,OAChDyuI,EACAF,EAAWxnI,QAAOjF,GAAgB,gBAAXA,EAAE01C,OAAwBx3C,OACjD0uI,EACAH,EAAWxnI,QAAOjF,GAAgB,eAAXA,EAAE01C,OAAuBx3C,OAChD2uI,EACAJ,EAAWxnI,QAAOjF,GAAgB,gBAAXA,EAAE01C,OAAwBx3C,OAEvDuuI,EAAWtpI,SAAQ2pI,IACf,MAAMruF,EAAa,CACf,yBAA4BiuF,EAC5B,0BAA6BC,EAC7B,yBAA4BC,EAC5B,0BAA6BC,EAC7B,UAAaC,EAAO9rE,SACpB,gBAAmB8rE,EAAOC,QAC1B,YAAeD,EAAOp3F,KACtB,aAAgBo3F,EAAO/rE,OAG3B6wB,GAAWiE,chEjHa,mBgEiHmBp3C,MAenD,SAASuuF,GAAmBC,IAzE5B,SAAsCC,GAClC,OAAIA,EAAWhvI,SAAW+tI,GAAiB/tI,QAOvCgvI,EAAWtnI,IAAIunI,GAAuBh9H,OAAOvI,KAAK,MAC1CqkI,GACCrmI,IAAIunI,GAAuBh9H,OAAOvI,KAAK,IAQpD,SAASulI,EAAsB/gI,GAC3B,OAAOwd,KAAKF,UAAU,CAClBgsB,KAAMtpC,EAAKspC,KACXsrB,SAAU50D,EAAK40D,SACf+rE,QAAS3gI,EAAK2gI,QACdhsE,MAAO30D,EAAK20D,MACZqsE,OAAQhhI,EAAKghI,WAkDjBC,CAA6BJ,KAYjChB,GAX8BgB,EAWK9nI,MAAM,GACzCumB,GAAOtf,KAAK,qCAAsC6/H,IAElDO,GAA0BP,IAG1B9iD,GAAa5iE,KAAKuzE,KAAAA,wBAAmCmyC,IAErD9iD,GAAa5iE,KAAKuzE,KAAAA,oBAA+BmyC,KAinBrD,MAAMqB,GAAW,IA3mBjB,cAAuBjoC,GAInB9nG,cACI8+E,MAAM8M,IAYVrkE,KAAKvc,EAAU,IAAI,MAkmBQglI,EAjmBW,kBAAvBhlI,EAAQmjI,aACfA,GAAanjI,EAAQmjI,WACrBhgH,GAAOtf,KAAM,gBAAes/H,OAEC,kBAAtBnjI,EAAQojI,YACfA,GAAYpjI,EAAQojI,UACpBjgH,GAAOtf,KAAM,eAAcu/H,OAEE,kBAAtBpjI,EAAQkjI,YACfA,GAAYljI,EAAQkjI,UACpB//G,GAAOtf,KAAM,eAAcq/H,OAEG,kBAAvBljI,EAAQqjI,aACfA,GAAarjI,EAAQqjI,WACrBlgH,GAAOtf,KAAM,gBAAew/H,OAEY,kBAAxC,UAAOrjI,EAAQk9G,oBAAf,aAAO,EAAsBC,UAC7BA,GAASn9G,EAAQk9G,aAAaC,OAC9Bh6F,GAAOtf,KAAM,WAAUs5G,OAG3BtqH,OAAOwtF,cAAcojD,IACrBA,QAA4BtmI,EAExBma,GAAQ+9D,iBACRj/E,KAAK6uI,sBAAwBnwE,kBAE7B1+D,KAAK8uI,uBAAoB/nI,EAEzB/G,KAAK+uI,YAAc,UAAS,GAAE5qI,IAK1B,MACkB,iBAAPA,EACDA,EACAkkH,GAAAA,mBAA2BlkH,IAEzCnE,KAAKgvI,WAAa,EAAG7qI,GAAAA,KAASA,IAE9BnE,KAAK6uI,sBAAwBnwE,kBAE7B1+D,KAAK8uI,mBAsjBcF,EArjBS,CAAC5hF,EAASvlD,KAC1BulD,IACAA,EAAQiiF,UAAYxnI,IAojBjC,SAASulD,EAASvlD,GAErB,MAAMomG,EAAM+gC,EAAsBrmI,MAAMomI,GAAU5mI,WA4BlD,OA1BIN,GACOknI,GAASO,wBAAwB,WACjCznI,EAAO0pB,gBACP1pB,EAAO0pB,iBAAiB5xB,QAGxBstI,IACP7/E,EAAQogF,UAAUuB,GAASQ,wBACtBhjE,OAAM,SAASijE,GACZ,MAAMx/H,EACA,IAAI+qE,GAAgBy0D,EAAI,KAAM,CAAE,gBAEtC33G,KAAAA,8BAAmD,CAC/Ci2C,QAAS1tE,KACTw3B,OAAQ5nB,IAGZmd,GAAOhF,KACH,sGAGAilC,EACAp9C,MAITi+F,IA9kBH7tG,KAAK+uI,YAAc,EAAG5qI,GAAAA,KAASA,EAC/BnE,KAAKgvI,WAAa,EAAG7qI,GAAAA,KAASA,GAGlCnE,KAAKkuE,cAAgBhtD,GAAQu+D,mBAAqBv+D,GAAQ+9D,gBACpD,CAAEle,SAAU,CACV,CAAEsuE,yBAA0B,KAC5B,CAAEC,yBAAyB,KAE7B,GAENC,GAAAA,KAAoB3lI,GAEhB5J,KAAKwvI,yBACLxvI,KAAKgiE,kBAAiB7qD,IAClBm2H,GAAmBn2H,EAAG3Q,MAAM,GAE5BumB,GAAOw4B,MAAM,sBAAuB+nF,IACpCO,GAA0BP,IAE1B9iD,GAAa5iE,KACTuzE,KAAAA,sBACAmyC,IAEApsH,GAAQo/D,4BACR3f,UAAUC,aAAa93C,iBACnB,gBACA,IAAM9oB,KAAKgiE,iBAAiBurE,MAIhCF,GAA4B5wI,OAAO6sF,aAC/B,IAAMtpF,KAAKgiE,iBAAiBurE,KA7WP,QAwXzCvrE,iBAAiBvyD,GACbkxD,UAAUC,aAAaoB,mBAClBC,MAAKC,IACFmsE,GAAmBnsE,GACnBzyD,EAASyyD,MAEZiK,OAAM90D,IACH0V,GAAOhF,KAAM,iCAAgC1Q,KAC7Cg3H,GAAmB,IACnB5+H,EAAS,OAarBm+D,cAAc6hE,EAAWjuE,EAAc,GAAIlV,EAAU,GACjD,OAAO,IAAIhmC,SAAQ,CAACC,EAAS1U,KACzB,IAAI69H,EAAYC,GAAiB,EAEV,iBAAZrjF,IAAyBrmC,MAAMqmC,IAAYA,EAAU,IAC5DojF,EAAangI,YAAW,KACpBogI,GAAiB,EACjBD,OAAa3oI,EACb8K,EAAO,IAAI8oE,GAAgBE,OAC5BvuB,IAGPqU,UAAUC,aAAawC,aAAa5B,GAC/BS,MAAKx6D,IACFslB,GAAOhjB,IAAI,sBACXyjI,GAAyBiC,EAAWhoI,GAC/BkoI,SACyB,IAAfD,GACPhkH,aAAagkH,GAEjBnpH,EAAQ9e,OAGf0kE,OAAM90D,IACH0V,GAAOhF,KAAM,wCAAuC1Q,KAAS4T,KAAKF,UAAUy2C,MAC5E,MAAMilD,EAAa,IAAI9rC,GAAgBtjE,EAAOmqD,EAAaiuE,GAEtDE,SACyB,IAAfD,GACPhkH,aAAagkH,GAEjB79H,EAAOwF,IAGPovG,EAAWtkH,OAAS04E,IACpB2yD,GAAyBiC,OAAW1oI,SAmBxD6oI,mBACI,OAAKL,GAAAA,cAIE,IAAIjpH,SAAQ,CAACC,EAAS1U,KACzB09H,GAAAA,cACI9nI,IACI8e,EAAQ9e,MAEZ4P,IACIxF,EAAOwF,SATRiP,QAAQzU,OAAO,IAAIpD,MAAM,sCAyBxCohI,kBAAkBC,EAAmB,GAAIroI,GACrC,MAAMsoI,EAAiB,GAEjBC,EAAuBF,EAAiBr6G,SAAS,SACjDi4G,EACAjmI,GAAUA,EAAO0pB,iBAAiB5xB,OAAS,EAE7CywI,IAAyBtC,GACzBqC,EAAehtI,KAAK,SAGxB,MAAMktI,EAAuBH,EAAiBr6G,SAAS,SACjDk4G,EACAlmI,GAAUA,EAAOg8D,iBAAiBlkE,OAAS,EAMjD,OAJI0wI,IAAyBtC,GACzBoC,EAAehtI,KAAK,SAGjBgtI,EAqBXG,+BAA+BtmI,GAC3B,MAAM,QACF0iD,GAEA1iD,EADGumI,oXAFP,CAGIvmI,EAHJ,aAKMwmI,EAAuB,GAYvBC,EAA4B,WAK9B,IAFwC,KAFtBF,EAAajuE,SAAW,IAE1Bt2D,QAAQ,WAGpB,OAAO0a,QAAQC,UAGnB,MAAM,2BACF+pH,GACAH,EAIJ,GAAIG,EAA4B,CAC5B,MAAMC,EACAjD,IAAoBA,GAAiB5iI,MAAKyjI,GACxB,eAAhBA,EAAOp3F,OACCo3F,EAAO9rE,WAAaiuE,GACrBnC,EAAO/rE,QAAUkuE,KAEhC,IAAKC,EACD,OAAOjqH,QAAQzU,OAAO,IAAI8oE,GACtB,CAAEx4E,KAAM,+BACR,GACA,CAAEmuI,KAIV,MAAMR,EAAmB,CAAE,SACrBtuE,EAAc,CAChBG,MAAO,CACHU,SAAUkuE,EAAeluE,WAMjC,OAAOriE,KAAK4tE,cAAckiE,EAAkBtuE,EAAalV,GACpD2V,MAAKx6D,IACK,CACHqgH,WAAY,SACZrgH,OAAAA,MAKhB,OAAOzH,KAAK4vI,oBACd1pI,KAAKlG,MAqDDwwI,EAA6B,WAC/B,MACMC,GADYN,EAAajuE,SAAW,CAAE,QAAS,UACX57D,QAAO6nI,GAAqB,UAAXA,GAAiC,UAAXA,IAEjF,IAAKsC,EAAwBlxI,OACzB,OAAO+mB,QAAQC,UAGnB,MAAMi7C,EAjkBlB,SAAwBisE,EAAK,GAAI7jI,EAAU,IAGvC,MAAM43D,EAAckvE,IAAAA,CAAU9mI,EAAQ43D,aAAemrE,IAErD,GAAIc,EAAG7hI,QAAQ,UAAY,EAAG,CAE1B,GAAI+kI,KAAY/mI,EAAQwiF,YAAa,CACjC,MAAMvpF,EAAI8tI,KAAY/mI,EAAQwiF,YAE9B5qB,EAAYG,MAAM3lC,OAAS,CAAEilC,MAAOp+D,EAAEm5B,QACtCwlC,EAAYG,MAAM5lC,MAAQ,CAAEklC,MAAOp+D,EAAEk5B,OAuBzC,GApBKylC,EAAYG,QACbH,EAAYG,MAAQ,IAOpBzgD,GAAQw+D,kBACJle,EAAYG,MAAM3lC,QAAUwlC,EAAYG,MAAM3lC,OAAOilC,MACrDO,EAAYG,MAAM3lC,OAAS,CAAEilC,MAAOO,EAAYG,MAAM3lC,OAAOilC,OAE7Dl0C,GAAOhF,KAAK,8DAEZy5C,EAAYG,MAAM5lC,OAASylC,EAAYG,MAAM5lC,MAAMklC,MACnDO,EAAYG,MAAM5lC,MAAQ,CAAEklC,MAAOO,EAAYG,MAAM5lC,MAAMklC,OAE3Dl0C,GAAOhF,KAAK,8DAGhBne,EAAQgnI,eACRpvE,EAAYG,MAAMU,SAAWz4D,EAAQgnI,mBAClC,CACH,MAAM/uE,EAAaj4D,EAAQi4D,YAAcgvE,KAAAA,KAEzCrvE,EAAYG,MAAME,WAAaA,QAGnCL,EAAYG,OAAQ,EAsBxB,OAnBI8rE,EAAG7hI,QAAQ,UAAY,GAClB41D,EAAYC,OAAsC,kBAAtBD,EAAYC,QACzCD,EAAYC,MAAQ,IAGxBD,EAAYC,MAAQ,CAChBulD,iBAAkBimB,KAAeH,GACjCzqE,SAAUz4D,EAAQknI,YAClB5pB,kBAAmB6lB,KAAeD,GAClC3lB,kBAAmB6lB,KAAcF,IAGjC/lB,IACAzoH,OAAO+jB,OAAOm/C,EAAYC,MAAO,CAAEwlD,aAAc,KAGrDzlD,EAAYC,OAAQ,EAGjBD,EAigBqBuvE,CAAeN,EAAyBN,GAI5D,OAFApjH,GAAOtf,KAAK,0BAA2Bwd,KAAKF,UAAUy2C,IAE/CxhE,KAAK4tE,cAAc6iE,EAAyBjvE,EAAalV,IAClEpmD,KAAKlG,MA0CP,OAAOqwI,IACFpuE,MAlGiC,SAAS+uE,GAC3C,IAAKA,EACD,OAGJ,MAAM,OAAEvpI,EAAF,SAAUs8D,EAAV,WAAoB+jD,GAAekpB,EAEnCC,EAAqBxpI,EAAO0pB,iBAElC,GAAI8/G,EAAmB1xI,OAAQ,CAC3B,MAAM2xI,EAAqB,IAAIhgH,YAAY+/G,GAE3Cb,EAAqBrtI,KAAK,CACtB0E,OAAQypI,EACRntE,SAAAA,EACA+jD,WAAAA,EACAh4F,MAAOohH,EAAmB//G,iBAAiB,KAInD,MAAMggH,EAAqB1pI,EAAOg8D,iBAElC,GAAI0tE,EAAmB5xI,OAAQ,CAC3B,MAAM6xI,EAAqB,IAAIlgH,YAAYigH,GAE3Cf,EAAqBrtI,KAAK,CACtB0E,OAAQ2pI,EACRrtE,SAAAA,EACA+jD,WAAAA,EACAh4F,MAAOshH,EAAmB3tE,iBAAiB,GAC3Ck4B,UAAWC,KAAAA,cAqElB35B,KAAKuuE,GACLvuE,MAlC6B,SAASovE,GACvC,IAAKA,EACD,OAGJ,MAAMC,EAAcD,EAASlgH,iBAE7B,GAAImgH,EAAY/xI,OAAQ,CACpB,MAAMgyI,EAAc,IAAIrgH,YAAYogH,GAEpClB,EAAqBrtI,KAAK,CACtB0E,OAAQ8pI,EACRzhH,MAAOyhH,EAAYpgH,iBAAiB,GACpCqgH,QAASrB,EAAaqB,UAI9B,MAAM/vC,EAAc4vC,EAAS5tE,iBAE7B,GAAIg+B,EAAYliG,OAAQ,CACpB,MAAMkyI,EAAc,IAAIvgH,YAAYuwE,GAEpC2uC,EAAqBrtI,KAAK,CACtB0E,OAAQgqI,EACR3hH,MAAO2hH,EAAYhuE,iBAAiB,GACpCk4B,UAAWC,KAAAA,OACX41C,QAASrB,EAAaqB,cAS7BvvE,MAAK,IAAMmuE,IACXjkE,OAAM90D,IACH+4H,EAAqB5rI,SAAQ,EAAGiD,OAAAA,MAC5BzH,KAAK0xI,gBAAgBjqI,MAGlB6e,QAAQzU,OAAOwF,MAUlCm4H,wBACI,OAAO3vD,QACHlf,UAAUC,cACHD,UAAUC,aAAaoB,kBAUtCktE,wBAAwByC,GACpB,MAAmB,WAAfA,GAA0C,gBAAfA,EACpBxE,GAMS,eAAfwE,GAA8C,UAAfA,IAA2BzwH,GAAQy+D,eAY3E+xD,gBAAgBE,GACPA,IAILA,EAAYluE,YAAYl/D,SAAQsrB,IACxBA,EAAM7D,MACN6D,EAAM7D,UAKV2lH,EAAY3lH,MACZ2lH,EAAY3lH,OAMZ2lH,EAAYC,SACZD,EAAYC,WAQpBC,0BACI,OAAOvC,GAAAA,cAWXwC,qBAAqB1vE,GACjB,OAAKriE,KAAKkvI,wBAAwB,UAK3BhC,GAAwBE,UAAU/qE,GACpCJ,MAAK,KACF2qE,GAAsBvqE,EACtBwqE,IAAqB,EAErB9/G,GAAOhjB,IAAK,8BAA6Bs4D,KAEzCmoB,GAAa5iE,KAAKuzE,KAAAA,4BACd94B,MAZD/7C,QAAQzU,OACX,IAAIpD,MAAM,gDAqBtB05G,2BAA2BC,GACvBmnB,GAAAA,2BAA0CnnB,GAQ9C+mB,uBACI,OAAOvC,GAQXoF,oCACI,OAAO1E,GAOX2E,2CACI,OAAO3E,GAAiBz/H,MAAKsgI,GAAUtuD,QAAQsuD,EAAO/rE,SAO1D8vE,4BAA4B/D,GACxB,MAAML,EAAa,GACbqE,EAAa,CACf,SAAYhE,EAAO9rE,SACnB,KAAQ8rE,EAAOp3F,KACf,MAASo3F,EAAO/rE,MAChB,QAAW+rE,EAAOC,SAKtB,OAFAN,EAAW/qI,KAAKovI,GAET,CAAErE,WAAAA,GAWbsE,gBAAgB5wE,EAAa7F,GACpB6F,EAAYT,WACbS,EAAYT,SAAW,IAK3BS,EAAYT,SACNS,EAAYT,SAASz6D,QACnBlF,IAAMA,EAAEgO,eAAe,gCAE3BusD,GACA6F,EAAYT,SAASh+D,KAAK,CAAEsvI,2BAA4B,WAgDpE,MC37BMtlH,IAASmB,EAAAA,EAAAA,wCAKTokH,GAAoB,CACtB,WAAc,SACd,aAAgB,WAChB,YAAe,WAMJ,MAAMC,WAAmBrsH,MAcpCtnB,YACQgzB,EACAnqB,EACAqoB,EACA0iH,EACAC,EACA92C,GACJje,QAGA19E,KAAK8oB,iBAAmB9oB,KAAK+S,YAC7B/S,KAAKgpB,oBAAsBhpB,KAAK+pB,IAAM/pB,KAAK2T,eAM3C3T,KAAK0yI,WAAa,GAClB1yI,KAAK4xB,WAAaA,EAClB5xB,KAAKwoF,YAAc,EACnBxoF,KAAKR,KAAOizI,EACZzyI,KAAK8vB,MAAQA,EACb9vB,KAAK27F,UAAYA,EACjB37F,KAAKk3B,SAAW,IAAI2O,IASpB7lC,KAAK2hF,UAAW,EAShB3hF,KAAK2yI,uBAAyBH,EAE9BxyI,KAAK4yI,WAAWnrI,GAWpBorI,+BAA+BlsH,GACvBzF,GAAQkvD,YACRpwE,KAAK8vB,MAAMgjH,QAAUnsH,EAErB3mB,KAAKyH,OAAOsrI,WAAapsH,EAUjCqsH,YAAYxzI,EAAMmnB,GACd,GAAK2rH,GAAkBljI,eAAe5P,IAWtC,GANImnB,EACA3mB,KAAKk3B,SAASjO,IAAIzpB,EAAMmnB,GAExB3mB,KAAKk3B,SAASgoC,OAAO1/D,GAGrBQ,KAAKyH,OACL,IAAK,MAAMqoB,KAAS9vB,KAAKyH,OAAOi8D,YAC5B5zC,EAAMwiH,GAAkB9yI,IAASmnB,OAZrCoG,GAAO1V,MAAO,wBAAuB7X,KAqB7CyzI,sBACI,GAAKjzI,KAAKyH,OAAV,CAOA,IAAK,MAAMjI,KAAQQ,KAAKk3B,SAAS3yB,OAE7B,IAAK,MAAM2uI,KAAclzI,KAAKyH,OAAOg8D,iBACjCyvE,EAAWZ,GAAkB9yI,SAASuH,EAG1C/G,KAAK2yI,wBACL3yI,KAAK6yI,oCAA+B9rI,QAbpCgmB,GAAOhF,KACF,GAAE/nB,0DAuBf4yI,WAAWnrI,GACP,GAAIzH,KAAKyH,SAAWA,IAIpBzH,KAAKyH,OAASA,EAMVzH,KAAKyH,QAAQ,CACb,IAAK,MAAMjI,KAAQQ,KAAKk3B,SAAS3yB,OAC7BvE,KAAKgzI,YAAYxzI,EAAMQ,KAAKk3B,SAAS/c,IAAI3a,IAEzCQ,KAAK2yI,wBACL3yI,KAAK6yI,+BAA+B7yI,KAAK2yI,yBAQrDQ,eACI,OAAOnzI,KAAK27F,UAMhBnE,UACI,OAAOx3F,KAAKR,KAMhBqxB,eACI,OAAO7wB,KAAKw3F,YAAcrF,GAS9BmR,qBACI,OAAOtjG,KAAK8vB,OAAS9vB,KAAK8vB,MAAMqmE,MAMpC1kE,eACI,OAAOzxB,KAAKw3F,YAAcrF,GAQ9BtgE,UACI,MAAM,IAAIpjB,MAAM,+BAQpB2kI,oBACI,OAAOpzI,KAAK6wB,gBAAkB7wB,KAAK6xB,UAMvCZ,oBACI,OAAOjxB,KAAKyH,OAOhB4rI,cACI,OAAOrzI,KAAKyH,OAASzH,KAAKyH,OAAOtD,GAAK,KAO1CmvI,WACI,OAAOtzI,KAAK8vB,MAOhByjH,gBACI,OAAOvzI,KAAK8vB,MAAMsyC,MAOtBoxE,aACI,OAAOxzI,KAAK8vB,MAAQ9vB,KAAK8vB,MAAM3rB,GAAK,KAQxCsvI,gBACI,OAAIzzI,KAAK6wB,eACE,MAGJ7wB,KAAK27F,UAAY37F,KAAK27F,UAAY,UAS7C+3C,wBAAwBC,GAChB3zI,KAAK4xB,YAAc+hH,GACnB3zI,KAAK4xB,WAAWgiH,eAAe5zI,KAAM2zI,GAc7CzoF,OAAOyoF,GACC3zI,KAAKyH,SACLzH,KAAK4zI,eAAeD,GACpBE,GAAAA,kBAA2BF,EAAW3zI,KAAKyH,SAE/CzH,KAAK0yI,WAAW3vI,KAAK4wI,GACrB3zI,KAAK0zI,wBAAwBC,GAC7B3zI,KAAK8zI,mBAAmBH,GAW5BI,OAAOJ,GACH,IAAK,IAAInwE,EAAKxjE,KAAK0yI,WAAYpzI,EAAIkkE,EAAGjkE,OAAS,EAAGD,GAAK,IAAKA,EAAG,CAC3D,MAAM8B,EAAIoiE,EAAGlkE,GAERq0I,IACD3zI,KAAKg0I,eAAe5yI,GACpByyI,GAAAA,kBAA2BzyI,EAAG,OAE7BuyI,GAAavyI,IAAMuyI,GACpBnwE,EAAGj2D,OAAOjO,EAAG,GAIjBq0I,IACA3zI,KAAKg0I,eAAeL,GACpBE,GAAAA,kBAA2BF,EAAW,OAW9CC,eAAeD,IAWfK,eAAeL,IAYfG,mBAAmBH,IASnB3xD,UAKI,OAJAhiF,KAAKgqB,qBAELhqB,KAAK2hF,UAAW,EAETr7D,QAAQC,UAOnB0tH,mBAQA/zC,QACI,OAAIlgG,KAAKyH,OACEosI,GAAAA,YAAqB7zI,KAAKyH,QAG9B,KASXo4F,WACI,YAAkC,IAAvB7/F,KAAKyH,OAAO8kI,QACZvsI,KAAKyH,OAAO8kI,OAc3BzvC,cAActU,EAAY9B,GACtB,IAAIwtD,EAAgB1rD,EAMhBtnE,GAAQ0/D,8BAA0C,IAAR8F,GAAuB1mF,KAAKu3F,YACtE28C,EAAgB,GAGhBl0I,KAAKwoF,aAAe0rD,GACpBl0I,KAAKwoF,WAAa0rD,EAClBl0I,KAAK4nB,KACDy4E,GACA6zC,EACAxtD,IAIuB,IAApB1mF,KAAKwoF,YACS,IAAlB0rD,GACAl0I,KAAK6xB,YACJ7xB,KAAKsjG,sBACTtjG,KAAK4nB,KACDy4E,GACA6zC,GAQZC,UACI,MAAMjsE,EAAWloE,KAAKqzI,cAChB7yE,EAAUxgE,KAAKwzI,aAErB,OAAOtrE,GAAY1H,EAAW,GAAE0H,KAAY1H,IAAY,KAW5D4zE,eAAexH,GACX,OAAKiH,GAAAA,wBAAiC,UAOlC7zI,KAAKyxB,eACEnL,QAAQC,UAIfD,QAAQhU,IACJtS,KAAK0yI,WAAWzrI,KACZ+lD,GACIA,EAAQogF,UAAUR,GACbzgE,OAAM90D,IAOH,MANA0V,GAAOhF,KACH,+GAGAilC,EACA31C,GACEA,QAGrB4qD,MAAK,KACFjiE,KAAK4nB,KACDy4E,GACAusC,MA5BLtmH,QAAQzU,OACX,IAAIpD,MAAM,iDCvc1B,MAAMse,IAASmB,EAAAA,EAAAA,6CAMA,MAAMmmH,WAAwB9B,GAoBzC3zI,aAAY,SACRyjE,EADQ,WAERR,EAFQ,UAGRka,EAHQ,WAIRqQ,EAJQ,MAKRkoD,EALQ,SAMRvwE,EANQ,WAOR+jD,EAPQ,OAQRrgH,EARQ,MASRqoB,EATQ,UAUR6rE,EAVQ,QAWR61C,EAAU,KAEV9zD,MACqB,KACjBj2E,EACAqoB,GAC4B,IAAM9vB,KAAK4nB,KAAKq1E,KAC5ClhB,EACA4f,GAEJ37F,KAAKu0I,sBAAuB,EAC5B,MAAMC,EAAShD,EAAQ9mI,MAAKhI,GAAKA,EAAE2pG,UAAUrsG,QAEzCw0I,GACAx0I,KAAKy0I,mBAAmBD,GAQ5Bx0I,KAAKs0I,MAAQA,EACbt0I,KAAK+jE,SAAWA,EAChB/jE,KAAK8nH,WAAaA,EAIlB9nH,KAAKosF,WAAat8D,EAAMo6C,cAAcluC,OACtCh8B,KAAK00I,qBAAuBtoD,EAI5BpsF,KAAK20I,aAAe7kH,EAAMihH,iBAGrBzyI,OAAOiG,KAAKvE,KAAK20I,cAAcp1I,QAAUo8F,IAAcC,KAAAA,SACxD57F,KAAK20I,aAAe,CAChB34G,OAAQlM,EAAMo6C,cAAcluC,OAC5BD,MAAOjM,EAAMo6C,cAAcnuC,QAInC/7B,KAAKqiE,SAAWA,EAUhBriE,KAAK40I,cAAgBtuH,QAAQC,UAS7BvmB,KAAK60I,YAAchzE,EAMnB7hE,KAAK80I,aAAc,EAKnB90I,KAAK+0I,cAAe,EAOpB/0I,KAAKg1I,eAAgB,EAQrBh1I,KAAKi1I,cAAkC,KAAlBj1I,KAAKqiE,cAAkBt7D,EAAY/G,KAAKqiE,SAE7DriE,KAAKk1I,cAAgB,EAErBl1I,KAAKm1I,wBAA0BjzE,IAC3B,MAAMkzE,EAAkBp1I,KAAKi1I,cAE7Bj1I,KAAKq1I,+BAA+BnzE,SAMO,IAA/BliE,KAAKszI,WAAW1uH,iBACa,IAAvB5kB,KAAKi1I,gBACX/yE,EAAQx3D,MAAKrJ,GAAKA,EAAEghE,WAAariE,KAAKi1I,sBAOf,IAApBG,QAAiE,IAAvBp1I,KAAKi1I,iBAE1Dj1I,KAAK80I,aAAc,IAQvB90I,KAAK6wB,gBAAkBgjH,GAAAA,wBAAiC,YACxD7zI,KAAKs1I,4BAA8Bt1I,KAAKo0I,eAAeluI,KAAKlG,MAC5D6zI,GAAAA,YACI14C,KAAAA,4BACAn7F,KAAKs1I,8BAGbzB,GAAAA,YAAqB14C,KAAAA,wBAAmCn7F,KAAKm1I,yBAE7Dn1I,KAAKu1I,gCAQTC,UACI,OAAIx1I,KAAKyxB,gBAAkBzxB,KAAKu3F,UAGrBv3F,KAAK80I,YAGsB,UAA/B90I,KAAKszI,WAAW1uH,YAA0B5kB,KAAK80I,YAO1DS,gCACSv1I,KAAKy1I,qCAIVz1I,KAAKgzI,YAAY,cAAc,KAC3BhzI,KAAKk1I,cAAgBz4I,OAAOi/F,YAAYtsE,MACxCpvB,KAAK01I,gCAGT11I,KAAKgzI,YAAY,gBAAgB,KAC7BhzI,KAAK01I,6BACLziD,GAAW+D,oBlEEM,gBkEAb,CACI,WAAch3F,KAAKw3F,UACnB,WAAc,QACd3zF,MAAOpH,OAAOi/F,YAAYtsE,MAAQpvB,KAAKk1I,mBAI/Cl1I,KAAKyxB,gBAAkBzxB,KAAK27F,YAAcC,KAAAA,QAC1C57F,KAAKgzI,YAAY,eAAe,KACvBhzI,KAAK21I,mBACN31I,KAAK01I,iCAWrBD,mCAEI,OAAQz1I,KAAKyxB,gBAAkBzxB,KAAK27F,YAAcC,KAAAA,QAMtD85C,6BACI,MAAM7xI,GAAS7D,KAAK21I,kBAEpB31I,KAAK4nB,KAAKw1E,GAAqBv5F,GAG/BovF,GAAWiE,clEgIwB,SAASnb,EAAWl4E,GAC3D,MAAO,CACHi8C,WAAY,CACR,WAAci8B,EACdl4E,MAAAA,GAEJqG,OAAQ,4BACR1K,KAAM07E,IkEvImB06D,CAA4B51I,KAAKw3F,UAAW3zF,IACrEovF,GAAWwD,QAAQxrE,KAAKF,UAAU,CAC9B5oB,KAAMi7F,GACNrzF,IAAKlG,KAYbwxI,+BAA+BnzE,GAC3B,MAAMpyC,EAAQ9vB,KAAKszI,WACbv8F,EAAQ,GAAEjnB,EAAMinB,YACtB,IAAIo3F,EAASjsE,EAAQx3D,MAAKrJ,GAAKA,EAAE01C,OAASA,GAAQ11C,EAAE+gE,QAAUtyC,EAAMsyC,QAEpE,IAAK+rE,GAAiC,YAAvBnuI,KAAKi1I,cAA6B,CAI7C,MAAM7yE,GAAStyC,EAAMsyC,OAAS,IAAIn6D,QAAQ,aAAc,IAExDkmI,EAASjsE,EAAQx3D,MAAKrJ,GAAKA,EAAE01C,OAASA,GAAQ11C,EAAE+gE,QAAUA,IAI1DpiE,KAAKi1I,cADL9G,EACqBA,EAAO9rE,cAEPt7D,EAW7B6rI,WAAWnrI,GACPi2E,MAAMk1D,WAAWnrI,GAEbA,GAEAzH,KAAK61I,WAAa71I,KAAKm0I,UACvBpnH,GAAOw4B,MAAO,qBAAoBvlD,KAAK61I,iBAAiB71I,SAExD+sB,GAAOw4B,MAAO,4BAA2BvlD,QAWjDy0I,mBAAmBD,GACfx0I,KAAK81I,cAAgBtB,EACrBx0I,KAAK+1I,gBAAkB/1I,KAAKyH,OAC5BzH,KAAK4yI,WAAW5yI,KAAK81I,cAAcE,YAAYh2I,KAAK+1I,kBACpD/1I,KAAK8vB,MAAQ9vB,KAAKyH,OAAOi8D,YAAY,GASzCuyE,oBACQj2I,KAAK81I,gBACL91I,KAAK81I,cAAcI,aACnBl2I,KAAK4yI,WAAW5yI,KAAK+1I,iBACrB/1I,KAAK+1I,gBAAkB,KACvB/1I,KAAK8vB,MAAQ9vB,KAAKyH,OAASzH,KAAKyH,OAAOi8D,YAAY,GAAK,MAShEyyE,oBAAoB3B,GACZx0I,KAAK81I,gBACL91I,KAAKi2I,oBACLj2I,KAAK81I,mBAAgB/uI,GAErBytI,GACAx0I,KAAKy0I,mBAAmBD,GAUhC4B,UAAU5B,GACN,QAAkC,IAAvBx0I,KAAK81I,oBAAmD,IAAXtB,EACpD,OAAOluH,QAAQC,UAGnB,QAAsB,IAAXiuH,IAA2BA,EAAOnoC,UAAUrsG,MACnD,OAAOsmB,QAAQzU,OAAO,IAAIpD,MAAM,kCAGpC,IAAkC,IAA9BzO,KAAKu0I,qBACL,OAAOjuH,QAAQzU,OAAO,IAAIpD,MAAM,mCAKpC,GAAIzO,KAAKu3F,YAAcv3F,KAAK6wB,eAGxB,OAFA7wB,KAAK81I,cAAgBtB,EAEdluH,QAAQC,UAGnB,MAAMqL,EAAa5xB,KAAK4xB,WAExB,OAAKA,GASL5xB,KAAKu0I,sBAAuB,EAGrB3iH,EAAWJ,YAAYxxB,MACzBiiE,MAAK,KACFjiE,KAAKm2I,oBAAoB3B,GACrBx0I,KAAKyxB,gBACLzxB,KAAK0yI,WAAWluI,SAAQ6xI,GAAQxC,GAAAA,kBAA2BwC,EAAMr2I,KAAKyH,UAGnEmqB,EAAWhB,SAAS5wB,SAE9BiiE,MAAK,KACFjiE,KAAKu0I,sBAAuB,KAE/BpoE,OAAM90D,IAMH,MAHArX,KAAKu0I,sBAAuB,EAC5Bv0I,KAAKm2I,sBACLppH,GAAO1V,MAAM,sCAAuCA,GAC9CA,OA7BVrX,KAAKm2I,oBAAoB3B,GACrBx0I,KAAKyxB,gBACLzxB,KAAK0yI,WAAWluI,SAAQ6xI,GAAQxC,GAAAA,kBAA2BwC,EAAMr2I,KAAKyH,UAGnE6e,QAAQC,WAiCvBkgE,OACI,OAAOzmF,KAAKs2I,gBAAe,GAQ/BC,SACI,OAAOv2I,KAAKs2I,gBAAe,GAY/BA,eAAengD,GACX,MAAMqgD,EAAWx2I,KAAKy2I,UAAUvwI,KAAKlG,KAAMm2F,GAI3C,OAFAn2F,KAAK40I,cAAgB50I,KAAK40I,cAAc3yE,KAAKu0E,EAAUA,GAEhDx2I,KAAK40I,cAWhB6B,UAAUtgD,GACN,GAAIn2F,KAAKu3F,YAAcpB,EACnB,OAAO7vE,QAAQC,UAGnB,GAAIvmB,KAAK2hF,SACL,OAAOr7D,QAAQzU,OAAO,IAAI8oE,GAAgBJ,KAG9C,IAAI7M,EAAUpnD,QAAQC,UAGtB,MAAMmwH,EAAc,IAAM3pH,GAAOtf,KAAM,QAAOzN,SAASm2F,KAEvD,GAAIn2F,KAAK6wB,gBACE7wB,KAAK27F,YAAcC,KAAAA,UAClB16E,GAAQs+D,8BAChBk3D,IAKI12I,KAAK81I,eAAiB91I,KAAK81I,cAAcU,SACzCx2I,KAAK81I,cAAcU,SAASrgD,GACrBn2F,KAAK8vB,QACZ9vB,KAAK8vB,MAAM8sE,SAAWzG,QAEvB,GAAIA,EACPzoB,EAAU,IAAIpnD,SAAQ,CAACC,EAAS1U,KAC5B6kI,IACA12I,KAAK22I,mCACD,KACQ32I,KAAK81I,eACL91I,KAAKi2I,oBAMTj2I,KAAKizI,sBACLjzI,KAAK42I,aACL52I,KAAK4yI,WAAW,MAChBrsH,MAEJ1U,UAEL,CACH6kI,IAGA,MAAMG,EAAgB,CAClBjG,eAAgB5wI,KAAK82I,cACrB50E,QAAS,CAAEiwB,IACXq/C,QAASxxI,KAAK81I,cAAgB,CAAE91I,KAAK81I,eAAkB,GACvDj0E,WAAY7hE,KAAK+2I,uBAGrBrpE,EACMmmE,GAAAA,+BAAwCv1I,OAAO+jB,OAC7C,GACAw0H,EACA,CAAEr1E,YAAa,CAAEG,MAAO3hE,KAAK20I,iBAErCjnE,EAAUA,EAAQzL,MAAK+0E,IAEnB,MAAMj7D,EAAY/7E,KAAKw3F,YAAcrF,GAAsBA,GAAkBnyF,KAAKw3F,UAC5Ey/C,EAAaD,EAAYtsI,MAAK+C,GAAQA,EAAKqiB,MAAMinB,OAASglC,IAEhE,IAAIk7D,EAaA,MAAM,IAAIt8D,GAAgBH,IAU9B,OAtBIx6E,KAAK4yI,WAAWqE,EAAWxvI,QAC3BzH,KAAK8vB,MAAQmnH,EAAWnnH,MAIpB9vB,KAAK27F,YAAcs7C,EAAWt7C,YAC9B5uE,GAAOhF,KACF,GAAE/nB,6CACHA,KAAK27F,UAAWs7C,EAAWt7C,WAC/B37F,KAAK27F,UAAYs7C,EAAWt7C,WAMhC37F,KAAK81I,eACL91I,KAAKy0I,mBAAmBz0I,KAAK81I,eAGjC91I,KAAK0yI,WAAWzrI,KACZovI,GAAQxC,GAAAA,kBAA2BwC,EAAMr2I,KAAKyH,UAE3CzH,KAAKk3I,oCAIpB,OAAOxpE,EACFzL,MAAK,KACFjiE,KAAKm3I,gBAAgBhhD,GACrBn2F,KAAK4nB,KAAKwxD,GAAoBp5E,SAU1Ck3I,iCACI,OAAKl3I,KAAK4xB,WAcH,IAAItL,SAAQ,CAACC,EAAS1U,KACzB7R,KAAK4xB,WAAWwlH,uBAAuBp3I,MAClCiiE,KAAK17C,GAASlP,GAASxF,EAAO,IAAIpD,MAAM4I,SAftCiP,QAAQC,UA0BvBowH,kCAAkCnpE,EAAiBh1C,GAC1Cx4B,KAAK4xB,WAKV5xB,KAAK4xB,WAAWylH,wBAAwBr3I,MAAMiiE,KAC1CuL,GACAn2D,GAASmhB,EAAc,IAAI/pB,MAAM4I,MANjCm2D,IAgBR2pE,gBAAgB1wD,GACRzmF,KAAK4xB,YAAc5xB,KAAK4xB,WAAW+lE,MACnC33F,KAAK4xB,WAAW+lE,KACZ33F,KAAK6wB,eACC,eACA,gBAAgB41D,GAalCzE,UACI,IAAItU,EAAUpnD,QAAQC,UAwBtB,OApBIvmB,KAAK81I,gBACLpoE,EAAU1tE,KAAKo2I,aAGfp2I,KAAK4xB,aACL87C,EAAUA,EAAQzL,MAAK,IAAMjiE,KAAK4xB,WAAWJ,YAAYxxB,SAGzDA,KAAKyH,SACLzH,KAAK42I,aACL52I,KAAK+zI,UAGTF,GAAAA,eAAwB14C,KAAAA,wBAAmCn7F,KAAKm1I,yBAE5Dn1I,KAAKs1I,6BACLzB,GAAAA,eAAwB14C,KAAAA,4BACpBn7F,KAAKs1I,6BAGN5nE,EAAQzL,MAAK,IAAMyb,MAAMsE,YAUpCuV,UAEI,OAAKv3F,KAAKyH,WAGNzH,KAAKyxB,gBAAmBzxB,KAAK6/F,cAK7B7/F,KAAK81I,eAAiB91I,KAAK81I,cAAcv+C,QAClCv3F,KAAK81I,cAAcv+C,WAGtBv3F,KAAK8vB,QAAU9vB,KAAK8vB,MAAM8sE,SAStC06C,eAAe1lH,GACX5xB,KAAK4xB,WAAaA,EAMlB,IAAK,IAAItyB,EAAI,EAAGA,EAAIU,KAAK0yI,WAAWnzI,OAAQD,IACxCU,KAAK0zI,wBAAwB1zI,KAAK0yI,WAAWpzI,IASrDuyB,UACI,OAAO,EAQXilH,cACI,OAAO92I,KAAKi1I,eAAiBj1I,KAAKqiE,SAStC3wC,mBACI,OAAO1xB,KAAK4xB,YAAc5xB,KAAK4xB,WAAWipE,WAU9CmC,yBAAyBtW,EAAKsL,GACtBA,EAAY,IACZhyF,KAAK+0I,cAAe,GAExB,MAAM7jE,EAAqBwV,EAAI85C,qBAE3BxgI,KAAKg1I,eAAwC,cAAvB9jE,IACtB3hE,YAAW,KACFvP,KAAK+0I,eACNhoH,GAAOhF,KAAM,GAAE/nB,mDACTgyF,KAENiB,GAAWe,UAAUzR,UlE3hBZ,sBkE2hBqC,CAAE,WAAcviF,KAAKw3F,eAExE,KACHx3F,KAAKg1I,eAAgB,GAU7B+B,sBACI,GAAI/2I,KAAKyxB,gBAAkBzxB,KAAK27F,YAAcC,KAAAA,OAAkB,SAQ5D,MAAM27C,EAAa,WAAG,EAAAv3I,KAAK8vB,OAAMo6C,mBAAd,aAAG,UAEtB,OAAIqtE,GAAiB,eAAgBA,EAC1BA,EAAc11E,gBAGO,IAArB7hE,KAAK60I,YACL70I,KAAK60I,YAMThE,KAAAA,MASf+F,aASI52I,KAAKw3I,uBAAwB,EAE7B,IACI3D,GAAAA,gBAAyB7zI,KAAKyH,QADlC,QAGIzH,KAAKw3I,uBAAwB,GAiBrCC,gBACQz3I,KAAKyxB,gBACEzxB,KAAK27F,YAAcC,KAAAA,QACiB,mBAA7B57F,KAAK8vB,MAAM2nH,gBACzBz3I,KAAK8vB,MAAM2nH,gBAEXz3I,KAAK60I,YACC70I,KAAK60I,cAAgBhE,KAAAA,YACjBA,KAAAA,KACAA,KAAAA,aAelB8E,kBACI,SAAI31I,KAAKyxB,iBACDzxB,KAAKu3F,YAAav3F,KAAKw3I,uBAAyBx3I,KAAK27F,YAAcC,KAAAA,YAItE57F,KAAKyH,SAaKzH,KAAK03I,eAAiB13I,KAAK+1I,gBAAkB/1I,KAAKyH,QAEnDi8D,YAAY71D,MAAKiiB,KACxB,eAAgBA,GAA+B,SAArBA,EAAMlL,YACzB,UAAWkL,IAA0B,IAAhBA,EAAMqmE,SAQ7C33F,WACI,MAAQ,cAAawB,KAAKs0I,SAASt0I,KAAKw3F,6BCn2BhD,MA+EA,GA/Ec,SAASpxF,EAASsC,GAgC5B,YA/BuB,IAAZtC,QAAoD,IAAlBA,EAAQC,OAAyBlI,MAAMC,QAAQgI,EAAQC,QAChGD,EAAQC,MAAM7B,SAAQoE,IACdA,EAAMoE,SAAWpE,EAAMoE,QAAQzN,SAC/BqJ,EAAMa,MAAQ,GACdb,EAAMoE,QAAQxI,SAAQ2J,IAClB7P,OAAOiG,KAAK4J,GAAQ3J,SAAQZ,IACN,OAAdA,GAGJgF,EAAMa,MAAM1G,KAAK,CACboB,GAAIgK,EAAOhK,GACXP,UAAAA,EACAC,MAAOsK,EAAOvK,kBAInBgF,EAAMoE,SAIbpE,EAAM6B,YAAc7B,EAAM6B,WAAWlL,QACrCqJ,EAAM6B,WAAWjG,SAAQymH,SACU,IAApBA,EAAUxhH,OAClBtL,MAAMC,QAAQ6sH,EAAUxhH,SACvBwhH,EAAUxhH,MAAQwhH,EAAUxhH,MAAMR,KAAK,YAOpDC,GAAAA,MAAgB9C,EAASsC,IA+CpC,GArCc,SAASvC,GACnB,MAAMC,EAAU8C,GAAAA,MAAgB/C,GAiChC,YA/BuB,IAAZC,QAAoD,IAAlBA,EAAQC,OAAyBlI,MAAMC,QAAQgI,EAAQC,QAChGD,EAAQC,MAAM7B,SAAQoE,SAES,IAAhBA,EAAMa,OAAyBtL,MAAMC,QAAQwK,EAAMa,SAC1Db,EAAMoE,QAAU,GAChBpE,EAAMa,MAAMjF,SAAQ+E,IAChB,MAAMouI,EAAQ/uI,EAAMoE,QAAQswH,WAAUnvH,GAAUA,EAAOhK,KAAOoF,EAAKpF,KAEnE,GAAIwzI,GAAS,EACT/uI,EAAMoE,QAAQ2qI,GAAOpuI,EAAK3F,WAAa2F,EAAK1F,UACzC,CACH,MAAMghB,EAAM,CAAE1gB,GAAIoF,EAAKpF,IAEvB0gB,EAAItb,EAAK3F,WAAa2F,EAAK1F,MAC3B+E,EAAMoE,QAAQjK,KAAK8hB,cAGpBjc,EAAMa,YAIe,IAArBb,EAAM6B,YAA8BtM,MAAMC,QAAQwK,EAAM6B,aAC/D7B,EAAM6B,WAAWjG,SAAQymH,IACU,iBAApBA,EAAUxhH,QACjBwhH,EAAUxhH,MAAQwhH,EAAUxhH,MAAMhM,MAAM,YAOrD2I,GCjFLwxI,GAAc,CAAE,QAAS,QAAS,QAClCC,GAAe5sB,GAAaA,EAAUvgH,MAAKotI,GAAyB,QAAlBA,EAAIltI,YACtDmtI,GAAe9sB,GAAaA,EAAUvgH,MAAKotI,GAAyB,QAAlBA,EAAIltI,YAW5D,SAASotI,GAAmBpvI,EAAO4B,EAAUytI,EAAcC,GACvD,IAAKtvI,IAAU4B,EACX,OAEJ,MAAM2tI,EAAiBtzH,GAAOqzH,EAAWxtI,MAAKyD,GAAUA,EAAOhK,GAAG3F,aAAeqmB,IAEjFra,EAASf,MAAMjF,SAAQqgB,IACnBjc,EAAMoE,QAAQjK,KAAKo1I,EAAetzH,IAGlC,MAAMuzH,EAAkBH,EAAantI,SAAS+Z,EAAK,KAAKna,MAAKotI,GAAyB,QAAlBA,EAAIltI,YAExE,GAAIwtI,EAAiB,CACjB,MAAMC,EAAcD,EAAgB3uI,MAAMiB,MAAKlI,GAAKA,IAAMqiB,IAE1Djc,EAAMoE,QAAQjK,KAAKo1I,EAAeE,IAClCzvI,EAAM6B,WAAW1H,KAAKq1I,OAK9BxvI,EAAM6B,WAAW1H,KAAKyH,GAgB1B,SAAS8tI,GAAkB1vI,EAAOW,EAAM0uI,EAAcC,GAClD,IAAKtvI,IAAUW,EACX,OAMJ,GAJAX,EAAMoE,QAAU,GAChBpE,EAAM6B,WAAa,IAGdwtI,EAAa1uI,EAAKpF,IAInB,OAHAyE,EAAMoE,QAAQjK,KAAKwG,QACnBX,EAAMuD,KAAO5C,EAAK4C,MAItB,MAGM3B,EAAWqtI,GAAaI,EAAa1uI,EAAKpF,KAC1CyI,EAAWmrI,GAAaE,EAAa1uI,EAAKpF,KAGhD,GAAIqG,EACAwtI,GAAmBpvI,EAAO4B,EAAUytI,EAAcC,QAC/C,GAAItrI,EAAU,CAEjB,MAAM2rI,EAAY3rI,EAASnD,MAAMiB,MAAKlI,GAAKA,IAAM+G,IAC3CivI,EAAYX,GAAaI,EAAaM,IAExCC,EACAR,GAAmBpvI,EAAO4vI,EAAWP,EAAcC,IAGnDtrI,EAASnD,MAAMjF,SAAQqgB,IACnBjc,EAAMoE,QAAQjK,KAnBH8hB,CAAAA,GAAOqzH,EAAWxtI,MAAKyD,GAAUA,EAAOhK,GAAG3F,aAAeqmB,IAmBlDszH,CAAetzH,OAEtCjc,EAAM6B,WAAW1H,KAAK6J,IAK9BhE,EAAMuD,KAAOvD,EAAMoE,QAAQ,GAAGb,KAsBlC,SAASssI,GAA0BlvI,EAAM0uI,EAAcS,GASnD,IAAKA,EAAOhuI,MARcisC,KAClBA,EAAM3pC,SACC2pC,EAAM3pC,QAAQa,MAAKM,GAAUA,EAAOhK,KAAOoF,EAAKpF,OAM1B,CAGjC,IAAK8zI,EAAa1uI,EAAKpF,IACnB,OAAO,EAEX,MAAMqG,EAAWqtI,GAAaI,EAAa1uI,EAAKpF,KAC1CyI,EAAWmrI,GAAaE,EAAa1uI,EAAKpF,KAEhD,OAAIqG,EACOkuI,EAAO7qI,MAAK8oC,GAASA,EAAM3pC,SAC3B2pC,EAAM3pC,QAAQa,MAAKgX,GAAOA,EAAI1gB,GAAG3F,aAAegM,EAASf,MAAM,UAC/DmD,GAAYrD,EAAKpF,GAAG3F,aAAeoO,EAASnD,MAAM,KAGlDgvI,GAFW,CAAEt0I,GAAIyI,EAASnD,MAAM,IAEKwuI,EAAcS,GAOlE,OAAO,EAkDJ,MAAMC,GAMTC,QAAQtiG,GACJ,IAAKA,GAA0C,iBAApBA,EAAYnwC,IAGnC,OAFA2D,QAAQie,KAAK,mDAENuuB,EAIX,MAAMlwC,EAAU8C,GAAgBotC,EAAYnwC,KAG5C,IAAKC,EAAQC,QAAUD,EAAQC,MAAM9G,OAGjC,OAFAuK,QAAQie,KAAK,iCAENuuB,EAIX,GAAIlwC,EAAQC,MAAMgM,OAAMrP,IAAqC,IAAhC40I,GAAYhsI,QAAQ5I,EAAE4T,OAG/C,OAFA9M,QAAQie,KAAK,uDAENuuB,EAGX,MAAMjwC,EAAQ,GACRwyI,EAAezyI,EAAQC,MAE7BD,EAAQC,MAAQ,GAChBwyI,EAAar0I,SAAQoE,IACjB,MAAMpJ,EAAOoJ,EAAMpJ,KAEnB,GAAa,gBAATA,EAIA,OAHAoJ,EAAMgO,IAAM,YACZvQ,EAAMuC,EAAMgO,KAAOhO,GAIvB,QAA2B,IAAhBvC,EAAM7G,GAAuB,CACpC,MAAMs5I,EAAQpI,GAAU9nI,GAGpBkwI,EAAM9rI,SAAW7O,MAAMC,QAAQ06I,EAAM9rI,UACrC8rI,EAAM9rI,QAAQxI,SAAQ2J,IAClBvF,EAAMuD,KAAOgC,EAAOhC,KAAOvD,EAAMuD,YAAcgC,EAAOhC,QAUzD2sI,EAAMruI,YAAe7B,EAAMuD,OAC5B2sI,EAAMruI,WAAa,WAEhBquI,EAAM3sI,KACb2sI,EAAMliI,IAAMpX,EACZ6G,EAAM7G,GAAQs5I,OACPlwI,EAAMuD,OAETvD,EAAMoE,SAAW7O,MAAMC,QAAQwK,EAAMoE,WACrC3G,EAAM7G,GAAMwN,SAAW3G,EAAM7G,GAAMwN,SAAW,IAAIwD,OAAO5H,EAAMoE,eAEnC,IAArBpE,EAAM6B,YAA8BtM,MAAMC,QAAQwK,EAAM6B,cAC/DpE,EAAM7G,GAAMiL,WAAapE,EAAM7G,GAAMiL,WAAW+F,OAAO5H,EAAM6B,iBAIzErE,EAAQC,MAAQ/H,OAAOqN,OAAOtF,GAG9B,MAAM0yI,EAAS,GAEfz6I,OAAOqN,OAAOtF,GAAO7B,SAAQmyC,IACD,aAApBA,EAAMtzC,WACN01I,EAAOh2I,KAAK4zC,EAAM//B,QAK1BxQ,EAAQkpH,OAAO9qH,SAAQmG,IACA,WAAfA,EAAMnL,OACNmL,EAAMquI,KAAOD,EAAO9vI,KAAK,SAKjC7C,EAAQ6yI,aAAe,CACnBC,SAAU,MACVvU,MAAO,KAEX,MAAMwU,EAASjwI,GAAgB9C,GAE/B,OAAO,IAAI6H,sBAAsB,CAC7BzO,KAAM82C,EAAY92C,KAClB2G,IAAKgzI,IAYbC,cAAc9iG,EAAa0jF,EAAU,MACjC,IAAK1jF,GAA0C,iBAApBA,EAAYnwC,IAGnC,OAFA2D,QAAQie,KAAK,mDAENuuB,EAIX,MAAMlwC,EAAU8C,GAAgBotC,EAAYnwC,KAG5C,IAAKC,EAAQC,QAAUD,EAAQC,MAAM9G,OAGjC,OAFAuK,QAAQie,KAAK,iCAENuuB,EAIX,GAAIlwC,EAAQC,MAAM9G,OAAS,GAAK6G,EAAQC,MAAMgM,OAAMrP,IAAqC,IAAhC40I,GAAYhsI,QAAQ5I,EAAE4T,OAG3E,OAFA9M,QAAQie,KAAK,6CAENuuB,EAEX,MAAM+iG,EAAcrf,EAAU9wH,GAAgB8wH,EAAQ7zH,KAAO,KACvDmzI,EAzJd,SAA4BC,EAASC,GACjC,IAAKD,IAAYC,GAAoC,IAAzBD,EAAQlzI,MAAM9G,QAAyC,IAAzBi6I,EAAQnzI,MAAM9G,OACpE,OAAO,EAGX,MAAMk6I,EAAWF,EAAQlzI,MAAM,GACzBqzI,EAAWF,EAAQnzI,MAAM,GAE/B,OAAOozI,EAAS/W,WAAagX,EAAShX,UAAY+W,EAAS9W,SAAW+W,EAAS/W,OAiJxDgX,CAAmBvzI,EAASizI,GACzCO,EAAcxzI,EAAQC,MAAM,GAAGq8H,SAC/BmX,EAAYzzI,EAAQC,MAAM,GAAGs8H,OAC7BpI,EAAiBn0H,EAAQC,MAAM,GAAGqjH,YAClCrjH,EAAQ,GAEdD,EAAQC,MAAM7B,SAAQoE,IAClB,MAAMpJ,EAAOoJ,EAAMpJ,KAEnB,GAAa,gBAATA,EAAwB,CACxB,IAAK65I,IAAgBA,EAAYhzI,MAAO,CACpC,MAAMyzI,EAAWpJ,GAAU9nI,GAK3B,OAHAkxI,EAASljI,IAAMtY,OAAOiG,KAAK8B,GAAO9G,OAAOf,gBACzC6H,EAAMuC,EAAMgO,KAAOkjI,GAIvB,MAAMC,EAAeV,EAAYhzI,MAAMi3H,WAAUt6H,GAAKA,EAAExD,OAASA,IAOjE,YALIu6I,IACAV,EAAYhzI,MAAM0zI,GAAgBnxI,EAClCywI,EAAYhzI,MAAM0zI,GAAcnjI,IAAMmjI,IAO9C,MAAMC,EAhNlB,SAA8B/B,GAC1B,MAAM+B,EAAa,GAEnB,OAAK/B,GAAiB95I,MAAMC,QAAQ65I,IAGpCA,EAAazzI,SAAQmG,IACbA,EAAMlB,OAAStL,MAAMC,QAAQuM,EAAMlB,QACnCkB,EAAMlB,MAAMjF,SAAQ+E,SACgB,IAArBywI,EAAWzwI,KAClBywI,EAAWzwI,GAAQ,IAEvBywI,EAAWzwI,GAAMxG,KAAK4H,SAK3BqvI,GAbIA,EA4MgBC,CAAqBrxI,EAAM6B,YAK9C,GAAK7B,EAAMoE,QAUXpE,EAAMoE,QAAQxI,SAAQ,CAAC+E,EAAM28D,KAGzB,IAAK38D,EAAK4C,KACN,OAIJ,IAAKktI,IAAgBA,EAAYhzI,MAAO,CACpC,GAAIoyI,GAA0BlvI,EAAMywI,EAAY17I,OAAOqN,OAAOtF,IAC1D,OAEJ,MAAMyzI,EAAWpJ,GAAU9nI,GAU3B,OARAkxI,EAASljI,IAAMtY,OAAOiG,KAAK8B,GAAO9G,OAAOf,WACzCs7I,EAASz2I,UAAY6iE,GAEK,aAApBt9D,EAAMvF,UADN,WAC8C,WACpDy2I,EAASI,gBAAanzI,EACtBuxI,GAAkBwB,EAAUvwI,EAAMywI,EAAYpxI,EAAMoE,cACpD3G,EAAMyzI,EAASljI,KAAOkjI,GAM1B,GAAIrB,GAA0BlvI,EAAMywI,EAAYX,EAAYhzI,OACxD,OAEJ,MAAMyzI,EAAWpJ,GAAU9nI,GAE3BkxI,EAASljI,IAAMyiI,EAAYhzI,MAAM9G,OAAOf,WACxCs7I,EAASz2I,UAAY,WACrBi1I,GAAkBwB,EAAUvwI,EAAMywI,EAAYpxI,EAAMoE,SACpDqsI,EAAYhzI,MAAMtD,KAAK+2I,WA3CvB,IAAKT,EAAa,CACd,MAAMS,EAAWpJ,GAAU9nI,GAE3BkxI,EAASljI,IAAMtY,OAAOiG,KAAK8B,GAAO9G,OAAOf,WACzC6H,EAAMuC,EAAMgO,KAAOkjI,MA0C/B1zI,EAAQC,MAAQgzI,EAAcA,EAAYhzI,MAAQ/H,OAAOqN,OAAOtF,GAChE,MAAM2yI,EAAO,GAEb5yI,EAAQC,MAAM7B,SAAQoE,IAClBowI,EAAKj2I,KAAK6F,EAAMgO,KACZ0iI,IACA1wI,EAAM85H,SAAWkX,EACjBhxI,EAAM+5H,OAASkX,EACfjxI,EAAM8gH,YAAc6Q,MAK5Bn0H,EAAQkpH,OAAO9qH,SAAQmG,IACA,WAAfA,EAAMnL,OACNmL,EAAMquI,KAAOA,EAAK/vI,KAAK,SAK/B7C,EAAQ6yI,aAAe,CACnBC,SAAU,MACVvU,MAAO,KAIXv+H,EAAQkf,OAAO00B,iBACf,MAAMmgG,EAAYjxI,GAAgB9C,GAElC,OAAO,IAAI6H,sBAAsB,CAC7BzO,KAAM82C,EAAY92C,KAClB2G,IAAKg0I,oBCvcV,SAASC,GAAiBzvI,GAC7B,OAAOG,SAASH,EAAMlB,MAAMhM,MAAM,KAAK,GAAI,IAQxC,SAAS48I,GAAmB1vI,GAC/B,OAAOG,SAASH,EAAMlB,MAAMhM,MAAM,KAAK,GAAI,IAQ/C,SAAS68I,GAAc1xI,GACnB,OAAKA,EAAMa,MAIJb,EAAMa,MACRxC,KAAIyC,GAAYA,EAASvF,KACzBmC,QAAO,CAACiD,EAAM1I,EAAOY,IAAUA,EAAMmK,QAAQrC,KAAU1I,IACvDtB,OANM,EAaf,MAAMg7I,GAOF37I,YAAYgK,GACR,IAAKA,EACD,MAAM,IAAI6F,MAAM,sBAGpBzO,KAAK4I,MAAQA,EAUba,YAKA,OAJKzJ,KAAK4I,MAAMa,QACZzJ,KAAK4I,MAAMa,MAAQ,IAGhBzJ,KAAK4I,MAAMa,MASlBA,UAAMA,GACNzJ,KAAK4I,MAAMa,MAAQA,EAOnBpG,gBACA,OAAOrD,KAAK4I,MAAMvF,UAOlBA,cAAUA,GACVrD,KAAK4I,MAAMvF,UAAYA,EAOvBoH,iBAKA,OAJKzK,KAAK4I,MAAM6B,aACZzK,KAAK4I,MAAM6B,WAAa,IAGrBzK,KAAK4I,MAAM6B,WAQlBA,eAAWA,GACXzK,KAAK4I,MAAM6B,WAAaA,EAW5B+vI,iBAAiBC,EAAYC,GACzB,MAAM92I,EAAY5D,KAAKyJ,MAAMiB,MACzBiwI,GAAWA,EAAQx2I,KAAOs2I,GACvBE,EAAQ/2I,YAAc82I,IAG7B,OAAO92I,GAAaA,EAAUC,MAQlC+2I,WAAWpqB,GACFxwH,KAAK4I,MAAMa,OAAUzJ,KAAK4I,MAAMa,MAAMlK,SAI3CS,KAAK4I,MAAMa,MACLzJ,KAAK4I,MAAMa,MAAMnD,QAAOq0I,GAAWA,EAAQx2I,KAAOqsH,KAQ5DqqB,iBAAiBF,GACb36I,KAAKyJ,MAAM1G,KAAK43I,GAWpBG,UAAUlwI,EAAWnB,GACjB,OAAOzJ,KAAKyK,WAAWC,MACnBC,GACIA,EAAMC,YAAcA,KACXnB,GAASA,IAAUkB,EAAMlB,SAS9CsxI,WAAWnwI,GACP,OAAO5K,KAAKyK,WAAWnE,QACnBqE,GAASA,EAAMC,YAAcA,IASrCowI,uBAAuBpwI,EAAWqwI,GAC9B,OAAOj7I,KAAKyK,WAAWC,MACnBC,GAASA,EAAMC,YAAcA,GACtBwvI,GAAiBzvI,KAAWswI,IAS3CC,eAAe/uI,GACX,OAAOnM,KAAKyJ,MAAMiB,MACdiwI,GAAiC,SAAtBA,EAAQ/2I,YACF,OAATuI,GAAiBwuI,EAAQ92I,QAAUsI,KAOnDgvI,eACI,OAAOb,GAAct6I,KAAK4I,OAQ9BwyI,wBACI,YAAiCr0I,IAA1B/G,KAAK4I,MAAM6B,WAQtB4wI,sBACI,MAAMt/D,EAAY/7E,KAAK4I,MAAMpJ,KAE7B,GAAkB,UAAdu8E,EACA,MAAM,IAAIttE,MACL,qCAAoCstE,MAK7C,GAAiB,IAFAu+D,GAAct6I,KAAK4I,OAIhC,OAAO5I,KAAK4I,MAAMa,MAAM,GAAGtF,GAI/B,GAAInE,KAAK4I,MAAM6B,WAAY,CACvB,MAAMD,EAAWxK,KAAK86I,UAAU,OAEhC,GAAItwI,EACA,OAAO4vI,GAAiB5vI,GAE5B,MAAMoC,EAAW5M,KAAK86I,UAAU,OAEhC,GAAIluI,EACA,OAAOwtI,GAAiBxtI,GAE5B,MAAM0uI,EAAWt7I,KAAK86I,UAAU,UAEhC,GAAIQ,EACA,OAAOlB,GAAiBkB,IAcpCC,WAAWzvI,GACP,MAAMc,EAAW5M,KAAKg7I,uBAAuB,MAAOlvI,GAGpD,OAAOc,GAAYytI,GAAmBztI,GAO1C4uI,WACI,OAAOx7I,KAAKyJ,MACPxC,KAAIyC,GAAYA,EAASvF,KACzBmC,QAAO,CAACiD,EAAM1I,EAAOY,IAAUA,EAAMmK,QAAQrC,KAAU1I,IAQhE46I,uBACI,MAAM1/D,EAAY/7E,KAAK4I,MAAMpJ,KAE7B,GAAkB,UAAdu8E,EACA,MAAM,IAAIttE,MACL,0CAAyCstE,KAGlD,MAAM2/D,EAAa17I,KAAKw7I,WAExB,IAAK,MAAMG,KAAiB37I,KAAKyK,WAI7B,GAAgC,QAA5BkxI,EAAc/wI,WACqB,WAA5B+wI,EAAc/wI,UAAwB,CAE7C,MAAM2sC,EAAgB8iG,GAAmBsB,GAEzCD,EAAWnuI,OACPmuI,EAAW9vI,QAAQ2rC,GAAgB,GAI/C,OAAOmkG,EAMXE,iBACI,OAAO3wH,KAAKF,UAAU/qB,KAAK4I,MAAM6B,YAQrCoxI,qBAAqBtyI,GACZvJ,KAAK4I,MAAM6B,aAIhBzK,KAAK4I,MAAM6B,WAAazK,KAAK4I,MAAM6B,WAC9BnE,QAAO26G,IAAqD,IAAxCA,EAAUx3G,MAAMmC,QAAS,GAAErC,QAOxDuyI,wBAAwBlxI,GACf5K,KAAK4I,MAAM6B,aAIhBzK,KAAK4I,MAAM6B,WACLzK,KAAK4I,MAAM6B,WACRnE,QAAO26G,GAAaA,EAAUr2G,YAAcA,KAQzDmxI,YAAYC,EAASC,GACbj8I,KAAK4I,MAAMa,OACXzJ,KAAK4I,MAAMa,MAAMjF,SAAQkF,IACjBA,EAASvF,KAAO63I,IAChBtyI,EAASvF,GAAK83I,MAW9BC,aAAavxI,GACT3K,KAAKyK,WAAW1H,KAAK4H,IAoBtB,MAAMwxI,GAOTv9I,YAAYw9I,GACRp8I,KAAKq8I,UAAYnzI,GAAAA,MAAgBkzI,GAYrCE,YAAYvgE,GACR,MAAMwgE,EACAv8I,KAAKq8I,UAAUh2I,MAAMqE,MAAK9B,GAASA,EAAMpJ,OAASu8E,IAExD,OAAOwgE,EAAgB,IAAIhC,GAAUgC,GAAiB,KAQ1DC,WACI,OAAOtzI,GAAAA,MAAgBlJ,KAAKq8I,YCpapC,MAAMtvH,IAASmB,EAAAA,EAAAA,4CAUA,MAAMuuH,GAQjB79I,YAAY8nF,EAAKg2D,GACb18I,KAAK0mF,IAAMA,EACX1mF,KAAK08I,gBAAkBA,EAkB3BC,+BAA+BC,GAE3B,MAAMC,EAAc78I,KAAK0mF,IAAI4L,eAAeH,IAE5C,IAAK0qD,EAAYt9I,OACb,OAAO,EACuB,IAAvBs9I,EAAYt9I,QACnBwtB,GAAO1V,MACF,GAAErX,KAAK0mF,qEAC6Bm2D,GAG7C,MAAMhyB,EAAa+xB,EAAYN,YAAY,SAE3C,IAAKzxB,EAKD,OAJA99F,GAAOw4B,MACF,GAAEvlD,KAAK0mF,+DAGL,EAGX,IAAI6pC,GAAW,EAEf,IAAK,MAAM2iB,KAAc2J,EAAa,CAClC,MAAM1mD,EAAQ+8C,EAAW37C,UACnBq6C,EAAcsB,EAAWjiH,oBACzB6rH,EAAW5J,EAAWv3C,YAAcC,KAAAA,OAKpCmhD,EACAnL,GAAe5xI,KAAK0mF,IAAIs2D,kBAAkBpL,GAGhD,IAFsBkL,IAAa3mD,GAAU4mD,EAGzC,SAIJ,MAAME,EACAj9I,KAAK0mF,IAAIw2D,gBACLl9I,KAAK0mF,IAAIy2D,UAAUnzI,UACnB,CAAEhK,KAAK0mF,IAAI02D,eAAeC,mBAEpC,IAAKJ,EAAc19I,OAAQ,CACvBwtB,GAAO1V,MAAO,wBAAuB67H,QAAiBlzI,KAAK0mF,OAE3D,SAGJ6pC,GAAW,EAMX1F,EAAWxnH,UAAY8oH,KAAAA,SAGvB,MAMMmxB,EAAgB,YANFL,EAAc,KAQlC,IAAK,MAAMzsB,KAAWysB,EAElBpyB,EAAW+vB,WAAWpqB,GAGtB3F,EAAWgwB,iBAAiB,CACxB12I,GAAIqsH,EACJ5sH,UAAW,QACXC,MAAOy5I,IAEXzyB,EAAWgwB,iBAAiB,CACxB12I,GAAIqsH,EACJ5sH,UAAW,OACXC,MAAOqvI,EAAW2C,aAG1B,GAAIoH,EAAc19I,OAAS,EAAG,CAC1B,MAAMoL,EAAQ,CACVlB,MAAOwzI,EAAch0I,KAAK,KAC1B2B,UAAW,OAGVigH,EAAWiwB,UAAUnwI,EAAMC,UAAWD,EAAMlB,QAE7CohH,EAAWqxB,aAAavxI,GAQ3B3K,KAAK0mF,IAAI98E,QAAQsxG,YAClBl7G,KAAK0mF,IAAI62D,YAAYC,gBAAgB3yB,GAI7C,OAAO0F,EAWXktB,uBAAuB1hE,EAAWvb,EAAS0H,EAAW,MAClD,IAAM6T,IAAavb,EAGf,OAFAzzC,GAAOhF,KAAM,yCAAwCy4C,mBAAyBub,gBAEvE,KAEX,MAAM2hE,EAAO19I,KAAK0mF,IAAIviF,GAKtB,MAAiB,MAAb+jE,GAAqBA,EAIjB,GAAEA,KAAYw1E,KAAQl9E,KAAWk9E,IAH7B,GAAE19I,KAAK08I,mBAAmB3gE,KAAa2hE,KAAQl9E,KAAWk9E,IAgB1EC,2BAA2BlpG,GAAc,MACrC,MAAMipG,EAAO19I,KAAK0mF,IAAIviF,GAEtB,IAAK,MAAM4mH,KAAYt2E,EAAahrC,MAChC,OAAQshH,EAASnnH,WACjB,IAAK,QACL,IAAK,QACL,IAAK,UACDmnH,EAASlnH,MAAQknH,EAASlnH,OAAU,GAAEknH,EAASlnH,SAAS65I,IACxD,MACJ,IAAK,OACD,GAAI3yB,EAASlnH,MAAO,CAChB,MAAM+5I,EAAoB7yB,EAASlnH,MAAMpG,MAAM,KAEX,MAAH,IAA7BmgJ,EAAkBr+I,OAClBwrH,EAASlnH,MACH7D,KAAKy9I,uBAAL,UACEhpG,EAAa7rC,aADf,aACE,EAAoBpJ,KACpBo+I,EAAkB,GAClBA,EAAkB,IAE1B7wH,GAAOhF,KAAM,uDAAsDgjG,EAASlnH,UAS5F,IAAK7D,KAAK0mF,IAAIx6E,kBACV,OAMJ,MAAM2xI,EAAc,UAAGppG,EAAa7rC,aAAhB,aAAG,EAAoBvF,UAE3C,GAAIw6I,IAAmB1xB,KAAAA,UAA2B0xB,IAAmB1xB,KAAAA,SACjE13E,EAAahrC,WAAQ1C,EACrB0tC,EAAahqC,gBAAa1D,MAIvB,WACH,MAAMoiH,EAAQ,UAAG10E,EAAa7rC,aAAhB,aAAG,EAAoBuD,KAC/Bq0D,EAAU2oD,GAAYA,EAAS1rH,MAAM,KAAK,GAC1CuP,EAAU,IAAK,IAAI84B,IAAJ,UAAQ2O,EAAa7rC,aAArB,iBAAQ,EAAoBa,aAA5B,aAAQ,EAA2BxC,KAAIzE,GAAKA,EAAE2B,OAEnE,IAAK,MAAMgK,KAAUnB,EAIjB,IAHmBynC,EAAahrC,MAC3BiB,MAAKnB,GAAQA,EAAKpF,KAAOgK,GAA6B,SAAnB5E,EAAK3F,YAE5B,OACb,MAAMk6I,EAAgB99I,KAAKy9I,uBAAL,UAA4BhpG,EAAa7rC,aAAzC,aAA4B,EAAoBpJ,KAAMghE,GAE5E/rB,EAAahrC,MAAM1G,KAAK,CACpBoB,GAAIgK,EACJvK,UAAW,OACXC,MAAOi6I,MAe3BC,mCAAmC3zI,GAC/B,IAAKA,EACD,MAAM,IAAIqE,MAAM,mCAGpB,MAAMmuI,EAAc,IAAIT,GAAiB/xI,EAAKjE,KAE9C,OAAInG,KAAK28I,+BAA+BC,GAC7B,IAAI3uI,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAKy2I,EAAYJ,aAIlBpyI,EAkBX4zI,2BAA2BC,GAEvB,IAAKA,IAAgBA,EAAY93I,MAAQ83I,EAAYz+I,KACjD,OAAOy+I,EAGX,MAAMrB,EAAc,IAAIT,GAAiB8B,EAAY93I,KAC/C+3I,EAAatB,EAAYN,YAAY,SAEvC4B,IACAl+I,KAAK29I,2BAA2BO,GAChCl+I,KAAKm+I,mBAAmBD,IAG5B,MAAMrzB,EAAa+xB,EAAYN,YAAY,SAO3C,OALIzxB,IACA7qH,KAAK29I,2BAA2B9yB,GAChC7qH,KAAKm+I,mBAAmBtzB,IAGrB,IAAI58G,sBAAsB,CAC7BzO,KAAMy+I,EAAYz+I,KAClB2G,IAAKy2I,EAAYJ,aAczB2B,mBAAmB1pG,GAAc,UAC7B,IAAK05E,GAAAA,+BACD,OAGJ,MAAMnhH,EAAU,IAAK,IAAI84B,IAAJ,UAAQ2O,EAAa7rC,aAArB,iBAAQ,EAAoBa,aAA5B,aAAQ,EAA2BxC,KAAIzE,GAAKA,EAAE2B,OAC7D43E,EAAS,UAAGtnC,EAAa7rC,aAAhB,aAAG,EAAoBpJ,KAEtC,IAAKu8E,EACD,MAAM,IAAIttE,MAAM,8DAGpB,IAAK,MAAMN,KAAUnB,EAGjB,IAFmBynC,EAAahrC,MAAMiB,MAAKnB,GAAQA,EAAKpF,KAAOgK,GAA6B,SAAnB5E,EAAK3F,YAE7D,CACb,MAAMw6I,EAAyBriE,EAAUv0E,UAAU,EAAG,GAGtDitC,EAAahrC,MAAM1G,KAAK,CACpBoB,GAAIgK,EACJvK,UAAW,OACXC,MAAQ,GAAE7D,KAAK08I,mBAAmB0B,SCjWtD,MAAMrxH,IAASmB,EAAAA,EAAAA,yCAef,SAASmwH,GAA0Bz1I,EAAO01I,EAAiBC,GACvD,MAAMzyI,EAAcwyI,EAAgBn6I,GAC9B8H,EAAkBqyI,EAAgBnyI,KAClCH,EAAmBsyI,EAAgBnxI,MAEnCqxI,EAAkB51I,EAAM2yI,WAAWzvI,GAErC0yI,IAAoBD,IAGpBC,IAGA51I,EAAMgyI,WAAW4D,GACjB51I,EAAMizI,qBAAqB2C,IAE/B51I,EAAMiyI,iBAAiB,CACnB12I,GAAIo6I,EACJ36I,UAAW,QACXC,MAAOmI,IAEXpD,EAAMiyI,iBAAiB,CACnB12I,GAAIo6I,EACJ36I,UAAW,OACXC,MAAOoI,IAEXrD,EAAMszI,aAAa,CACftxI,UAAW,MACXnB,MAAQ,GAAEqC,KAAeyyI,OAYlB,MAAME,GAIjB7/I,cAKIoB,KAAK0+I,sBAAwB,IAAI74G,IAQrCx7B,iBACIrK,KAAK0+I,sBAAsB93G,QAS/Bt8B,aAAaq0I,GACT5xH,GAAOw4B,MAAM,yBAA0Bo5F,GACvC3+I,KAAK0+I,sBAAwBC,EAUjCC,eAAeC,GACX,MAAMC,EAAiB,IAAI3C,GAAiB0C,GACtCh0B,EAAai0B,EAAexC,YAAY,SAE9C,OAAKzxB,EAME7qH,KAAKw9I,gBAAgB3yB,GACtBi0B,EAAetC,WAAaqC,GAN9B9xH,GAAOw4B,MAAO,sCAAqCs5F,KAE5CA,GAcfrB,gBAAgB3yB,GACZ,GAA6B,aAAzBA,EAAWxnH,UAEX,OAAO,EAEX,GAAIwnH,EAAWswB,eAAiB,EAE5B,OAAO,EAEX,MAAM4D,EAAoBl0B,EAAW4wB,uBAErC,IAAK,MAAMlyI,KAAQw1I,EAAmB,CAClC,MAAM5yI,EAAO0+G,EAAW2vB,iBAAiBjxI,EAAM,QACzC4D,EAAQ09G,EAAW2vB,iBAAiBjxI,EAAM,SAChD,IAAIy1I,EAAuBh/I,KAAK0+I,sBAAsBvkI,IAAI5Q,GAE1D,IAAKy1I,EAAsB,CAMnBA,EAHgCn0B,EAAW0wB,WAAWhyI,IAK/B8+G,GAAAA,eAE3BroH,KAAK0+I,sBAAsBz1H,IAAI1f,EAAMy1I,GAEzCX,GACIxzB,EACA,CACI1mH,GAAIoF,EACJ4D,MAAAA,EACAhB,KAAAA,GAEJ6yI,GAKR,OAAO,EAQXC,SAASJ,GACL,MAAMC,EAAiB,IAAI3C,GAAiB0C,GACtCh0B,EAAai0B,EAAexC,YAAY,SAE9C,IAAKzxB,EAGD,OAFA99F,GAAOw4B,MAAO,sCAAqCs5F,KAE5CA,EAEX,GAA6B,aAAzBh0B,EAAWxnH,UAGX,OAFA0pB,GAAOw4B,MAAM,uDAENs5F,EAEX,GAAIh0B,EAAWswB,eAAiB,EAG5B,OAFApuH,GAAOw4B,MAAM,qDAENs5F,EAEX,IAAKh0B,EAAWuwB,wBAIZ,OAHAruH,GAAOw4B,MAAM,0DAGNs5F,EAEX,MAAMK,EAAYr0B,EAAWkwB,WAAW,OAIxClwB,EAAWixB,wBAAwB,OAGnC,IAAK,MAAMlvI,KAAYsyI,EAAW,CAC9B,MAAMX,EAAUlE,GAAmBztI,GAEnCi+G,EAAW+vB,WAAW2D,GAG1B,OAAOO,EAAetC,YCtM9B,MAAMzvH,IAASmB,EAAAA,EAAAA,4CASA,MAAMixH,GAOjBvgJ,YAAYq+H,GACRj9H,KAAKo/I,sBACLp/I,KAAKi9H,UAAYA,EAQrBmiB,sBACIp/I,KAAKq9I,kBAAoB,KACzBr9I,KAAKq/I,gBAAiB,EAU1BC,eAAexzI,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAI2C,MAAM,kCAEpBzO,KAAKq9I,kBAAoBvxI,EAO7ByzI,uBACI,OAAO1/D,QAAQ7/E,KAAKq9I,mBAcxBmC,gCAAgCX,GAC5B,MAAMC,EAAiB,IAAI3C,GAAiB0C,GACtCh0B,EAAai0B,EAAexC,YAAY,SAE9C,IAAKzxB,EAGD,OAFA99F,GAAOw4B,MAAO,GAAEvlD,KAAKi9H,gDAAgD4hB,KAE9DA,EAGX,GAA6B,aAAzBh0B,EAAWxnH,UAGPrD,KAAKq9I,mBAAqBr9I,KAAKq/I,eAC/Bx0B,EAAWgwB,iBAAiB,CACxB12I,GAAInE,KAAKq9I,kBACTz5I,UAAW,QACXC,MAAQ,YAAW7D,KAAKq9I,sBAG5BtwH,GAAOtf,KAAM,GAAEzN,KAAKi9H,8DAErB,CACH,MAAMwiB,EAAiB50B,EAAWwwB,sBAElC,IAAKoE,EAGD,OAFA1yH,GAAOtf,KAAM,GAAEzN,KAAKi9H,6DAEb4hB,EAEX,GAAI7+I,KAAKq9I,kBAAmB,CACxBxyB,EAAWkxB,YAAY0D,EAAgBz/I,KAAKq9I,mBAC5C,IAAK,MAAM1yI,KAASkgH,EAAWpgH,WAC3B,GAAwB,QAApBE,EAAMC,UAAqB,CAC3B,MAAMkB,EAAcsuI,GAAiBzvI,GAC/B4zI,EAAUlE,GAAmB1vI,GAG/BmB,IAAgB2zI,IAChB90I,EAAMlB,MACC,GAAEzJ,KAAKq9I,qBAAqBkB,WAK/Cv+I,KAAKq9I,kBAAoBoC,EAE7Bz/I,KAAKq/I,gBAAiB,EAG1B,OAAOP,EAAetC,YCtH9B,MAAMzvH,GAASpoB,EAAAA,MAAAA,6CAETw2F,GAAYx2F,EAAQ,MAE1B,IAAI+6I,IAA2B,EAC3BC,IAA2B,EAM/B,MAAMC,GAAkB,CAAE,QAAS,iBAAkB,QAAS,SAO/C,MAAMC,WAAyBtN,GAmB1C3zI,YACQm5F,EACAnmE,EACAkuH,EACAr4I,EACAqoB,EACAisD,EACA4f,EACApyF,EACA4sF,EACArP,GAaJ,GAZApJ,MACI9rD,EACAnqB,EACAqoB,GACA,QAGAisD,EACA4f,GACJ37F,KAAK+3F,IAAMA,EAGS,iBAATxuF,EACP,MAAM,IAAI6d,UAAW,QAAO7d,qBAEhCvJ,KAAKuJ,KAAOA,EACZvJ,KAAK8/I,gBAAkBA,EACvB9/I,KAAKm2F,MAAQA,EACbn2F,KAAK8mF,MAAQA,EAEb/5D,GAAOw4B,MAAO,2BAA0BvlD,QAKxCA,KAAK+/I,aAAe5pD,EAGhBn2F,KAAK+3F,KAAO/3F,KAAK8vB,OACjB9vB,KAAKggJ,qBAEThgJ,KAAKigJ,mBAAqB,GAC1BL,GAAgBp7I,SAAQ+yB,IACpBv3B,KAAKigJ,mBAAmB1oH,GAASv3B,KAAKkgJ,uBAAuBh6I,KAAKlG,KAAMu3B,MAUhFyoH,qBACIhgJ,KAAK8vB,MAAMhH,iBAAiB,QAAQ,IAAM9oB,KAAKmgJ,iBAC/CngJ,KAAK8vB,MAAMhH,iBAAiB,UAAU,IAAM9oB,KAAKogJ,mBACjDpgJ,KAAK8vB,MAAMhH,iBAAiB,SAAS,KACjCiE,GAAOw4B,MAAO,mBAAkBn4B,KAAKgC,WAAWpvB,WAWxDmgJ,eACIpzH,GAAOw4B,MAAO,kBAAiBn4B,KAAKgC,WAAWpvB,QAE/CA,KAAK+3F,IAAIvN,aAAa5iE,KAAKuzE,GAAUjgE,kBAAmBl7B,MAU5DogJ,iBACIrzH,GAAOw4B,MAAO,oBAAmBn4B,KAAKgC,WAAWpvB,QAEjDA,KAAK+3F,IAAIvN,aAAa5iE,KAAKuzE,GAAU//D,oBAAqBp7B,MAO9DqgJ,QAAQx8I,GACA7D,KAAKm2F,QAAUtyF,IAIfA,IACA7D,KAAK+/I,cAAe,GAIpB//I,KAAKyH,SACLzH,KAAKyH,OAAO0uF,MAAQtyF,GAGxB7D,KAAKm2F,MAAQtyF,EACb7D,KAAK4nB,KAAKy4E,GAAqCrgG,OAQnDu3F,UACI,OAAOv3F,KAAKm2F,MAShBzkE,mBACI,OAAO1xB,KAAK8/I,gBAMhBjuH,UACI,OAAO,EASXyuH,UACI,OAAOtgJ,KAAKuJ,KAQhBg3I,cAAc/gJ,GACNQ,KAAK27F,YAAcn8F,IAGvBQ,KAAK27F,UAAYn8F,EACjBQ,KAAK4nB,KAAKy4E,GAA0C7gG,IAMxDghJ,gBACI,MAAMhhJ,EAAOQ,KAAKyxB,eAAiB,QAAU,QAEvCrC,EAAM3yB,OAAOi/F,YAAYtsE,MAE/BtlB,QAAQC,IAAK,iBAAgBvK,OAAW4vB,GACxCpvB,KAAK4xB,WAAW6uH,qBAAsB,GAAEjhJ,YAAiB4vB,EAKzD,MAAMsxH,EAAWjkJ,OAAOq8F,gBAAgB,2BAClC6nD,EAASlkJ,OAAOq8F,gBAAgB,yBAChC8nD,EACC36H,MAAM06H,IAAY16H,MAAMy6H,GAAgC,EAApBC,EAASD,EAI9CG,EAAOzxH,GACNpvB,KAAK4xB,WAAW6uH,qBAAqB,oBAClCzgJ,KAAK4xB,WAAW6uH,qBAAqB,eACzCG,EzEkViB,IAAS9gG,EyEhVhC9/C,KAAK4xB,WAAW6uH,qBAAsB,GAAEjhJ,UAAeqhJ,EACvD/2I,QAAQC,IAAK,eAAcvK,OAAWqhJ,GAEtC5tD,GAAWiE,ezE6UqBp3C,EyE5U5B,CACI,WAActgD,EACd22F,MAAOn2F,KAAK+/I,aACZl8I,MAAOg9I,GzE0UZrlE,GAAkC,OAAQ17B,KyE9TjDg0F,mBAAmBH,GACV+L,IAA4B1/I,KAAK6wB,gBAC9B8uH,IAA4B3/I,KAAKyxB,iBAIrCzxB,KAAK6wB,iBACL6uH,IAA2B,GAE3B1/I,KAAKyxB,iBACLkuH,IAA2B,GAG/BhM,EAAU7qH,iBAAiB,UAAW9oB,KAAKwgJ,cAAct6I,KAAKlG,QASlE4zI,eAAeD,GACXiM,GAAgBp7I,SAAQ+yB,IACpBo8G,EAAU7qH,iBAAiByO,EAAOv3B,KAAKigJ,mBAAmB1oH,OAUlEy8G,eAAeL,GACXiM,GAAgBp7I,SAAQ+yB,IACpBo8G,EAAU3qH,oBAAoBuO,EAAOv3B,KAAKigJ,mBAAmB1oH,OASrE2oH,uBAAuB1gJ,GACnButB,GAAOw4B,MAAO,GAAE/lD,sDAAyDQ,QAQ7E8gJ,aACI,MAAM,QAAElkD,EAAF,MAAWzG,EAAX,WAAkBvxE,GAAe5kB,KAAK8vB,MAE5C,MAAQ,eAAclL,aAAsBuxE,eAAmByG,IAOnEp+F,WACI,MAAQ,uBAAsBwB,KAAK0xB,6BAA6B1xB,KAAKw3F,oBACjEx3F,KAAKsgJ,mBAAmBtgJ,KAAK8mF,kBAAkB9mF,KAAK8gJ,iBClThE,MAAM/zH,IAASmB,EAAAA,EAAAA,sCAKF6yH,GAAiB,CAJN,IACA,IACA,KAQjB,MAAMC,GAQTpiJ,YAAYolF,EAAgBi9D,GACxBjhJ,KAAKwlE,GAAKwe,EACVhkF,KAAKihJ,cAAgBA,EAAclnH,KAAOknH,EAe1CjhJ,KAAKkhJ,2BAA6B,CAC9B,CACI3U,QAAQ,EACRv0F,WAAY92B,GAAQkvD,YAAcpwE,KAAKihJ,cAAcE,KAAOnhJ,KAAKihJ,cAAcG,IAC/Eh2F,IAvCQ,IAwCR0gB,sBAAuB5qD,GAAQkvD,YAAc,EAAM,GAEvD,CACIm8D,QAAQ,EACRv0F,WAAYh4C,KAAKihJ,cAAcI,SAC/Bj2F,IA5CQ,IA6CR0gB,sBAAuB,GAE3B,CACIygE,QAAQ,EACRv0F,WAAY92B,GAAQkvD,YAAcpwE,KAAKihJ,cAAcG,IAAMphJ,KAAKihJ,cAAcE,KAC9E/1F,IAjDQ,IAkDR0gB,sBAAuB5qD,GAAQkvD,YAAc,EAAM,IAY/DkxE,iBAAiBvlE,EAAWg9C,EAAa,MACrC,IAAI5zD,EAAc,KAiBlB,OAdsB4zD,GACdA,GACG73G,GAAQs+D,+BACRu5C,EAAWtnG,gBACXsnG,EAAWxhC,UAGlBpyB,EAAcnlE,KAAKwlE,GAAGwe,eAAenV,kBAChCnkE,MAAK5H,IAAC,eAAI,UAAAA,EAAE8iB,gBAAF,mBAAYkK,aAAZ,eAAmBinB,QAASglC,KACpCg9C,IACP5zD,EAAcnlE,KAAKwlE,GAAGwe,eAAenV,kBAChCnkE,MAAK5H,IAAC,eAAI,UAAAA,EAAEkjE,cAAF,mBAAUl2C,aAAV,eAAiB3rB,MAAO40H,EAAWya,iBAG/CruE,EAQXo8E,oBAAoBxoB,GAChB,OAAI/4H,KAAKwlE,GAAG03E,iBAAmBnkB,EAAWtnG,eAC/BzxB,KAAKkhJ,2BAGTnoB,EAAWtnG,eACZ,CAAE,CACA86G,QAAQ,EACRv0F,WAAYh4C,KAAKihJ,cAAcE,OAEjC,CAAE,CAAE5U,QAAQ,IAWtBiV,0BAA0BlrG,GACtB,MAAMmrG,EAAYv4I,GAAAA,MAAgBotC,EAAYnwC,KA4B9C,OA1BAs7I,EAAUp7I,MAAM7B,SAAQoE,IACpB,GAAIA,EAAMpJ,OAAS2yF,GACf,OAEJ,IAAKvpF,EAAM6B,aAAe7B,EAAM6B,WAAWlL,OACvC,OAEJ,IAAImiJ,EAAiB,GAErB,MAAMj4I,EAAQ,IAAIq8B,IAElBl9B,EAAM6B,WAAWxD,KAAI0D,GACjBA,EAAMlB,MACDhM,MAAM,KACN6I,OAAOu5E,SACPr7E,SAAQ+E,GAAQE,EAAMs6B,IAAIx6B,OAGnCE,EAAMjF,SAAQ+E,IACV,MAAMyD,EAAUpE,EAAMa,MAAMnD,QAAO6H,GAAUA,EAAOhK,GAAG3F,aAAe+K,IAEtEm4I,EAAiBA,EAAelxI,OAAOxD,MAE3CpE,EAAMa,MAAQi4I,KAGX,IAAIzzI,sBAAsB,CAC7BzO,KAAM82C,EAAY92C,KAClB2G,IAAK+C,GAAAA,MAAgBu4I,KAc7BE,kCAAkCv3I,GAG9B,GAAI8W,GAAQ4/D,6BACR,OAAO12E,EAEX,MAAMjE,EAAM+C,GAAAA,MAAgBkB,EAAKjE,KAC3B+/D,EAAM//D,EAAIE,MAAMi3H,WAAU3mF,GAASA,EAAMn3C,OAAS2yF,KAExD,GAAIhsF,EAAIE,MAAM6/D,GAAKmoD,OAASloH,EAAIE,MAAM6/D,GAAK07E,cAAgBz7I,EAAIE,MAAM6/D,GAAKi3E,WAatE,OAVAh3I,EAAIE,MAAM7B,SAAQ,CAACmyC,EAAOr3C,KAClBq3C,EAAMn3C,OAAS2yF,IAAmB7yF,IAAM4mE,IACxC//D,EAAIE,MAAM/G,GAAG+uH,UAAOtnH,EACpBZ,EAAIE,MAAM/G,GAAG69I,eAAYp2I,EAGzBZ,EAAIE,MAAM/G,GAAGsiJ,kBAAe76I,MAI7B,IAAIkH,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAK+C,GAAAA,MAAgB/C,KAK7BA,EAAIE,MAAM6/D,GAAKmoD,KAAO,CAClB,CACIlqH,GA3LQ,IA4LRd,UAAW,QAEf,CACIc,GA9LQ,IA+LRd,UAAW,QAEf,CACIc,GAjMQ,IAkMRd,UAAW,SAOnB,MAAMw+I,EAAgB3gI,GAAQkvD,aAAelvD,GAAQm+D,qBAAqB,IACnE,QAAO0hE,GAAe93I,KAAK,OAC3B,YAAW83I,GAAe93I,KAAK,OAOtC,OAJA9C,EAAIE,MAAM6/D,GAAK07E,aAAe,CAC1B/9I,MAAOg+I,GAGJ,IAAI5zI,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAK+C,GAAAA,MAAgB/C,KAU7ByqB,SAASmoG,EAAY1H,GACjB,MAAMvhG,EAAQipG,EAAWua,WAEzB,GAAIjiB,EAAa,CAGb,MAAMywB,EAAkB,CACpBz+I,UAAW8oH,KAAAA,SACX/mD,QAAS,CAAE2zD,EAAW9nG,qBACtB06C,cAAe,IAGdzqD,GAAQkvD,cACT0xE,EAAgBn2E,cAAgB3rE,KAAKuhJ,oBAAoBxoB,IAE7D/4H,KAAKwlE,GAAGwe,eAAezY,eAAez7C,EAAOgyH,QAK7C9hJ,KAAKwlE,GAAGwe,eAAepzD,SAASd,GASxCivG,eAAehG,GACX,MAAMh9C,EAAYg9C,EAAWvhC,UACvB1nE,EAAQipG,EAAWua,WACnBnuE,EAAcnlE,KAAKshJ,iBAAiBvlE,GAE1C,OAAK5W,GAGLp4C,GAAOw4B,MAAO,GAAEvlD,KAAKwlE,aAAauzD,KAE3B5zD,EAAYa,OAAO43D,aAAa9tG,IAJ5BxJ,QAAQzU,OAAO,IAAIpD,MAAO,yBAAwBstE,gBAejEgmE,gCAAgChpB,GAE5B,GAAI73G,GAAQ+9D,gBACR,OAAO,KAGX,MAAM+iE,EAA8B,IAG9B,OAAEhmH,EAAS,KAAQ+8F,EAAW7uD,cAEpC,IAAK,MAAMjnE,KAAYjD,KAAKkhJ,2BACxBc,EAA4Bj/I,KAAKi5B,EAAS/4B,EAAS6oE,uBAGvD,OAAOk2E,EAQXljB,gBAAgB/F,GACZ,MAAMh9C,EAAYg9C,EAAWvhC,UACvBryB,EAAcnlE,KAAKshJ,iBAAiBvlE,EAAWg9C,GAErD,OAAK5zD,GAILp4C,GAAOw4B,MAAO,GAAEvlD,KAAKwlE,eAAeuzD,KAE7B5zD,EAAYa,OAAO43D,aAAa,OAL5Bt3G,QAAQzU,OAAO,IAAIpD,MAAO,yBAAwBstE,gBAcjE6hD,aAAaC,EAAUC,GACnB,GAAID,GAAYC,EAAU,CACtB,MAAM/hD,EAAY+hD,EAAStmC,UACrB/vF,EAASq2H,EAAS7sG,oBAMxB,IAAKxpB,EAID,OAHAzH,KAAKwlE,GAAGqnC,YAAY3tC,OAAO2+D,EAASyW,OACpCt0I,KAAKwlE,GAAGqnC,YAAY5jF,IAAI60G,EAASwW,MAAOxW,GAEjCx3G,QAAQC,UAGnB,MAAM4+C,EAAcnlE,KAAKshJ,iBAAiBvlE,EAAW8hD,GAC/C/tG,EAAQguG,EAASwV,WAEvB,OAAKnuE,GAGLp4C,GAAOw4B,MAAO,GAAEvlD,KAAKwlE,gBAAgBq4D,UAAiBC,KAE/C34D,EAAYa,OAAO43D,aAAa9tG,GAClCmyC,MAAK,KACF,MAAM14D,EAAOvJ,KAAKwlE,GAAGy8E,WAAW9nI,IAAI0jH,EAASyW,OAE7Ct0I,KAAKwlE,GAAGqnC,YAAY3tC,OAAO2+D,EAASyW,OACpCt0I,KAAKwlE,GAAGy8E,WAAW/iF,OAAO2+D,EAASyW,OACnCt0I,KAAKwlE,GAAG08E,cAAgBliJ,KAAKwlE,GAAG08E,cAAc57I,QAAO9D,GAAKA,IAAMiF,IAChEzH,KAAKwlE,GAAGqnC,YAAY5jF,IAAI60G,EAASwW,MAAOxW,GAExC99H,KAAKwlE,GAAG08E,cAAcn/I,KAAK0E,GAC3BzH,KAAKwlE,GAAGy8E,WAAWh5H,IAAI60G,EAASwW,MAAO/qI,OAdpC+c,QAAQzU,OAAO,IAAIpD,MAAM,yBAgBjC,OAAIovH,IAAaC,EACb99H,KAAK8+H,gBAAgBjB,GACvB57D,MAAK,KACF,MAAM8Z,EAAY8hD,EAASrmC,UACrBryB,EAAcnlE,KAAKshJ,iBAAiBvlE,GAItC5W,IACAA,EAAY9hE,UAAY8oH,KAAAA,UAI5BnsH,KAAKwlE,GAAGqnC,YAAY3tC,OAAO2+D,EAASyW,OACpCt0I,KAAKwlE,GAAGy8E,WAAW/iF,OAAO2+D,EAASyW,UAEpCxW,IAAaD,EACb79H,KAAK++H,eAAejB,GACtB77D,MAAK,KACF,MAAM8Z,EAAY+hD,EAAStmC,UACrBryB,EAAcnlE,KAAKshJ,iBAAiBvlE,EAAW+hD,GAcrD,OAVI34D,IACAA,EAAY9hE,UAAY8oH,KAAAA,WAKZjrG,GAAQ4/D,6BAClBx6D,QAAQC,UACRvmB,KAAKmiJ,aAAarkB,IAGnB77D,MAAK,KAEFjiE,KAAKwlE,GAAGqnC,YAAY5jF,IAAI60G,EAASwW,MAAOxW,UAK5D/wG,GAAOtf,KAAM,GAAEzN,KAAKwlE,sEAEbl/C,QAAQC,WAYnB84G,uBAAuBkN,GACnBvsI,KAAKq7H,uBAAuBlpC,GAAiBo6C,GASjD4V,aAAaryH,GAAO,QAChB,MAAMisD,EAAYjsD,EAAM0nE,UAClBryB,EAAcnlE,KAAKshJ,iBAAiBvlE,EAAWjsD,GAC/C8jB,EAAauxB,MAAAA,GAAH,UAAGA,EAAaa,cAAhB,aAAG,EAAqBgG,gBAKxC,OAAKp4B,MAAAA,GAAD,UAACA,EAAYq4B,iBAAb,aAAC,EAAuB1sE,SAG5Bq0C,EAAWq4B,UAAYjsE,KAAKuhJ,oBAAoBzxH,GAEzCq1C,EAAYa,OAAOkG,cAAct4B,IAJ7BttB,QAAQC,UAevB80G,uBAAuBt/C,EAAWwwD,GAC9B,MAAM6V,EAAepiJ,KAAKwlE,GAAGwe,eAAenV,kBACvCvoE,QAAOxD,GAAKA,EAAE8iB,UAAY9iB,EAAE8iB,SAASkK,OAAShtB,EAAE8iB,SAASkK,MAAMinB,OAASglC,IACvE8wB,EAAc7sG,KAAKwlE,GAAG8sB,eAAevW,GAE3ChvD,GAAOtf,KAAM,GAAEzN,KAAKwlE,MAAM+mE,EAAS,WAAa,gBAAgBxwD,qBAChEqmE,EAAa59I,SAAQ,CAAC2gE,EAAae,KAC3BqmE,EAEY,IAARrmE,GAAa2mC,EAAYttG,OACzB4lE,EAAY9hE,UAAY8oH,KAAAA,SAExBhnD,EAAY9hE,UAAY8oH,KAAAA,SAG5BhnD,EAAY9hE,UAAY8oH,KAAAA,YAcpCoT,uBAAuBgN,GACnBvsI,KAAKq7H,uBAAuBlpC,GAAiBo6C,GAWjD8V,0BAA0BzuG,GAKhBq4B,IAAAA,EAJA/qD,GAAQw+D,iBAAmB9rC,EAAWq4B,WAAa9tE,MAAMC,QAAQw1C,EAAWq4B,cAI5EA,EAIgBr4B,EAAWq4B,WAJJ55D,OAAMpP,QAAsD,IAAnCA,EAAS6oE,uBACpD7oE,EAAS6oE,wBAA0BG,EAAU,GAAGH,yBAIvDl4B,EAAWq4B,UAAUznE,SAAQ,CAACvB,EAAUijE,KACpCjjE,EAAS6oE,sBAAwB9rE,KAAKkhJ,2BAA2Bh7E,GAAK4F,2BCzdtF,MAAM/+C,IAASmB,EAAAA,EAAAA,qDAITo0H,GAAa,KA+BJ,SAASC,GAChBxqD,EACA5zF,EACAgwH,EACAlmD,EACAzM,EACAslB,EACAl9E,GAUJ5J,KAAKwiJ,uBAAgD,IAAxB54I,EAAQmzF,aAQrC/8F,KAAKyiJ,iBAAc17I,EAkBnB/G,KAAK0iJ,gBAAkB,GAUvB1iJ,KAAK2iJ,qBAAsB,EAO3B3iJ,KAAK+3F,IAAMA,EAMX/3F,KAAKmE,GAAKA,EAOVnE,KAAK8mF,MAAQA,EASb9mF,KAAKy8H,aAAe,IAAI52F,IAMxB7lC,KAAK6sG,YAAc,IAAIhnE,IAQvB7lC,KAAKkiJ,cAAgB,GAoBrBliJ,KAAKiiJ,WAAa,IAAIp8G,IAKtB7lC,KAAK4iJ,WAAa,KAKlB5iJ,KAAK6iJ,YAAc,KAMnB7iJ,KAAKm0H,eAAiBA,EAGtBn0H,KAAK8iJ,sBAAwB9iJ,KAAK8iJ,sBAAsB58I,KAAKlG,MAC7DA,KAAKm0H,eAAettG,GAChBmsG,GACAhzH,KAAK8iJ,uBAET9iJ,KAAK+iJ,kBAAoB/iJ,KAAK+iJ,kBAAkB78I,KAAKlG,MACrDA,KAAKm0H,eAAettG,GAChBmsG,GACAhzH,KAAK+iJ,mBACT/iJ,KAAK4J,QAAUA,EAIf,MAAMo5I,EAAkBxhF,GAAe,GAEvCwhF,EAAgBjiF,SAAWiiF,EAAgBjiF,UAAY,GAInD5iE,MAAMC,QAAQ4kJ,EAAgBjiF,UAC9BiiF,EAAgBjiF,SAASh+D,KAAK,CAAEkgJ,eAAgBjjJ,KAAK8mF,QAErD/5D,GAAOhF,KAAK,iEAGhB/nB,KAAKgkF,eAAiB,IAAI6vD,GAAAA,sBAA+B5lE,EAAU+0E,GAInE,MAAME,EAAwB,CAC1B9B,IAnMW,IAoMXC,SAnMW,IAoMXF,KAAMmB,IAKVtiJ,KAAKihJ,cAAgBjhJ,KAAK4J,QAAQwrH,cAAgBp1H,KAAK4J,QAAQwrH,aAAa+tB,iBACtEnjJ,KAAK4J,QAAQwrH,aAAa+tB,iBAC1BD,EAENljJ,KAAKojJ,SAAW,IAAIpC,GAAShhJ,KAAMA,KAAKihJ,eACxCjhJ,KAAK4jI,UAAY,GACjB5jI,KAAK6/D,MAAQ,GACb7/D,KAAKqjJ,cAAgB,KAKrBrjJ,KAAKsjJ,uBAAyBtjJ,KAAK4J,QAAQsrH,sBAK3Cl1H,KAAKujJ,iBAAmB35I,EAAQsC,gBAMhClM,KAAKwjJ,iCAAmCtiI,GAAQk/D,4BAA8BpgF,KAAKujJ,iBACnFvjJ,KAAKwjJ,kCACEz2H,GAAOtf,KAAK,mEAMnBzN,KAAKi1H,SAAWrrH,EAAQqrH,SAExBj1H,KAAKyjJ,QAAU,IAAI9K,GACnB,MAAMhvI,EAAYhF,EAAQ,MAE1B3E,KAAKm9I,UAAY,IAAIxzI,EACjB,CACIE,YAAak3I,GAAexhJ,OAC5BwN,wBAAwB,EACxBb,gBAAiBlM,KAAKujJ,mBAE9BvjJ,KAAKo9I,eAAiB,IAAI+B,GAAen/I,KAAKxB,YAO9CwB,KAAK0jJ,eAAiB,IAAIjH,GAAez8I,KAAMA,KAAK+3F,IAAI4rD,sBAMxD3jJ,KAAKwqF,aAAeuN,EAAIvN,aACxBxqF,KAAKu9I,YAAc,IAAIkB,GAKvBz+I,KAAK4jJ,qBAAuB,KAG5B5jJ,KAAK8kI,MAAQ,CAAC+e,EAAMp2I,KAChBsf,GAAOw4B,MAAMs+F,EAAMp2I,GAEnBzN,KAAK4jI,UAAU7gI,KAAK,CAChB+pC,KAAM,IAAI1f,KACV5tB,KAAMqkJ,EACNhgJ,MAAO4J,GAAQ,MAGvBzN,KAAK81H,eAAiB,KACtB91H,KAAKgkF,eAAe8xC,eAAiBv+F,IACjCv3B,KAAK8kI,MACD,iBACA75G,KAAKF,UAAUwM,EAAMwa,UAAW,KAAM,MAEd,OAAxB/xC,KAAK81H,gBACL91H,KAAK81H,eAAev+F,IAKxBv3B,KAAKujJ,kBACLvjJ,KAAK8jJ,QAAUC,IACX,MAAMt8I,EAASs8I,EAAI3+E,QAAQ,GAE3BplE,KAAKgkJ,kBAAkBv8I,EAAQs8I,EAAIj0H,MAAOi0H,EAAI5+E,aAC9C19D,EAAOqhB,iBAAiB,eAAepmB,IACnC1C,KAAKikJ,oBAAoBx8I,EAAQ/E,EAAEotB,WAG3C9vB,KAAKgkF,eAAel7D,iBAAiB,QAAS9oB,KAAK8jJ,WAEnD9jJ,KAAKgkF,eAAekgE,YAAc3sH,GAASv3B,KAAKmkJ,mBAAmB5sH,EAAM9vB,QACzEzH,KAAKgkF,eAAeogE,eAAiB7sH,GAASv3B,KAAKqkJ,qBAAqB9sH,EAAM9vB,SAElFzH,KAAKm2H,uBAAyB,KAC9Bn2H,KAAKgkF,eAAemyC,uBAAyB5+F,IACzCv3B,KAAK8kI,MAAM,yBAA0B9kI,KAAKipE,gBACN,OAAhCjpE,KAAKm2H,wBACLn2H,KAAKm2H,uBAAuB5+F,IAGpCv3B,KAAKo2H,2BAA6B,KAClCp2H,KAAKgkF,eAAeoyC,2BAA6B7+F,IAC7Cv3B,KAAK8kI,MAAM,6BAA8B9kI,KAAKkxE,oBACN,OAApClxE,KAAKo2H,4BACLp2H,KAAKo2H,2BAA2B7+F,IAGxCv3B,KAAK42H,oBAAsB,KAC3B52H,KAAKgkF,eAAe4yC,oBAAsBr/F,IACtCv3B,KAAK8kI,MAAM,uBACsB,OAA7B9kI,KAAK42H,qBACL52H,KAAK42H,oBAAoBr/F,IAGjCv3B,KAAK02H,wBAA0B,KAC/B12H,KAAKgkF,eAAe0yC,wBAA0Bn/F,IAC1Cv3B,KAAK8kI,MAAM,0BAA2B9kI,KAAKuxE,iBACN,OAAjCvxE,KAAK02H,yBACL12H,KAAK02H,wBAAwBn/F,IAGrCv3B,KAAKskJ,cAAgB,KACrBtkJ,KAAKgkF,eAAesgE,cAAgB/sH,IAChCv3B,KAAK8kI,MAAM,iBACgB,OAAvB9kI,KAAKskJ,eACLtkJ,KAAKskJ,cAAc/sH,IAIvBv3B,KAAKi1H,WACLj1H,KAAKqjJ,cAAgB5mJ,OAAO6sF,aAAY,KACpCtpF,KAAK4mE,WAAW3E,MAAKpC,IACjB,GAA6B,mBAAlBA,MAAAA,OAAP,EAAOA,EAAO5tD,QAAuB,CACrC,MAAMhD,EAAU4wD,EAAM5tD,SAEtB,IAAK,IAAI3S,EAAI,EAAGA,EAAI2P,EAAQ1P,SAAUD,EAAG,CACrC,MAAMuuG,EAAM5+F,EAAQ3P,GAEpBuuG,EAAIvrG,QAAQkC,SAAQrC,IAChBnC,KAAKukJ,aAAa12C,EAAK1rG,EAAM0rG,EAAIvmC,KAAKnlE,aAI9C09D,EAAMr7D,SAAQ3B,GAAK7C,KAAKukJ,aAAa1hJ,EAAG,GAAIA,UAGrD,MAGPkqB,GAAOtf,KAAM,cAAazN,QAY9BuiJ,GAAwBhkJ,UAAUgmJ,aAC5B,SAASr9E,EAAQ/kE,EAAMqiJ,GACrB,MAAMrgJ,EAAM,GAAE+iE,EAAO/iE,MAAMhC,IAC3B,IAAIK,EAAIxC,KAAK6/D,MAAM17D,GACnB,MAAMirB,EAAM,IAAIhC,KAEX5qB,IACDxC,KAAK6/D,MAAM17D,GAAM3B,EAAI,CACjBwtB,UAAWZ,EACXq1H,QAASr1H,EACTzjB,OAAQ,GACRkI,MAAO,KAGfrR,EAAEmJ,OAAO5I,KAAKyhJ,GACdhiJ,EAAEqR,MAAM9Q,KAAKqsB,EAAI24B,WACbvlD,EAAEmJ,OAAOpM,OAASS,KAAKi1H,WACvBzyH,EAAEmJ,OAAOsK,QACTzT,EAAEqR,MAAMoC,SAEZzT,EAAEiiJ,QAAUr1H,GAMpB,MAAMs1H,GAAU,SAASpuG,GACrB,OAAI,MAAOA,EACA,GAGH,SAAQA,EAAY92C,WAAW82C,EAAYnwC,OAYvDo8I,GAAwBhkJ,UAAUiiI,mBAAqB,WACnD,MAAMp4G,EAAQpoB,KAAKgkF,eAAe9S,mBAElC,MAAc,cAAV9oD,EACO,YAGJA,GAcXm6H,GAAwBhkJ,UAAUi/H,yBAA2B,SAASzhD,EAAW4oE,GAAiB,GAC9F,MAAMC,EAAiB5kJ,KAAK6kJ,mBAAmB9oE,GAE/C,OAAI/7E,KAAKujJ,iBACEoB,EACDC,EAAiBz4B,KAAAA,SAA0BA,KAAAA,SAC3Cy4B,EAAiBz4B,KAAAA,SAA0BA,KAAAA,UAGzBpwC,IAAcoW,GAAkBnyF,KAAKwiJ,oBAAsBxiJ,KAAK2iJ,qBAGjFiC,EAAiBz4B,KAAAA,SAA0BA,KAAAA,SAG/CA,KAAAA,UAUXo2B,GAAwBhkJ,UAAUumJ,2BAA6B,SAASC,EAAWhpE,GAC/E,IAAI0gD,EAAe,GACf70D,EAAY,GAEhB,IAAK,MAAM46D,KAAYuiB,EACnBtoB,EAAeA,EAAajsH,OAAOxQ,KAAKglJ,gBAAgBxiB,EAAUzmD,IAItE,MAAMkpE,EAAiBxoB,EAAax1H,KAAI8iI,IAAM,uBAAIA,EAAOj6G,aAAX,aAAI,EAAc3rB,MAOhE,OALAyjE,EAAY5nE,KAAKgkF,eAAe/e,eAC3B3+D,QAAOsf,GAAYA,EAASkK,OACtBlK,EAASkK,MAAMinB,OAASglC,GACxBkpE,EAAev6I,MAAK81D,GAAWA,IAAY56C,EAASkK,MAAM3rB,OAE9DyjE,GAQX26E,GAAwBhkJ,UAAU2+I,cAAgB,WAC9C,OAAQl9I,KAAK4J,QAAQ2rH,kBASzBgtB,GAAwBhkJ,UAAUukJ,sBAAwB,SAClDljD,EACAjE,GAEJ,IAAKiE,EAGD,YAFA7yE,GAAO1V,MAAO,GAAErX,8CAIpB,MAAMkzI,EAAalzI,KAAKglJ,gBAAgBplD,EAAYzN,IAEhD+gD,EAAW3zI,QAEX2zI,EAAW,GAAGqN,cAAc5kD,IAWpC4mD,GAAwBhkJ,UAAUwkJ,kBAAoB,SAC9CnjD,EACA7jB,EACAwb,GAEJ,IAAKqI,EAGD,YAFA7yE,GAAO1V,MAAO,GAAErX,4CAIpB,MAAM8vB,EAAQ9vB,KAAKglJ,gBAAgBplD,EAAY7jB,GAE3CjsD,EAAMvwB,QAENuwB,EAAM,GAAGuwH,QAAQ9oD,IAUzBgrD,GAAwBhkJ,UAAUwvF,eAAiB,SAASb,EAAc,IACtE,MAAMY,EAAc,GAkBpB,OAjBuBZ,EAAY3tF,OAC7BS,KAAK8kJ,2BAA2B53D,EAAaiF,IAC7CnyF,KAAKgkF,eAAe/e,eACjB3+D,QAAOsf,GAAYA,EAASkK,OAASlK,EAASkK,MAAMinB,OAASo7C,IAAmBvsE,EAASkK,MAAM8sE,WAEzFp4F,SAAQulI,IACnB,MAAMxgI,EAAOwgI,EAAOmb,4BAEhB37I,GAAQA,EAAKhK,SAKbuuF,EAAYvkF,EAAK,GAAG4E,QAAU5E,EAAK,GAAGi/E,eAIvCsF,GASXy0D,GAAwBhkJ,UAAU+zF,eAAiB,SAASvW,GACxD,IAAI/O,EAAS7uE,MAAMw8C,KAAK36C,KAAK6sG,YAAYlhG,UAMzC,YAJkB5E,IAAdg1E,IACA/O,EAASA,EAAO1mE,QAAOwpB,GAASA,EAAM0nE,YAAczb,KAGjD/O,GAQXu1E,GAAwBhkJ,UAAU4mJ,mBAAqB,WACnD,OAAOnlJ,KAAKsyF,eAAeH,IAAiB,IAShDowD,GAAwBhkJ,UAAUsmJ,mBAAqB,SAAS9oE,GAC5D,IAAKA,EACD,MAAM,IAAIttE,MAAM,2BAGpB,OAAOzO,KAAKsyF,eAAevW,GAAWx8E,OAAS,GAUnDgjJ,GAAwBhkJ,UAAUymJ,gBAAkB,SAC5CplD,EACA7jB,GACJ,MAAM0gD,EAAe,GACfsoB,EACAnlD,EAAa,CAAEA,GAAe5/F,KAAKy8H,aAAal4H,OAEtD,IAAK,MAAMi+H,KAAYuiB,EAAW,CAC9B,MAAMK,EAAmBplJ,KAAKy8H,aAAatiH,IAAIqoH,GAE/C,GAAK4iB,EAOL,IAAK,MAAM3S,KAAkB2S,EAAiB7gJ,OAE1C,IAAKw3E,GAAaA,IAAc02D,EAAgB,CAC5C,MAAM4S,EAAaD,EAAiBjrI,IAAIs4H,GAEpC4S,GACA5oB,EAAa15H,KAAKsiJ,IAMlC,OAAO5oB,GASX8lB,GAAwBhkJ,UAAUq+H,iCAAmC,SAASz4H,GAC1E,MAAMw4H,EAAiB,GACjBF,EAAez8H,KAAKglJ,gBAAgB7gJ,GAE1C,KAAKs4H,MAAAA,OAAD,EAACA,EAAcl9H,QACf,OAAOo9H,EAEX,MAAM2oB,EAAe7oB,EAAax1H,KAAI6oB,GAASA,EAAMwwH,YAC/Cn6I,EAAM,IAAIkmH,GAAIrsH,KAAK62H,kBAAkB1wH,KA2B3C,OAzBAm/I,EAAa9gJ,SAAQ,CAAC+E,EAAM28D,KACxB,IAAK,MAAM7/D,KAASF,EAAIE,MAAO,CAC3B,IAAI4tC,EAAQ,GACRi1E,EAAYb,GAAAA,UAAkBhiH,EAAQ,UAASkD,KAEnD,GAAI2/G,EAAU3pH,OAAQ,CACbo9H,EAAez2D,KAChBy2D,EAAez2D,GAAO,IAI1B,MAAMq/E,EAAWl9B,GAAAA,UAAkBhiH,EAAQ,oBAAmBkD,KAE9D,GAAIg8I,EAAShmJ,OAAQ,CACjB,MAAMg4C,EAAgBguG,EAAS,GAAG9nJ,MAAM,KAAK,GAE7Cw2C,GAAU,GAAEsxG,EAAS,SACrBr8B,EAAYA,EAAU14G,OAAO63G,GAAAA,UAAkBhiH,EAAQ,UAASkxC,MAEpEolF,EAAez2D,IAAS,GAAEgjD,EAAUjgH,KAAK,cACzC0zH,EAAez2D,IAAQjyB,OAK5B0oF,GAQX4lB,GAAwBhkJ,UAAUinJ,uBAAyB,WACvD,MAAM7b,EAAe3pI,KAAK04H,0BAE1B,OAAO14H,KAAKihJ,cAActX,EAAan3F,gBAAkBxyC,KAAKihJ,eASlEsB,GAAwBhkJ,UAAU2wF,eAAiB,SAAS3lF,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAIkF,MAAO,QAAOlF,qBAE5B,IAAK,MAAMwvH,KAAc/4H,KAAK6sG,YAAYlhG,SACtC,GAAI3L,KAAKuyF,aAAawmC,KAAgBxvH,EAClC,OAAOwvH,EAGf,IAAK,MAAM34B,KAAepgG,KAAKglJ,kBAC3B,GAAI5kD,EAAYkgD,YAAc/2I,EAC1B,OAAO62F,EAIf,OAAO,MASXmiD,GAAwBhkJ,UAAUo0F,iBAAmB,SAASxuF,GAE1D,MAAMshJ,EAAgB31H,GAASA,EAAMwjH,WAAWnvI,KAAOA,EACjD40H,EAAa/4H,KAAKsyF,iBAAiB5nF,KAAK+6I,GAE9C,GAAI1sB,EACA,OAAO/4H,KAAKuyF,aAAawmC,GAG7B,MAAM34B,EAAcpgG,KAAKglJ,kBAAkBt6I,KAAK+6I,GAEhD,OAAIrlD,EACOA,EAAYkgD,UAGhB,MAOXiC,GAAwBhkJ,UAAU4lJ,mBAAqB,SAAS18I,GAC5D,MAAMygE,EAAWw9E,GAAI3W,YAAYtnI,GAEjC,IAAKi+I,GAAIC,iBAAiBz9E,GAGtB,YAFAn7C,GAAOtf,KAAM,GAAEzN,mEAAmEkoE,MAMlFhnD,GAAQu+D,oBACRh4E,EAAOm+I,WAAaruH,IAChBv3B,KAAKgkJ,kBAAkBv8I,EAAQ8vB,EAAMzH,QAEzCroB,EAAOo+I,cAAgBtuH,IACnBv3B,KAAKikJ,oBAAoBx8I,EAAQ8vB,EAAMzH,SAK/C,MAAMg2H,EAAoBr+I,EAAO0pB,iBAEjC,IAAK,MAAM40H,KAAcD,EACrB9lJ,KAAKgkJ,kBAAkBv8I,EAAQs+I,GAEnC,MAAMC,EAAoBv+I,EAAOg8D,iBAEjC,IAAK,MAAMyvE,KAAc8S,EACrBhmJ,KAAKgkJ,kBAAkBv8I,EAAQyrI,IAgBvCqP,GAAwBhkJ,UAAUylJ,kBAAoB,SAASv8I,EAAQqoB,EAAOq1C,EAAc,MACxF,MAAM+C,EAAWw9E,GAAI3W,YAAYtnI,GAC3Bs0E,EAAYjsD,EAAMinB,KAExB,IAAK/2C,KAAK8mF,QAAU4+D,GAAIC,iBAAiBz9E,GAGrC,YAFAn7C,GAAOtf,KAAM,GAAEzN,mEAAmEkoE,MAOtF,GAHAn7C,GAAOtf,KAAM,GAAEzN,0CAA0CkoE,UAAiB6T,OAGrEA,EAOD,YANAtkD,GAAqBE,iBACjB,IAAIlpB,MACC,oDAAmDy5D,MAOhE,MAAM+9E,EAAYjmJ,KAAKujJ,iBACjB,IAAIl3B,GAAIrsH,KAAKgkF,eAAe6yC,kBAAkB1wH,KAC9C,IAAIkmH,GAAIrsH,KAAK62H,kBAAkB1wH,KACrC,IAAI+/I,EAIJ,GAAIlmJ,KAAKujJ,iBACL,GAAIp+E,GAAeA,EAAYvuD,IAAK,CAChC,MAAMA,EAAMuuD,EAAYvuD,IAExBsvI,EAAaD,EAAU5/I,MAAMC,QAAO6/I,GAAO99B,GAAAA,SAAiB89B,EAAM,SAAQvvI,YAE1EsvI,EAAaD,EAAU5/I,MAAMC,QAAO6/I,IAChC,MAAMh6I,EAAOk8G,GAAAA,SAAiB89B,EAAK,WAEnC,YAAuB,IAATh6I,GAAwB+7D,IAAa/7D,EAAK3E,UAAU,GAAG/J,MAAM,KAAK,WAIxFyoJ,EAAaD,EAAU5/I,MAAMC,QAAO6/I,GAAOA,EAAIlyC,WAAY,KAAIl4B,OAGnE,IAAKmqE,EAAW3mJ,OAKZ,YAJAk4B,GAAqBE,iBACjB,IAAIlpB,MAAO,2DAA0Dy5D,UAAiB6T,OAM9F,IAAImtC,EAAYb,GAAAA,UAAkB69B,EAAW,GAAI,WAIjD,GAFAh9B,EACMA,EAAU5iH,QAAOumB,IAA8C,IAAtCA,EAAKjhB,QAAS,QAAOs8D,QAC/CghD,EAAU3pH,OAKX,YAJAk4B,GAAqBE,iBACjB,IAAIlpB,MAAO,4DAA2Dy5D,UAAiB6T,OAQ/F,MAAMlxE,EAAUq+G,EAAU,GAAG1hH,UAAU,GAAG/J,MAAM,KAAK,GAC/C2oJ,EAAY7gJ,OAAOsF,GACnBi1I,EAAkB9/I,KAAKm0H,eAAe7B,aAAa8zB,GAEzD,GAAIngI,MAAMmgI,IAAcA,EAAY,EAMhC,YALA3uH,GAAqBE,iBACjB,IAAIlpB,MACC,uCAAsC23I,QAAgBl+E,UAAiB6T,OAI7E,IAAK+jE,EAMR,YALAroH,GAAqBE,iBACjB,IAAIlpB,MACC,8CAA6C23I,QAAgBl+E,UAAiB6T,OAM3FhvD,GAAOtf,KAAM,GAAEzN,uCAAuC8/I,UAAwBsG,UAAkBrqE,MAEhG,MAAMiuD,EACAhqI,KAAKm0H,eAAe5B,iBAAiButB,EAAiB/jE,GAE5D,IAAKiuD,EAID,YAHAvyG,GAAqBE,iBACjB,IAAIlpB,MAAO,GAAEzO,0CAA0C8/I,MAK/D,MAAM3pD,EAAQ6zC,EAAc7zC,MACtBwF,EAAYquC,EAAcruC,UAEhC37F,KAAKqmJ,mBACDvG,EAAiBr4I,EAAQqoB,EAAOisD,EAAW4f,EAAWyqD,EAAWjwD,IAkBzEosD,GAAwBhkJ,UAAU8nJ,mBAAqB,SAC/CvG,EACAr4I,EACAqoB,EACAisD,EACA4f,EACApyF,EACA4sF,GACJ,IAAImwD,EAAkBtmJ,KAAKy8H,aAAatiH,IAAI2lI,GAEvCwG,IACDA,EAAkB,IAAIzgH,IACtB7lC,KAAKy8H,aAAaxzG,IAAI62H,EAAiBwG,IAG3C,MAAMC,EAAgBD,EAAgBnsI,IAAI4hE,GAE1C,GAAIwqE,GAAiBA,EAAcjT,aAAexjH,EAI9C,YAFA/C,GAAOtf,KAAM,GAAEzN,0DAA0D8/I,UAAwB/jE,MAG1FwqE,IACPx5H,GAAO1V,MAAO,GAAErX,0DAA0D8/I,UAAwB/jE,iCAUlG/7E,KAAKikJ,oBAAoBsC,EAAct1H,oBAAqBs1H,EAAcjT,aAG9E,MAAMlzC,EACA,IAAIy/C,GACE7/I,KAAK+3F,IACL/3F,KAAK+3F,IAAInmE,WACTkuH,EACAr4I,EACAqoB,EACAisD,EACA4f,EACApyF,EACA4sF,EACAn2F,KAAK8mF,OAEjBw/D,EAAgBr9H,IAAI8yD,EAAWqkB,GAE/BpgG,KAAKwqF,aAAa5iE,KAAKuzE,KAAAA,mBAA8BiF,EAAapgG,OAUtEuiJ,GAAwBhkJ,UAAU8lJ,qBAAuB,SAAS58I,GAC9D,IAAKi+I,GAAIc,aAAa/+I,GAAS,CAC3B,MAAMtD,EAAKuhJ,GAAI3W,YAAYtnI,GAI3B,YAFAslB,GAAOtf,KAAM,uDAAsDtJ,MAMvE,MAAM6hJ,EAAoBv+I,EAAOg8D,iBAEjC,IAAK,MAAMyvE,KAAc8S,EACrBhmJ,KAAKikJ,oBAAoBx8I,EAAQyrI,GAErC,MAAM4S,EAAoBr+I,EAAO0pB,iBAEjC,IAAK,MAAM40H,KAAcD,EACrB9lJ,KAAKikJ,oBAAoBx8I,EAAQs+I,IAWzCxD,GAAwBhkJ,UAAU0lJ,oBAAsB,SAChDx8I,EACAqoB,GACJ,MAAMo4C,EAAWw9E,GAAI3W,YAAYtnI,GAC3B+4D,EAAU1wC,GAAS41H,GAAI1W,WAAWl/G,GAEnC41H,GAAIC,iBAAiBz9E,IAK1Bn7C,GAAOtf,KAAM,GAAEzN,uCAAuCkoE,aAAoB1H,MAErE0H,EAMA1H,EAMAxgE,KAAKymJ,uBAAuBv+E,EAAU1H,IAWvCzzC,GAAOhF,KAAM,GAAE/nB,8CAA8CkoE,aAAoB1H,MAhBjF/oC,GAAqBE,iBAAiB,IAAIlpB,MAAO,GAAEzO,mDANnDy3B,GAAqBE,iBAAiB,IAAIlpB,MAAO,GAAEzO,qDAPnD+sB,GAAOtf,KAAM,GAAEzN,qEAAqEkoE,OAyC5Fq6E,GAAwBhkJ,UAAUmoJ,oBAAsB,SAChDx+E,EACA1H,GAEJ,IAAK,MAAM4kF,KAAoBplJ,KAAKy8H,aAAa9wH,SAC7C,IAAK,MAAM05I,KAAcD,EAAiBz5I,SAGtC,GAAI05I,EAAWhS,eAAiBnrE,GACzBm9E,EAAW7R,cAAgBhzE,EAC9B,OAAO6kF,GAiBvB9C,GAAwBhkJ,UAAUu+H,mBAAqB,SAAStK,GAC5D,MAAMm0B,EAAgB,GAChBL,EAAkBtmJ,KAAKy8H,aAAatiH,IAAIq4G,GAE9C,GAAI8zB,EAAiB,CACjB,MAAMM,EAAoBN,EAAgBnsI,IAAIg4E,IACxC00D,EAAoBP,EAAgBnsI,IAAIg4E,IAE9Cy0D,GAAqBD,EAAc5jJ,KAAK6jJ,GACxCC,GAAqBF,EAAc5jJ,KAAK8jJ,GAExC7mJ,KAAKy8H,aAAav9D,OAAOszD,GAI7B,OAFAzlG,GAAOw4B,MAAO,GAAEvlD,uCAAuCwyH,WAAem0B,EAAcpnJ,UAE7EonJ,GAQXpE,GAAwBhkJ,UAAUuoJ,mBAAqB,SAASC,GAC5DA,EAAY/kE,UACZ,MAAMmN,EAAgB43D,EAAYr1H,mBAC5B40H,EAAkBtmJ,KAAKy8H,aAAatiH,IAAIg1E,GAEzCm3D,EAEOA,EAAgBpnF,OAAO6nF,EAAYvvD,YAC3CzqE,GAAO1V,MAAO,GAAErX,yBAAyB+mJ,gCAFzCh6H,GAAO1V,MAAO,GAAErX,6DAA6DmvF,KAIjFnvF,KAAKwqF,aAAa5iE,KAAKuzE,KAAAA,qBAAgC4rD,IAa3DxE,GAAwBhkJ,UAAUkoJ,uBAAyB,SACnDv+E,EACA1H,GACJ,MAAMumF,EAAc/mJ,KAAK0mJ,oBAAoBx+E,EAAU1H,GAMvD,OAJIumF,GACA/mJ,KAAK8mJ,mBAAmBC,GAGrBA,GAQXxE,GAAwBhkJ,UAAUyoJ,gBAAkB,SAAS58I,GAKzD,MAAMc,EAAU,IAAI26B,IAMdohH,EAAY,IAAIphH,IAEtB,GAAoB,iBAATz7B,GAA8B,OAATA,GACL,iBAAbA,EAAKjE,IAGf,OAFA4mB,GAAOhF,KAAK,kDAEL7c,EAGX,MAAM9E,EAAU8C,GAAAA,MAAgBkB,EAAKjE,KAErC,IAAKhI,MAAMC,QAAQgI,EAAQC,OACvB,OAAO6E,EAGX,IAAI7E,EAAQD,EAAQC,MAIhBrG,KAAKujJ,mBACLl9I,EAAQ,GACR,CAAE8rF,GAAiBA,IAAkB3tF,SAAQu3E,IACzC,MAAMnzE,EAAQxC,EAAQC,MAAMqE,MAAK1H,GAAKA,EAAExD,OAASu8E,IAEjDnzE,GAASvC,EAAMtD,KAAK6F,OAI5B,IAAK,MAAMA,KAASvC,EAAO,CACvB,IAAKlI,MAAMC,QAAQwK,EAAMa,OACrB,SAGJ,GAAItL,MAAMC,QAAQwK,EAAM6B,YACpB,IAAK,MAAME,KAAS/B,EAAM6B,WACtB,QAA+B,IAApBE,EAAMC,gBACa,IAAhBD,EAAMlB,MAAuB,CAEvC,MAAMy9I,EAAav8I,EAAMlB,MAAMhM,MAAM,KAAKwJ,KAAI4D,GAAWC,SAASD,EAAS,MACrEowI,EAAciM,EAAW,GAG/Bv8I,EAAMlB,MAAQy9I,EAGTD,EAAUz8G,IAAIywG,IACfgM,EAAUh+H,IAAIgyH,EAAa,IAE/BgM,EAAU9sI,IAAI8gI,GAAal4I,KAAK4H,GAK5C,IAAIlB,EAAQb,EAAMa,MAGlBA,EAAQzJ,KAAKujJ,iBACP95I,EAAMnD,QAAO9D,GAAqB,UAAhBA,EAAEoB,YACpB6F,EAAMnD,QAAO9D,GAAqB,SAAhBA,EAAEoB,YAE1B,IAAK,MAAM2F,KAAQE,EAAO,CAKtB,MAAMhF,EAAMzE,KAAKujJ,iBAAmB36I,EAAMpJ,KAAO+J,EAAK1F,MAChD42I,EAAalxI,EAAKpF,GACxB,IAAIuF,EAAWwB,EAAQiP,IAAI1V,GAY3B,GAVKiF,IACDA,EAAW,CACPD,MAAO,GACP6lH,OAAQ,GACRnjH,KAAM1H,GAEVyG,EAAQ+d,IAAIxkB,EAAKiF,IAErBA,EAASD,MAAM1G,KAAK03I,GAEhBwM,EAAUz8G,IAAIiwG,GAAa,CAC3B,MAAMhwI,EAAaw8I,EAAU9sI,IAAIsgI,GAEjC,IAAK,MAAM9vI,KAASF,EAChBf,EAAS4lH,OAAOvsH,KAAK4H,KAMrC,OAAOO,GAsKXq3I,GAAwBhkJ,UAAUg0F,aAAe,SAASwmC,GACtD,MAAMrvH,EAAW1J,KAAKmnJ,SAASpuB,EAAWub,OAE1C,OAAO5qI,GAAYA,EAASD,MAAM,IAatC84I,GAAwBhkJ,UAAU6oJ,oCAC5B,SAASh9I,GACP,MAAMjE,EAAM+C,GAAAA,MAAgBkB,EAAKjE,KAC3Bw7D,EAAQx7D,EAAIE,MAAMqE,MAAKisC,GAAwB,UAAfA,EAAMn3C,OAG5CmiE,EAAMl3D,WAAak3D,EAAMl3D,YAAc,GACvC,MAAMy0I,EAAYv9E,EAAMl3D,WAAWnE,QAAOqE,GAA6B,QAApBA,EAAMC,YAEzD,GAAI+2D,EAAMw7E,WAAax7E,EAAMigF,aAAc,CACvC,MAAMn4I,EAAQ,GAad,GAXIy1I,GAAaA,EAAU3/I,OACvB2/I,EAAU16I,SAAQmG,IACdlB,EAAM1G,KAAK4H,EAAMlB,MAAMhM,MAAM,KAAK,OAGtCkkE,EAAMl4D,MAAMjF,SAAQ+E,IACO,SAAnBA,EAAK3F,WACL6F,EAAM1G,KAAKwG,EAAKpF,OAIxBw9D,EAAMl3D,WAAWC,MAAKC,GAA6B,QAApBA,EAAMC,YAErC,OAAOR,EAGXu3D,EAAMl3D,WAAW1H,KAAK,CAClB6H,UAAW,MACXnB,MAAOA,EAAMR,KAAK,OAI1B,OAAO,IAAIgF,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAK+C,GAAAA,MAAgB/C,MAKjC,MAAMkhJ,GAAU,CACZp+E,iBACI,OAAOjpE,KAAKgkF,eAAe/a,gBAE/BiI,qBACI,OAAOlxE,KAAKgkF,eAAe9S,oBAE/BK,kBACI,OAAOvxE,KAAKgkF,eAAezS,iBAE/BylD,mBACI,IAAI5sH,EAAOpK,KAAKgkF,eAAegzC,iBAE/B,OAAK5sH,GAMLpK,KAAK8kI,MAAM,oCAAqC4f,GAAQt6I,IAIpDpK,KAAKujJ,mBAAqBvjJ,KAAK8mF,OAC/B18E,EAAOpK,KAAKyjJ,QAAQ7K,QAAQxuI,GAC5BpK,KAAK8kI,MAAM,8CACP4f,GAAQt6I,IAEZA,EAAOpK,KAAKonJ,oCAAoCh9I,GAChDpK,KAAK8kI,MAAM,yDACP4f,GAAQt6I,KACJpK,KAAKujJ,mBACTriI,GAAQs+D,gCACRp1E,EAAOpK,KAAK0jJ,eAAe3F,mCAAmC3zI,GAC9D2iB,GAAOw4B,MACH,uDAAwDn7C,IAWhEA,EA/IY,SAAS4sH,EAAkBptH,GAC/C,IAAKotH,EACD,MAAM,IAAIvoH,MAAM,mCAGpB,MAAMmuI,EAAc,IAAIT,GAAiBnlB,EAAiB7wH,KACpDmhJ,EAAa1K,EAAYN,YAAYnqD,IAC3C,IAAIo1D,GAAU,EAEVD,GAAcA,EAAWjkJ,YAAc8oH,KAAAA,WACnCviH,EAAQmzF,YACRuqD,EAAWjkJ,UAAY8oH,KAAAA,SAEvBm7B,EAAWjkJ,UAAY8oH,KAAAA,SAG3Bo7B,GAAU,GAGd,MAAMC,EAAa5K,EAAYN,YAAYnqD,IAO3C,OALIq1D,GAAcA,EAAWnkJ,YAAc8oH,KAAAA,WACvCq7B,EAAWnkJ,UAAY8oH,KAAAA,SACvBo7B,GAAU,GAGVA,EACO,IAAIt5I,sBAAsB,CAC7BzO,KAAMw3H,EAAiBx3H,KACvB2G,IAAKy2I,EAAYJ,aAIlBxlB,EA8GQywB,CAAgBr9I,EAAMpK,KAAK4J,UAItCQ,EAAOpK,KAAK0jJ,eAAe1F,2BAA2B5zI,GAE/CA,IAtCH2iB,GAAOw4B,MAAO,GAAEvlD,sDAET,KAsCf62H,oBACI,IAAIzsH,EAAOpK,KAAKgkF,eAAe6yC,kBAE/B,OAAKzsH,GAKLpK,KAAK8kI,MAAM,qCAAsC4f,GAAQt6I,IAErDpK,KAAKujJ,mBACDvjJ,KAAK8mF,MAEL18E,EAAOpK,KAAK0nJ,4BAA4Bt9I,IAGxCA,EAAOpK,KAAKyjJ,QAAQ7K,QAAQxuI,GAC5BpK,KAAK8kI,MAAM,+CAAgD4f,GAAQt6I,MAIpEA,IAjBH2iB,GAAOw4B,MAAO,GAAEvlD,wDAET,MAmBnB1B,OAAOiG,KAAK8iJ,IAAS7iJ,SAAQ83G,IACzBh+G,OAAO2b,eACHsoI,GAAwBhkJ,UACxB+9G,EAAM,CACFniG,IAAKktI,GAAQ/qC,QAKzBimC,GAAwBhkJ,UAAU4oJ,SAAW,SAAS7S,GAClD,OAAOt0I,KAAKiiJ,WAAW9nI,IAAIm6H,IAS/BiO,GAAwBhkJ,UAAUopJ,uBAAyB,WACvD,OAAO3nJ,KAAK4nJ,oBAAsB5nJ,KAAKsjJ,wBAS3Cf,GAAwBhkJ,UAAUqpJ,iBAAmB,WACjD,MAAM93H,EAAQ9vB,KAAKmlJ,qBAEnB,OAAOr1H,GAASA,EAAM6rE,YAAcC,GAAUpiE,SAYlD+oH,GAAwBhkJ,UAAUspJ,iBAAmB,SAASvxG,GAC1D,IAAKt2C,KAAK8nJ,gBACN,OAAOxxG,EAGX,MAAMmrG,EAAYv4I,GAAAA,MAAgBotC,EAAYnwC,KAIxCyC,EAAQ64I,EAAUp7I,MAAMqE,MAAK1H,GAAKA,EAAExD,OAASQ,KAAK8nJ,gBAAgB/rE,YAExE,IAAKnzE,EACD,OAAO0tC,EAGX,GAAIt2C,KAAK8nJ,gBAAgBnsF,OAcrB,GAbA0sD,GAAAA,YAAoBz/G,EAAO5I,KAAK8nJ,gBAAgB12H,UAO5CpxB,KAAK8nJ,gBAAgB12H,WAAa26F,GAAclyF,MAAQ3Y,GAAQ+9D,iBAAmBj/E,KAAK8mF,OACxFuhC,GAAAA,WAAmBz/G,EAAO5I,KAAK8nJ,gBAAgB12H,UAAU,GAKzDpxB,KAAK8nJ,gBAAgB12H,WAAa26F,GAAc/xF,KAC7Ch6B,KAAK04H,4BAA8B3M,GAAc/xF,IAAK,CACzD,MAAM+tH,EAAW/nJ,KAAKihJ,cAAcjnH,KAAOh6B,KAAKihJ,cAC1C+G,EAAYD,EAAS5G,KAAO4G,EAAS5G,KAAOmB,GAC5CryI,EAAQ3D,KAAKC,OAAOvM,KAAK4nJ,mBAAqBtF,GAAa0F,GAAa,KAI9Ep/I,EAAMmvC,UAAY,CAAE,CAChBv4C,KAAM,KACNyQ,MAAAA,SAOJrH,EAAMmvC,eAAYhxC,OAGtBshH,GAAAA,WAAmBz/G,EAAO5I,KAAK8nJ,gBAAgB12H,UAGnD,OAAO,IAAInjB,sBAAsB,CAC7BzO,KAAM82C,EAAY92C,KAClB2G,IAAK+C,GAAAA,MAAgBu4I,MAU7Bc,GAAwBhkJ,UAAU0pJ,cAAgB,SAASn4H,GACvD,GAAIA,EAAM+B,UACN,OAAO7xB,KAAK6sG,YAAYriE,IAAI1a,EAAMwkH,OAGtC,MAAMnlD,EAAgBr/D,EAAM4B,mBACtB40H,EAAkBtmJ,KAAKy8H,aAAatiH,IAAIg1E,GAE9C,OAAOtP,QAAQymE,GAAmBA,EAAgBnsI,IAAI2V,EAAM0nE,aAAe1nE,IAS/EyyH,GAAwBhkJ,UAAUqyB,SAAW,SAASd,EAAOuhG,GAAc,GACvE,MAAMijB,EAAQxkH,EAAMwkH,MAIpB,GAFAvnH,GAAOtf,KAAM,GAAEzN,eAAe8vB,KAE1B9vB,KAAK6sG,YAAYriE,IAAI8pG,GAErB,OAAOhuH,QAAQzU,OAAO,IAAIpD,MAAO,GAAEqhB,mBAAuB9vB,SAK9D,GAFAA,KAAK6sG,YAAY5jF,IAAIqrH,EAAOxkH,GAExB9vB,KAAKujJ,iBACL,IACIvjJ,KAAKojJ,SAASxyH,SAASd,EAAOuhG,GAChC,MAAOh6G,GAGL,OAFA0V,GAAO1V,MAAO,GAAErX,qBAAqB8vB,aAAiBzY,MAAAA,OAAzC,EAAyCA,EAAOtY,WAEtDunB,QAAQzU,OAAOwF,OAEvB,CAEH,MAAM6wI,EAAep4H,EAAMmB,oBAE3B,GAAIi3H,EACAloJ,KAAKmoJ,WAAWD,QAGb,IAAKhnI,GAAQs+D,+BACL1vD,EAAMe,gBACLf,EAAM2B,iBAAmB3B,EAAMynE,UAC3C,OAAOjxE,QAAQzU,OAAO,IAAIpD,MAAO,GAAEzO,mCAAmC8vB,MAI1E,GAAI5O,GAAQs+D,+BAAiC1vD,EAAM2B,gBAAkB3B,EAAMynE,UAAW,CAClF,MAAM7tF,EAAW1J,KAAKooJ,0BAA0Bt4H,GAEhD9vB,KAAKo9I,eAAekC,eAAe51I,EAASD,MAAM,IAClD,MAAMe,EACAd,EAAS4lH,OAAO5kH,MAAKu2G,GAAqC,QAAxBA,EAAUr2G,YAE9CJ,GACAxK,KAAKm9I,UAAU7yI,aAAaE,EAASf,OAEzC,MAAMy1I,EACAx1I,EAAS4lH,OAAOhpH,QACd26G,GAAqC,QAAxBA,EAAUr2G,YAE/B,GAAIs0I,EAAW,CACX,MAAMmJ,EAAiB,IAAIxiH,IAE3Bq5G,EAAU16I,SAAQoI,IACd,MAAMd,EAAcc,EAASnD,MAAM,GAC7B80I,EAAU3xI,EAASnD,MAAM,GAE/B4+I,EAAep/H,IAAInd,EAAayyI,MAEpCv+I,KAAKu9I,YAAYjzI,aAAa+9I,KAI1C,IAAIC,EAAehiI,QAAQC,UAO3B,OAJIrF,GAAQkvD,cACRk4E,EAAeA,EAAarmF,MAAK,IAAMjiE,KAAKojJ,SAASjB,aAAaryH,MAG/Dw4H,GAWX/F,GAAwBhkJ,UAAUwgI,eAAiB,SAASjvG,GACxD,IAAK9vB,KAAKuoJ,oBAAoB,iBAAkBz4H,GAE5C,OAAOxJ,QAAQzU,OAAO,yCAG1Bkb,GAAOtf,KAAM,GAAEzN,qBAAqB8vB,eACpC,MAAM04H,EAAe14H,EAAMmB,oBAE3B,OAAKu3H,EAMDxoJ,KAAKujJ,iBACEvjJ,KAAKojJ,SAASrkB,eAAejvG,IAGxC9vB,KAAKmoJ,WAAWK,GAETliI,QAAQC,SAAQ,KAXnBwG,GAAO1V,MAAO,GAAErX,4BAA4B8vB,kCAErCxJ,QAAQzU,OAAO,sBAiB9B0wI,GAAwBhkJ,UAAU4pJ,WAAa,SAASvW,GACpD5xI,KAAKgkF,eAAe5d,UAAUwrE,GAC9B5xI,KAAKkiJ,cAAcn/I,KAAK6uI,IAO5B2Q,GAAwBhkJ,UAAUkqJ,cAAgB,SAAS7W,GACvD5xI,KAAKgkF,eAAe1d,aAAasrE,GACjC5xI,KAAKkiJ,cACCliJ,KAAKkiJ,cAAc57I,QAAOmB,GAAUA,IAAWmqI,KAczD2Q,GAAwBhkJ,UAAUgqJ,oBAAsB,SAChD57H,EACAosG,GACJ,MAAM2vB,EAAa1oJ,KAAK6sG,YAAYriE,IAAIuuF,EAAWub,OAMnD,OAJKoU,GACD37H,GAAO1V,MAAO,GAAErX,QAAQ2sB,YAAqBosG,2BAG1C2vB,GAUXnG,GAAwBhkJ,UAAUm6H,wBAA0B,WAAW,MACnE,MAAMvyH,EAAG,UAAGnG,KAAKgkF,eAAegzC,wBAAvB,aAAG,EAAsC7wH,IAC5CwiJ,EAAe58B,GAAchyF,IAEnC,IAAK5zB,EACD,OAAOwiJ,EAEX,MAEM11G,EAFY/pC,GAAAA,MAAgB/C,GACVE,MAAMqE,MAAK1H,GAAKA,EAAExD,OAAS2yF,KAC/B1rF,IAAI,GAAGwsC,MAE3B,OAAIA,EACO30C,OAAOqN,OAAOogH,IAAerhH,MAAK7G,GAASA,IAAUovC,EAAM3xB,gBAG/DqnI,GAQXpG,GAAwBhkJ,UAAU4pH,2BAA6B,SAASC,GACpE,MAAMwgC,EAASxgC,G/B70DkB,E+B+0DjCpoH,KAAKsjJ,uBAAyBtjJ,KAAKk9I,iBAAmB0L,GAW1DrG,GAAwBhkJ,UAAUs7H,eAAiB,SAASjE,EAAiB,KAAMqT,EAAgB,MAE/F,MAAMttE,EAA2B,OAAlBstE,EACT73G,EAAW63G,GAAgCrT,EAE7C51H,KAAK8nJ,kBAAoBlyB,GAAkBqT,IAC3CjpI,KAAK8nJ,gBAAgBnsF,OAASA,EAC9B37D,KAAK8nJ,gBAAgB12H,SAAWA,GACzBwkG,GAAkBqT,EACzBjpI,KAAK8nJ,gBAAkB,CACnBnsF,OAAAA,EACAogB,UAAWoW,GACX/gE,SAAAA,GAGJrE,GAAOhF,KAAM,GAAE/nB,yCAAyC41H,cAA2BqT,iDAW3FsZ,GAAwBhkJ,UAAUy+I,kBAAoB,SAASpL,GAC3D,OAAO5xI,KAAKkiJ,cAAct2I,QAAQgmI,IAAgB,GAUtD2Q,GAAwBhkJ,UAAUizB,YAAc,SAASunG,GACrD,MAAMyvB,EAAezvB,EAAW9nG,oBAEhCjxB,KAAK8kI,MACD,eACA/L,EAAWub,MAAOkU,EAAeA,EAAarkJ,QAAK4C,GAElD/G,KAAKuoJ,oBAAoB,eAAgBxvB,KAI9C/4H,KAAK6sG,YAAY3tC,OAAO65D,EAAWub,OACnCt0I,KAAKiiJ,WAAW/iF,OAAO65D,EAAWub,OAE9BkU,GACAxoJ,KAAKgkF,eAAe1d,aAAakiF,KAUzCjG,GAAwBhkJ,UAAUsqJ,iBAAmB,SAAS9sE,GAC1D,OAAO/7E,KAAKgkF,eAAene,aAAan7D,MAAKlI,GAAKA,EAAEstB,OAASttB,EAAEstB,MAAMinB,OAASglC,KAUlFwmE,GAAwBhkJ,UAAUivG,qBAAuB,SAAS19E,GAC9D,OAAO9vB,KAAKgkF,eAAe/e,eAAev6D,MAAK7H,GAAKA,EAAEitB,QAAUA,KAUpEyyH,GAAwBhkJ,UAAUkvG,mBAAqB,SAAS39E,GAC5D,OAAO9vB,KAAKgkF,eAAene,aAAan7D,MAAKlI,GAAKA,EAAEstB,QAAUA,KAelEyyH,GAAwBhkJ,UAAUq/H,aAAe,SAASC,EAAUC,GAChE,GAAI99H,KAAKujJ,iBAGL,OAFAx2H,GAAOw4B,MAAO,GAAEvlD,4CAETA,KAAKojJ,SAASxlB,aAAaC,EAAUC,GAGvC77D,MAAK,IAAOjiE,KAAKk9I,iBAAmBh8H,GAAQ4/D,8BAAiC9gF,KAAK8mF,QAG3F/5D,GAAOw4B,MAAO,GAAEvlD,sCAEhB,IAAIsoJ,EAAehiI,QAAQC,UAS3B,OAPIs3G,GACA79H,KAAKwxB,YAAYqsG,GAEjBC,IACAwqB,EAAetoJ,KAAK4wB,SAASktG,IAG1BwqB,EAAarmF,MAAK,KAAM,KAWnCsgF,GAAwBhkJ,UAAUugI,gBAAkB,SAAS/F,GACzD,MAAMyvB,EAAezvB,EAAW9nG,oBAMhC,OAJAjxB,KAAK8kI,MACD,mBACA/L,EAAWub,MAAOkU,EAAeA,EAAarkJ,GAAK,MAElDnE,KAAKuoJ,oBAAoB,mBAAoBxvB,GAK9C/4H,KAAKujJ,iBACEvjJ,KAAKojJ,SAAStkB,gBAAgB/F,GAGrCyvB,GACAz7H,GAAOtf,KAAM,GAAEzN,uBAAuB+4H,aACtC/4H,KAAKyoJ,cAAcD,GAEZliI,QAAQC,SAAQ,KAG3BwG,GAAO1V,MAAO,GAAErX,sDAAsD+4H,KAE/DzyG,QAAQzU,OAAO,qBAhBXyU,QAAQzU,OAAO,0CAmB9B0wI,GAAwBhkJ,UAAUsyE,kBAAoB,SAASzO,EAAO15D,GAGlE,OAFA1I,KAAK8kI,MAAM,oBAAqB1iE,EAAO15D,GAEhC1I,KAAKgkF,eAAenT,kBAAkBzO,EAAO15D,IAWxD65I,GAAwBhkJ,UAAUuqJ,4BAA8B,SACxDC,GACJ,IAAIlK,EAASkK,EAAS5iJ,IAEtB,MAAM6iJ,EAAkBnK,EAAOjzI,QAAQ,WACjCq9I,EAAgBpK,EAAOjzI,QAAQ,mBAAoBo9I,GACzD,IAAIE,EAAkBrK,EAAO/lH,YAAY,gBAEzC,IAAuB,IAAnBmwH,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOF,EAGX,MAAMI,EAActK,EAAOjzI,QAAQ,OAAQq9I,GACrCG,EAASvK,EAAOr3I,UAAUyhJ,EAAeE,EAAc,GAE7DtK,EAASA,EAAO52I,QAAQmhJ,EAAQ,IAChCF,EAAkBrK,EAAO/lH,YAAY,gBACrC,MAAMuwH,EAAgBxK,EAAOjzI,QAAQ,OAAQs9I,GACvCI,EAAUzK,EAAOr4I,MAAM,EAAG6iJ,GAC1BE,EAAgBH,EAAO93G,OACvBk4G,EAAU3K,EAAOr4I,MAAM6iJ,GAI7B,OAFAxK,EAAU,GAAEyK,QAAcC,IAAgBC,IAEnC,IAAIv7I,sBAAsB,CAC7BzO,KAAMupJ,EAASvpJ,KACf2G,IAAK04I,KAYb0D,GAAwBhkJ,UAAUkrJ,2BAA6B,SAASzyB,GACpE,MAAM4lB,EAAc,IAAIT,GAAiBnlB,EAAiB7wH,KAC1D,IAAIujJ,GAAoB,EACxB,MAAMpC,EAAa1K,EAAYN,YAAYnqD,IAE3C,GAAIm1D,EAAY,CACZ,MAAMqC,EAAwB3pJ,KAAKw9H,yBAAyBrrC,IAExDm1D,EAAWjkJ,YAAcsmJ,IACzBrC,EAAWjkJ,UAAYsmJ,EACvB58H,GAAOtf,KAAM,GAAEzN,0CAA0C2pJ,KACzDD,GAAoB,QAGxB38H,GAAOhF,KAAM,GAAE/nB,wDAGnB,MAAMwnJ,EAAa5K,EAAYN,YAAYnqD,IAE3C,GAAIq1D,EAAY,CACZ,MAAMoC,EAAwB5pJ,KAAKw9H,yBAAyBrrC,IAExDq1D,EAAWnkJ,YAAcumJ,IACzBpC,EAAWnkJ,UAAYumJ,EACvB78H,GAAOtf,KAAM,GAAEzN,0CAA0C4pJ,KACzDF,GAAoB,QAGxB38H,GAAOhF,KAAM,GAAE/nB,wDAGnB,OAAI0pJ,EACO,IAAIz7I,sBAAsB,CAC7BzO,KAAMw3H,EAAiBx3H,KACvB2G,IAAKy2I,EAAYJ,aAIlBxlB,GAWXurB,GAAwBhkJ,UAAUmpJ,4BAA8B,SAAS7wB,GACrE,MAAM+lB,EAAc,IAAIT,GAAiBtlB,EAAkB1wH,KAc3D,MAZA,CAAEgsF,GAAiBA,IAAkB3tF,SAAQu3E,IACzC,MAAM11E,EAAQu2I,EAAYN,YAAYvgE,GAChC6oE,EAAiB5kJ,KAAK6kJ,mBAAmB9oE,GACzC8tE,EAAkB7pJ,KAAKglJ,gBAAgB,KAAMjpE,GAAWx8E,OAAS,EAEvE8G,EAAMhD,UAAYuhJ,GAAkBiF,EAC9B19B,KAAAA,SACAy4B,EACIz4B,KAAAA,SACA09B,EAAkB19B,KAAAA,SAA0BA,KAAAA,YAGnD,IAAIl+G,sBAAsB,CAC7BzO,KAAMq3H,EAAkBr3H,KACxB2G,IAAKy2I,EAAYJ,cAWzB+F,GAAwBhkJ,UAAUurJ,WAAa,SAASxzG,GACpD,MAAM,aAAEwwE,GAAiB9mH,KAAK4J,QAE9B,KAAKk9G,MAAAA,OAAD,EAACA,EAAcC,WAAWD,MAAAA,OAAD,EAACA,EAAcijC,uBACxC,OAAOzzG,EAGX,MAAMmrG,EAAYv4I,GAAAA,MAAgBotC,EAAYnwC,KACxC6jJ,EAASvI,EAAUp7I,MAEzB,IAAK,MAAMuC,KAASohJ,EAChB,GAAmB,UAAfphJ,EAAMpJ,KAAkB,CACxB,MAAM,QAAEuX,GAAYnO,EAAMnC,IAAIiE,MAAKunC,GAAYA,EAASgB,QAAU84E,GAAcjyF,OAEhF,IAAK/iB,EAED,SAGJ,IAAIkzI,EAAWrhJ,EAAMlC,KAAKgE,MAAKunC,GAAYA,EAASl7B,UAAYA,IAE3DkzI,IACDA,EAAW,CACPlzI,QAAAA,EACAzT,OAAQ,KAIhB,MAAM4mJ,EAAahhJ,GAAAA,YAAsB+gJ,EAAS3mJ,QAClD,IAAI6mJ,GAAa,EAYjB,IAVIrjC,MAAAA,OAAJ,EAAIA,EAAcC,UACdmjC,EAAWnjC,OAAS,EACpBojC,GAAa,IAGbrjC,MAAAA,OAAJ,EAAIA,EAAcijC,yBACdG,EAAWE,kBAAoBtjC,EAAaijC,sBAC5CI,GAAa,IAGZA,EAED,SAGJ,IAAIE,EAAe,GAEnB,IAAK,MAAM5lJ,KAAOnG,OAAOiG,KAAK2lJ,GAC1BG,GAAiB,GAAE5lJ,KAAOylJ,EAAWzlJ,OAGzCwlJ,EAAS3mJ,OAAS+mJ,EAAa/4G,OAIvC,OAAO,IAAIrjC,sBAAsB,CAC7BzO,KAAM82C,EAAY92C,KAClB2G,IAAK+C,GAAAA,MAAgBu4I,MAI7Bc,GAAwBhkJ,UAAUgrE,oBAAsB,SAASjzB,GAC7D,IAAIyyG,EAAWzyG,EAwBf,OAtBAt2C,KAAK8kI,MAAM,oCAAqC4f,GAAQqE,IAGxDA,EAAW/oJ,KAAK8pJ,WAAWf,GAEtB/oJ,KAAKujJ,iBAGEvjJ,KAAK8mF,QAGbiiE,EAAW/oJ,KAAKyjJ,QAAQrK,cAAc2P,GACtC/oJ,KAAK8kI,MACD,oDACA4f,GAAQqE,MARZA,EAAW/oJ,KAAKypJ,2BAA2BV,GAC3CA,EAAW/oJ,KAAK8oJ,4BAA4BC,IAW3C/oJ,KAAKwjJ,mCACNuF,EAAW/oJ,KAAK6nJ,iBAAiBkB,IAG9B,IAAIziI,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKgkF,eAAeza,oBAAoBw/E,GACnC9mF,MAAK,KACFjiE,KAAK8kI,MAAM,gCACX,MAAM8d,EAAav6B,GAAAA,SAAiB0gC,EAAS5iJ,KAEzCy8I,IAAe5iJ,KAAK4iJ,aACpB5iJ,KAAK4iJ,WAAaA,EAClB5iJ,KAAKwqF,aAAa5iE,KACduzE,KAAAA,oBAA+Bn7F,KAAM4iJ,IAE7Cr8H,OACD3W,IACC5P,KAAK8kI,MAAM,+BAAgCl1H,GAC3C5P,KAAKwqF,aAAa5iE,KACduzE,KAAAA,6BACAvrF,EAAK5P,MACT6R,EAAOjC,UAkBvB2yI,GAAwBhkJ,UAAU8gI,uBAAyB,SAASkN,GAChEx/G,GAAOw4B,MAAO,GAAEvlD,+BAA+BusI,KAC/C,MAAMgb,EAAUvnJ,KAAKwiJ,sBAAwBjW,EAI7C,OAFAvsI,KAAKwiJ,oBAAsBjW,EAEvBvsI,KAAKujJ,kBACLvjJ,KAAKojJ,SAAS/jB,uBAAuBkN,IAG9B,GAGJgb,GAUXhF,GAAwBhkJ,UAAU+8H,oCAAsC,WACpE,IAAKt7H,KAAKgkF,eAAene,WAGrB,OAFA94C,GAAOw4B,MAAO,GAAEvlD,8CAETsmB,QAAQC,UAEnB,MAAM+jI,EAAkBtqJ,KAAKmlJ,qBACvBoF,EAAcvqJ,KAAK6oJ,iBAAiB12D,IAE1C,IAAKo4D,EACD,OAAOjkI,QAAQC,UAEnB,MAAMqtB,EAAa22G,EAAYv+E,gBACzBw+E,EAAaxqJ,KAAK2nJ,yBAtwEW,sBADD,qBAmxElC,OAJA56H,GAAOtf,KAAM,GAAEzN,qDAAqDwqJ,WAAoBF,KACxF12G,EAAW62G,sBAAwBD,EACnCxqJ,KAAKojJ,SAASf,0BAA0BzuG,GAEjC22G,EAAYr+E,cAAct4B,IAYrC2uG,GAAwBhkJ,UAAU28H,cAAgB,WAAW,UAGzD,GAAIl7H,KAAK04H,4BAA8B3M,GAAc/xF,MAAQv9B,OAAO8pE,aAChE,OAAOjgD,QAAQC,UAEnB,MAAM+jI,EAAkBtqJ,KAAKmlJ,qBAE7B,IAAKmF,EACD,OAAOhkI,QAAQC,UAGnB,MAAMo1E,EAAY2uD,EAAgBnX,eAOlC,MAAM,UAAAnzI,KAAK4J,eAAL,mBAAcwrH,oBAAd,eAA4B+tB,mBAAoBnjJ,KAAK2nJ,0BAA4B3nJ,KAAKujJ,kBACxF,OAAOj9H,QAAQC,UAGnB,MAAMmkI,EAAmBJ,EAAgBvU,iBAClCuU,EAAgBvU,gBAAgB5xI,KAAOmmJ,EAAgBjX,cACxDkX,EAAcvqJ,KAAK6oJ,iBAAiB12D,IAE1C,IAAKo4D,EACD,OAAOjkI,QAAQC,UAEnB,MAAMqtB,EAAa22G,EAAYv+E,gBAE/B,KAAI,UAACp4B,EAAWq4B,iBAAZ,aAAC,EAAsB1sE,QACvB,OAAO+mB,QAAQC,UAGnB,GAAIvmB,KAAKk9I,iBACL,IAAK,MAAMj6I,KAAY2wC,EAAWq4B,UAC9B,GAAIr4B,EAAWq4B,UAAU78D,eAAenM,GAAW,CAC/C,MAAMipF,EAAUlsF,KAAK2nJ,yBAKf+C,EAAmBpI,GAz0Ed,IA60EL3mD,IAAcC,GAAUpiE,SAAWtY,GAAQu+D,uBACvC14E,EACA/G,KAAKojJ,SAASlC,2BAA2Bj+I,GAAU+0C,WAE7DjrB,GAAOtf,KAAM,GAAEzN,iCAAiCksF,kBACvClsF,KAAKojJ,SAASlC,2BAA2Bj+I,GAAUmoD,OAC5DxX,EAAWq4B,UAAUhpE,GAAU+0C,WAAak0C,OAGjD,OAEH,IAAIA,EAAO,UAAGlsF,KAAKwlJ,gCAAR,aAAG,EAA+BrE,KAE7C,GAAIxlD,IAAcC,GAAUriE,OAAQ,CAEhC,MAAMoxH,EAAc3qJ,KAAK4jJ,qBACnBt3I,KAAKC,MAAM+9I,EAAgBl+D,WAAapsF,KAAK4jJ,sBAC7C,EACA3gJ,EAAWjD,KAAKojJ,SAASlC,2BAC1Bx2I,MAAKkgJ,GAASA,EAAM9+E,wBAA0B6+E,IAE/C1nJ,IACA8pB,GAAOtf,KAAM,GAAEzN,4BAA4BiD,EAAS+0C,2BAA2BsyG,KAC/Ep+D,EAAUjpF,EAAS+0C,YAG3BpE,EAAWq4B,UAAU,GAAGj0B,WAAak0C,EAIzC,OAFAlsF,KAAKojJ,SAASf,0BAA0BzuG,GAEjC22G,EAAYr+E,cAAct4B,IAGrC2uG,GAAwBhkJ,UAAUumE,qBAAuB,SAASxuB,GAS9D,GARAt2C,KAAK8kI,MAAM,qCAAsC4f,GAAQpuG,IAIzDA,EAAct2C,KAAK8pJ,WAAWxzG,GAIzBt2C,KAAKujJ,kBAYH,IAAKvjJ,KAAK8mF,MAAO,CACpB,MAAM+jE,EAAqB7qJ,KAAKgkF,eAAe6yC,kBAG/CvgF,EAAct2C,KAAKyjJ,QAAQrK,cAAc9iG,EAAau0G,GACtD7qJ,KAAK8kI,MACD,gDACA4f,GAAQpuG,IAERt2C,KAAKk9I,kBAEL5mG,EAAct2C,KAAKm9I,UAAUtwI,uBAAuBypC,GAGpDA,EAAct2C,KAAKojJ,SAASzB,kCAAkCrrG,GAC9Dt2C,KAAK8kI,MACD,oDACA4f,GAAQpuG,WA3BZt2C,KAAKk9I,kBAEL5mG,EAAct2C,KAAKm9I,UAAUtwI,uBAAuBypC,GAAa,GACjEt2C,KAAK8kI,MACD,kDACA4f,GAAQpuG,KAIhBA,EAhqCe,SAASlsC,GAC5B,GAAoB,iBAATA,GAA8B,OAATA,GACL,iBAAbA,EAAKjE,IAGf,OAFA4mB,GAAOhF,KAAK,kDAEL3d,EAIX,MAAMlB,EAAYvE,EAAQ,MACpByB,EAAU8C,EAAUpE,MAAMsF,EAAKjE,UAEd,IAAZC,QACyB,IAAlBA,EAAQC,OACflI,MAAMC,QAAQgI,EAAQC,QAC7BD,EAAQC,MAAM7B,SAAQoE,IASlB,MAAMkiJ,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArBniJ,EAAM6B,YACVtM,MAAMC,QAAQwK,EAAM6B,aACvB7B,EAAM6B,WAAWjG,SAAQmG,SACU,IAApBA,EAAMC,WACU,QAApBD,EAAMC,gBACkB,IAAhBD,EAAMlB,OACbqhJ,EAAW/nJ,KAAKwC,OAAOoF,EAAMlB,MAAMhM,MAAM,KAAK,QAM1DU,MAAMC,QAAQwK,EAAMa,OAAQ,CAC5B,IAAInK,EAEJ,IAAKA,EAAI,EAAGA,EAAIsJ,EAAMa,MAAMlK,OAAQD,IACF,iBAAnBsJ,EAAMa,MAAMnK,SACa,IAAtBsJ,EAAMa,MAAMnK,GAAG6E,IACtB2mJ,EAAWl/I,QAAQhD,EAAMa,MAAMnK,GAAG6E,KAAO,IAC5C4mJ,EAAahoJ,KAAK6F,EAAMa,MAAMnK,WACvBsJ,EAAMa,MAAMnK,IAI3B,IAAKA,EAAI,EAAGA,EAAIsJ,EAAMa,MAAMlK,OAAQD,SACF,IAAnBsJ,EAAMa,MAAMnK,IACnByrJ,EAAahoJ,KAAK6F,EAAMa,MAAMnK,IAItCsJ,EAAMa,MA0BtB,SAAuCy/G,EAAY,IAC/C,IAAKhoG,GAAQy9D,aAAez9D,GAAQm+D,qBAAqB,IACrD,OAAO6pC,EAGX,IAAI8hC,EAAgB,IAAK9hC,GAsBzB,OApB2BA,EAAU5iH,QAAOykH,GACjB,YAAvBA,EAASnnH,WAA8C,MAAnBmnH,EAASlnH,QAC5CoD,KAAI8jH,GAAYA,EAAS5mH,KAEXK,SAAQymJ,IAEvB,MAAMC,EAAYF,EAActgJ,MAAKmiB,GACjCA,EAAK1oB,KAAO8mJ,GAA6B,UAAnBp+H,EAAKjpB,YAE/BsnJ,EAAUrnJ,MAAS,GAAEsoH,KAAAA,YAA2B8+B,IAGhDD,EACMA,EAAc1kJ,QAAOumB,GAAQA,EAAK1oB,KAAO8mJ,IAI/CD,EAAcjoJ,KAAKmoJ,MAGhBF,EArDmBG,CAA8BJ,OAKxD,MAAM5R,EAASjwI,EAAUrE,MAAMuB,GAG/B,OAAO,IAAI6H,sBAAsB,CAC7BzO,KAAM4K,EAAK5K,KACX2G,IAAKgzI,IA6lCSiS,CAAe90G,GA+BjC,OAPAA,EAAct2C,KAAK6nJ,iBAAiBvxG,GAEhCt2C,KAAKujJ,mBAELjtG,EAAct2C,KAAKojJ,SAAS5B,0BAA0BlrG,IAGnD,IAAIhwB,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKgkF,eAAelf,qBAAqBxuB,GACpC2rB,MAAK,KACFjiE,KAAK8kI,MAAM,iCACX,MAAM+d,EAAcx6B,GAAAA,SAAiB/xE,EAAYnwC,KAE7C08I,IAAgB7iJ,KAAK6iJ,cACrB7iJ,KAAK6iJ,YAAcA,EACnB7iJ,KAAKwqF,aAAa5iE,KACduzE,KAAAA,qBAAgCn7F,KAAM6iJ,IAE9Ct8H,OACD3W,IACC5P,KAAK8kI,MAAM,gCAAiCl1H,GAC5C5P,KAAKwqF,aAAa5iE,KACduzE,KAAAA,8BACAvrF,EACA5P,MACJ6R,EAAOjC,UAevB2yI,GAAwBhkJ,UAAU48H,yBAA2B,SAAStpC,EAAc,MAAM,MACtF,GAAIA,EAAc,EACd,MAAM,IAAIpjF,MAAO,wBAAuBojF,KAI5C,GAAI3wE,GAAQ+9D,gBACR,OAAO34D,QAAQC,UAInB,MAAM8kI,EAA4B,OAAhBx5D,EAAuB7xF,KAAK4jJ,qBAAuB/xD,EAOrE,GALA7xF,KAAK4jJ,qBAAuByH,EAKV,OAAdA,EACA,OAAO/kI,QAAQC,UAGnBwG,GAAOhjB,IAAK,GAAE/J,8BAA8BqrJ,KAE5C,MAAMf,EAAkBtqJ,KAAKmlJ,qBAE7B,IAAKmF,GAAmBA,EAAgB/yD,UACpC,OAAOjxE,QAAQC,UAEnB,MAAMgkI,EAAcvqJ,KAAK6oJ,iBAAiB12D,IAE1C,IAAKo4D,EACD,OAAOjkI,QAAQC,UAEnB,MAAMqtB,EAAa22G,EAAYv+E,gBAE/B,KAAKp4B,MAAAA,GAAD,UAACA,EAAYq4B,iBAAb,aAAC,EAAuB1sE,QACxB,OAAO+mB,QAAQC,UAGnB,GAAIvmB,KAAKk9I,gBAAiB,CAEtBl9I,KAAKsrJ,sBAAwBtrJ,KAAKojJ,SAASrB,gCAAgCuI,EAAgBx6H,OACtF7oB,KAAI+0B,GAAUA,GAAUqvH,IAM7B,MAAME,EAAgBvrJ,KAAKojJ,SAASlC,2BAC/B5jB,WAAUstB,GAAyC,IAAhCA,EAAM9+E,wBAU9B,GARIu/E,EAAY,IAAwB,IAAnBE,IACjBvrJ,KAAKsrJ,sBAAsBC,IAAiB,GAO5CvrJ,KAAK2nJ,0BAA4B3nJ,KAAKujJ,mBAAqBriI,GAAQw+D,gBAAiB,CACpF,MAAM8rE,EAAyBtqI,GAAQkvD,YAAc,EAAIpwE,KAAKsrJ,sBAAsB/rJ,OAAS,EAE7FS,KAAKsrJ,sBAAwBtrJ,KAAKsrJ,sBAC7BrkJ,KAAI,CAAChE,EAAUijE,IAAQA,IAAQslF,IAGxC,IAAK,MAAMvoJ,KAAY2wC,EAAWq4B,UAC1Br4B,EAAWq4B,UAAU78D,eAAenM,KACpC2wC,EAAWq4B,UAAUhpE,GAAUspI,OAASvsI,KAAKsrJ,sBAAsBroJ,IAG3EjD,KAAKojJ,SAASf,0BAA0BzuG,QACjCy3G,EAAY,GAEnBz3G,EAAWq4B,UAAU,GAAGH,sBAClBw+E,EAAgB3uD,YAAcC,GAAUpiE,SAAW8wH,EAAgBl+D,YAAci/D,EAC7E,EACA/+I,KAAKC,MAAM+9I,EAAgBl+D,WAAai/D,GAClDz3G,EAAWq4B,UAAU,GAAGsgE,QAAS,IAEjC34F,EAAWq4B,UAAU,GAAGH,2BAAwB/kE,EAChD6sC,EAAWq4B,UAAU,GAAGsgE,QAAS,GAKrC,OAFAx/G,GAAOtf,KAAM,GAAEzN,2BAA2BqrJ,eAAuBpgI,KAAKF,UAAU6oB,EAAWq4B,cAEpFs+E,EAAYr+E,cAAct4B,GAAYquB,MAAK,KAM9C,GALAqoF,EAAgB5V,qBAAuB2W,EACvCrrJ,KAAKwqF,aAAa5iE,KAAKuzE,KAAAA,2CAAsDmvD,GAIzEtqJ,KAAK8mF,QAAU9mF,KAAKk9I,gBACpB,OAAOl9I,KAAKk7H,oBAkBxBqnB,GAAwBhkJ,UAAUghI,uBAAyB,SAASgN,GAChEx/G,GAAOw4B,MAAO,GAAEvlD,+BAA+BusI,KAC/C,MAAMgb,EAAUvnJ,KAAK2iJ,sBAAwBpW,EAI7C,OAFAvsI,KAAK2iJ,oBAAsBpW,EAEvBvsI,KAAKujJ,kBACLvjJ,KAAKojJ,SAAS7jB,uBAAuBgN,IAG9B,GAGJgb,GAYXhF,GAAwBhkJ,UAAUktJ,UAAY,SAASC,EAAOxgE,EAAW,IAAKygE,EAAe,KACzF,IAAK3rJ,KAAKyiJ,YAAa,CACnB,GAAIziJ,KAAKgkF,eAAene,WAAY,CAChC,MAAM+lF,EAAY5rJ,KAAKgkF,eAAene,aAAan7D,MAAKlI,GAAKA,EAAEijE,OAE/DzlE,KAAKyiJ,YAAcmJ,GAAaA,EAAUnmF,KAC1CzlE,KAAKyiJ,aAAe11H,GAAOtf,KAAM,GAAEzN,gDAGvC,IAAKA,KAAKyiJ,YAAa,CACnB,MAAMoJ,EAAkB1tJ,MAAMw8C,KAAK36C,KAAK6sG,YAAYlhG,UAAUjB,MAAK5H,GAAKA,EAAE+tB,iBAEtE7wB,KAAKgkF,eAAere,kBAAoBkmF,IACxC7rJ,KAAKyiJ,YAAcziJ,KAAKgkF,eAAere,iBAAiBkmF,EAAgBvY,aAE5EtzI,KAAKyiJ,aAAe11H,GAAOtf,KAAM,GAAEzN,iEAGnCA,KAAKyiJ,cACLziJ,KAAKyiJ,YAAYqJ,aAAe9rJ,KAAK+rJ,cAAc7lJ,KAAKlG,OAIhE,GAAIA,KAAKyiJ,YAAa,CAClB,GAAIziJ,KAAKyiJ,YAAYuJ,WAOjB,YANAhsJ,KAAK0iJ,gBAAgB3/I,KAAK,CACtB2oJ,MAAAA,EACAxgE,SAAAA,EACAygE,aAAAA,IAMR3rJ,KAAKyiJ,YAAYwJ,WAAWP,EAAOxgE,EAAUygE,QAE7C5+H,GAAOhF,KAAM,GAAE/nB,iDAavBuiJ,GAAwBhkJ,UAAUwtJ,cAAgB,SAASx0H,GAGvD,GAAIv3B,KAAKyiJ,aAA8B,KAAflrH,EAAM20H,MAAelsJ,KAAK0iJ,gBAAgBnjJ,OAAQ,CACtE,MAAM,MAAEmsJ,EAAF,SAASxgE,EAAT,aAAmBygE,GAAiB3rJ,KAAK0iJ,gBAAgBzsI,QAE/DjW,KAAKyiJ,YAAYwJ,WAAWP,EAAOxgE,EAAUygE,KAQrDpJ,GAAwBhkJ,UAAUk6H,qBAAuB,WACrD,MAAMwjB,EAAU5zB,GAAAA,eAEhBt7F,GAAOtf,KAAM,GAAEzN,oCAAoCi8I,KACnDj8I,KAAKo9I,eAAekC,eAAerD,IAOvCsG,GAAwBhkJ,UAAUw/H,kBAAoB,WAClDhxG,GAAOtf,KAAM,GAAEzN,qCACfA,KAAKo9I,eAAegC,uBAQxBmD,GAAwBhkJ,UAAUy6D,MAAQ,WACtCh5D,KAAK8kI,MAAM,QAGX9kI,KAAKm0H,eAAepqG,IAAIipG,GAAoChzH,KAAK+iJ,mBACjE/iJ,KAAKm0H,eAAepqG,IAAIipG,GAAyChzH,KAAK8iJ,uBACtE9iJ,KAAKujJ,kBAAoBvjJ,KAAKgkF,eAAeh7D,oBAAoB,QAAShpB,KAAK8jJ,SAE/E,IAAK,MAAMqI,KAAcnsJ,KAAKy8H,aAAa9wH,SACvC,IAAK,MAAMy0F,KAAe+rD,EAAWxgJ,SACjC3L,KAAK8mJ,mBAAmB1mD,GAGhCpgG,KAAKy8H,aAAa71F,QAElB5mC,KAAKkiJ,cAAgB,GAErBliJ,KAAKyiJ,YAAc,KACnBziJ,KAAK0iJ,gBAAkB,GAElB1iJ,KAAK+3F,IAAIq0D,sBAAsBpsJ,OAChC+sB,GAAO1V,MAAO,GAAErX,iDAEO,OAAvBA,KAAKqjJ,gBACL5mJ,OAAOwtF,cAAcjqF,KAAKqjJ,eAC1BrjJ,KAAKqjJ,cAAgB,MAEzBt2H,GAAOtf,KAAM,GAAEzN,+BACfA,KAAKgkF,eAAehrB,SAGxBupF,GAAwBhkJ,UAAUquE,aAAe,SAASpL,GACtD,OAAOxhE,KAAKqsJ,sBAAqB,EAAoB7qF,IAGzD+gF,GAAwBhkJ,UAAUiuE,YAAc,SAAShL,GACrD,OAAOxhE,KAAKqsJ,sBAAqB,EAAkB7qF,IAGvD+gF,GAAwBhkJ,UAAU8tJ,qBAAuB,SACjDC,EACA9qF,GACJ,MAAM+qF,EAAUD,EAAU,QAAU,SAEpCtsJ,KAAK8kI,MAAO,SAAQynB,IAAWthI,KAAKF,UAAUy2C,EAAa,KAAM,MAEjE,MAAMgrF,EAAgB,CAACrS,EAAWsS,EAAWC,KACzC,IACI1sJ,KAAK8kI,MACA,SAAQynB,2BAAkC7H,GAAQvK,IAElDn6I,KAAKujJ,mBAGDvjJ,KAAK6kJ,mBAAmB1yD,KACrBnyF,KAAKo9I,eAAemC,wBACxBv/I,KAAKy4H,uBAIT0hB,EAAY,IAAIlsI,sBAAsB,CAClCzO,KAAM26I,EAAU36I,KAChB2G,IAAKnG,KAAKo9I,eAAeoC,gCACrBrF,EAAUh0I,OAGlBnG,KAAK8kI,MACA,SAAQynB,wEAET7H,GAAQvK,KAGhB,MAAMmQ,EAAkBtqJ,KAAKmlJ,qBAGzBnlJ,KAAKk9I,iBAAmBh8H,GAAQ4/D,gCAC5BwpE,MAAAA,OAAA,EAAAA,EAAiBnX,kBAAmBv3C,GAAUriE,QAC/Cv5B,KAAKujJ,mBACJvjJ,KAAK2nJ,4BAETxN,EAAYn6I,KAAKm9I,UAAUjvI,sBAAsBisI,GACjDn6I,KAAK8kI,MACA,SAAQynB,wCAET7H,GAAQvK,MAGXn6I,KAAK4J,QAAQsxG,YAAch6F,GAAQ4/D,+BAEpCq5D,EAAY,IAAIlsI,sBAAsB,CAClCzO,KAAM26I,EAAU36I,KAChB2G,IAAKnG,KAAKu9I,YAAYqB,eAAezE,EAAUh0I,OAGnDnG,KAAK8kI,MACA,SAAQynB,2CAET7H,GAAQvK,KAGhB,MAAMjvI,EAAUlL,KAAKgnJ,gBAAgB7M,GAErCn6I,KAAK2sJ,sBAAsBzhJ,GAE3BuhJ,EAAUtS,GACZ,MAAOz3I,GACL1C,KAAK8kI,MAAO,SAAQynB,WAAkB7pJ,GACtC1C,KAAK8kI,MAAO,SAAQynB,WAAkB7H,GAAQvK,IAC9CptH,GAAO1V,MAAO,GAAErX,cAAcusJ,WAAkB7pJ,EAAGgiJ,GAAQvK,IAE3DuS,EAAShqJ,KAIXkqJ,EAAgB,CAACh9I,EAAK88I,KACxB1sJ,KAAK8kI,MAAO,SAAQynB,aAAoB38I,GACxC,MAAMi9I,EACAP,EACInxD,KAAAA,oBACAA,KAAAA,qBAEVn7F,KAAKwqF,aAAa5iE,KAAKilI,EAAWj9I,EAAK5P,MAEvC0sJ,EAAS98I,IAKb,GAAI5P,KAAKwjJ,iCAAkC,CACvC,MAAMr+E,EAAcnlE,KAAKgkF,eAAenV,kBACnCnkE,MAAK5H,IAAC,eAAIA,EAAE8iB,WAAY,UAAA9iB,EAAE8iB,gBAAF,mBAAYkK,aAAZ,eAAmBinB,QAASo7C,MAEzD,GAAIhtB,EAAa,WACb,IAAI2nF,EAAY,UAAGplF,eAAe2Y,gBAAgB8R,WAAlC,aAAG,EAAiD57C,OACpE,MAAMnlB,EAAQ,UAAGpxB,KAAK8nJ,uBAAR,aAAG,EAAsB12H,SACjCuqC,EAAM,UAAG37D,KAAK8nJ,uBAAR,aAAG,EAAsBnsF,OAEjCmxF,GAAgB17H,GAAYuqC,EAG5BmxF,EAAat7I,MAAKwlC,GACPA,EAAK5lB,SAAS9P,gBAAmB,GAAE6wE,MAAmB/gE,KAAc,EAAI,IAE5E07H,GAAgB17H,IACvB07H,EAAeA,EACVxmJ,QAAO0wC,GAAQA,EAAK5lB,SAAS9P,gBAAmB,GAAE6wE,MAAmB/gE,OAG9E,IACI+zC,EAAY4nF,oBAAoBD,GAClC,MAAOl9I,GACLmd,GAAOhF,KAAM,GAAE/nB,iCAAiCoxB,YAAmBuqC,YAAkB/rD,KAKjG,OAAO,IAAI0W,SAAQ,CAACC,EAAS1U,KACzB,IAAIm7I,EAGAA,EADAV,EACYtsJ,KAAKgkF,eAAexX,YAAYhL,GAEhCxhE,KAAKgkF,eAAepX,aAAapL,GAGjDwrF,EACK/qF,MACG97D,GAAOqmJ,EAAcrmJ,EAAKogB,EAAS1U,KACnCwF,GAASu1I,EAAcv1I,EAAOxF,SAS9C0wI,GAAwBhkJ,UAAU0uJ,oBAAsB,SAAStS,GAC7D,OAAIA,GAAWA,EAAQrrB,QAAUqrB,EAAQrrB,OAAO/vH,OACrCo7I,EAAQrrB,OAAO,GAAG7lH,MAAM,GACxBkxI,GAAWA,EAAQlxI,OAASkxI,EAAQlxI,MAAMlK,OAC1Co7I,EAAQlxI,MAAM,GAGlB,MAUX84I,GAAwBhkJ,UAAUouJ,sBAAwB,SAASzhJ,GAC/D,IAAK,MAAM4kB,KAAS9vB,KAAK6sG,YAAYlhG,SAAU,CAC3C,MAAMuhJ,EAAmBltJ,KAAKujJ,iBAAmBzzH,EAAM0nE,UAAY1nE,EAAM+lH,WAEzE,GAAI3qI,EAAQs/B,IAAI0iH,GAAmB,CAC/B,MAAMjR,EAAU/wI,EAAQiP,IAAI+yI,GAE5B,IAAKjR,EAGD,YAFAlvH,GAAO1V,MAAO,GAAErX,iCAAiCktJ,KAIrD,MAAMlR,EAAUh8I,KAAKiiJ,WAAW9nI,IAAI2V,EAAMwkH,OACpC6Y,EAAantJ,KAAKitJ,oBAAoBhR,GACtCmR,EAAaptJ,KAAKitJ,oBAAoBjR,GAGxCmR,IAAeC,IACfA,GAAcrgI,GAAO1V,MAAO,GAAErX,mCAAmC8vB,gBAAoBmsH,KACrFj8I,KAAKiiJ,WAAWh5H,IAAI6G,EAAMwkH,MAAO2H,GACjCj8I,KAAKwqF,aAAa5iE,KAAKuzE,KAAAA,yBAAoCrrE,EAAOq9H,SAE9Dr9H,EAAM2B,gBAAmB3B,EAAMynE,WAIvCxqE,GAAOhF,KAAM,GAAE/nB,kDAAkD8vB,aAAiBo9H,OAK9F3K,GAAwBhkJ,UAAUgvE,gBAAkB,SAASx7B,GAQzD,OAPA/xC,KAAK8kI,MAAM,kBAAmB75G,KAAKF,UAAU,CACzCgnB,UAAWA,EAAUA,UACrB29B,OAAQ39B,EAAU29B,OAClBC,cAAe59B,EAAU49B,cACzBr9B,iBAAkBP,EAAUO,kBAC7B,KAAM,MAEFtyC,KAAKgkF,eAAezW,gBAAgBx7B,IAQ/CwwG,GAAwBhkJ,UAAUm0F,0BAA4B,WAC1D,IAAI26D,EAAgB,EAEoC,MAMxD,OANIrtJ,KAAKk9I,iBAAmBl9I,KAAKsrJ,sBAC7B+B,EAAa,UAAGrtJ,KAAKsrJ,sBAAsBhlJ,QAAOmB,GAAUo4E,QAAQp4E,YAAvD,aAAG,EAA8DlI,OACvES,KAAKk9I,kBACZmQ,EAAgBtM,GAAexhJ,QAG5B8tJ,GASX9K,GAAwBhkJ,UAAUqoE,SAAW,WACzC,OAAO5mE,KAAKgkF,eAAepd,YAU/B27E,GAAwBhkJ,UAAU6pJ,0BAA4B,SAASt4H,GACnE,MAAMwkH,EAAQxkH,EAAMwkH,MACpB,IAAI5qI,EAAW1J,KAAKmnJ,SAAS7S,GAO7B,GALI5qI,GACAqjB,GAAO1V,MAAO,GAAErX,6CAA6Cs0I,MAI7Dt0I,KAAKk9I,iBACDptH,EAAMqjH,iBAAmBv3C,GAAUriE,QAAWv5B,KAAK2nJ,yBAavDj+I,EAAW,CACPD,MAAO,CAAE4+G,GAAAA,gBACTiH,OAAQ,QAfsE,CAClF5lH,EAAW,CACPD,MAAO,GACP6lH,OAAQ,IAEZ,IAAK,IAAIhwH,EAAI,EAAGA,EAAIyhJ,GAAexhJ,OAAQD,IACvCoK,EAASD,MAAM1G,KAAKslH,GAAAA,gBAExB3+G,EAAS4lH,OAAOvsH,KAAK,CACjB0G,MAAOC,EAASD,MAAMjD,QACtBoE,UAAW,QAQnB,IAAK5K,KAAK4J,QAAQsxG,WAAY,CAK1B,MAAMoyC,EAAe5jJ,EAASD,MAAMlK,OAEpC,IAAK,IAAID,EAAI,EAAGA,EAAIguJ,IAAgBhuJ,EAAG,CACnC,MAAMwM,EAAcpC,EAASD,MAAMnK,GAC7Bi/I,EAAUl2B,GAAAA,eAEhB3+G,EAASD,MAAM1G,KAAKw7I,GACpB70I,EAAS4lH,OAAOvsH,KAAK,CACjB0G,MAAO,CAAEqC,EAAayyI,GACtB3zI,UAAW,SAOvB,OAHAlB,EAASyC,KAAO2jB,EAAM+lH,WACtB71I,KAAKiiJ,WAAWh5H,IAAIqrH,EAAO5qI,GAEpBA,GAQX64I,GAAwBhkJ,UAAU2N,gBAAkB,WAChD,OAAOlM,KAAKujJ,kBAQhBhB,GAAwBhkJ,UAAUC,SAAW,WACzC,MAAQ,UAASwB,KAAKmE,WAAWnE,KAAK8mF,MAAQ,MAAQ,UC5/F1D,MAAM/5D,IAASmB,EAAAA,EAAAA,iCAMf,IAAIq/H,GAA0B,EAO1BC,GAAoB,EAiBxB,SAASC,GAAmBC,EAAsB,IAC9C,OAAOA,EAAoBzmJ,KAAI0mJ,IAC3B,MAAM,SACF5pF,EADE,WAEF+jD,EAFE,OAGFrgH,EAHE,MAIFqoB,EAJE,UAKF6rE,EALE,QAMF61C,GACAmc,GAEE,SAAEtrF,EAAF,WAAYR,GAAe/xC,EAAMo6C,cAOvC,OAFAsjF,GAAoB/kE,GAAqB+kE,IAElC,IAAInZ,GAAgB,CACvBhyE,SAAAA,EACAR,WAAAA,EACAka,UAAWjsD,EAAMinB,KACjBu9F,MAAOkZ,GACPzpF,SAAAA,EACA+jD,WAAAA,EACArgH,OAAAA,EACAqoB,MAAAA,EACA6rE,UAAWA,GAAa,KACxB61C,QAAAA,OAQG,MAAMkU,WAAYh/C,GAM7B9nG,YAAYgzB,EAAYhoB,EAAU,IAC9B8zE,QACA19E,KAAK4xB,WAAaA,EAMlB5xB,KAAK4tJ,gBAAkB,IAAI/nH,IAE3B7lC,KAAK6sG,YAAc,GAEnB7sG,KAAK4J,QAAUA,EAKf5J,KAAKqqI,SAAW,KAUhBrqI,KAAK6tJ,YAAS9mJ,EAQd/G,KAAK8tJ,gBAAkB,KASvB9tJ,KAAK+tJ,qBAAkBhnJ,EAQvB/G,KAAKguJ,mBAAqB,KAG1BhuJ,KAAKiuJ,qBAAuBjuJ,KAAKw/F,gBAAgBt5F,KAAKlG,MAEtDA,KAAKkuJ,qBAAuBluJ,KAAKkuJ,qBAAqBhoJ,KAAKlG,MAC3DA,KAAKmuJ,iCACCnuJ,KAAKmuJ,iCAAiCjoJ,KAAKlG,MAGjDA,KAAKouJ,WAAaC,KAAAA,KAIdxa,GAAAA,wBAAiC,YACjCA,GAAAA,YACI14C,KAAAA,4BACAn7F,KAAKmuJ,kCAGTta,GAAAA,YACI14C,KAAAA,oBACAn7F,KAAKkuJ,uBAUjBI,UACIza,GAAAA,eAAwB14C,KAAAA,4BAAuCn7F,KAAKmuJ,kCACpEta,GAAAA,eAAwB14C,KAAAA,oBAA+Bn7F,KAAKkuJ,sBAExDluJ,KAAKuuJ,sBACLvuJ,KAAK2T,eACDwnF,KAAAA,kBACAn7F,KAAKuuJ,sBAYO,yBAACC,GACrB,OAAOf,GAAmBe,GAYO,sCAAC5kJ,GAClC,OAAOiqI,GAAAA,+BAAwCjqI,GAC1Cq4D,MAAKusF,GAAcf,GAAmBe,KAW/CC,wBAAwBzqE,EAAgBomD,GACpCpqI,KAAKqqI,SAAW,IAAIF,GAAcnmD,EAAgBomD,EAAOpqI,KAAKwqF,cAE9DxqF,KAAKuuJ,qBAAuB,KACxB,MAAMG,EAAW,CAACr3I,EAAOs3I,EAAS9qJ,KAC9B4zB,KAAAA,iBAAsCpgB,GACtC0V,GAAO1V,MAAO,eAAcs3I,KAAW1jI,KAAKF,UAAUlnB,uBAA4BwT,IAKtF,GAAIrX,KAAK4uJ,0BACL,IACI5uJ,KAAKqqI,SAAS8B,uCAAuCnsI,KAAK4uJ,2BAC5D,MAAOv3I,GACLq3I,EAASr3I,EAAO,2BAA4BrX,KAAK4uJ,2BAGzD,GAAI5uJ,KAAKguJ,mBACL,IACIhuJ,KAAKqqI,SAASyB,6BAA6B9rI,KAAKguJ,oBAClD,MAAO32I,GACLq3I,EAASr3I,EAAO,gCAAiCrX,KAAKguJ,oBAG9D,QAAoC,IAAzBhuJ,KAAK+tJ,gBACZ,IACI/tJ,KAAKqqI,SAAS4B,mCAAmCjsI,KAAK+tJ,iBACxD,MAAO12I,GACLq3I,EAASr3I,EAAO,0BAA2BrX,KAAK+tJ,iBAGxD,QAA2B,IAAhB/tJ,KAAK6tJ,SAA2C,IAAjB7tJ,KAAK6tJ,OAC3C,IACI7tJ,KAAKqqI,SAASuB,oBAAoB5rI,KAAK6tJ,QACzC,MAAOx2I,GACLq3I,EAASr3I,EAAO,oBAAqBrX,KAAK6tJ,QAGlD,IACI7tJ,KAAKqqI,SAAS+B,qBAAqBpsI,KAAKouJ,YAC1C,MAAO/2I,GACLq3I,EAASr3I,EAAO,mBAAoBrX,KAAKouJ,YAG7CpuJ,KAAK2T,eAAewnF,KAAAA,kBAA6Bn7F,KAAKuuJ,sBACtDvuJ,KAAKuuJ,qBAAuB,MAEhCvuJ,KAAK+S,YAAYooF,KAAAA,kBAA6Bn7F,KAAKuuJ,sBAGnDvuJ,KAAK+S,YAAYooF,KAAAA,uBAAkCn7F,KAAKiuJ,sBAW5DC,uBACIluJ,KAAKmuJ,iCAAiCta,GAAAA,wBAQ1Cr0C,gBAAgBgtC,EAAiB,IAC7B,MAAMqiB,EAAoB7uJ,KAAK8tJ,iBAAmB,GAClD,IAAIgB,EAAwB,GACxBC,EAAyB,GAE7B/uJ,KAAK8tJ,gBAAkBthB,EAEvBsiB,EAAwBD,EAAkBvoJ,QACtCnC,IAAOnE,KAAK29F,UAAUx5F,KAE1B4qJ,EAAyBviB,EAAelmI,QACpCnC,IAAyC,IAAnC0qJ,EAAkBjjJ,QAAQzH,KAEpCnE,KAAK4xB,WAAW44D,aAAa5iE,KACzButE,GACA25D,EACAC,GAOR5yD,cACQn8F,KAAKqqI,WAODrqI,KAAKqqI,UAAmC,cAAvBrqI,KAAKqqI,SAASmB,MAC/BxrI,KAAKqqI,SAASrxE,QAGlBh5D,KAAKqqI,SAAW,MASxBliB,2BAA2BC,GACvByrB,GAAAA,2BAAoCzrB,GASxC4mC,+BAA+BxtF,GAC3BxhE,KAAK4uJ,0BAA4BptF,EAE7BxhE,KAAKqqI,UAAYrqI,KAAKqqI,SAASa,UAC/BlrI,KAAKqqI,SAAS8B,uCAAuC3qE,GAa7Do5D,2BAA2BF,GACvB16H,KAAK+tJ,gBAAkBrzB,EAEnB16H,KAAKqqI,UAAYrqI,KAAKqqI,SAASa,UAC/BlrI,KAAKqqI,SAAS4B,mCAAmCvR,GAWzDu0B,aAAatzD,GACL37F,KAAKouJ,aAAezyD,IACpB37F,KAAKouJ,WAAazyD,EAEd37F,KAAKqqI,UAAYrqI,KAAKqqI,SAASa,UAC/BlrI,KAAKqqI,SAAS+B,qBAAqBzwC,IAgB/CuzD,gBAAgBC,GACZnvJ,KAAKguJ,mBAAqBmB,EAEtBnvJ,KAAKqqI,UAAYrqI,KAAKqqI,SAASa,UAC/BlrI,KAAKqqI,SAASyB,6BAA6BqjB,GASjC,mBAACtC,EAAWn5I,GAC1BmgI,GAAAA,YAAqBgZ,EAAWn5I,GAQf,sBAACm5I,EAAWn5I,GAC7BmgI,GAAAA,eAAwBgZ,EAAWn5I,GAO5B,YAAC9J,EAAU,IAGlB,OAFA5J,KAAK4J,QAAUA,EAERiqI,GAAAA,KAAc7zI,KAAK4J,SAmB9BisH,qBAAqBu5B,EAAWnhF,EAAU6Y,EAAOl9E,GAC7C,MAAMskE,EAAgBjjD,KAAKnmB,MAAMmmB,KAAKF,UAAU8oH,GAAAA,qBAEN,IAA/BjqI,EAAQ4rH,qBACfqe,GAAAA,gBAAyB3lE,EAAetkE,EAAQ4rH,oBAEhDviC,GAAWe,UAAUjS,uBACjB,CAAEyzC,mBAAoB5rH,EAAQ4rH,sBAGlC5rH,EAAQurH,0BACRpoG,GAAOw4B,MAAM,iDACb0oB,EAASohF,0BAA2B,IAGXnuI,GAAQ+9D,iBAC7B/9D,GAAQu+D,oBAAsB71E,EAAQsC,mBAG1C6gB,GAAOw4B,MAAM,gDACb0oB,EAASjE,aAAe,UAGxBpgE,EAAQyrH,iBACRpnD,EAASm6D,mBAAqB,SAMlCn6D,EAASqhF,aAAe,aAExB/B,GAA0B9kE,GAAqB8kE,IAE/C,MAAMgC,EACA,IAAIhN,GACFviJ,KACAutJ,GACA6B,EACAnhF,EAAUC,EACV4Y,EAAOl9E,GAIf,OAFA5J,KAAK4tJ,gBAAgB3kI,IAAIsmI,EAAcprJ,GAAIorJ,GAEpCA,EAYXnD,sBAAsBoD,GAClB,MAAMrrJ,EAAKqrJ,EAAwBrrJ,GAEnC,QAAInE,KAAK4tJ,gBAAgBpjH,IAAIrmC,KAEzBnE,KAAK4tJ,gBAAgB1uF,OAAO/6D,IAErB,GAWfsrJ,cAAc3/H,GACV,IAAKA,EACD,MAAM,IAAIrhB,MAAM,wCAGpBzO,KAAK6sG,YAAY9pG,KAAK+sB,GAEtBA,EAAM8B,WAAa5xB,KAAK4xB,WAO5BuzH,qBACI,MAAMuK,EAAa1vJ,KAAKsyF,eAAeH,IAGvC,OAAOu9D,EAAWnwJ,OAASmwJ,EAAW,QAAK3oJ,EAO/C4oJ,qBACI,MAAMC,EAAa5vJ,KAAKsyF,eAAeH,IAGvC,OAAOy9D,EAAWrwJ,OAASqwJ,EAAW,QAAK7oJ,EAO/C48I,qBACI,OAAO3jJ,KAAK4xB,WAAWipE,WAS3BvI,eAAevW,GACX,IAAI/O,EAAShtE,KAAK6sG,YAAYrmG,QAO9B,YALkBO,IAAdg1E,IACA/O,EAASA,EAAO1mE,QACZwpB,GAASA,EAAM0nE,YAAczb,KAG9B/O,EASXg4E,gBAAgBjpE,GACZ,IAAI0gD,EAAe,GAEnB,IAAK,MAAM/1C,KAAO1mF,KAAK4tJ,gBAAgBjiJ,SAAU,CAC7C,MAAMkkJ,EAAiBnpE,EAAIs+D,qBAAgBj+I,EAAWg1E,GAElD8zE,IACApzB,EAAeA,EAAajsH,OAAOq/I,IAI3C,OAAOpzB,EAQXlkC,aAAa10F,GACT,MAAMisJ,EAAe,GASrB,OAPA9vJ,KAAKsyF,eAAeH,IAAiB3tF,SAAQuhJ,IAEzC+J,EAAa/sJ,KAAKc,EAAQkiJ,EAAWt/D,OAASs/D,EAAWxP,aAKtDjwH,QAAQhU,IAAIw9I,GAQvBp3D,aAAa70F,GACT,MAAMisJ,EAAe,GAUrB,OARA9vJ,KAAKsyF,eAAeH,IAAiB3hF,OAAOxQ,KAAKsyF,eAAeH,KAC3D3tF,SAAQ0uI,IAEL4c,EAAa/sJ,KAAKc,EAAQqvI,EAAWzsD,OAASysD,EAAWqD,aAK1DjwH,QAAQhU,IAAIw9I,GAOvBC,iBAAiBjgI,GACb,MAAMna,EAAM3V,KAAK6sG,YAAYjhG,QAAQkkB,IAExB,IAATna,GAIJ3V,KAAK6sG,YAAYt/F,OAAOoI,EAAK,GAQT,yBAACq6I,EAAYvoJ,GACjC,OAAOosI,GAAAA,kBAA2Bmc,EAAYvoJ,GAOhC,mBAACA,GACf,OAAOosI,GAAAA,YAAqBpsI,GAOf,kBAACqoB,GACd,OAAO+jH,GAAAA,WAAoB/jH,GAOH,+BACxB,OAAO+jH,GAAAA,wBAUmB,+BAAClC,GAC3B,OAAOkC,GAAAA,wBAAiClC,GAWpB,2BACpB,OAAOzwH,GAAQ66C,cAQQ,8BACvB,OAAO83E,GAAAA,uBAQ6B,2CACpC,OAAOA,GAAAA,oCAOoC,kDAC3C,OAAOA,GAAAA,2CAOuB,mCAAC1F,GAC/B,OAAO0F,GAAAA,4BAAqC1F,GAUrB,4BAAC9rE,GACxB,OAAOwxE,GAAAA,qBAA8BxxE,GAetB,oBAAC56D,GAChB,OAAOi+I,GAAIC,iBAAiB9R,GAAAA,YAAqBpsI,IAe9B,wBAACygE,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,EAQY,wBAACz4D,GACpBokI,GAAAA,iBAA0BpkI,GAQR,uBAACmiI,GACnBiC,GAAAA,gBAAyBjC,GAOC,iCAC1B,OAAOiC,GAAAA,0BAMX77C,qBACQh4F,KAAKqqI,WACLrqI,KAAKqqI,SAASrxE,QACdh5D,KAAKqqI,SAAW,KAEhBrqI,KAAK2T,eAAewnF,KAAAA,uBAAkCn7F,KAAKiuJ,uBAYnEnxD,cAAcpW,EAAKn9E,EAAMi/E,EAAY32D,GACjC,MAAM/B,EAAQ42D,EAAIwI,eAAe3lF,GAE5BumB,IAEOA,EAAMe,gBAIPf,EAAM+B,YAAcA,GAC3B9E,GAAO1V,MACF,GAAEyY,qBAAyB+B,EAAU,KAAO,kBAGrD/B,EAAMgtE,cAActU,EAAY9B,IAR5B35D,GAAOhF,KAAM,6CAA4Cxe,MAmBjE0mJ,mBAAmB51F,EAAItjD,GACnB,IAAI/W,KAAKqqI,SAGL,MAAM,IAAI57H,MAAM,gCAFhBzO,KAAKqqI,SAAS5/B,YAAYpwC,EAAItjD,GAWtC00H,yBAAyB10H,GACjB/W,KAAKqqI,UAAYrqI,KAAKqqI,SAASa,UAC/BlrI,KAAKqqI,SAASoB,yBAAyB10H,GAU/Cm5I,SAASrsJ,GACD7D,KAAK6tJ,SAAWhqJ,IAChB7D,KAAK6tJ,OAAShqJ,EACV7D,KAAKqqI,UAAYrqI,KAAKqqI,SAASa,UAC/BlrI,KAAKqqI,SAASuB,oBAAoB/nI,GAEtC7D,KAAKwqF,aAAa5iE,KAAKuzE,KAAAA,oBAA+Bt3F,IAU9D85F,UAAUx5F,GACN,OAAQnE,KAAK8tJ,iBACN9tJ,KAAK8tJ,gBAAgBliJ,QAAQzH,IAAO,EAW/CgqJ,iCAAiC9rF,GAC7B,MAAM8tF,EAAoBnwJ,KAAKglJ,gBAAgB7yD,IAE/C,IAAK,MAAMriE,KAASqgI,EAChBrgI,EAAMskH,eAAe/xE,ICj5B1B,MAAM+tF,GAAsB,yBAMtBC,GAAuB,0BCD9B1f,GAAchsI,EAAQ,MACtBi3F,GAAYj3F,EAAQ,MACpBkzF,GAAalzF,EAAQ,MAErBooB,IAASmB,EAAAA,EAAAA,wDAQToiI,GAAoB,CACtB,CAAEv0H,MAAO,KACLC,OAAQ,KACRu0H,OAAQ,EACR5qI,OAAQ,OACR6qI,SAAU,KACd,CAAEz0H,MAAO,KACLC,OAAQ,IACRu0H,OAAQ,EACR5qI,OAAQ,OACR6qI,SAAU,MACd,CAAEz0H,MAAO,IACLC,OAAQ,IACRu0H,OAAQ,EACR5qI,OAAQ,WACR6qI,SAAU,KACd,CAAEz0H,MAAO,IACLC,OAAQ,IACRu0H,OAAQ,EACR5qI,OAAQ,WACR6qI,SAAU,KACd,CAAEz0H,MAAO,IACLC,OAAQ,IACRu0H,OAAQ,EACR5qI,OAAQ,MACR6qI,SAAU,MACd,CAAEz0H,MAAO,IACLC,OAAQ,IACRu0H,OAAQ,EACR5qI,OAAQ,MACR6qI,SAAU,OAalB,IAAIp1C,GAAe,IAmEJ,MAAMq1C,GAOjB7xJ,YAAYgzB,EAAY44D,EAAc5gF,GAAS,MAC3C5J,KAAKwqF,aAAeA,EAKpBxqF,KAAKwiG,YAAc5wE,EAKnB5xB,KAAK0wJ,YAAc,CACfC,kBAAmB,IACnBC,YAAQ7pJ,GAMZ/G,KAAK6wJ,8BAAgC,EAKrC7wJ,KAAK+zG,SAAWnqG,EAMhB5J,KAAK8wJ,aAAe,GAMpB9wJ,KAAK+wJ,mBAAqB,EAM1B/wJ,KAAKgxJ,mBAAqB,GAGtB,UAAAhxJ,KAAK+zG,SAASzwG,cAAd,eAAsB83G,cAAe,IACrCA,GAAep7G,KAAK+zG,SAASzwG,OAAO83G,cAKxCxpF,EAAW/K,GACPoqI,GACA,KACIjxJ,KAAKkxJ,8BAA8B,GACnClxJ,KAAKwqF,aAAa5iE,KACdupI,GACAnxJ,KAAK0wJ,aACT1wJ,KAAKoxJ,0BAGbx/H,EAAW+lE,KAAK5kF,YACZ8kF,GAAWx2D,8BACX,CAACy2D,EAAekJ,KACPlJ,EAAchR,OAAsB,cAAbka,IACxBhhG,KAAK+wJ,kBAAoBt0J,OAAOi/F,YAAYtsE,UAQxDwC,EAAW/K,GACPoqI,GACA,CAACh5D,EAAalhF,KAlMC,UAmMPA,EAAQvX,MACRQ,KAAKqxJ,mBACDp5D,EAAYiI,QAASnpF,EAAQpL,WAI7CimB,EAAW/K,GACPoqI,IACA,CAACh5D,EAAalhF,KACV/W,KAAKqxJ,mBAAmBp5D,EAAYiI,QAASnpF,MAIrD6a,EAAWkkE,WAAWlB,2BAA2B50F,KAAKsxJ,kBAAkBprJ,KAAKlG,OAG7E4xB,EAAW/K,GACPoqI,IACAnhI,IACQA,EAAM2B,iBACF3B,EAAMynE,UACNv3F,KAAKgxJ,mBAAqB,EAE1BhxJ,KAAKuxJ,6BAIrB3/H,EAAW/K,GACPoqI,IACAnhI,IACQA,EAAM2B,iBAAmB3B,EAAMynE,WAC/Bv3F,KAAKuxJ,4BAGjB3/H,EAAWmmE,IAAIlxE,GACXs0E,GAAUpgE,4CACVjL,IACI9vB,KAAK0wJ,YAAYhc,qBAAuB5kH,EAAM4kH,wBAGtD9iH,EAAW/K,GACPoqI,IACAO,IACIxxJ,KAAK0wJ,YAAYc,aAAeA,KAGxC5/H,EAAW/K,GACPoqI,IACA5uE,IACIriF,KAAK0wJ,YAAYe,YACXlsJ,QAAQ88E,GAAc,IAAI,oBAS5CkvE,yBACQvxJ,KAAKgxJ,kBAAoB,IACzBhxJ,KAAKgxJ,kBAAoBv0J,OAAOi/F,YAAYtsE,OAWpDsiI,4BAA4B/1D,EAAWpE,EAASo6D,GAI5C,MAAMvlE,EAAaukD,GAAYghB,GAE/B,IACIplE,EADAqlE,EAAU,IA2Bd,GAtBI5xJ,KAAK0wJ,YAAYnkE,aACjBA,EAAavsF,KAAK0wJ,YAAYnkE,WAAWJ,OAgBrCoL,IACAhL,GAAc,KAIlBgL,IAAYnL,GAAcuP,IAAcC,GAAUpiE,SAC/Cx5B,KAAK+wJ,kBAAoB,GACzB/wJ,KAAKgxJ,kBAAoB,OAGTjqJ,IAAfwlF,GACAx/D,GAAO1V,MAAM,6DAEbu6I,EAAU,KAEVA,EADOrlE,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAEH,MAAMslE,EAAY7xJ,KAAKwiG,YAAYsvD,0BAEnC,GAAID,EAAW,SACX,MAAM3U,EAAgB2U,EAAU3U,gBAC1B6U,EAAuBF,EAAUrM,yBAGvCuM,EAAqB9+G,MAAQ4+G,EAAUn5B,0BAGvC,MAAMs5B,EAAmBv1J,OAAOi/F,YAAYtsE,MACtC9iB,KAAK0O,IAAIhb,KAAKgxJ,kBAAmBhxJ,KAAK+wJ,mBACtCxmE,EAAa,oBAAGvqF,KAAK+zG,SAASzwG,cAAjB,aAAG,EAAsBwwF,uBAAzB,QAA4C,IAG/D,IAAInuE,EA7RpB,SAAmBw3H,EAAW/wD,EAAY4lE,EAAkBD,GACxD,IAAIpsI,EAAS,EACTqW,EAAS1vB,KAAK2O,IAAImxE,EAAWpwD,OAAQowD,EAAWrwD,OAGhDk2H,EAAkB3B,GAAkB5lJ,MAAK+X,GAAKA,EAAEuZ,QAAUA,IAE9D,GAAIi2H,GAAmB9U,GAAa4U,EAAqB9+G,QAAU84E,KAAAA,IAG/D,IAAK/vF,EAASi2H,EAAgBj2H,OAAQA,GAAU,IAAKA,GAAU,EAAG,CAC9D,MAAMk2H,EAAel2H,EAGrB,GADAi2H,EAAkB3B,GAAkB5lJ,MAAK+X,GAAKA,EAAEuZ,SAAWk2H,KACvDD,EAKA,MAJAtsI,GAAUzE,GAAQ+9D,gBACZgzE,EAAgBzB,SAChBuB,EAAqBE,EAAgBtsI,aAK5CssI,IAGPtsI,EAASzE,GAAQ+9D,gBACXgzE,EAAgBzB,SAChBuB,EAAqBE,EAAgBtsI,SAK/C,OAAOrZ,KAAK2O,IAAI0K,EAAS,IAS7B,SAAgBqsI,GACZ,OAAIA,EAAmB,IACZzsJ,OAAOi8B,iBAMX45E,GAAe9uG,KAAK+sB,IAAI,KAAM24H,EAAmB,KAjBzBG,CAAO7lJ,KAAK0O,IAAI,EAAGg3I,EAAmB,OA6P5CI,CAAUlV,EAAe9wD,EAAY4lE,EAAkBD,GAEpEpsI,EAASrZ,KAAK2O,IAAI0K,EA7SP,MAgTPqsI,EAAmBznE,IACnBqnE,EAAU,IAAM5xJ,KAAK0wJ,YAAYxkE,QAAQC,OAASxmE,GAKtD4mE,GAAcA,GAAc,KAC5BqlE,EAAUtlJ,KAAK2O,IAAI22I,EAAS,KAKpC,GAAI5xJ,KAAK6wJ,6BAA+B,EAAG,CACvC,MAAMwB,EAAuB,EACvBC,EAAwBtyJ,KAAK0wJ,YAAYC,kBACzC4B,GAAe91J,OAAOi/F,YAAYtsE,MAAQpvB,KAAK6wJ,8BAAgC,IAErFe,EAAUtlJ,KAAK2O,IAAI22I,EAASU,EAAyBC,EAAcF,GAGvE,OAAO/lJ,KAAK2O,IAAI,IAAK22I,GAOzBV,8BAA8BrtJ,GAC1B7D,KAAK0wJ,YAAYC,kBAAoB9sJ,EACrC7D,KAAK6wJ,6BAA+Bp0J,OAAOi/F,YAAYtsE,MAO3DgiI,uBAEI,MAAM98I,EAAO,CACT43E,QAASlsF,KAAK0wJ,YAAYxkE,QAC1BK,WAAYvsF,KAAK0wJ,YAAYnkE,WAC7BokE,kBAAmB3wJ,KAAK0wJ,YAAYC,kBACpCC,OAAQ5wJ,KAAK0wJ,YAAYE,OACzBY,aAAcxxJ,KAAK0wJ,YAAYc,aAC/B9c,qBAAsB10I,KAAK0wJ,YAAYhc,qBACvCllD,eAAgBxvF,KAAK0wJ,YAAYjhE,qBAGrC,IACIzvF,KAAKwiG,YAAYipC,yBAAyBn3H,GAC5C,MAAO1E,KAYb0hJ,kBAAkB5qE,EAAKpyE,GAEnB,IAAKoyE,EAAII,MAAO,CACZ,MAAM8pE,EACAt8I,EAAK+X,WACA/X,EAAK+X,UAAU9sB,QAAU+U,EAAK+X,UAAU,GAAGglE,IAEtDrxF,KAAK0wJ,YAAYE,OAASA,QAAkB7pJ,EAKhD,GAAI2/E,IAAQ1mF,KAAKwiG,YAAYsvD,0BACzB,OAGJ,IAAIrtJ,EACJ,MAAM+tJ,GACCxyJ,KAAKwiG,YAAYiwD,0BAClBnI,EACAtqJ,KAAKwiG,YAAY2iD,qBACjBxpD,EACA2uD,EAAkBA,EAAgB3uD,eAAY50F,EAC9CwwF,GAAU+yD,GAAkBA,EAAgB/yD,UAC5CnL,EAAak+D,EACbh+I,KAAK2O,IAAIqvI,EAAgBl+D,WAAYk+D,EAAgB5V,sBAAwB,KAOnF,IAAKjwI,KALA8yF,GACDv3F,KAAKuxJ,yBAIGj9I,EACJA,EAAKlF,eAAe3K,KACpBzE,KAAK0wJ,YAAYjsJ,GAAO6P,EAAK7P,IAKjC+tJ,GACAxyJ,KAAKkxJ,8BACDlxJ,KAAK0xJ,4BACD/1D,EACApE,EACAnL,IAGZpsF,KAAKwqF,aAAa5iE,KACdupI,GACAnxJ,KAAK0wJ,aACT1wJ,KAAKoxJ,uBAQTC,mBAAmBltJ,EAAImQ,GAEnBtU,KAAK8wJ,aAAa3sJ,GAAM,CACpB+nF,QAAS53E,EAAK43E,QACdK,WAAYj4E,EAAKi4E,WACjBokE,kBAAmBr8I,EAAKq8I,kBACxBC,OAAQt8I,EAAKs8I,OACbY,aAAcl9I,EAAKk9I,aACnB9c,qBAAsBpgI,EAAKogI,qBAC3BllD,eAAgBl7E,EAAKk7E,gBAGzBxvF,KAAKwqF,aAAa5iE,KACdupI,GACAhtJ,EACAnE,KAAK8wJ,aAAa3sJ,IAO1ByiE,WACI,OAAO5mE,KAAK0wJ,aCnfpB,MAAM3jI,IAASmB,EAAAA,EAAAA,wDAaA,MAAMwkI,GAKjB9zJ,YAAYgzB,GACR5xB,KAAKwiG,YAAc5wE,EASvB+gI,kBACI,MAAM,mBAAEx4B,EAAF,iBAAsB3D,GAAqBx2H,KAAKwiG,YAAY54F,QAAQtG,OACpEsvJ,OAAiD,IAArBp8B,IAAqCA,EACjEjV,EAA6BvhH,KAAKwiG,YAAY7K,KAAK4pB,6BACnDsxC,EAAyBtxC,IAA+BiV,EAO9D,GALAzpG,GAAOtf,KACA,mCAAuB0sH,wBACF3D,qCACajV,KAErCqxC,IAAwBp8B,IAAqBjV,GAA+B4Y,EAAoB,CAChGptG,GAAOtf,KAAK,6CACZ,MAAM+pB,EAAS2iG,EACTphC,EACAA,EAIN,YAFA/4F,KAAKwiG,YAAYhY,aAAa5iE,KAAKutE,EAAyC39D,GAKhF,MAAMs7H,EAAgB9yJ,KAAKwiG,YAAYlL,iBACjCy7D,EAAkBD,GAAiBA,EAAcvyB,wBAElDuyB,EAE0B,cAApBC,EACPhmI,GAAOtf,KAAK,qDAEZsf,GAAOtf,KACA,mEAAaslJ,+BACcF,KAC9BA,EACA7yJ,KAAKwiG,YAAYlL,iBAAiBy6B,WAC9B,KACIhlG,GAAOtf,KAAK,+CAEhB4J,IACI0V,GAAO1V,MAAO,8CAA6CA,EAAMtY,aAClE,CACCy4B,OAAQ,qBACRikG,kBAAmB,aACnBE,gBAAgB,EAChBJ,sBAAsB,IAG9Bv7H,KAAKwiG,YAAYlL,iBAAiBwgC,6BArBtC/qG,GAAOhF,KAAK,8CA6BpB1nB,QAUIL,KAAKwiG,YAAYtP,KAAKsf,KAAK,MAAOvwC,MAC9B,KACSjiE,KAAKgzJ,YACNhzJ,KAAKizJ,kBAAoBx2J,OAAO8S,YAAW,KACvCvP,KAAKizJ,uBAAoBlsJ,EACzB/G,KAAK2yJ,oBACN,SAGXt7I,IACI0V,GAAO1V,MAAM,8CAA+CA,MAOxEm2B,SACIxtC,KAAKgzJ,WAAY,EACjBv2J,OAAOivB,aAAa1rB,KAAKizJ,oBChH1B,MAAMC,GAAwB,wBAQxB97E,GAA2B,4BAO3BmB,GAAiB,0BAOjB46E,GAAmB,6BAWnBC,GAAuB,uBAYvBC,GAAsB,gCAQtBC,GAAuB,iCCvCrB,MAAMC,WAA+BrtI,MAOhDtnB,YAAYgzB,GACR8rD,QAEA19E,KAAKwiG,YAAc5wE,EACnB5xB,KAAKwzJ,gBAAkB,KACvBxzJ,KAAKyzJ,eAAiB,KAEjBvyI,GAAQ0/D,yBACThvD,EAAWkkE,WAAWtB,sBAAsBx0F,KAAK0zJ,YAAYxtJ,KAAKlG,OAEtE4xB,EAAW/K,GAAGsuE,GAAmCn1F,KAAK2zJ,YAAYztJ,KAAKlG,OAM3E4zJ,uBACIloI,aAAa1rB,KAAKwzJ,iBAClBxzJ,KAAKwzJ,gBAAkB,KAU3BK,6BAA6BrrE,GAGzB,MAAMxyD,EAAwB,IAAfwyD,EAIa,OAAxBxoF,KAAKyzJ,gBAA2BzzJ,KAAKyzJ,iBAAmBz9H,IACxDh2B,KAAKyzJ,eAAiBz9H,EACtBh2B,KAAK4nB,KAAKksI,GAA0C9zJ,KAAKyzJ,iBAUjEM,6BAA6BvrE,GACrBxoF,KAAKg0J,cAIU,IAAfxrE,GAAqBxoF,KAAKwzJ,gBAMJ,IAAfhrE,GAAoBxoF,KAAKwzJ,iBAChCxzJ,KAAK4zJ,uBANL5zJ,KAAKwzJ,gBAAkBjkJ,YAAW,KAC9BvP,KAAKg0J,aAAc,EAEnBh0J,KAAK4nB,KAAKksI,MAvEA,MAuFtBJ,YAAYhtE,EAAKn9E,EAAMi/E,EAAY32D,GAE/B,IAAKA,IAAY7xB,KAAKi0J,YAClB,OAIJ,MAAMhS,EAAav7D,EAAIu7D,WAAW9nI,IAAIna,KAAKi0J,YAAY3f,OAIlD2N,GAAeA,EAAWx4I,MAAMgsB,SAASlsB,KAM9CvJ,KAAK6zJ,6BAA6BrrE,GAClCxoF,KAAK+zJ,6BAA6BvrE,IAStCmrE,YAAY7jI,GACJA,EAAMsjH,sBAENpzI,KAAKi0J,YAAcnkI,EACnB9vB,KAAKg0J,aAAc,EACnBh0J,KAAK4zJ,uBAGD1yI,GAAQ0/D,0BACR9wD,EAAMjJ,GACFw5E,IACA7X,IACIxoF,KAAK+zJ,6BAA6BvrE,MAG1C14D,EAAMjJ,GACFw5E,IACA7X,IACIxoF,KAAK+zJ,6BAA6BvrE,GAClCxoF,KAAK6zJ,6BAA6BrrE,SC/H3C,MAAM0rE,GAMjBt1J,YAAYgzB,GACR5xB,KAAK4xB,WAAaA,EAElBA,EAAW9I,iBACPqsE,GACAn1F,KAAK0zJ,YAAYxtJ,KAAKlG,OAE1BA,KAAKm0J,SAAWn0J,KAAK4xB,WAAWipE,WASpC64D,YAAYvvJ,EAAIqkF,IAKPxoF,KAAK4xB,WAAW8uE,eACdlY,GAtCiB,IAuChBrkF,IAAOnE,KAAKm0J,UACLn0J,KAAK4xB,WAAW+9H,qBAAqBp4D,WAIpDv3F,KAAK4xB,WAAWmmE,IAAIvN,aAAa5iE,KAC7BuzE,KAAAA,yBACAh3F,ICjDL,SAASiwJ,GAAmBxqJ,GAC/B,MAAMyqJ,EAAmB53J,OAAOyyE,cAAgBzyE,OAAO0yE,mBAEvD,GAAKklF,EAIL,OAAO,IAAIA,EAAiBzqJ,GCIjB,MAAM0qJ,WAAwBpuI,MASzCtnB,YAAY21J,EAAoBC,EAAcC,GAC1C/2E,QAKA19E,KAAK00J,oBAAsBH,EAK3Bv0J,KAAK20J,cAAgBH,EAKrBx0J,KAAK40J,YAAcH,EAKnBz0J,KAAK60J,eAAiB,IAAIC,aAAa,IAKvC90J,KAAK+0J,cAAgBX,GAAmB,CAAEY,WAAYR,EAAaS,4BAMnEj1J,KAAKk1J,eAAiBV,EAAaW,kBAMnCn1J,KAAKo1J,gBAAkBp1J,KAAKo1J,gBAAgBlvJ,KAAKlG,MAEjDA,KAAKq1J,0BAeI,cAACvkB,EAAayjB,EAAoBC,GAC3C,OAAO9O,GAAIxV,+BAA+B,CACtChuE,QAAS,CAAE,SACX4uE,YAAAA,IACD7uE,MAAK82D,IAEJ,IAAKA,EAAW,GACZ,MAAM,IAAItqH,MAAO,qDAAoDqiI,KAGzE,OAAO,IAAIwjB,GAAgBC,EAAoBC,EAAcz7B,EAAW,OAYhFs8B,0BACIr1J,KAAKs1J,aAAet1J,KAAK+0J,cAAc1rE,wBAAwBrpF,KAAK40J,YAAYntJ,QAQhFzH,KAAKu1J,qBAAuBv1J,KAAK+0J,cAAcS,sBAAsBx1J,KAAK00J,oBAAqB,EAAG,GActGU,gBAAgBK,GAEZ,MAAMC,EAASD,EAAWE,YAAYC,eAAe,GAC/CC,EAAiB,IAAK71J,KAAK60J,kBAAmBa,GAC9CI,EAAkB1oI,KAAKgC,MAE7B,IAAI9vB,EAAI,EAER,KAAOA,EAAIU,KAAKk1J,eAAiBW,EAAet2J,OAAQD,GAAKU,KAAKk1J,eAAgB,CAC9E,MAAMa,EAAYF,EAAervJ,MAAMlH,EAAGA,EAAIU,KAAKk1J,gBAG7Cc,EAAWh2J,KAAK20J,cAAcsB,uBAAuBF,EAAUvvJ,SAErExG,KAAK4nB,KAAKyrI,GAAqB,CAC3BjoI,UAAW0qI,EACXI,MAAOF,EACPG,QAASJ,EACT1zF,SAAUriE,KAAK40J,YAAY9d,gBAInC92I,KAAK60J,eAAiBgB,EAAervJ,MAAMlH,EAAGu2J,EAAet2J,QAQjE62J,qBACIp2J,KAAKu1J,qBAAqBc,eAAiBr2J,KAAKo1J,gBAChDp1J,KAAKs1J,aAAa9qG,QAAQxqD,KAAKu1J,sBAC/Bv1J,KAAKu1J,qBAAqB/qG,QAAQxqD,KAAK+0J,cAAcuB,aAQzDC,wBAIIv2J,KAAKu1J,qBAAqBc,eAAiB,OAC3Cr2J,KAAKu1J,qBAAqBznG,aAC1B9tD,KAAKs1J,aAAaxnG,aAQtB0oG,oBACIx2J,KAAKu2J,wBACLv2J,KAAK40J,YAAYhe,aAQrBE,cACI,OAAO92I,KAAK40J,YAAY9d,cAS5BvD,gBACI,OAAOvzI,KAAK40J,YAAY6B,iBAQ5Bp2J,QACIL,KAAKo2J,qBAQTnqI,OACIjsB,KAAKu2J,wBACLv2J,KAAK60J,eAAiB,GAQ1BvG,UACQtuJ,KAAK02J,aAIT12J,KAAKw2J,oBACLx2J,KAAK02J,YAAa,IClO1B,MAAM3pI,IAASmB,EAAAA,EAAAA,oDAYA,MAAMyoI,WAAyBzwI,GAAAA,aAW1CtnB,YAAYgzB,EAAYglI,GACpBl5E,QAKA19E,KAAK62J,oBAAsBD,EAM3B52J,KAAK82J,YAAc,KAKnB92J,KAAK+2J,sBAAuB,EAK5B/2J,KAAKg3J,mBAAqB,GAS1Bh3J,KAAKi3J,gBAAkB3wI,QAAQC,UAK/BvmB,KAAKk3J,iBAAmBl3J,KAAKk3J,iBAAiBhxJ,KAAKlG,MAEnD4xB,EAAW/K,GAAGsuE,GAAmCn1F,KAAK2zJ,YAAYztJ,KAAKlG,OACvE4xB,EAAW/K,GAAGsuE,GAAqCn1F,KAAKm3J,cAAcjxJ,KAAKlG,OAC3E4xB,EAAW/K,GAAGsuE,GAA0Cn1F,KAAK8rG,kBAAkB5lG,KAAKlG,OAQxFo3J,uBAAuBC,GACnBr3J,KAAKg3J,mBAAmBj0J,KAAKs0J,GAC7BA,EAAWxwI,GAAGqsI,IAAuB,MAGVlzJ,KAAKg3J,mBAAmB1wJ,QAAOgxJ,IAAoC,IAAxBA,EAASz3D,aAKvDtgG,QAAUS,KAAK+2J,qBAC/B/2J,KAAKu3J,kBACGv3J,KAAK+2J,sBACb/2J,KAAKw3J,sBASjBA,mBACQx3J,KAAK82J,cACL92J,KAAK82J,YAAYjwI,GAAGwsI,GAAqBrzJ,KAAKk3J,kBAC9Cl3J,KAAK82J,YAAYz2J,QACjBL,KAAK+2J,sBAAuB,GAQpCQ,kBACQv3J,KAAK82J,cACL92J,KAAK82J,YAAYnjJ,eAAe0/I,GAAqBrzJ,KAAKk3J,kBAC1Dl3J,KAAK82J,YAAY7qI,QAErBjsB,KAAK+2J,sBAAuB,EAahCG,iBAAiBlB,GACb,IAAK,MAAMsB,KAAYt3J,KAAKg3J,mBACxBM,EAASG,gBAAgBzB,GASjC0B,0BAA0BngE,GACtB,IAAK,MAAM+/D,KAAYt3J,KAAKg3J,mBACxBM,EAASK,gBAAgBpgE,GAWjCo8D,YAAY7jI,GACJA,EAAMsjH,sBAGNpzI,KAAKi3J,gBAAkBj3J,KAAKi3J,gBAAgBh1F,MAAK,IAAMjiE,KAAK62J,wBACvD50F,MAAKuyF,GACFF,GAAgBj1J,OAAOywB,EAAMgnH,cAnJjB,KAmJyD0d,KAExEvyF,MAAK21F,IACF7qI,GAAOw4B,MAAM,kCAAmCz1B,EAAMyjH,iBAEtDvzI,KAAK82J,YAAcc,EAInB53J,KAAK03J,0BAA0B5nI,EAAMynE,cAExCprB,OAAM90D,IACH0V,GAAOhF,KAAK,mCAAoC1Q,OAYhEy0F,kBAAkBh8E,GACVA,EAAMsjH,sBAENpzI,KAAKi3J,gBAAkBj3J,KAAKi3J,gBAAgBh1F,MAAK,KAE7CjiE,KAAK03J,0BAA0B5nI,EAAMynE,eAajD4/D,cAAcrnI,GACNA,EAAMsjH,sBAENpzI,KAAKi3J,gBAAkBj3J,KAAKi3J,gBAAgBh1F,MAAK,KAC7Cl1C,GAAOw4B,MAAM,uCAAwCz1B,EAAMyjH,iBAGvDvzI,KAAK82J,cACL92J,KAAKu3J,kBACLv3J,KAAK82J,YAAYxI,UACjBtuJ,KAAK82J,YAAc,MAIvB,IAAK,MAAMQ,KAAYt3J,KAAKg3J,mBACxBM,EAASviI,aCnLd,MAAM8iI,WAA0B3xI,GAAAA,aAM3CtnB,cACI8+E,QAMA19E,KAAK83J,aAAc,EAKnB93J,KAAK+3J,YAAc,GAKnB/3J,KAAKg4J,eAAiB,GAKtBh4J,KAAKi4J,SAAU,EAEfj4J,KAAKk4J,qBAAuBl4J,KAAKk4J,qBAAqBhyJ,KAAKlG,MAS/Dk4J,uBACI,MAAMC,EAAWvvE,GAAiB5oF,KAAK+3J,aACjCK,EAAgBxvE,GAAiB5oF,KAAKg4J,gBAExCG,EAxEoB,IAwEkBC,EAlEd,MAmExBp4J,KAAK4nB,KAAKurI,IAEVnzJ,KAAKq4J,iBAAgB,IAIzBr4J,KAAK+0B,QASTujI,cAActC,EAAUuC,GACpBv4J,KAAK+3J,YAAYh1J,KAAKizJ,GACtBh2J,KAAKg4J,eAAej1J,KAAKw1J,GAS7BF,gBAAgB9rB,GACZvsI,KAAKi4J,QAAU1rB,EACfvsI,KAAK4nB,KAAKsrI,GAAuBlzJ,KAAKi4J,SAQ1CN,gBAAgBpgE,GAEZv3F,KAAKq4J,iBAAiB9gE,GACtBv3F,KAAK+0B,QAQT8qE,WACI,OAAO7/F,KAAKi4J,QAQhBljI,QACI/0B,KAAK83J,aAAc,EACnB93J,KAAK+3J,YAAc,GACnB/3J,KAAKg4J,eAAiB,GACtBtsI,aAAa1rB,KAAKw4J,iBAatBf,gBAAgBzB,GACZ,GAAKh2J,KAAKi4J,QAKV,GAAIj4J,KAAK83J,YAAT,CAEI,MAAMW,EAAiB3vE,GAAqBktE,EAASG,SAErDn2J,KAAKs4J,cAActC,EAASE,MAAOttE,GAAiB6vE,SAOxD,GAAIzC,EAASE,MAvJK,GAuJsB,CACpC,MACMqC,EAAc3vE,GADGE,GAAqBktE,EAASG,UAGjDoC,EArJkB,MAsJlBv4J,KAAK83J,aAAc,EACnB93J,KAAKs4J,cAActC,EAASE,MAAOqC,GAGnCv4J,KAAKw4J,gBAAkBjpJ,WAAWvP,KAAKk4J,qBApJpB,SCApB,MAAMQ,WAA8BxyI,GAAAA,aAK/CtnB,cACI8+E,QAMA19E,KAAK83J,aAAc,EAKnB93J,KAAK+3J,YAAc,GAKnB/3J,KAAKi4J,SAAU,EAEfj4J,KAAK24J,mBAAqB34J,KAAK24J,mBAAmBzyJ,KAAKlG,MAQ3D24J,qBACkB/vE,GAAiB5oF,KAAK+3J,aAxDlB,KA2Dd/3J,KAAK4nB,KAAK0rI,IAIVtzJ,KAAKq4J,iBAAgB,IAIzBr4J,KAAK+0B,QASTsjI,gBAAgB9rB,GACZvsI,KAAKi4J,QAAU1rB,EACfvsI,KAAK4nB,KAAKsrI,GAAuBlzJ,KAAKi4J,SAQ1CN,gBAAgBpgE,GAEZv3F,KAAKq4J,gBAAgB9gE,GACrBv3F,KAAK+0B,QAQT8qE,WACI,OAAO7/F,KAAKi4J,QAYhBR,gBAAgBzB,GACPh2J,KAAKi4J,UAKNj4J,KAAK83J,YACL93J,KAAK+3J,YAAYh1J,KAAKizJ,EAASE,OAO/BF,EAASE,MArHG,KAsHZl2J,KAAK83J,aAAc,EACnB93J,KAAK+3J,YAAYh1J,KAAKizJ,EAASE,OAG/Bl2J,KAAKw4J,gBAAkBjpJ,WAAWvP,KAAK24J,mBA/GhB,OAwH/B5jI,QACI/0B,KAAK83J,aAAc,EACnB93J,KAAK+3J,YAAc,GACnBrsI,aAAa1rB,KAAKw4J,kBCrJnB,MAAMI,GAAkB,0BCMzB7rI,IAASmB,EAAAA,EAAAA,yCAMT2qI,GAAmB,mBAMnBC,GAAoB,oBAK1B,MAAMC,GAOFn6J,YAAYq5F,EAAa+gE,GAErBh5J,KAAKi4F,YAAcA,EAGnBj4F,KAAKg5J,QAAUA,EAGfh5J,KAAKmE,GAAK8zF,EAAYiI,QAGtBlgG,KAAKi5J,SAAW,GAIhBj5J,KAAKk5J,cAAgB,EAErBl5J,KAAKm5J,eAAiBn5J,KAAKm5J,eAAejzJ,KAAKlG,MAC/CA,KAAKi1B,YAAcj1B,KAAKi1B,YAAY/uB,KAAKlG,MACzCA,KAAKo5J,eAAiBp5J,KAAKo5J,eAAelzJ,KAAKlG,MAC/CA,KAAKq5J,mBAAqBr5J,KAAKq5J,mBAAmBnzJ,KAAKlG,MACvDA,KAAKk3F,cAAgBl3F,KAAKk3F,cAAchxF,KAAKlG,MAIzCg5J,EAAQM,mBACRt5J,KAAKi1B,cAGTj1B,KAAKkyG,aAAez1G,OAAO6sF,YACvBtpF,KAAKi1B,YAAa+jI,EAAQO,gBAC9Bv5J,KAAKw5J,kBAAoB/8J,OAAO8S,WAC5BvP,KAAKq5J,mBAAoBr5J,KAAKg5J,QAAQS,qBAO9CN,iBACQn5J,KAAKkyG,cACLz1G,OAAOwtF,cAAcjqF,KAAKkyG,cAE1BlyG,KAAKw5J,mBACL/8J,OAAOwtF,cAAcjqF,KAAKw5J,mBAQlCvkI,cACI,MAAMykI,EAAY15J,KAAKk5J,gBACjBS,EAAiB,CACnBn6J,KAAMq5J,GACN10J,GAAIu1J,GAGR15J,KAAKg5J,QAAQvuD,YAAYkvD,EAAgB35J,KAAKmE,IAC9CnE,KAAKi5J,SAASS,GAAa,CACvBv1J,GAAIu1J,EACJE,SAAUn9J,OAAOi/F,YAAYtsE,OAQrCgqI,eAAelkI,GACX,MAAMU,EAAU51B,KAAKi5J,SAAS/jI,EAAS/wB,IAEnCyxB,IACAA,EAAQy7D,IAAM50F,OAAOi/F,YAAYtsE,MAAQwG,EAAQgkI,SACjD55J,KAAKg5J,QAAQxuE,aAAa5iE,KACtBiyI,GACA75J,KAAKi4F,YACLriE,EAAQy7D,MAGhBrxF,KAAKq5J,qBASTA,qBACI,MAAMjqI,EAAM3yB,OAAOi/F,YAAYtsE,MAI/B,IACIwG,EAAS8jI,EADTroE,EAAMttE,EAAAA,EAIV,IAAK21I,KAAa15J,KAAKi5J,SACfj5J,KAAKi5J,SAAS7pJ,eAAesqJ,KAC7B9jI,EAAU51B,KAAKi5J,SAASS,GAEpB9jI,EAAQgkI,SAAWxqI,EAAMpvB,KAAKg5J,QAAQS,2BAE/Bz5J,KAAKi5J,SAASS,GACd9jI,EAAQy7D,MACfA,EAAM/kF,KAAK2O,IAAIo2E,EAAKz7D,EAAQy7D,OAKpCA,EAAMttE,EAAAA,GACN/jB,KAAKk3F,cAAc7F,GAQ3B6F,cAAc7F,GACV4B,GAAWiE,czF6Jc,SAAS/H,EAAe83C,EAAQ51C,GAO7D,MAAO,CACHvxC,WAPe,CACf,eAAkBqvC,EAClB83C,OAAAA,EACA51C,IAAAA,GAKAlvF,KAAM,UACN3C,KAAM07E,IyFvKmB4+E,CACrB95J,KAAKmE,GACLnE,KAAKi4F,YAAYmL,YAAY,UAC7B/R,KAmBG,MAAM0oE,GAMjBn7J,YAAYgzB,EAAYhoB,EAAS6gG,GAC7BzqG,KAAK4xB,WAAaA,EAClB5xB,KAAKwqF,aAAe54D,EAAW44D,aAC/BxqF,KAAKyqG,YAAcA,EAGnBzqG,KAAKu5J,eAAiB,IAGtBv5J,KAAKy5J,oBAAsB,IAG3Bz5J,KAAKwgG,aAAe,GAGpBxgG,KAAKs5J,mBAAoB,EAErB1vJ,GAAWA,EAAQovJ,UACyB,iBAAjCpvJ,EAAQovJ,QAAQ9mD,eACvBlyG,KAAKu5J,eAAiB3vJ,EAAQovJ,QAAQ9mD,cAEO,iBAAtCtoG,EAAQovJ,QAAQQ,oBACvBx5J,KAAKy5J,oBAAsB7vJ,EAAQovJ,QAAQQ,mBAI3Cx5J,KAAKy5J,oBAAsB,GAAKz5J,KAAKy5J,oBACnCz5J,KAAKu5J,iBACPv5J,KAAKy5J,oBAAsBz5J,KAAKu5J,iBAGxCxsI,GAAOtf,KACF,uCACGzN,KAAKu5J,qCACLv5J,KAAKy5J,wBAEbz5J,KAAKg6J,kBAAoBh6J,KAAKg6J,kBAAkB9zJ,KAAKlG,MACrD4xB,EAAW/K,GACPsuE,GACAn1F,KAAKg6J,mBAETh6J,KAAKi6J,gBAAkBj6J,KAAKi6J,gBAAgB/zJ,KAAKlG,MACjD4xB,EAAW/K,GACPsuE,GACAn1F,KAAKi6J,iBAETj6J,KAAKk6J,gBAAkBl6J,KAAKk6J,gBAAgBh0J,KAAKlG,MACjD4xB,EAAW/K,GACPsuE,EACAn1F,KAAKk6J,iBAETl6J,KAAKm6J,kBAAoBn6J,KAAKm6J,kBAAkBj0J,KAAKlG,MACrD4xB,EAAW/K,GACPsuE,EACAn1F,KAAKm6J,mBAObA,oBACIn6J,KAAKs5J,mBAAoB,EASzB,IAAK,MAAMn1J,KAAMnE,KAAKwgG,aAClB,GAAIxgG,KAAKwgG,aAAapxF,eAAejL,GAAK,CACtC,MAAMi2J,EAAqBp6J,KAAKwgG,aAAar8F,GAE7C1H,OAAO8S,WAAW6qJ,EAAmBnlI,YAAa,MAW9DilI,gBAAgBjiE,EAAalhF,GAGrBA,EAAQvX,OAASq5J,GACjB74J,KAAKq6J,cAAcpiE,EAAYiI,QAASnpF,GACjCA,EAAQvX,OAASs5J,IACxB94J,KAAKo5J,eAAenhE,EAAYiI,QAASnpF,GAWjDijJ,kBAAkB71J,EAAI8zF,GACdj4F,KAAKu5J,gBAAkB,IAIvBv5J,KAAKwgG,aAAar8F,KAClB4oB,GAAOtf,KACF,0CAAyCtJ,gBAC9CnE,KAAKwgG,aAAar8F,GAAIg1J,wBACfn5J,KAAKwgG,aAAar8F,IAG7BnE,KAAKwgG,aAAar8F,GAAM,IAAI40J,GAAmB9gE,EAAaj4F,OAQhEi6J,gBAAgB91J,GACRnE,KAAKu5J,gBAAkB,GAIvBv5J,KAAKwgG,aAAar8F,KAClBnE,KAAKwgG,aAAar8F,GAAIg1J,wBACfn5J,KAAKwgG,aAAar8F,IAWjCk2J,cAAclrE,EAAev5D,GAEzB,GAAIA,GAAWA,EAAQzxB,GAAI,CACvB,MAAM+wB,EAAW,CACb11B,KAAMs5J,GACN30J,GAAIyxB,EAAQzxB,IAGhBnE,KAAKyqG,YAAYv1E,EAAUi6D,QAE3BpiE,GAAOtf,KACF,6CAA4C0hF,MAUzDiqE,eAAejqE,EAAej6D,GAC1B,MAAMklI,EAAqBp6J,KAAKwgG,aAAarR,GAEzCirE,GACAA,EAAmBhB,eAAelkI,GAO1CjJ,OACIc,GAAOtf,KAAK,oBAEZzN,KAAK4xB,WAAW7H,IACZorE,GACAn1F,KAAKg6J,mBACTh6J,KAAK4xB,WAAW7H,IACZorE,GACAn1F,KAAKi6J,iBACTj6J,KAAK4xB,WAAW7H,IACZorE,EACAn1F,KAAKk6J,iBACTl6J,KAAK4xB,WAAW7H,IACZorE,EACAn1F,KAAKm6J,mBAET,IAAK,MAAMh2J,KAAMnE,KAAKwgG,aACdxgG,KAAKwgG,aAAapxF,eAAejL,IACjCnE,KAAKwgG,aAAar8F,GAAIg1J,iBAI9Bn5J,KAAKwgG,aAAe,ICpX5B,MAAMzzE,IAASmB,EAAAA,EAAAA,oDAOA,MAAMosI,GAKjB17J,YAAYgzB,GACR5xB,KAAKwiG,YAAc5wE,EASnB5xB,KAAKu6J,SAAU,EAEfv6J,KAAKwiG,YAAY15E,iBACbqsE,IAAmC,IAAMn1F,KAAKw6J,mBAClDx6J,KAAKwiG,YAAY15E,iBACbqsE,IAAiC,IAAMn1F,KAAKw6J,mBAChDx6J,KAAKwiG,YAAY15E,iBACbqsE,IAAkC,IAAMn1F,KAAKw6J,mBAOrDA,iBACI,MAAMC,EAAYz6J,KAAKu6J,QACjBv6D,GACChgG,KAAKwiG,YAAY9B,eACb1gG,KAAKwiG,YAAYk4D,uBAAyB,EAEjDD,IAAcz6D,IACdhgG,KAAKu6J,QAAUv6D,EACfjzE,GAAOw4B,MAAO,iBAAgBk1G,QAAgBz6D,KAC9ChgG,KAAKwiG,YAAYhY,aAAa5iE,KAC1ButE,GAAqCslE,EAAWz6D,KC/ChE,MAAMjzE,IAASmB,EAAAA,EAAAA,+DASR,MAAMysI,GAIT/7J,cAGIoB,KAAK46J,oBAAsB,CAAE,UAdR,KAiBrB56J,KAAK6tJ,QAhBW,EAmBhB7tJ,KAAK+tJ,gBArBc,KAwBnB/tJ,KAAKguJ,mBAAqB,GAE1BhuJ,KAAK4uJ,0BAA4B,CAC7BptF,YAAa,GACbq5F,mBAAoB76J,KAAK66J,mBACzBhvB,MAAO7rI,KAAK6tJ,OACZiN,iBAAkB,GAClB9uB,kBAAmBhsI,KAAKguJ,oBAO5BxsF,kBAGA,OAFAxhE,KAAK4uJ,0BAA0B/iB,MAAQ7rI,KAAK6tJ,OAEvC7tJ,KAAKguJ,mBAAmBzuJ,QAM7BS,KAAK4uJ,0BAA0BptF,YAAc,GACzCxhE,KAAKguJ,mBAAmBzuJ,OAAS,GASjCS,KAAK4uJ,0BAA0BiM,mBAAqB,CAAE,UAAa76J,KAAK+tJ,iBACxE/tJ,KAAK4uJ,0BAA0BkM,iBAAmB,GAClD96J,KAAK4uJ,0BAA0B5iB,kBAAoB,KAenDhsI,KAAK4uJ,0BAA0BptF,YAAYxhE,KAAKguJ,mBAAmB,IAAM,CACrE,UAAahuJ,KAAK+tJ,iBAEtB/tJ,KAAK4uJ,0BAA0BiM,mBAAqB76J,KAAK46J,oBACzD56J,KAAK4uJ,0BAA0BkM,iBAAmB96J,KAAKguJ,mBACvDhuJ,KAAK4uJ,0BAA0B5iB,kBAAoB,IAGhDhsI,KAAK4uJ,2BAxCD5uJ,KAAK4uJ,0BAiDpBmM,YAAYl3J,GACR,MAAM0jJ,EAAUvnJ,KAAK6tJ,SAAWhqJ,EAOhC,OALI0jJ,IACAvnJ,KAAK6tJ,OAAShqJ,EACdkpB,GAAOw4B,MAAO,2CAA0C1hD,OAGrD0jJ,EAUXyT,wBAAwBtgC,GACpB,MAAM6sB,EAAUvnJ,KAAK+tJ,kBAAoBrzB,EAOzC,OALI6sB,IACAvnJ,KAAK+tJ,gBAAkBrzB,EACvB3tG,GAAOw4B,MAAO,oCAAmCm1E,MAG9C6sB,EASX0T,+BAA+BxuB,GAC3B,MAAM8a,GAAWh9C,IAAAA,CAAQvqG,KAAK4uJ,0BAA2BniB,GAOzD,OALI8a,IACAvnJ,KAAK4uJ,0BAA4BniB,EACjC1/G,GAAOw4B,MAAO,qCAAoCt6B,KAAKF,UAAU0hH,OAG9D8a,EASX2T,wBAAwB/L,GACpBpiI,GAAOw4B,MAAO,gCAA+Bt6B,KAAKF,UAAUokI,MAC5DnvJ,KAAKguJ,mBAAqBmB,GAS3B,MAAMgM,GAQTv8J,YAAYgzB,EAAYmmE,GAAK,QACzB/3F,KAAKwiG,YAAc5wE,EACnB5xB,KAAKo7J,KAAOrjE,EAEZ,MAAM,OAAEz0F,GAAWsuB,EAAWhoB,QAG9B5J,KAAK6tJ,OAAL,UAAcvqJ,MAAAA,OAAd,EAAcA,EAAQ+3J,kBAAtB,SAAqC/3J,MAAAA,OAAA,EAAAA,EAAQg4J,gBAvK7B,EA0KhBt7J,KAAK+tJ,gBA5Kc,KA+KY,UAAGzqJ,MAAAA,OAAH,EAAGA,EAAQi4J,yCAAX,UAG3Bv7J,KAAK4uJ,0BAA4B,IAAI+L,GAChB36J,KAAK4uJ,0BAA0BmM,YAAY/6J,KAAK6tJ,SAErD7tJ,KAAKo7J,KAAKpM,+BAA+BhvJ,KAAK4uJ,0BAA0BptF,cAExFxhE,KAAKo7J,KAAKlL,SAASlwJ,KAAK6tJ,QAI5B7tJ,KAAKguJ,mBAAqB,GAE1BhuJ,KAAKwiG,YAAY37E,GACbsuE,IACA/uF,GAAWpG,KAAK2rG,uBAAuBvlG,KAW/CulG,uBAAuB+9B,GACfA,EAAa5iD,QAAU9mF,KAAK4uJ,0BAC5BllB,EAAa9O,2BAA2B56H,KAAK+tJ,kBAE7C/tJ,KAAK4uJ,0BAA0BoM,wBAAwBh7J,KAAK+tJ,iBAC5D/tJ,KAAKo7J,KAAKpM,+BAA+BhvJ,KAAK4uJ,0BAA0BptF,cAShFs/B,WACI,OAAO9gG,KAAK6tJ,OAUhBqB,gBAAgBC,GAGZ,GAFAnvJ,KAAKguJ,mBAAqBmB,EAEtBnvJ,KAAK4uJ,0BAAT,CAEI,MAAM4M,EAAoBrM,EAAI7oJ,QAAOnC,GAAMA,IAAOnE,KAAKwiG,YAAY3H,aAC7D4gE,EAAiBxwI,KAAKnmB,MAAMmmB,KAAKF,UAAU/qB,KAAK4uJ,0BAA0BptF,cAEhFg6F,EAAkBj8J,QAAUS,KAAK4uJ,0BAA0BsM,wBAAwBM,GACnF,MAAME,EAAiB17J,KAAK4uJ,0BAA0BptF,YAGjD+oC,IAAAA,CAAQmxD,EAAgBD,IACzBz7J,KAAKo7J,KAAKpM,+BAA+B0M,QAKjD17J,KAAKo7J,KAAKlM,gBAAgBC,GAU9Be,SAASrsJ,GACL,GAAI7D,KAAK6tJ,SAAWhqJ,EAAO,CAGvB,GAFA7D,KAAK6tJ,OAAShqJ,EAEV7D,KAAK4uJ,0BAML,YALqB5uJ,KAAK4uJ,0BAA0BmM,YAAYl3J,IAGhD7D,KAAKo7J,KAAKpM,+BAA+BhvJ,KAAK4uJ,0BAA0BptF,cAI5FxhE,KAAKo7J,KAAKlL,SAASrsJ,IAU3B83J,kCAAkCjhC,GAC9B16H,KAAK+tJ,gBAAkBrzB,EAEvB,IAAK,MAAMt0H,KAAWpG,KAAKwiG,YAAYmK,oBAC/BvmG,EAAQ0gF,QAAU9mF,KAAK4uJ,0BACvBl0B,GAAkBt0H,EAAQw0H,2BAA2BF,GAE3B16H,KAAK4uJ,0BAA0BoM,wBAAwBtgC,IAG1E16H,KAAKo7J,KAAKpM,+BAA+BhvJ,KAAK4uJ,0BAA0BptF,aAU3Fo6F,uBAAuBp6F,GAOnB,GANKxhE,KAAK4uJ,4BACN5uJ,KAAK4uJ,0BAA4B,IAAI+L,IAGd36J,KAAK4uJ,0BAA0BqM,+BAA+Bz5F,GAEjE,SACpBxhE,KAAK6tJ,OAAL,UAAcrsF,EAAYqqE,aAA1B,QAAmC7rI,KAAK6tJ,OACxC7tJ,KAAKguJ,mBAAL,UAA0BxsF,EAAYwqE,yBAAtC,QAA2DhsI,KAAKguJ,mBAChEhuJ,KAAKo7J,KAAKpM,+BAA+BxtF,GAEzC,MAAMq6F,EAAa77J,KAAKwiG,YAAYmK,oBAAoBjiG,MAAKtE,GAAWA,EAAQ0gF,QAEhF,GAAI+0E,EAAY,OACZ,IAAInhC,EAAc,UAAGp8H,OAAOqN,OAAO61D,EAAYA,aAAa,UAA1C,aAAG,EAA2CgD,UAE3C,MAAhBk2D,IACDA,EAAc,UAAGl5D,EAAYq5F,0BAAf,aAAG,EAAgCr2F,WAErDk2D,GAAkBmhC,EAAWjhC,2BAA2BF,MCxTjE,MAAMohC,GAQTl9J,YAAYgzB,EAAYmmE,GAAK,UACzB/3F,KAAK4xB,WAAaA,EAClB5xB,KAAK+7J,uBAAL,oBAA8BnqI,EAAWhoB,eAAzC,iBAA8B,EAAoBtG,cAAlD,aAA8B,EAA4B04J,6BAA1D,SACAh8J,KAAK+3F,IAAMA,EACX/3F,KAAK4xB,WAAW/K,GACZsuE,IACA/uF,GAAWpG,KAAK2rG,uBAAuBvlG,KAC3CpG,KAAK4xB,WAAW/K,GACZsuE,IACA,IAAMn1F,KAAKi8J,iCACfj8J,KAAK+3F,IAAIlxE,GACLs0E,KAAAA,kCACAsxC,IAAoB,OAEZ,UAAAzsI,KAAKk8J,+BAAL,eAA8BC,eAAgB1vB,EAAiB0vB,cAC/Dn8J,KAAKk8J,wBAA0BzvB,EAC/BzsI,KAAKi8J,mCAarBtwD,uBAAuB+9B,GACnBA,EAAa32H,YACT8sH,IACAz5H,IACQA,IAAYpG,KAAK4xB,WAAWwqI,0BAC5Bp8J,KAAKi8J,kCAKjBvyB,EAAapO,sCAGboO,EAAazO,uBAUjBghC,+BACI,MAAMI,EAAqBr8J,KAAKs8J,2BAC1Bx0D,EAAW,GAEjB,GAAIu0D,GAAsB,EACtB,IAAK,MAAMj2J,KAAWpG,KAAK4xB,WAAW+6E,oBAClC7E,EAAS/kG,KAAKqD,EAAQ+0H,yBAAyBkhC,IAIvD,OAAO/1I,QAAQhU,IAAIw1F,GASvBw0D,2BAA2B,MACvB,MAAMC,EAAqBv8J,KAAK4xB,WAAWwqI,yBACrCloC,EAA2BqoC,EAC3BA,EAAmBz1E,MACfy1E,EAAmBnlC,8BACnBp3H,KAAK+7J,uBAAL,UAA8B/7J,KAAKk8J,+BAAnC,aAA8B,EAA8BC,iBAAcp1J,OAC9EA,EAEN,OAAI/G,KAAKw8J,6BAA+B,GAAKtoC,GAA4B,EAC9D5nH,KAAK2O,IAAIjb,KAAKw8J,4BAA6BtoC,GAC3CA,GAA4B,EAC5BA,EAGJl0H,KAAKw8J,4BAShBC,+BAA+B/hC,GAG3B,OAFA16H,KAAKw8J,4BAA8B9hC,EAE5B16H,KAAKi8J,gCChHpB,UAQIS,wBAAwB97C,GACpB,MAAM+7C,EAAc/7C,GACbA,EAASn9F,qBAAqB,0BAA0B,GAE/D,GAAKk5I,EAIL,MAAO,CACHtlJ,MAAOslJ,EAAY14G,aAAa,kBAChCgyE,UAAW0mC,EAAY14G,aAAa,aACpC24G,cAAeD,EAAY14G,aAAa,kBACxC44G,UAAWF,EAAY14G,aAAa,cACpCjuB,OAAQ2mI,EAAY14G,aAAa,YAWzC64G,sBAAsBl8C,GAClB,MAAMm8C,EACAn8C,EAASn9F,qBAAqB,wBAAwB,GACtDu5I,EAAoBD,GACnBA,EAA2BnoG,YAC5BqoG,EACAr8C,EAASn9F,qBAAqB,QAAQ,GACtC+nH,EAAOyxB,GACNA,EAAcroG,aACdqoG,EAAcroG,YAAYtzC,cAC3B47I,EACAt8C,EAASn9F,qBAAqB,cAAc,GAIlD,MAAO,CACHu5I,kBAAAA,EACAxxB,KAAAA,EACAqxB,UALEK,GAAsBA,EAAmBtoG,cAenDuoG,mBAAmBjoI,GACf,MAAMkoI,EAAQloI,GAAYA,EAASzR,qBAAqB,SAAS,GAEjE,OAAO25I,GAASA,EAAMn5G,aAAa,eASvCo5G,aAAaz8C,GACT,MAAM08C,EACA18C,EAASn9F,qBAAqB,cAAc,GAGlD,OAFkB65I,GAAsBA,EAAmB1oG,aAW/D2oG,YAAY38C,GACDA,EAAS38D,aAAa,QAAQxuB,SAAS,UCpFvC,MAAM+nI,GAMjB5+J,YAAYgL,EAAU,IAClB5J,KAAKoyD,YAAcxoD,EAAQuoD,WAC3BnyD,KAAKuqI,MAAQ3gI,EAAQ4hI,KAErBxrI,KAAKy9J,cAAc7zJ,EAAQizJ,WAC3B78J,KAAK09J,UAAU9zJ,EAAQosB,QAQ3BokE,WACI,OAAOp6F,KAAKykF,OAQhBk5E,QACI,OAAO39J,KAAK49J,WAQhBC,eACI,OAAO79J,KAAK89J,WAQhBC,uBACI,OAAO/9J,KAAKg+J,mBAQhB3kE,YACI,OAAOr5F,KAAK26F,QAQhBsjE,gBACI,OAAOj+J,KAAKk+J,YAQhBC,UACI,OAAOn+J,KAAKuqI,MAUhB6zB,SAAS/mJ,GACLrX,KAAKykF,OAASptE,EAUlBgnJ,qBAAqB/5I,GACjBtkB,KAAKg+J,mBAAqB15I,EAS9Bo5I,UAAU1nI,GACNh2B,KAAK26F,QAAU3kE,EAQnBujE,aAAatB,GACTj4F,KAAK89J,WAAa7lE,EAQtBqB,cAAcrB,GACVj4F,KAAKk+J,YAAcjmE,EAoBvB53F,OAAM,QAAEi+J,EAAF,YAAWC,EAAX,YAAwBzgD,EAAxB,SAAqC51C,IACvC,OAAO,IAAI5hD,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKoyD,YAAYvF,OACb7sD,KAAKw+J,UAAU,CACXt0J,OAAQ,QACRo0J,QAAAA,EACAxgD,YAAAA,EACAygD,YAAAA,EACAr2F,SAAAA,KAEJj2D,IAKIjS,KAAK09J,UAAU,WACf19J,KAAKy9J,cACDgB,GAAkBtB,mBAAmBlrJ,IAEzCsU,OAEJlP,IACIrX,KAAK0+J,gBAAgBrnJ,GAErBxF,EAAOwF,SAcvB4U,MAAK,YAAE6xF,IACH,OAAO,IAAIx3F,SAAQ,CAACC,EAAS1U,KACzB7R,KAAKoyD,YAAYvF,OACb7sD,KAAKw+J,UAAU,CACXt0J,OAAQ,OACR4zG,YAAAA,IAEJv3F,EACA1U,MAqBZ2sJ,WAAU,OAAEt0J,EAAF,QAAUo0J,EAAV,YAAmBC,EAAnB,YAAgCzgD,EAAhC,SAA6C51C,IACnD,OAAO1pB,EAAAA,GAAAA,KAAI,CACP6b,GAAIyjD,EACJt+G,KAAM,QAET4B,EAAE,QAAS,CACR,MAAS,kCACT,OAAU8I,EACV,SAAYo0J,EACZ,eAAkBt+J,KAAKuqI,MACvB,SAAYriE,EACZ,sBAAyBq2F,IAE5Br4G,KAULw4G,gBAAgBriD,GACZ,MAAMhlG,EAAQglG,EAAQ54F,qBAAqB,SAAS,GAEpDzjB,KAAKo+J,SAAS/mJ,EAAMy3F,SAAS,GAAGr2E,SAUpCglI,cAAcZ,GACV78J,KAAK49J,WAAaf,4HCxP1B,MAAM9vI,IAASmB,EAAAA,EAAAA,oDCETnB,IAASmB,EAAAA,EAAAA,+DAWA,MAAMywI,GAOjB//J,YAAYgzB,GACR5xB,KAAKwiG,YAAc5wE,EACnB5xB,KAAK4+J,sBAAwB,GAC7B5+J,KAAK6+J,sBAAwB,GAC7B7+J,KAAK8+J,wBAA0B,GAC/B9+J,KAAK++J,mCAAqC,GAC1C/+J,KAAKg/J,0BAA4Bh/J,KAAKg/J,0BAA0B94J,KAAKlG,MACrEA,KAAKi/J,4BAA8Bj/J,KAAKi/J,4BAA4B/4J,KAAKlG,MACzEA,KAAKk/J,eAAiBl/J,KAAKk/J,eAAeh5J,KAAKlG,MAC/CA,KAAKwiG,YAAY37E,GAAGsqI,GAA8CnxJ,KAAKi/J,6BACvEj/J,KAAKwiG,YAAY1M,WAAWlB,2BAA2B50F,KAAKg/J,2BAC5Dh/J,KAAKwiG,YAAY37E,GAAGoqI,GAA4BjxJ,KAAKk/J,gBAUzDD,4BAA4B55E,GAAQ,eAAEmK,IAClC,MAAM2vE,EAAmBn/J,KAAK++J,mCAAmC15E,GAAU,GAAM,EAIjF,GAFArlF,KAAK++J,mCAAmC15E,GAAU85E,GAEE,IAAhDn/J,KAAK6+J,sBAAsBjzJ,QAAQy5E,IAAmBA,KAAUrlF,KAAK8+J,yBAC9DtvE,GAAkB,GAAK2vE,EAAkB,EAChD,OAGJ,MAAMlnE,EAAcj4F,KAAKwiG,YAAY1wE,mBAAmBuzD,GAExD,GAAI4S,GACeA,EAAYyJ,qBAAqBvP,IAErC5yF,OAAS,GAAK04F,EAAYyL,eAIjC,OAIR,MAAM07D,EAAmBp/J,KAAK4+J,sBAAsBv5E,GAE/ClnF,MAAMC,QAAQghK,KAAqBA,EAAiB/sJ,OAAMm2E,GAA6B,IAAfA,MACzExoF,KAAK8+J,wBAAwBz5E,GAAU,CACnCg6E,kBAAmB7vE,EACnB4vE,iBAAkB,KAY9BJ,0BAA0Bt4E,GAAK,eAAE8I,IACzB9I,IAAQ1mF,KAAKwiG,YAAYsvD,4BAI7BxzJ,OAAOiG,KAAKirF,GAAgBhrF,SAAQ6gF,IAChC,IAAoD,IAAhDrlF,KAAK6+J,sBAAsBjzJ,QAAQy5E,GACnC,OAGJ,MAAM+5E,EAAmBp/J,KAAK4+J,sBAAsBv5E,GAE/ClnF,MAAMC,QAAQghK,GAERA,EAAiB7/J,QAxFR,GAyFhB6/J,EAAiBnpJ,QAFjBjW,KAAK4+J,sBAAsBv5E,GAAU,GAKzCrlF,KAAK4+J,sBAAsBv5E,GAAQtiF,KAAKysF,EAAenK,OAI3D/mF,OAAOiG,KAAKvE,KAAK8+J,yBAAyBt6J,SAAQ6gF,IAC9C,MAAM,iBAAE+5E,EAAF,kBAAoBC,GAAsBr/J,KAAK8+J,wBAAwBz5E,GAI7E,GAFA+5E,EAAiBr8J,KAAKysF,EAAenK,IAnGjB,IAqGhB+5E,EAAiB7/J,OAAoC,CACrD,GAAI6/J,EAAiB/sJ,OAAMm2E,QAAoC,IAAfA,GAA6C,IAAfA,IAAmB,CAC7F,MAAM82E,EAAyBr0I,KAAKF,UAAUq0I,GAE9CnsE,GAAWiE,chGgZxB,SAAuC7R,EAAQ+5E,EAAkBC,GACpE,MAAO,CACH7/J,KAAM07E,GACNhxE,OAAQ,uBACR41C,WAAY,CACRulC,OAAAA,EACA+5E,iBAAAA,EACAC,kBAAAA,IgGtZYE,CAA8Bl6E,EAAQi6E,EAAwBD,IAClEtyI,GAAOhF,KAAM,yEACTs9D,0BAA+Bi6E,2BAC/BD,KACJr/J,KAAK6+J,sBAAsB97J,KAAKsiF,GAChCrlF,KAAKk/J,eAAe75E,UAGjBrlF,KAAK8+J,wBAAwBz5E,QAWhD65E,eAAe75E,UACJrlF,KAAK4+J,sBAAsBv5E,GAQtCrD,UACIhiF,KAAKwiG,YAAYz4E,IAAIonI,GAA8CnxJ,KAAKi/J,6BACxEj/J,KAAKwiG,YAAYz4E,IAAIknI,GAA4BjxJ,KAAKk/J,gBACtDl/J,KAAKwiG,YAAY1M,WAAWjB,8BAA8B70F,KAAKg/J,2BAC/Dh/J,KAAK4+J,2BAAwB73J,EAC7B/G,KAAK8+J,6BAA0B/3J,EAC/B/G,KAAK6+J,2BAAwB93J,EAC7B/G,KAAK++J,wCAAqCh4J,EAC1C/G,KAAKwiG,iBAAcz7F,GC1I3B,MAAMgmB,IAASmB,EAAAA,EAAAA,wDAMf,MAAMsxI,GAMF5gK,YAAYuD,GACRnC,KAAKmC,KAAOA,EACZnC,KAAK8X,MAAQ,EACb9X,KAAK2vF,IAAM,EACX3vF,KAAKypF,QAAU,GAQnBW,QAAQzB,GACqB,iBAAdA,EACP57D,GAAO1V,MACF,GAAErX,KAAKmC,iCAAiCnC,KAAK8X,QAC9C6wE,GACI1iE,MAAM0iE,KACd3oF,KAAK2vF,KAAOhH,EACZ3oF,KAAKypF,QAAQ1mF,KAAK4lF,GAClB3oF,KAAK8X,OAAS,GAStB2nJ,YACI,OAAOz/J,KAAK2vF,IAAM3vF,KAAK8X,MAQ3B4nJ,aAAax4F,GACTA,EAAQ,GAAElnE,KAAKmC,YAAcnC,KAAKy/J,YAClCv4F,EAAQ,GAAElnE,KAAKmC,gBAAkB8oB,KAAKF,UAAU/qB,KAAKypF,SAOzD10D,QACI/0B,KAAKypF,QAAU,GACfzpF,KAAK2vF,IAAM,EACX3vF,KAAK8X,MAAQ,GASrB,MAAM6nJ,GAQF/gK,YAAYghK,EAAqB94E,EAAOx+E,GAKpCtI,KAAK8mF,MAAQA,EAOb9mF,KAAK6/J,GAAKv3J,EAQVtI,KAAK8/J,WAAa,EAMlB9/J,KAAK+/J,QAAU,IAAIP,GAAkB,OAYrCx/J,KAAKggK,iBAAmB,IAAIn6H,IAO5B7lC,KAAKigK,qBAAuBL,EAU5B5/J,KAAKkgK,oBAAiBn5J,EAEtB/G,KAAKmgK,mBAAqB,CAACz5E,EAAK7mB,KACxB7/D,KAAK8mF,QAAUJ,EAAII,OACnB9mF,KAAKogK,mBAAmBvgG,IAIhC,MAAMjuC,EAAaguI,EAAoBp9D,YAEvC5wE,EAAWkkE,WAAWlB,2BAClB50F,KAAKmgK,oBAEJngK,KAAK8mF,QACN9mF,KAAK4+F,YAAcz6F,GAAMnE,KAAKggK,iBAAiB9gG,OAAO/6D,GACtDytB,EAAW/K,GAAGoqI,GAA4BjxJ,KAAK4+F,aAE/C5+F,KAAKqgK,sBACC,CAACl8J,EAAImQ,IAAStU,KAAKsgK,oBAAoBn8J,EAAImQ,GACjDsd,EAAW/K,GACPsqI,GACAnxJ,KAAKqgK,wBASjBD,mBAAmB9rJ,GACf,GAAKA,GAcL,GARI4M,GAAQ2/D,yBACJvsE,EAAK+X,WAAa/X,EAAK+X,UAAU9sB,QACjCS,KAAK+/J,QAAQ31E,QAAQ91E,EAAK+X,UAAU,GAAGglE,KAI/CrxF,KAAK8/J,YAAc,EAEf9/J,KAAK8/J,YAAc9/J,KAAK6/J,GAAI,CAC5B,GAAI3+I,GAAQ2/D,wBAAyB,CACjC,MAAMjvD,EAAa5xB,KAAKigK,qBAAqBz9D,YAEvC+9D,EAAc,CAChBvvE,IAAKhxF,KAAK8mF,MACV,gBAAmBl1D,EAAW8oI,uBAelC,GAZIpmJ,EAAK+X,WAAa/X,EAAK+X,UAAU9sB,QACjCjB,OAAO+jB,OAAOk+I,EAAa,CACvB,qBACIjsJ,EAAK+X,UAAU,GAAG4kE,mBACtB,sBACI38E,EAAK+X,UAAU,GAAG8kE,oBACtB,eAAkB78E,EAAK+X,UAAU,GAAG7sB,OAI5CQ,KAAK+/J,QAAQL,aAAaa,GAEtBvgK,KAAK8mF,MAAO,CAEZ,MAAM05E,EAAgBxgK,KACjBigK,qBAAqBQ,gBAAgBP,eAErCj6I,MAAMu6I,KAEPD,EAAW,SACLvgK,KAAK+/J,QAAQN,YAAce,OAElC,CAEH,MAAME,EAAe1gK,KAAK2gK,yBACpBC,EAAc5gK,KAAK+/J,QAAQN,YAEjCz/J,KAAKkgK,eAAiBU,EAAcF,EAE/Bz6I,MAAM26I,IAAiB36I,MAAMy6I,KAE9BH,EAAW,gBAAsBvgK,KAAKkgK,gBAI9CjtE,GAAWiE,cAAclb,GAAoBukF,IAGjDvgK,KAAK6gK,uBA5DL9zI,GAAO1V,MAAM,YAsErBspJ,yBACI,IAAI7oJ,EAAQ,EAAG63E,EAAM,EAIrB,IAAK,MAAMmxE,KAAa9gK,KAAKggK,iBAAiBr0J,SAAU,CACpD,MAAMo1J,EAAMD,EAAUrB,YAEjBx5I,MAAM86I,KACPpxE,GAAOoxE,EACPjpJ,GAAS,EACTgpJ,EAAU/rI,SAIlB,OAAO46D,EAAM73E,EAUjBwoJ,oBAAoBn8J,EAAImQ,GACpB,MAAM0sJ,EAAmC,iBAAhB1sJ,EAAKs8I,OAC9B,IAAIqQ,EAASjhK,KAAKggK,iBAAiB7lJ,IAAIhW,IAElC88J,GAAUD,IACXC,EAAS,IAAIzB,GAAmB,GAAEr7J,cAClCnE,KAAKggK,iBAAiB/2I,IAAI9kB,EAAI88J,IAG9BD,EACAC,EAAO72E,QAAQ91E,EAAKs8I,QACbqQ,GACPjhK,KAAKggK,iBAAiB9gG,OAAO/6D,GAQrC08J,iBACI7gK,KAAK+/J,QAAQhrI,QACT/0B,KAAKggK,kBACLhgK,KAAKggK,iBAAiBp5H,QAE1B5mC,KAAK8/J,WAAa,EAMtB99E,UAEI,MAAMpwD,EAAa5xB,KAAKigK,qBAAqBz9D,YAE7C5wE,EAAWkkE,WAAWjB,8BAClB70F,KAAKmgK,oBACJngK,KAAK8mF,QACNl1D,EAAW7H,IACPonI,GACAnxJ,KAAKqgK,uBACTzuI,EAAW7H,IACPknI,GACAjxJ,KAAK4+F,eAaN,MAAMsiE,GAOjBtiK,YAAYgzB,EAAYtpB,GAOpBtI,KAAK6/J,GAAKv3J,EAENA,EAAI,GACJykB,GAAOtf,KAAM,0CAAyCnF,aAc1DtI,KAAK8/J,WAAa,EAOlB9/J,KAAKwiG,YAAc5wE,EAQnB5xB,KAAKmhK,mBACC,IAAI3B,GAAkB,wBAQ5Bx/J,KAAKohK,qBACC,IAAI5B,GAAkB,0BAQ5Bx/J,KAAKqhK,mBACC,IAAI7B,GAAkB,wBAQ5Bx/J,KAAKshK,qBACC,IAAI9B,GAAkB,0BAQ5Bx/J,KAAKuhK,gBACC,IAAI/B,GAAkB,oBAQ5Bx/J,KAAKwhK,kBACC,IAAIhC,GAAkB,sBAQ5Bx/J,KAAKyhK,oBACC,IAAIjC,GAAkB,qBAQ5Bx/J,KAAK0hK,iBACC,IAAIlC,GAAkB,sBAQ5Bx/J,KAAK2hK,mBACC,IAAInC,GAAkB,wBAO5Bx/J,KAAK4hK,cAAgB,IAAIpC,GAAkB,oBAQ3Cx/J,KAAK6hK,oBACC,IAAIrC,GAAkB,2BAO5Bx/J,KAAK8hK,aAAe,IAAItC,GAAkB,mBAQ1Cx/J,KAAK+hK,mBACC,IAAIvC,GAAkB,0BAQ5Bx/J,KAAKgiK,uBACC,IAAIxC,GAAkB,iBAQ5Bx/J,KAAKiiK,uBACC,IAAIzC,GAAkB,wBAO5Bx/J,KAAKkiK,sBACC,IAAI1C,GAAkB,gBAQ5Bx/J,KAAKmiK,sBACC,IAAI3C,GAAkB,uBAQ5Bx/J,KAAKoiK,OAAS,IAAI5C,GAAkB,sBAEpCx/J,KAAKqiK,2BAAwBt7J,EAE7B/G,KAAKsiK,qBAAuBhuJ,IACxBtU,KAAKogK,mBAAmB9rJ,GACxBtU,KAAKuiK,kCAAkCjuJ,IAE3Csd,EAAW/K,GACPsqI,GACAnxJ,KAAKsiK,sBAETtiK,KAAKwiK,oBAAsB,KACvBz1I,GAAOw4B,MAAM,uCACbvlD,KAAK6gK,iBACL7gK,KAAKygK,gBAAgBI,iBACrB7gK,KAAKyiK,gBAAgB5B,kBAEzBjvI,EAAW/K,GACPoqI,GACAjxJ,KAAKwiK,qBAETxiK,KAAK0iK,uBAAyB,CAACjI,EAAWz6D,MAIpB,IAAdA,IACAjzE,GAAOtf,KAAK,+BACZzN,KAAK2iK,sBAGb/wI,EAAW/K,GACPoqI,GACAjxJ,KAAK0iK,wBAET1iK,KAAKygK,gBACC,IAAId,GAAmB3/J,MAAM,EAAiBsI,GAEpDtI,KAAKyiK,gBACC,IAAI9C,GAAmB3/J,MAAM,EAAgBsI,IAtN/CykB,GAAOtf,KAAK,uCA+NpB2yJ,mBAAmB9rJ,GAEf,IAAKA,EAGD,YAFAyY,GAAO1V,MAAM,YAKjB,MAAMyvE,EAAQ9mF,KAAKwiG,YAAY9B,cACzBkiE,EAAW5iK,KAAKwiG,YAAYk4D,sBAElC,IAAK5zE,GAAS87E,EAAW,EAKrB,OAUJ,MAAM12E,EAAU53E,EAAK43E,QACfn0C,EAAYzjC,EAAKyjC,UACjBw0C,EAAaj4E,EAAKi4E,WAClBpoB,EAAY7vD,EAAK+3E,UACjBD,EAAa93E,EAAK83E,WAExB,GAAKF,EAIE,GAAKn0C,EAIL,GAAKw0C,EAIL,GAAKpoB,EAIL,GAAKioB,GA2DZ,GArDApsF,KAAKmhK,mBAAmB/2E,QAAQ8B,EAAQzqB,MAAM0qB,QAC9CnsF,KAAKohK,qBAAqBh3E,QAAQ8B,EAAQzqB,MAAM1vC,UAEhD/xB,KAAKqhK,mBAAmBj3E,QAAQ8B,EAAQvqB,MAAMwqB,QAC9CnsF,KAAKshK,qBAAqBl3E,QAAQ8B,EAAQvqB,MAAM5vC,UAE5C7Q,GAAQi/D,gCACRngF,KAAKuhK,gBAAgBn3E,QAAQryC,EAAUo0C,QACvCnsF,KAAKwhK,kBAAkBp3E,QAAQryC,EAAUhmB,WAG7C/xB,KAAK0hK,iBAAiBt3E,QAAQmC,EAAWJ,QACzCnsF,KAAK2hK,mBAAmBv3E,QAAQmC,EAAWx6D,UAC3C/xB,KAAKyhK,oBAAoBr3E,QAAQmC,EAAWh9D,OAE5CvvB,KAAKoiK,OAAOh4E,QAAQ91E,EAAKq8I,mBAErBxsF,IACAnkE,KAAK4hK,cAAcx3E,QACfpqF,KAAK6iK,sBACD1+F,GAAW,EAAoBy3B,GAAUriE,SACjDv5B,KAAK6hK,oBAAoBz3E,QACrBpqF,KAAK6iK,sBACD1+F,GAAW,EAAoBy3B,GAAUpiE,UAEjDx5B,KAAK8hK,aAAa13E,QACdpqF,KAAK6iK,sBACD1+F,GAAW,EAAkBy3B,GAAUriE,SAC/Cv5B,KAAK+hK,mBAAmB33E,QACpBpqF,KAAK6iK,sBACD1+F,GAAW,EAAkBy3B,GAAUpiE,WAG/C4yD,IACApsF,KAAKgiK,uBAAuB53E,QACxBpqF,KAAK8iK,yBACD12E,GAAY,EAAoBwP,GAAUriE,SAElDv5B,KAAKiiK,uBAAuB73E,QACxBpqF,KAAK8iK,yBACD12E,GAAY,EAAoBwP,GAAUpiE,UAElDx5B,KAAKkiK,sBAAsB93E,QACvBpqF,KAAK8iK,yBACD12E,GAAY,EAAkBwP,GAAUriE,SAEhDv5B,KAAKmiK,sBAAsB/3E,QACvBpqF,KAAK8iK,yBACD12E,GAAY,EAAkBwP,GAAUpiE,WAGpDx5B,KAAK8/J,YAAc,EAEf9/J,KAAK8/J,YAAc9/J,KAAK6/J,GAAI,CAE5B,MAAMU,EAAc,CAChBvvE,IAAKlK,EACL,gBAAmB87E,GAGnBtuJ,EAAK+X,WAAa/X,EAAK+X,UAAU9sB,QACjCjB,OAAO+jB,OAAOk+I,EAAa,CACvB,qBACIjsJ,EAAK+X,UAAU,GAAG4kE,mBACtB,sBACI38E,EAAK+X,UAAU,GAAG8kE,oBACtB,eAAkB78E,EAAK+X,UAAU,GAAG7sB,OAI5CQ,KAAKmhK,mBAAmBzB,aAAaa,GACrCvgK,KAAKohK,qBAAqB1B,aAAaa,GAEvCvgK,KAAKqhK,mBAAmB3B,aAAaa,GACrCvgK,KAAKshK,qBAAqB5B,aAAaa,GAEnCr/I,GAAQi/D,gCACRngF,KAAKuhK,gBAAgB7B,aAAaa,GAClCvgK,KAAKwhK,kBAAkB9B,aAAaa,IAExCvgK,KAAK0hK,iBAAiBhC,aAAaa,GACnCvgK,KAAK2hK,mBAAmBjC,aAAaa,GACrCvgK,KAAKyhK,oBAAoB/B,aAAaa,GAEtCvgK,KAAK4hK,cAAclC,aAAaa,GAC3Bt6I,MAAMjmB,KAAK6hK,oBAAoBpC,cAChCz/J,KAAK6hK,oBAAoBnC,aAAaa,GAE1CvgK,KAAK8hK,aAAapC,aAAaa,GAC1Bt6I,MAAMjmB,KAAK+hK,mBAAmBtC,cAC/Bz/J,KAAK+hK,mBAAmBrC,aAAaa,GAGzCvgK,KAAKgiK,uBAAuBtC,aAAaa,GACpCt6I,MAAMjmB,KAAKiiK,uBAAuBxC,cACnCz/J,KAAKiiK,uBAAuBvC,aAAaa,GAE7CvgK,KAAKkiK,sBAAsBxC,aAAaa,GACnCt6I,MAAMjmB,KAAKmiK,sBAAsB1C,cAClCz/J,KAAKmiK,sBAAsBzC,aAAaa,GAG5CvgK,KAAKoiK,OAAO1C,aAAaa,GAEzBttE,GAAWiE,cAAclb,GAAoBukF,IAE7CvgK,KAAK6gK,uBA/GL9zI,GAAO1V,MAAM,sBAJb0V,GAAO1V,MAAM,uBAJb0V,GAAO1V,MAAM,wBAJb0V,GAAO1V,MAAM,uBAJb0V,GAAO1V,MAAM,gBA8IrByrJ,yBAAyBC,EAAiBlxI,EAAS8pE,GAC/C,IAAIqnE,EAAgB,EAChBC,EAAY,EAChB,MAAMC,EAAOljK,KAAKwiG,YAAY3H,WAE9B,IAAK,MAAMsoE,KAAU7kK,OAAOiG,KAAKw+J,GAC7B,GAAIlxI,EAAUsxI,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMjrE,EACApmE,EACI,KACA7xB,KAAKwiG,YAAY1wE,mBAAmBqxI,GACxCC,EAAmBL,EAAgBI,GAGzC,IAAKtxI,GAAWomE,IAAgBmrE,EAAkB,CAC9C,MAAMC,EAAgBrjK,KAAKsjK,6BACvBF,EAAkBnrE,EAAa0D,GAE9B11E,MAAMo9I,KACPL,GAAiBK,EACjBJ,GAAa,IAM7B,OAAOD,EAAgBC,EAc3BK,6BAA6BC,EAAQtrE,EAAa0D,GAC9C,IAAIlyF,EAAQnL,OAAOiG,KAAKg/J,GAAQt8J,KAAIsC,GAAQhE,OAAOgE,KAC/Ck4F,EAAc,KAIlB,MAAM/a,EAAM1mF,KAAKwiG,YAAYsvD,0BAEzB75D,GACAwJ,EAAcxJ,EAAYyJ,qBAAqBvP,IAC3CsP,IACAh4F,EACMA,EAAMnD,QACJiD,GAAQk4F,EAAY/2F,MAChBolB,IACKA,EAAMynE,WACAznE,EAAMwwH,YAAc/2I,GACpBumB,EAAM6rE,YAAcA,SAG/C8F,EAAczhG,KAAKwiG,YAAYlQ,eAAeH,IAC9C1oF,EACMA,EAAMnD,QACJiD,GAAQk4F,EAAY/2F,MAChBolB,IACKA,EAAMynE,WACA7Q,EAAI6L,aAAaziE,KAAWvmB,GAC5BumB,EAAM6rE,YAAcA,OAG/C,IAAIqnE,EAAgB,EAChBQ,EAAgB,EAEpB,IAAK,MAAMj6J,KAAQE,EAAO,CACtB,MAAMg6J,EACAl+J,OAAOg+J,EAAOh6J,GAAMyyB,QAAUz2B,OAAOg+J,EAAOh6J,GAAMwyB,QAGnD9V,MAAMw9I,IAAmBA,EAAiB,IAC3CT,GAAiBS,EACjBD,GAAiB,GAIzB,OAAOR,EAAgBQ,EAa3BX,sBAAsB1+F,EAAWtyC,EAAS8pE,GACtC,IAAI+nE,EAAa,EACbT,EAAY,EAChB,MAAMC,EAAOljK,KAAKwiG,YAAY3H,WAE9B,IAAK,MAAMsoE,KAAU7kK,OAAOiG,KAAK4/D,GAC7B,GAAItyC,EAAUsxI,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,MAAMjrE,EACApmE,EACI,KAAO7xB,KAAKwiG,YAAY1wE,mBAAmBqxI,GAC/CQ,EAAYx/F,EAAUg/F,GAG5B,IAAKtxI,GAAWomE,IAAgB0rE,EAAW,CACvC,MAAMC,EACA5jK,KAAK6jK,0BACHF,EAAW1rE,EAAa0D,GAE3B11E,MAAM29I,KACPF,GAAcE,EACdX,GAAa,IAM7B,OAAOS,EAAaT,EAcxBY,0BAA0BN,EAAQtrE,EAAa0D,GAC3C,IAAIlyF,EAAQnL,OAAOiG,KAAKg/J,GAAQt8J,KAAIsC,GAAQhE,OAAOgE,KAC/Ck4F,EAAc,KAIlB,MAAM/a,EAAM1mF,KAAKwiG,YAAYsvD,0BAEzB75D,GACAwJ,EAAcxJ,EAAYyJ,qBAAqBvP,IAC3CsP,IACAh4F,EACMA,EAAMnD,QACJiD,GAAQk4F,EAAY/2F,MAChBolB,IAAUA,EAAMynE,WACTznE,EAAMwwH,YAAc/2I,GACpBumB,EAAM6rE,YAAcA,SAG3C8F,EAAczhG,KAAKwiG,YAAYlQ,eAAeH,IAC9C1oF,EACMA,EAAMnD,QACJiD,GAAQk4F,EAAY/2F,MAChBolB,IAAUA,EAAMynE,WACT7Q,EAAI6L,aAAaziE,KAAWvmB,GAC5BumB,EAAM6rE,YAAcA,OAG3C,IAAI+nE,EAAa,EACbF,EAAgB,EAEpB,IAAK,MAAMj6J,KAAQE,EAAO,CACtB,MAAMq6J,EAAcv+J,OAAOg+J,EAAOh6J,KAG7B0c,MAAM69I,IAAgBA,EAAc,IACrCJ,GAAcI,EACdN,GAAiB,GAIzB,OAAOE,EAAaF,EAUxBjB,kCAAkCjuJ,GAC9B,IAAKA,IAASA,EAAK+X,YAAc/X,EAAK+X,UAAU9sB,OAC5C,OAEJ,MAAMwkK,EAAiB,CACnB/yE,IAAK18E,EAAK+X,UAAU,GAAG2kE,IACvB,qBAAwB18E,EAAK+X,UAAU,GAAG4kE,mBAC1C,sBAAyB38E,EAAK+X,UAAU,GAAG8kE,oBAC3C,eAAkB78E,EAAK+X,UAAU,GAAG7sB,MAGnCQ,KAAKqiK,uBAA0B93D,IAAAA,CAAQw5D,EAAgB/jK,KAAKqiK,yBAC7DriK,KAAKqiK,sBAAwB0B,EAC7B9wE,GAAWiE,cjGjcZ,CACH13F,KAAM07E,GACNhxE,OAAQ,kBACR41C,WiG8buDikH,KAW3DpB,oBACI3iK,KAAK6gK,iBACL7gK,KAAKygK,gBAAgBI,iBAOzBA,iBACI7gK,KAAKmhK,mBAAmBpsI,QACxB/0B,KAAKohK,qBAAqBrsI,QAE1B/0B,KAAKqhK,mBAAmBtsI,QACxB/0B,KAAKshK,qBAAqBvsI,QAE1B/0B,KAAKuhK,gBAAgBxsI,QACrB/0B,KAAKwhK,kBAAkBzsI,QAEvB/0B,KAAK0hK,iBAAiB3sI,QACtB/0B,KAAK2hK,mBAAmB5sI,QACxB/0B,KAAKyhK,oBAAoB1sI,QAEzB/0B,KAAK4hK,cAAc7sI,QACnB/0B,KAAK6hK,oBAAoB9sI,QACzB/0B,KAAK8hK,aAAa/sI,QAClB/0B,KAAK+hK,mBAAmBhtI,QAExB/0B,KAAKgiK,uBAAuBjtI,QAC5B/0B,KAAKiiK,uBAAuBltI,QAC5B/0B,KAAKkiK,sBAAsBntI,QAC3B/0B,KAAKmiK,sBAAsBptI,QAE3B/0B,KAAKoiK,OAAOrtI,QAEZ/0B,KAAK8/J,WAAa,EAMtB99E,UACIhiF,KAAKwiG,YAAYz4E,IACbknI,GACAjxJ,KAAKwiK,qBACTxiK,KAAKwiG,YAAYz4E,IACbonI,GACAnxJ,KAAKsiK,sBACTtiK,KAAKwiG,YAAYz4E,IACbknI,GACAjxJ,KAAK0iK,wBACT1iK,KAAKygK,gBAAgBz+E,UACrBhiF,KAAKyiK,gBAAgBzgF,qCC/+Bd,MAAMgiF,GAQjBplK,YAAYgzB,GACR5xB,KAAK6/D,MAAQ,CACT0oE,MAAO,GAIP07B,kBAAmB,MAGvB,MAAM51I,EAASuD,EAAWipE,WAE1B76F,KAAK6/D,MAAM0oE,MAAMl6G,GAAU,IAAI61I,KAAJ,CAAiB71I,EAAQ,MAAM,GAC1DruB,KAAK4xB,WAAaA,EAElBA,EAAW9I,iBACPqsE,EACAn1F,KAAKmkK,mBAAmBj+J,KAAKlG,OACjC4xB,EAAW9I,iBACPqsE,GACAn1F,KAAKokK,YAAYl+J,KAAKlG,OAC1B4xB,EAAW9I,iBACPqsE,GACAn1F,KAAKqkK,aAAan+J,KAAKlG,OAC3B4xB,EAAW9I,iBACPqsE,EACAn1F,KAAKskK,qBAAqBp+J,KAAKlG,OAC/B4xB,EAAWshE,MACXthE,EAAWshE,KAAKngF,YACZ8kF,KAAAA,uBACA73F,KAAKukK,aAAar+J,KAAKlG,OAanCmkK,mBAAmBF,GACf,MAAMO,EACAxkK,KAAK6/D,MAAM0oE,MAAMvoI,KAAK6/D,MAAMokG,mBAC5BQ,EAAqBzkK,KAAK6/D,MAAM0oE,MAAM07B,GAE5CO,GAAsBA,EAAmB71I,oBAAmB,GAC5D81I,GAAsBA,EAAmB91I,oBAAmB,GAC5D3uB,KAAK6/D,MAAMokG,kBAAoBA,EAWnCG,YAAY/1I,EAAQ4pE,GACZA,EAAYwL,YAIXzjG,KAAK6/D,MAAM0oE,MAAMl6G,KAClBruB,KAAK6/D,MAAM0oE,MAAMl6G,GAAU,IAAI61I,KAAJ,CAAiB71I,EAAQ4pE,EAAYjpE,mBAYxEq1I,aAAah2I,GACT,MAAMq2I,EAAY1kK,KAAK6/D,MAAM0oE,MAAMl6G,GAE/Bq2I,GACAA,EAAUj1I,gBAYlB60I,qBAAqBj2I,EAAQY,GACzB,MAAMy1I,EAAY1kK,KAAK6/D,MAAM0oE,MAAMl6G,GAE/Bq2I,GACAA,EAAUj2I,eAAeQ,GAWjC23C,WACI,OAAO5mE,KAAK6/D,MAAM0oE,MAStBg8B,aAAaI,GACT,IAAK,MAAMt2I,KAAUs2I,EAAU,CAC3B,IAAIC,EACJ,MAAMC,EAAiB7kK,KAAK4xB,WAAWE,mBAAmBzD,GAGrDw2I,GAAmBA,EAAephE,aAC/BzjG,KAAK6/D,MAAM0oE,MAAMl6G,IACjBu2I,EAAuB5kK,KAAK6/D,MAAM0oE,MAAMl6G,GAEnCu2I,EAAqB51I,kBACtB41I,EACKn2I,eAAek2I,EAASt2I,GAAQC,eAGzCs2I,EAAuB,IAAIV,KAAJ,CACnB71I,EAAQs2I,EAASt2I,GAAQC,aAC7BtuB,KAAK6/D,MAAM0oE,MAAMl6G,GAAUu2I,EAC3BA,EAAqBn1I,kBAI7Bm1I,EAAqBh2I,yBACf+1I,EAASt2I,GAAQO,qDC7JnC,MAAM7B,GAASpoB,EAAAA,MAAAA,mDAUA,SAASmgK,GAAmBlzI,GAEvC5xB,KAAKjD,SAAW,GAEhBiD,KAAK4xB,WAAaA,EAClB5xB,KAAK4xB,WAAWmzI,mBACZ,WAAY/kK,KAAKglK,gBAAgB9+J,KAAKlG,OAG9C8kK,GAAmBvmK,UAAUymK,gBACvB,SAASjoK,EAAUkoK,EAAa9gD,GAC9B,IAAKnkH,KAAK4xB,WAAW6uF,QAAQ0D,GAKzB,YAJAp3F,GAAOhF,KACF,8CAA6ChrB,IAC9ConH,GAKR,MAAMp6G,EAAM,GAEZhN,EAAS+xG,SAAStqG,SAAQ4C,IAEtB,MAAMjF,EAAOiF,EAAU04C,WAAW39C,KAC5BwG,EAAUvB,EAAUvD,MAEtB7D,KAAKjD,SAASoF,KAAUwG,IACxB3I,KAAKjD,SAASoF,GAAQwG,EACtBokB,GAAOtf,KAAM,OAAMtL,cAAiBwG,KAEpCoB,EAAIhH,KAAK,CACLoB,GAAI,oBACJiD,UAAWjF,EACXwG,QAAAA,QAMRoB,EAAIxK,OAAS,GACb0zF,GAAWwD,QAAQxrE,KAAKF,UAAUhhB,KAW9C+6J,GAAmBvmK,UAAU2mK,oBAAsB,SAASC,GACxD,OAAOnlK,KAAKjD,SAASooK,IC5DlB,MAAMC,GAAmB,YAMnBC,GAAmB,YAOnBC,GAAc,OAMdC,GAAW,KAMXC,GAAY,MAMZC,GAAgB,UAOhBC,GAAiB,WAMjBC,GAAe,SAOfC,GAAsB,sBAOtBC,GAAuB,+BCvD9B94I,IAASmB,EAAAA,EAAAA,2DAMT43I,GAAgB,gBAMP,MAAMC,WAA+Br/D,GAWhD9nG,YAAYonK,EAAY13I,EAAaopE,GACjCha,QAEA19E,KAAKgmK,WAAaA,EAClBhmK,KAAKsuB,YAAcA,EACnBtuB,KAAK03F,SAAWA,EAShB13F,KAAKooB,WAAQrhB,EAMjBklB,OACQjsB,KAAKooB,QAAU69I,IACZjmK,KAAKooB,QAAU69I,GAMtBjmK,KAAKkmK,aAAa,QALdn5I,GAAOhF,KAAK,mDAWpB1nB,QAGQL,KAAKooB,QAAU69I,IACZjmK,KAAKooB,QAAU69I,IACfjmK,KAAKooB,QAAU69I,IACfjmK,KAAKooB,QAAU69I,GAMtBjmK,KAAKkmK,aAAa,SALdn5I,GAAOhF,KAAK,yCAgBpBo+I,SAASnlE,EAAUolE,GACf,GAAIplE,IAAahhG,KAAKooB,MAClB,OAGJ,MAAMi+I,EAAWrmK,KAAKooB,MAEtBpoB,KAAKooB,MAAQ44E,EACbhhG,KAAKwqF,aAAa5iE,KAAKk+I,GACnB,CACI3iK,QAASnD,KAAKgmK,WACdI,cAAAA,EACAC,SAAAA,EACArlE,SAAUhhG,KAAKooB,MACfkG,YAAatuB,KAAKsuB,cAW9Bg4I,iBAAiB5yJ,GACb1T,KAAK+S,YAAY+yJ,GAAepyJ,GAQpC6yJ,oBAAoB7yJ,GAChB1T,KAAK2T,eAAemyJ,GAAepyJ,GASvCwyJ,aAAah8J,GACT,MAAM41C,EAAa,CACf,MAAS,kCACT,OAAU51C,EACVs8J,WAAYxmK,KAAKgmK,YAGrBlmH,EAAW2mH,YAAczmK,KAAKsuB,YAE9B,MAAM0iC,GAAKxS,EAAAA,GAAAA,KAAI,CACX6b,GAAIr6D,KAAK03F,SAASomB,YAClBt+G,KAAM,QACL4B,EAAE,QAAS0+C,GACXoG,KAELn5B,GAAOw4B,MAAO,GAAEr7C,yBAA+B8mD,EAAG/K,UAClDjmD,KAAK03F,SAASvlC,WAAWtF,OACrBmE,GACA,SACA35C,IACI0V,GAAO1V,MACF,aAAYnN,kCAAwCmN,GACzDrX,KAAKmmK,SAASF,QCxJ9B,MAAMl5I,IAASmB,EAAAA,EAAAA,+CAUA,MAAMw4I,GAOjB9nK,YAAY84F,GACR13F,KAAK03F,SAAWA,EAChB13F,KAAKwqF,aAAekN,EAASlN,aAC7Bz9D,GAAOw4B,MAAM,uBACbvlD,KAAK8hI,SAAW,GAEhB9hI,KAAK2mK,2BAA6B3mK,KAAK4mK,oBAAoB1gK,KAAKlG,MAKhE03F,EAASkD,oBAAoB,uBACzB56F,KAAK6mK,oBAAoB3gK,KAAKlG,OAStC6mK,oBAAoB7pK,GAChB,MAAM8iD,EAAa9iD,EAAK8iD,WAExB,IAAKA,EACD,OAGJ/yB,GAAOw4B,MAAM,+BAAgCzF,GAE7C,MAAMkhD,EAAWlhD,EAAW13B,MAE5B,GAAI44E,IAAahhG,KAAKooB,MAItB,OAAQ44E,GACR,KAAK8lE,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GACL,KAAKA,GAAwB,CACzB,MAAM3jK,EAAU28C,EAAW0mH,WAE3B,IAAKrjK,EACD,OAIJ,MAAMiD,EAAUpG,KAAK8hI,SAAS3+H,GAE1BiD,EACAA,EAAQ+/J,SAASnlE,EAAUlhD,EAAWinH,gBAEtCh6I,GAAOhF,KAAK,kCAAmC5kB,KAc3D6jK,wBAAwBhB,EAAY13I,GAChC,GAAItuB,KAAK8hI,SAASkkC,GAId,OAHAj5I,GAAOhF,KAAK,uDACRi+I,GAEG,IAAIv3J,MAAMq4J,IAGrB,MAAM1gK,EAAU,IAAI2/J,GAChBC,EAAY13I,EAAatuB,KAAK03F,UAMlC,OAJAtxF,EAAQkgK,iBAAiBtmK,KAAK2mK,4BAE9B3mK,KAAK8hI,SAASkkC,GAAc5/J,EAErBA,EASXwgK,oBAAoBrvI,GAChB,MAAMp0B,EAAUo0B,EAAMp0B,QAEtB,GAAIo0B,EAAMypE,WAAa8lE,IAChBvvI,EAAMypE,WAAa8lE,GAAwB,CAC9C,MAAM1gK,EAAUpG,KAAK8hI,SAAS3+H,GAE9B,IAAKiD,EAID,YAHA2mB,GAAO1V,MAAM,6CACTlU,GAKRiD,EAAQmgK,oBAAoBvmK,KAAK2mK,mCAC1B3mK,KAAK8hI,SAAS3+H,GAGzBnD,KAAKwqF,aAAa5iE,KACdiwE,KAAAA,mCACAtgE,+cC1DZ,MAAMxK,IAASmB,EAAAA,EAAAA,iCA+CA,SAAS+4I,GAAgBr9J,GAAS,MAC7C,IAAKA,EAAQzH,MAAQyH,EAAQzH,KAAKmf,gBAAkB1X,EAAQzH,KAAM,CAC9D,MAAM2wG,EACA,8GAIN,MADA/lF,GAAO1V,MAAMy7F,GACP,IAAIrkG,MAAMqkG,GAKpB,GAHA9yG,KAAKmyD,WAAavoD,EAAQuoD,WAC1BnyD,KAAKkzF,KAAL,UAAYlzF,KAAKmyD,kBAAjB,aAAY,EAAiB+gC,KAEzBlzF,KAAKkzF,KAAK+yB,cAAcr8G,EAAQzH,KAAMyH,EAAQmuG,cAAe,CAC7D,MAAMjF,EAAS,2DAKf,aAHO9yG,KAAKmyD,kBACLnyD,KAAKkzF,KACZnmE,GAAO1V,MAAMy7F,GACP,IAAIrkG,MAAMqkG,GAEpB9yG,KAAKwqF,aAAe,IAAItkE,MACxBlmB,KAAK4J,QAAUA,EACf5J,KAAKknK,aAAe,IAAI/vE,GAA4Bn3F,MACpDA,KAAKwgG,aAAe,GACpBxgG,KAAKonG,MAAMx9F,GACX5J,KAAKmnK,mBAAqB,IAAIrC,GAAmB9kK,MAMjDA,KAAKs3F,iBAAmB,KACxBt3F,KAAKw7F,oBAAsB,KAC3Bx7F,KAAKonK,YAAc,KACnBpnK,KAAKqnK,sBAAuB,EAC5BrnK,KAAKu6F,aAAc,EACnBv6F,KAAK86F,iBAAkB,EACvB96F,KAAK+6F,iBAAkB,EACvB/6F,KAAKi7F,iBAAmB,CACpBx5B,OAAO,EACPE,OAAO,GAEX3hE,KAAKw4F,gBAAiB,EAGtBx4F,KAAKs4F,kBAAoB,KAEzBt4F,KAAK24F,qBAAsB,EAG3B34F,KAAKy4F,uBAAyB,KAM9Bz4F,KAAKsnK,YAAa,EAGlBtnK,KAAKqiF,WAAa,GAOlBriF,KAAK2wJ,kBACC,IAAIF,GAAkBzwJ,KAAMA,KAAKwqF,aAAc5gF,GAMrD5J,KAAK4/J,oBACC,IAAIsB,GAAoBlhK,KAAM4J,EAAQtG,OAAOikK,cAAgB,IAM9D39J,EAAQtG,OAAOuwF,qBAChB7zF,KAAKwnK,4BAA8B,IAAI7I,GAA2B3+J,OAMtEA,KAAK64F,4BAA6B,EAKlC74F,KAAKynK,sBAAwB,IAAIzD,GAAsBhkK,MAUvDA,KAAK0nK,qBAAuB,KAE5B,MAAMC,EACA78J,SAASlB,EAAQtG,OAAO0tF,KAAOpnF,EAAQtG,OAAO0tF,IAAI42E,eAAgB,IAOxE5nK,KAAK4nK,eAAiB3hJ,MAAM0hJ,GAAS,EAAIA,EACzC56I,GAAOtf,KAAM,mBAAkBzN,KAAK4nK,kBAQpC5nK,KAAK6nK,4BAA6B,EAQlC7nK,KAAKgxF,KAAM,EAMXhxF,KAAKq3F,iBAAmB,KAExBr3F,KAAK8nK,kBAAoB,IAAIpB,GAAW1mK,KAAK23F,MAC7C33F,KAAK+nK,iBAAmB,IRpP5B,MAQInpK,YAAY84F,GAIR13F,KAAKgoK,UAAY,GAEjBhoK,KAAKioK,UAAYvwE,EAEjB13F,KAAKggH,WAAahgH,KAAKggH,WAAW95G,KAAKlG,MAEvCA,KAAKioK,UAAUz9E,aAAaz3E,YACxB8kF,KAAAA,kBAA8B73F,KAAKggH,YAS3CkoD,WAAWrL,GACP,OAAO78J,KAAKgoK,UAAUnL,GAe1B78C,YAAW,iBAAEW,EAAF,SAAoBC,IACvB69C,GAAkBlB,YAAY38C,GAC9B5gH,KAAKmoK,qBAAqBvnD,GACnBD,GACP3gH,KAAKooK,qBAAqBxnD,GAoBlCynD,eAAez+J,GACX,MAAMxD,EAAU,IAAIo3J,kVAAJ,IACT5zJ,EADS,CAEZuoD,WAAYnyD,KAAKioK,UAAU91G,cAG/B,OAAO/rD,EAAQ/F,MAAM,CACjBi+J,QAAS10J,EAAQ00J,QACjBC,YAAa30J,EAAQ20J,YACrBzgD,YAAa99G,KAAKioK,UAAUnqD,YAC5B51C,SAAUt+D,EAAQs+D,WAEjBjG,MAAK,KAKGjiE,KAAKkoK,WAAW9hK,EAAQu3J,WACzB39J,KAAKsoK,YAAYliK,GACjBpG,KAAKuoK,mBAAmBniK,IAGrBA,KAEV+lE,OAAM90D,IACHrX,KAAKuoK,mBAAmBniK,GAEjBkgB,QAAQzU,OAAOwF,MAYlCmxJ,cAAc3L,GACV,MAAMz2J,EAAUpG,KAAKkoK,WAAWrL,GAEhC,OAAIz2J,EACOA,EAAQ6lB,KAAK,CAAE6xF,YAAa99G,KAAKioK,UAAUnqD,cAG/Cx3F,QAAQzU,OAAO,IAAIpD,MAAM,2BASpC65J,YAAYliK,GACRpG,KAAKgoK,UAAU5hK,EAAQu3J,SAAWv3J,EAYtCqiK,eAAe5L,EAAW7mI,EAAQw1G,GAC9B,MAAMplI,EAAU,IAAIo3J,GAAa,CAC7BrrG,WAAYnyD,KAAKioK,UAAU91G,WAC3B2rD,YAAa99G,KAAKioK,UAAUnqD,YAC5B0tB,KAAAA,EACAqxB,UAAAA,EACA7mI,OAAAA,IAKJ,OAFAh2B,KAAKsoK,YAAYliK,GAEVA,EASXmiK,mBAAmBniK,EAAS6vH,GACxBj2H,KAAKioK,UAAUz9E,aAAa5iE,KACxBiwE,KAAAA,uBAAmCzxF,EAAS6vH,GAUpDkyC,qBAAqBvnD,GACjB,MAAM+7C,EAAc8B,GAAkB/B,wBAAwB97C,GAE9D,IAAK+7C,EACD,OAGJ,MAAM,MAAEtlJ,EAAF,UAAS4+G,EAAT,cAAoB2mC,EAApB,UAAmCC,EAAnC,OAA8C7mI,GAAW2mI,EAI/D,IAAIv2J,EAAUpG,KAAKkoK,WAAWrL,GAKzBz2J,GAAsB,QAAX4vB,EAaZ5vB,GACGA,EAAQizF,cAAgBrjE,GACxB5vB,EAAQg0F,aAAe/iF,EAC1B0V,GAAOhF,KAAK,uCACRkD,KAAKF,UAAU4xI,KAKlBv2J,IACDA,EAAUpG,KAAKyoK,eAAe5L,EAAW7mI,EAAQ4mI,IAGrDx2J,EAAQs3J,UAAU1nI,GAEd3e,GACAjR,EAAQg4J,SAAS/mJ,GAGrBrX,KAAKuoK,mBAAmBniK,EAAS6vH,IA/B7BlpG,GAAOhF,KACH,qCACA,2CAuCZqgJ,qBAAqBxnD,GACjB,MAAM,kBAAEo8C,EAAF,KAAqBxxB,EAArB,UAA2BqxB,GAC3B4B,GAAkB3B,sBAAsBl8C,GAE9C,IAAKi8C,EAID,YAHA9vI,GAAOhF,KACH,2DAKR,IAAI3hB,EAAUpG,KAAKkoK,WAAWrL,GAEzBz2J,IACDA,EAAUpG,KAAKyoK,eAAe5L,EAAW,GAAIrxB,IAGjDplI,EAAQi4J,qBAAqBrB,GAE7Bh9J,KAAKuoK,mBAAmBniK,KQDiBpG,KAAK23F,MAQlD33F,KAAK0oK,uCAAoC3hK,EAKrC/G,KAAK2oK,oBACL57I,GAAOtf,KAAK,sCAEZzN,KAAK4oK,eAAiB,IAAI99D,GAAc9qG,OC9PjC,SAAS6oK,GAAgBC,EAAOnkC,EAAO/6H,GAClD5J,KAAK8oK,MAAQA,EACb9oK,KAAK2kI,MAAQA,EACb3kI,KAAK4J,QAAUA,EACf5J,KAAKkzF,KAAO,IAAIsqB,GAAK5zG,EAAS+6H,GAG9B3kI,KAAK8oB,iBAAiBw8G,IAClB,CAACyjC,EAAS59I,EAAK66G,EAAad,KACxBjyC,GAAW+D,oBxGkOjB,SAASgyE,EAAWC,EAAc/jC,GAChC,MAAO,CACH1lI,KAAM07E,GACNhxE,OAAQ,oBACR41C,WAAY,GAAF,CACN,WAAckpH,EACd,cAAiBC,GACd/jC,IwGxOHgkC,CAA4BH,EAAS59I,EAAK+5G,OAItDllI,KAAK8oB,iBAAiBw8G,IAClBn6G,IAMQA,GACA8nE,GAAWiE,cACPiyE,GACA,CAAEpqK,QAASosB,IAEnB8nE,GAAWwD,QACPxrE,KAAKF,UACD,CACI5mB,GAAIglK,GACJh+I,IAAAA,QDqOxB87I,GAAgB1oK,UAAUK,YAAcqoK,GAcxCA,GAAgBmC,gBAAkB,SAASvkH,EAAKwkH,GAC5C,IAAI3hC,EAqBJ,OAnBI2hC,EAEA3hC,EAAc1vG,KAAAA,gBAA2B,GAAG1W,eAK5ComH,EAAcppF,GAAAA,QAAAA,eAAuBuG,GAAKjiC,OAAO,EAAG,GAC/CtB,cAIM,eAEHrb,KAAKyhI,KACTA,EAAc1vG,KAAAA,gBAA2B,GAAG1W,gBAI7ComH,GAQXu/B,GAAgB1oK,UAAU6oG,MAAQ,SAASx9F,EAAU,IACjD5J,KAAKknK,aAAaprE,qBAElB,MAAM,OAAEx4F,GAAWtD,KAAK4J,QAKlB0/J,EAAgB,CAClBrgC,cAAe3lI,EAAO8xH,aAChB9xH,EAAO8xH,aAAa6T,cACpB3lI,EAAO0tF,KAAO1tF,EAAO0tF,IAAI2kC,aAAe5J,KAAAA,KAC9C8d,sBAAuBvmI,EAAO8xH,cAAgB9xH,EAAO8xH,aAAayU,sBAClEV,SAAW7lI,EAAO8xH,cAAgB9xH,EAAO8xH,aAAaQ,gBAC9CtyH,EAAOoyH,YAAc3J,KAAAA,KAC7Bqd,SAAU9lI,EAAO0tF,IACX1tF,EAAO0tF,IAAI4kC,gBAAmBtyH,EAAO0tF,IAAI0kC,YAAc3J,KAAAA,KACvDA,KAAAA,KAGV/rH,KAAKupK,eAAiB,IAAIvgC,GAAehpI,KAAMspK,GAC/CtpK,KAAKwpK,gBAAkBlmK,EAAOmmK,aAAenmK,EAAOmmK,aAAe1vD,GAASX,kBAC5Ep5G,KAAK23F,KAAO33F,KAAKkzF,KAAK8kB,WAClBh4G,KAAK4J,QAAQzH,KADL,MAEDmB,EAFC,CAGJs7G,QAAS5+G,KAAKwpK,kBAElBvC,GAAgBmC,iBAIpBppK,KAAK0pK,4BACC1pK,KAAK0pK,4BAA4BxjK,KAAKlG,MAC5CA,KAAK23F,KAAK5kF,YACN8kF,GAAW96D,uBAAwB/8B,KAAK0pK,6BAE5C1pK,KAAK2pK,yBAA2B3pK,KAAK2pK,yBAAyBzjK,KAAKlG,MACnEA,KAAK23F,KAAK5kF,YACN8kF,GAAW76D,oBAAqBh9B,KAAK2pK,0BAEzC3pK,KAAK4pK,4BACC5pK,KAAK4pK,4BAA4B1jK,KAAKlG,MAC5CA,KAAK23F,KAAK5kF,YACN8kF,GAAWh7D,uBAAwB78B,KAAK4pK,6BAE5C5pK,KAAK6pK,kBAAoB7pK,KAAK6pK,kBAAkB3jK,KAAKlG,MACrDA,KAAK23F,KAAK5kF,YAAY8kF,GAAWj7D,8BAC7B58B,KAAK6pK,mBAET7pK,KAAK8pK,kCAAoC9pK,KAAK8pK,kCAAkC5jK,KAAKlG,MACrFA,KAAK23F,KAAK5kF,YAAY8kF,GAAW95D,eAAgB/9B,KAAK8pK,mCAEtD9pK,KAAKg5J,QAAU,IAAIe,GACf/5J,KACAsD,GACA,CAACvE,EAASs7D,KACN,IACIr6D,KAAKyqG,YACD1rG,EAASs7D,GAAI,GACnB,MAAOhjD,GACL0V,GAAOhF,KAAK,+CAAgD1Q,GAASA,EAAM8T,SAIlFnrB,KAAK+3F,MACN/3F,KAAK+3F,IAAM,IAAI2tD,GAAI1lJ,KAAM4J,GACzB5J,KAAKknK,aAAahsE,qBAGtBl7F,KAAK+pK,uBAAyB,IAAI5O,GAAuBn7J,KAAMA,KAAK+3F,KACpE/3F,KAAKgqK,oBAAsB,IAAIlO,GAAoB97J,KAAMA,KAAK+3F,KAE9D/3F,KAAK2hG,4BACC,IAAIlE,GACFz9F,KAAK+3F,IACL/3F,KACA,CAKIk+F,eAAgB56F,EAAO2mK,8BACvBhsE,kBAAmB36F,EAAO4mK,mCAEtClqK,KAAK2hG,4BAA4Bx7E,OAGjC,IAAIktE,GAAkB,EAwCtB,GAtCI/vF,EAAO4oG,SAAW5oG,EAAO4oG,QAAQi+D,qBACjC92E,EAAmC,IAAhB/mF,KAAKE,UAAmBlJ,EAAO4oG,QAAQi+D,oBAGzDnqK,KAAK81F,aACN91F,KAAK81F,WAAa,IAAI7C,GAAWjzF,KAAKkzF,KAAM,CACxC5N,UAAWtlF,KAAKwpK,gBAChBjkF,SAAUjiF,EAAO8mK,sBAAwB9mK,EAAO8mK,sBAAwBpqK,KAAK66F,WAC7E/W,OAAQxgF,EAAOwgF,QAAW,GAAE9jF,KAAKmyD,WAAWvoD,QAAQmxG,MAAMn9D,UAAU59C,KAAK4J,QAAQzH,OACjF0jF,OAAQviF,EAAOuiF,OACf2N,gBAAiBlwF,EAAO+mK,yBACxB7kF,YAAaliF,EAAOkiF,YACpBC,gBAAiBniF,EAAOmiF,gBACxB8N,iCAAkCjwF,EAAOiwF,iCACzCF,gBAAAA,EACAz8D,SAAU52B,KAAK4J,QAAQzH,KACvBwjF,gBAAiBriF,EAAOqiF,gBACxBK,mBAAoB1iF,EAAO0iF,mBAC3BN,aAAcpiF,EAAOgnK,wBAEzBr3E,GAAWe,UAAUjS,uBAAuB,CACxC,eAAkB/hF,KAAKwpK,kBAIvBlmK,EAAOywF,wBACP/zF,KAAK81F,WAAWb,qBAAqBj1F,OAI7CA,KAAKknK,aAAazvE,yBAIlBz3F,KAAKknK,aAAarqE,2BAIdv5F,EAAOinK,sBAAwBrpJ,GAAQugE,uBAGvC,GAAIn+E,EAAOszJ,mBAAoB,CAC3B7pI,GAAOtf,KAAK,8DAEPzN,KAAKwqK,iBACNxqK,KAAKwqK,eAAiB,IAAI7T,GAAiB32J,KAAMsD,EAAOszJ,qBAG5D,MAAM6T,EAAwB,IAAI/R,GAElC+R,EAAsB5jJ,GAAGitI,IAAsC,IAC3D9zJ,KAAKwqF,aAAa5iE,KAAKutE,MAE3Bn1F,KAAKwqK,eAAepT,uBAAuBqT,QAE3C19I,GAAOhF,KAAK,0FAMpB,GAAIzkB,EAAOonK,yBAA2BxpJ,GAAQugE,uBAC1C,GAAIn+E,EAAOszJ,mBAAoB,CACtB52J,KAAKwqK,iBACNxqK,KAAKwqK,eAAiB,IAAI7T,GAAiB32J,KAAMsD,EAAOszJ,qBAG5D,MAAM+T,EAAoB,IAAI9S,GAE9B8S,EAAkB9jJ,GAAGitI,IAAkC,IACnD9zJ,KAAKwqF,aAAa5iE,KAAKutE,MAE3Bn1F,KAAKwqK,eAAepT,uBAAuBuT,QAE3C59I,GAAOhF,KAAK,0FAKhBzkB,EAAOsnK,yBACP5qK,KAAK6qK,wBAA0B,IAAItX,GAAuBvzJ,MAC1DA,KAAK6qK,wBAAwBhkJ,GAAGitI,IAAgC,KAC5D9zJ,KAAKwqF,aAAa5iE,KAAKutE,OAE3Bn1F,KAAK6qK,wBAAwBhkJ,GAAGitI,IAA0CgX,IACtE9qK,KAAKwqF,aAAa5iE,KAAKutE,EAAgD21E,OAK3E,iBAAkBxnK,GAClBtD,KAAKkwJ,SAAS5sJ,EAAOg4J,cAOzBt7J,KAAK+qK,aAAe,IAAIzQ,GAAqBt6J,MAG7CA,KAAKgrK,4BAA8B,IAAI9W,GAA4Bl0J,MAE/DsD,GAAUA,EAAOu7G,gBAAkBv7G,EAAOu7G,eAAeC,YACzD9+G,KAAKusG,4BACD,SAAUjpG,EAAOu7G,eAAeC,YAIxC9+G,KAAKusG,4BAA4B,YAAavsG,KAAKupK,eAAer/B,qBAM9D5mI,GAAUA,EAAO2nK,uBAA0D,UAAjC3nK,EAAO2nK,uBACjDjrK,KAAKusG,4BAA4B,yBAA0BjpG,EAAO2nK,wBAU1EhE,GAAgB1oK,UAAU0K,KAAO,SAASitC,EAAUwnE,GAAqB,GACjE19G,KAAK23F,MACL33F,KAAK23F,KAAK1uF,KAAKitC,EAAUwnE,GAAoBz7C,MAAK,IAAMjiE,KAAKkrK,wBAYrEjE,GAAgB1oK,UAAUkqI,2BAA6B,SAAS7+H,GAC5D,OAAO6+H,GAA2BhqI,KAAKuB,KAAhC,MACA4J,EADA,CAEH49H,iBAAkBy/B,GAAgBmC,oBAO1CnC,GAAgB1oK,UAAU4sK,SAAW,WACjC,OAAOnrK,KAAK23F,MAAQ33F,KAAK23F,KAAKkgB,QAOlCovD,GAAgB1oK,UAAU6sK,aAAe,WACrC,OAAOvrF,QAAQ7/E,KAAK4J,QAAQtG,OAAO0tF,KAAOhxF,KAAK4J,QAAQtG,OAAO0tF,IAAI4L,eAGxB,IAA5B58F,KAAK4J,QAAQtG,OAAO0tF,KAQtCi2E,GAAgB1oK,UAAU8sK,qBAAuB,WAC7C,OAAOxrF,QAAQ7/E,KAAK4J,QAAQtG,OAAO4oG,SAC5BlsG,KAAK4J,QAAQtG,OAAO4oG,QAAQo/D,cAOvCrE,GAAgB1oK,UAAUo5G,MAAQ,WA6C9B,GA5CI33G,KAAK2hG,8BACL3hG,KAAK2hG,4BAA4B3f,UACjChiF,KAAK2hG,4BAA8B,MAEnC3hG,KAAK4/J,sBACL5/J,KAAK4/J,oBAAoB59E,UACzBhiF,KAAK4/J,oBAAsB,MAG3B5/J,KAAKwnK,8BACLxnK,KAAKwnK,4BAA4BxlF,UACjChiF,KAAKwnK,4BAA8B,MAGnCxnK,KAAKg5J,UACLh5J,KAAKg5J,QAAQ/sI,OACbjsB,KAAKg5J,QAAU,MAGnBh5J,KAAKsyF,iBAAiB9tF,SAAQsrB,GAAS9vB,KAAKurK,oBAAoBz7I,KAEhE9vB,KAAK+3F,IAAIC,qBAETh4F,KAAKwrK,oCAEDxrK,KAAK81F,YACL91F,KAAK81F,WAAW9T,UAGpBhiF,KAAKyrK,mBAAqBzrK,KAAKyrK,kBAAkBj+H,SAEjDxtC,KAAK0rK,uBAGD1rK,KAAKs3F,mBACLt3F,KAAKs3F,iBAAiBt+B,QACtBh5D,KAAKs3F,iBAAmB,MAExBt3F,KAAKq3F,mBACLr3F,KAAKq3F,iBAAiBr+B,QACtBh5D,KAAKq3F,iBAAmB,MAIxBr3F,KAAK23F,KAAM,CACX,MAAMA,EAAO33F,KAAK23F,KAuBlB,OApBAA,EAAKhkF,eACDkkF,GAAW96D,uBACX/8B,KAAK0pK,6BACT/xE,EAAKhkF,eACDkkF,GAAW76D,oBACXh9B,KAAK2pK,0BACThyE,EAAKhkF,eACDkkF,GAAWh7D,uBACX78B,KAAK4pK,6BAETjyE,EAAKhkF,eACDkkF,GAAWj7D,8BACX58B,KAAK6pK,mBAETlyE,EAAKhkF,eAAekkF,GAAW95D,eAAgB/9B,KAAK8pK,mCAEpD9pK,KAAKknK,aAAarrE,sBAElB77F,KAAK23F,KAAO,KAELA,EAAKggB,QACP11C,MAAK,KACEjiE,KAAK+3F,KACL/3F,KAAK+3F,IAAIu2D,aAGhBniF,OAAM90D,IAOH,MAHArX,KAAK08F,kBAAkBl4F,SACnByzF,GAAej4F,KAAK85F,aAAa7B,EAAY0E,YAE3CtlF,KAKlB,OAAOiP,QAAQzU,OACX,IAAIpD,MAAM,6CASlBw4J,GAAgB1oK,UAAU69J,uBAAyB,WAC/C,OAAOp8J,KAAK0gG,cAAgB1gG,KAAKq3F,iBAAmBr3F,KAAKs3F,kBAS7D2vE,GAAgB1oK,UAAUouG,kBAAoB,WAC1C,MAAMm1B,EAAW,GAKjB,OAHA9hI,KAAKs3F,kBAAoBwqC,EAAS/+H,KAAK/C,KAAKs3F,kBAC5Ct3F,KAAKq3F,kBAAoByqC,EAAS/+H,KAAK/C,KAAKq3F,kBAErCyqC,GAWXmlC,GAAgB1oK,UAAUotK,4BAA8B,SAASC,GAC7D,IAAIjwE,GAAaiwE,GAAcA,EAAWr0E,UAAY82D,KAAAA,KAAuBud,EAAWz4B,eAEpFx3C,IAAc0yD,KAAAA,SAA2BruJ,KAAK6rK,yB3DnsBjB,I2DosB7BlwE,EAAY0yD,KAAAA,kBAGhBruJ,KAAK+3F,IAAIk3D,aAAatzD,IAM1BsrE,GAAgB1oK,UAAUmgF,QAAU,WAChC,OAAO1+E,KAAK4J,QAAQzH,MAMxB8kK,GAAgB1oK,UAAUunI,cAAgB,WACtC,OAAO9lI,KAAKmyD,YAMhB80G,GAAgB1oK,UAAUutK,cAAgB,WACtC,OAAO9rK,KAAKu6F,aAMhB0sE,GAAgB1oK,UAAUwtK,WAAa,WACnC,OAAOlsF,QAAQ7/E,KAAKw6F,eAMxBysE,GAAgB1oK,UAAUytK,aAAe,WACrC,OAAOhsK,KAAKw6F,cAMhBysE,GAAgB1oK,UAAU+7G,sBAAwB,WAC9C,OAAOt6G,KAAK23F,MAAQ33F,KAAK23F,KAAKqmB,UAAU1D,yBAS5C2sD,GAAgB1oK,UAAU0tK,mBAAqB,SAASC,GACpD,OAAO,IAAI5lJ,SAAQ,CAACC,EAAS1U,KACpB7R,KAAKs6G,wBAKN4xD,EACAlsK,KAAK23F,KAAKqmB,UAAUlB,iBAAiBv2F,EAAS1U,GAE9C7R,KAAK23F,KAAKqmB,UAAUzB,YAAYh2F,EAAS1U,GAPzCA,QAiBZo1J,GAAgB1oK,UAAU+zF,eAAiB,SAASvW,GAChD,IAAI/O,EAAS,GAMb,OAJIhtE,KAAK+3F,MACL/qB,EAAShtE,KAAK+3F,IAAIzF,eAAevW,IAG9B/O,GAOXi6F,GAAgB1oK,UAAUoxJ,mBAAqB,WAC3C,OAAO3vJ,KAAK+3F,IAAM/3F,KAAK+3F,IAAI43D,qBAAuB,MAOtDsX,GAAgB1oK,UAAU4mJ,mBAAqB,WAC3C,OAAOnlJ,KAAK+3F,IAAM/3F,KAAK+3F,IAAIotD,qBAAuB,MAOtD8hB,GAAgB1oK,UAAU4tK,oBAAsB,WAC5C,MAAO,CACHC,eAAgBpsK,KAAK81F,WAAWlL,sBAaxCq8E,GAAgB1oK,UAAUsoB,GAAK,SAASwlJ,EAAS1lJ,GACzC3mB,KAAKwqF,cACLxqF,KAAKwqF,aAAa3jE,GAAGwlJ,EAAS1lJ,IAYtCsgJ,GAAgB1oK,UAAUwrB,IAAM,SAASsiJ,EAAS1lJ,GAC1C3mB,KAAKwqF,cACLxqF,KAAKwqF,aAAa72E,eAAe04J,EAAS1lJ,IAKlDsgJ,GAAgB1oK,UAAUuqB,iBAAmBm+I,GAAgB1oK,UAAUsoB,GACvEogJ,GAAgB1oK,UAAUyqB,oBAAsBi+I,GAAgB1oK,UAAUwrB,IAQ1Ek9I,GAAgB1oK,UAAUwmK,mBAAqB,SAASuH,EAAS3lJ,GACzD3mB,KAAK23F,MACL33F,KAAK23F,KAAKiD,oBAAoB0xE,EAAS3lJ,IAS/CsgJ,GAAgB1oK,UAAUguK,sBAAwB,SAASD,EAAS3lJ,GAC5D3mB,KAAK23F,MACL33F,KAAK23F,KAAKssB,uBAAuBqoD,EAAS3lJ,IAUlDsgJ,GAAgB1oK,UAAUiuK,gBAAkB,SACpCztK,EAASgjH,EAAc,QACvB/hH,KAAK23F,MACL33F,KAAK23F,KAAK8S,YAAY1rG,EAASgjH,IAWvCklD,GAAgB1oK,UAAUkuK,uBAAyB,SAC3CtoK,EAAIpF,EAASgjH,EAAc,QAC3B/hH,KAAK23F,MACL33F,KAAK23F,KAAKqqB,mBAAmB79G,EAAIpF,EAASgjH,IASlDklD,GAAgB1oK,UAAUmuK,YAAc,SAASvqK,EAAMwJ,GAC/C3L,KAAK23F,KACL33F,KAAK23F,KAAKoX,uBAAuB5sG,EAAMwJ,IAAW3L,KAAK23F,KAAKvrC,eAE5Dr/B,GAAOhF,KAAK,iDAUpBk/I,GAAgB1oK,UAAUouK,gBAAkB,SAASxqK,EAAMwJ,GACvD3L,KAAK0sK,YAAYvqK,EAAMwJ,GACvB3L,KAAK4sK,cAAczqK,IAOvB8kK,GAAgB1oK,UAAUquK,cAAgB,SAASzqK,GAC3CnC,KAAK23F,MACL33F,KAAK23F,KAAKkX,mBAAmB1sG,IAQrC8kK,GAAgB1oK,UAAUkwB,eAAiB,SAAStsB,GAChD,GAAInC,KAAK23F,KAAM,CACX,MAAMk1E,EAAU,OAGhB,IAAK1qK,IAASnC,KAAK23F,KAAKqsB,gBAAgB6oD,GACpC,OAGJ7sK,KAAK23F,KAAKoX,uBAAuB89D,EAAS,CACtC/sH,WAAY,CAAEkG,MAAO,mCACrBniD,MAAO1B,KACLnC,KAAK23F,KAAKvrC,iBAQxB66G,GAAgB1oK,UAAU0jH,WAAa,SAASC,GACxCliH,KAAK23F,MAAQ33F,KAAKi6F,cAClBj6F,KAAK23F,KAAKsqB,WAAWC,GAErBn1F,GAAOhF,KAAM,0BAAyB/nB,KAAK23F,KAAO,GAAK,oBACnD33F,KAAKi6F,cAAgB,GAAK,qCAQtCgtE,GAAgB1oK,UAAUuuK,eAAiB,WACvC,QAAyB/lK,IAArB/G,KAAKuzB,YAA2B,CAChCvzB,KAAKuzB,YAAc,IAAIN,MAGvB,MAAM85I,EAAmB/sK,KAAKsyF,eAAeH,IAE7C,IAAK,MAAMy9D,KAAcmd,EACrB/sK,KAAKuzB,YAAY3C,SAASg/H,GAI9B,MAAMO,EAAoBnwJ,KAAK+3F,IAAIitD,gBAAgB7yD,IAEnD,IAAK,MAAMiO,KAAe+vD,EACtBnwJ,KAAKuzB,YAAY3C,SAASwvE,GAIlC,OAAOpgG,KAAKuzB,aAQhB0zI,GAAgB1oK,UAAUyuK,uBAAyB,WAC/C,OAAOhtK,KAAK23F,KAAK8mB,qBAUrBwoD,GAAgB1oK,UAAUqyB,SAAW,SAASd,GAC1C,MAAMisD,EAAYjsD,EAAM0nE,UAClBqV,EAAc7sG,KAAK+3F,IAAIzF,eAAevW,GAG5C,OAAI8wB,EAAYttG,OAAS,EAEjBuwB,IAAU+8E,EAAY,GACfvmF,QAAQC,QAAQuJ,GAGpBxJ,QAAQzU,OAAO,IAAIpD,MAAO,qBAAoBstE,8BAGlD/7E,KAAK49H,aAAa,KAAM9tG,IAQnCm3I,GAAgB1oK,UAAU0uK,2BAA6B,SAC/CzkF,EACA9B,GACJ,MAAMwmF,EAAYltK,KAAK8xJ,0BAOlBprE,GAAOwmF,IAAcxmF,GACtB1mF,KAAKwqF,aAAa5iE,KACdutE,GACAn1F,KAAK66F,WAAYrS,IAQ7By+E,GAAgB1oK,UAAU4uK,qBAAuB,SAASr9I,GActD,IAAI2sE,EAEJ,GAdIz8F,KAAKw4F,gBAAkB1oE,EAAMe,iBAAmBf,EAAMynE,WACtDv3F,KAAKw4F,gBAAiB,EAGtBx4F,KAAK23F,KAAK+tB,gBAAgB1lH,KAAK23F,KAAK8lB,WAAW,EAAOtrB,KAC/CnyF,KAAK24F,qBAAuB7oE,EAAM2B,iBAAmB3B,EAAMynE,YAClEv3F,KAAK24F,qBAAsB,EAG3B34F,KAAK23F,KAAK+tB,gBAAgB1lH,KAAK23F,KAAK8lB,WAAW,EAAOtrB,KAKtDnyF,KAAKs4F,mBAAqBxoE,EAAMe,eAAgB,CAChD,MAAMu8I,EAAU9uH,GAAAA,QAAAA,mBAA2Bt+C,KAAKs4F,mBAEhDmE,EAAmBz8F,KAAKwgG,aAAa4sE,QAClC,GAAIptK,KAAKy4F,wBAA0B3oE,EAAM2B,eAAgB,CAC5D,MAAM27I,EAAU9uH,GAAAA,QAAAA,mBAA2Bt+C,KAAKy4F,wBAEhDgE,EAAmBz8F,KAAKwgG,aAAa4sE,GAKrCt9I,EAAM2B,iBAAmBvQ,GAAQs+D,+BACjCx/E,KAAK2rK,4BAA4B77I,GAGrC9vB,KAAKwqF,aAAa5iE,KAAKutE,GAA0CrlE,EAAO2sE,IAU5EwqE,GAAgB1oK,UAAU8uK,uBAAyB,WAK/C,OAAOrtK,KAAKsyF,iBACPhsF,QAAOwpB,IACJ,MAAMw9I,EAAYx9I,EAAM0nE,UAExB,QAAI81E,IAAcn7E,IACLnyF,KAAKutK,sBAAuBrsJ,GAAQw+D,kBAAmBx+D,GAAQ+9D,kBAEjEquF,IAAcn7E,KAAoBnyF,KAAKwtK,wBAY9DvG,GAAgB1oK,UAAUgtK,oBAAsB,SAASz7I,GACrDA,EAAMwnH,eAAe,MACrBt3I,KAAK+3F,IAAIg4D,iBAAiBjgI,GAC1BA,EAAM9G,oBAAoBq3E,GACtBvwE,EAAM29I,aACV39I,EAAM9G,oBAAoBq3E,GACtBvwE,EAAM49I,mBAKN59I,EAAM2B,gBAAkB3B,EAAM6rE,YAAcC,KAAAA,SAC5C57F,KAAK81F,WAAW9N,wBAAuB,GAG3ChoF,KAAKwqF,aAAa5iE,KAAKutE,GAAqCrlE,IAShEm3I,GAAgB1oK,UAAUizB,YAAc,SAAS1B,GAC7C,OAAO9vB,KAAK49H,aAAa9tG,EAAO,OAYpCm3I,GAAgB1oK,UAAUq/H,aAAe,SAASC,EAAUC,GACxD,MAAM6vC,EAA8B3tK,QAAS69H,MAAAA,OAAT,EAASA,EAAUjsG,YAGvD,OAAI+7I,GACI9vC,EAASl8C,UAKbm8C,GACIA,EAASn8C,SALFr7D,QAAQzU,OACX,IAAI8oE,GAAgBE,MAU5BgjD,IAAa8vC,GACb5gJ,GAAOhF,KAAM,0CAAyC81G,wCAInD79H,KAAK4tK,gBAAgBD,EAA8B9vC,EAAW,KAAMC,GACtE77D,MAAK,KACF0rG,GAA+B3tK,KAAKurK,oBAAoB1tC,GACxDC,GAAY99H,KAAK6tK,eAAe/vC,IAG3B6vC,IAA+B9vC,MAAAA,OAAJ,EAAIA,EAAUpsG,kBAAmBqsG,MAAAA,OAA7D,EAA6DA,EAAUrsG,kBACvEzxB,KAAK2rK,4BAA4B7tC,GAGpB,OAAbA,IAAsB99H,KAAKw4F,gBAAkBx4F,KAAK24F,sBAClD34F,KAAKmtK,qBAAqBrvC,GAGvBx3G,QAAQC,aAElB4lD,OAAM90D,IACH0V,GAAO1V,MAAO,wBAAuBA,MAAAA,OAAxB,EAAwBA,EAAO8M,SAErCmC,QAAQzU,OAAOwF,QAgBlC4vJ,GAAgB1oK,UAAUqvK,gBAAkB,SAAS/vC,EAAUC,GAC3D,MAAMgwC,EAAuB,GAgB7B,OAdI9tK,KAAKs3F,iBACLw2E,EAAqB/qK,KACjB/C,KAAKs3F,iBAAiBsmC,aAAaC,EAAUC,IAEjD/wG,GAAOtf,KAAK,0CAGZzN,KAAKq3F,iBACLy2E,EAAqB/qK,KACjB/C,KAAKq3F,iBAAiBumC,aAAaC,EAAUC,IAEjD/wG,GAAOtf,KAAK,0CAGT6Y,QAAQhU,IAAIw7J,IAOvB7G,GAAgB1oK,UAAUsvK,eAAiB,SAAS/vC,GAChD,GAAIA,EAASjtG,gBAAmBitG,EAASrsG,gBAC9BqsG,EAASniC,YAAcC,KAAAA,QAAoB,CAElD,MACMuyC,EADUuX,GAAI1T,oCAENtnI,MACNrJ,GACIA,EAAE01C,OAAU,GAAE+mF,EAASwV,WAAWv8F,aAC3B11C,EAAE+gE,QAAU07D,EAASwV,WAAWlxE,QAE/C+rE,GACAl7C,GAAWoD,0BACPqvD,GAAIxT,4BAA4B/D,IAG5C,GAAIrQ,EAASrsG,eAAgB,CACzB,MAAMs8I,EAAmB,aAGrBjwC,EAASniC,YAAcC,KAAAA,QAAoB57F,KAAK23F,KAAKqsB,gBAAgB+pD,KACrE/tK,KAAK0sK,YAAYqB,EAAkB,CAAElqK,MAAOi6H,EAASniC,YAG7D37F,KAAK+3F,IAAI03D,cAAc3xB,GAGnBA,EAASjtG,eACT7wB,KAAK23F,KAAKY,aAAaulC,EAASvmC,WAEhCv3F,KAAK23F,KAAKe,aAAaolC,EAASvmC,WAGpCumC,EAAS2vC,YAAcztK,KAAKmtK,qBAAqBjnK,KAAKlG,KAAM89H,GAC5DA,EAAS4vC,kBAAoB1tK,KAAKitK,2BAA2B/mK,KAAKlG,MAClE89H,EAASh1G,iBACLu3E,GACAy9B,EAAS2vC,aACb3vC,EAASh1G,iBACLu3E,GACAy9B,EAAS4vC,mBAEb5vC,EAASwZ,eAAet3I,MAExBA,KAAKwqF,aAAa5iE,KAAKutE,GAAmC2oC,IAY9DmpC,GAAgB1oK,UAAU64I,uBAAyB,SAAStnH,GACxD,MAAMk+I,EAAsB,GAc5B,OAZIhuK,KAAKs3F,iBACL02E,EAAoBjrK,KAAK/C,KAAKs3F,iBAAiBmnC,iBAAiB3uG,IAEhE/C,GAAOw4B,MAAM,uEAGbvlD,KAAKq3F,iBACL22E,EAAoBjrK,KAAK/C,KAAKq3F,iBAAiBonC,iBAAiB3uG,IAEhE/C,GAAOw4B,MAAM,uEAGVj/B,QAAQ4hF,WAAW8lE,GACrB/rG,MAAK,KAEFnyC,EAAM2B,gBAAkBzxB,KAAK2rK,4BAA4B77I,OAWrEm3I,GAAgB1oK,UAAU84I,wBAA0B,SAASvnH,GACzD,MAAMm+I,EAAuB,GAa7B,OAXIjuK,KAAKs3F,iBACL22E,EAAqBlrK,KAAK/C,KAAKs3F,iBAAiBqnC,kBAAkB7uG,IAElE/C,GAAOw4B,MAAM,+DAEbvlD,KAAKq3F,iBACL42E,EAAqBlrK,KAAK/C,KAAKq3F,iBAAiBsnC,kBAAkB7uG,IAElE/C,GAAOw4B,MAAM,+DAGVj/B,QAAQ4hF,WAAW+lE,GACrBhsG,MAAK,KAEFnyC,EAAM2B,gBAAkBzxB,KAAK2rK,kCAQzC1E,GAAgB1oK,UAAUqlG,QAAU,WAChC,OAAO5jG,KAAK23F,KAAK7iD,MAUrBmyH,GAAgB1oK,UAAUklG,SAAW,WACjC,OAAKzjG,KAAKmyD,WAIH7T,GAAAA,QAAAA,iBAAyBt+C,KAAKmyD,WAAWwqC,YACxC38F,KAAK4J,QAAQtG,OAAOo9G,aAJjB,MAYfumD,GAAgB1oK,UAAU07F,YAAc,WACpC,OAAOj6F,KAAK23F,KAAO33F,KAAK23F,KAAKsC,cAAgB,MAQjDgtE,GAAgB1oK,UAAU2vK,KAAO,SAASh4H,GACtC,OAAKl2C,KAAKi6F,cAIH,IAAI3zE,SAAQ,CAACC,EAAS1U,KACzB7R,KAAK23F,KAAK+rB,SACNxtE,GAAY,IACZ,IAAM3vB,MACN3W,GAAOiC,EAAOjC,KACd,IAAMiC,EAAOknF,QARVzyE,QAAQzU,OAAO,IAAIpD,MAAM,4BAgBxCw4J,GAAgB1oK,UAAU4vK,OAAS,WAC/B,OAAOnuK,KAAKkuK,QAWhBjH,GAAgB1oK,UAAU6vK,kBAAoB,SAASj/E,GACnDnvF,KAAKquK,mBAAmB,CAAEl/E,KAe9B83E,GAAgB1oK,UAAU8vK,mBAAqB,SAAS3uE,GACpD,IAAKvhG,MAAMC,QAAQshG,GACf,MAAM,IAAIjxF,MAAM,sDAGpBzO,KAAK+pK,uBAAuB7a,gBAAgBxvD,IAOhDunE,GAAgB1oK,UAAUuiG,SAAW,WACjC,OAAO9gG,KAAK+pK,uBAAuBjpE,YAWvCmmE,GAAgB1oK,UAAU2xJ,SAAW,SAASrkB,GAC1C,IAAKtmI,OAAO+oK,UAAUziC,KAAWtmI,OAAOuF,SAAS+gI,EAAO,IACpD,MAAM,IAAIp9H,MAAO,4BAA2Bo9H,KAEhD,MAAMvjI,EAAI/C,OAAOsmI,GAEjB,GAAIvjI,GAAK,EACL,MAAM,IAAI4gB,WAAW,mCAMzB,GAJAlpB,KAAK+pK,uBAAuB7Z,SAAS5nJ,GAIjCtI,KAAKq3F,iBAAkB,CACvB,MAAMk3E,EAAsB,IAANjmK,EAEtBtI,KAAKq3F,iBACAgkC,wBAAuB,EAAMkzC,GAC7BpiG,OAAM90D,IACH0V,GAAO1V,MACF,2CAA0Ck3J,KAC3Cl3J,QAepB4vJ,GAAgB1oK,UAAUo/F,UAAY,SAASxO,GAC3C,OAAOnvF,KAAK+3F,IAAI4F,UAAUxO,IAO9B83E,GAAgB1oK,UAAUm+F,gBAAkB,WACxC,OAAOp+F,OAAOqN,OAAO3L,KAAKwgG,eAS9BymE,GAAgB1oK,UAAUm8J,oBACpB,SAAS8T,GAAc,GAErB,IAAIhuE,EAAexgG,KAAK08F,kBAOxB,OALK8xE,IACDhuE,EAAeA,EAAal6F,QAAO3D,IAAMA,EAAE8gG,cAIxCjD,EAAajhG,OAAS,GAQrC0nK,GAAgB1oK,UAAUuzB,mBAAqB,SAAS3tB,GACpD,OAAOnE,KAAKwgG,aAAar8F,IAO7B8iK,GAAgB1oK,UAAUkwK,WAAa,SAAStqK,GAC5C,MAAM8zF,EAAcj4F,KAAK8xB,mBAAmB3tB,GAEvC8zF,GAGLj4F,KAAK23F,KAAK4rB,eAAetrB,EAAY0E,SAAU,UAQnDsqE,GAAgB1oK,UAAUmwK,YAAc,SAASvqK,GAC7C,MAAM8zF,EAAcj4F,KAAK8xB,mBAAmB3tB,GACtCwqK,EAAW3uK,KAAK66F,aAAe12F,EAC/B2wC,EAAO90C,KAAK4uK,gBAAkB,SAAW,OAE3CD,EACA3uK,KAAK23F,KAAK4rB,eAAevjH,KAAK23F,KAAK8lB,UAAW3oE,GACvCmjD,GACPj4F,KAAK23F,KAAK4rB,eAAetrB,EAAY0E,SAAU7nD,IAUvDmyH,GAAgB1oK,UAAUswK,gBAAkB,SAAS1qK,EAAIqzB,GACrD,MAAMygE,EAAcj4F,KAAK8xB,mBAAmB3tB,GAEvC8zF,GAGLj4F,KAAK23F,KAAKkhB,KAAK5gB,EAAY0E,SAAUnlE,IAQzCyvI,GAAgB1oK,UAAUmtK,qBAAuB,WACzC1rK,KAAK8uK,0BACG9uK,KAAKs3F,kBAAoBt3F,KAAK06J,sBAAwB,KAC9Dj+J,OAAOivB,aAAa1rB,KAAK8uK,yBACzB9uK,KAAK8uK,wBAA0B,OASvC7H,GAAgB1oK,UAAU2sK,mBAAqB,YAEtClrK,KAAKs3F,kBACCt3F,KAAK06J,uBAAyB,IAC7B16J,KAAK8uK,0BACb9uK,KAAK8uK,wBAA0BryK,OAAO8S,YAAW,KAC7CvP,KAAK8uK,wBAA0B,KAC/B77E,GAAWiE,cAActb,GvG5/CG,2BuG8/CxB,CACIoV,KAAK,EACLntF,MA5/CM,gBAsgD1BojK,GAAgB1oK,UAAUmnH,gBAAkB,SAASvhH,EAAI43E,GACrD,MAAMgzF,EAAgBhzF,GAAwBoW,GAE9C,GAAI48E,IAAkB58E,IAAmB48E,IAAkB58E,GAGvD,YAFAplE,GAAO1V,MAAO,2BAA0B03J,KAK5C,MAAM92E,EAAcj4F,KAAK8xB,mBAAmB3tB,GAEvC8zF,GAGLj4F,KAAK23F,KAAK+tB,gBAAgBztB,EAAY0E,UAAU,EAAMoyE,IAwB1D9H,GAAgB1oK,UAAUq7F,eAAiB,SACnC/0C,EAAKuzD,EAAMtjE,EAAM2uD,EAAUvB,EAASlsE,EAAQmsE,EAAUmW,EAAS02D,EAAS1mH,EAAUi4D,GACtF,MAAMp8G,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAEtC,GAAW,UAAP1gD,GAAkBnE,KAAK66F,aAAe12F,EACtC,OAGJ,MAAM8zF,EACA,IAAI+J,GAAiBn9C,EAAK7kD,KAAMo4G,EAAM3U,EAAUvB,EAASlsE,EAAQmsE,GAEvElK,EAAY4L,QAAQ/uD,GACpBmjD,EAAYyM,WAAW4T,GACvBrgB,EAAYC,YAAY5vC,GACxB2vC,EAAY8L,eAAewc,GAE3BvgH,KAAKwgG,aAAar8F,GAAM8zF,EACxBj4F,KAAKwqF,aAAa5iE,KACdutE,GACAhxF,EACA8zF,GAEJj4F,KAAKivK,gBAAgBh3E,GAGjBj4F,KAAKmrK,YACLnrK,KAAKkvK,uBAGTlvK,KAAKkrK,sBAYTjE,GAAgB1oK,UAAUq6F,aAAe,WACrC54F,KAAKkvK,wBASTjI,GAAgB1oK,UAAU0wK,gBAAkB,SAASh3E,GACjDA,EAAYmM,cACPniC,MAAK3Z,IACF2vC,EAAYyK,cAAgBp6C,EAAS9d,IAAI,0BACzCxqC,KAAKmvK,oBAED7mH,EAAS9d,IAAIk6F,KACbzsC,EAAYwB,YAAY,mBAAmB,GAG3CnxC,EAAS9d,IAAIw9D,KACb/P,EAAYwB,YAAY,iBAAiB,MAGhDttB,OAAM,KAAM,KASrB86F,GAAgB1oK,UAAUs7F,wBAA0B,SAASh1C,EAAKyzD,GAI9D,MACM82D,EADQpvK,KAAK08F,kBACUhyF,MAAK/H,GAAKA,EAAEg6F,WAAa93C,IAEtD,GAAIuqH,EAAgB,CAChBA,EAAe1qE,WAAW4T,GAC1B,MAAMn0G,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAEtC7kD,KAAKwqF,aAAa5iE,KACdutE,GACAhxF,EACAm0G,GAOH82D,EAAe5qE,cAChBxkG,KAAKkvK,wBAIbjI,GAAgB1oK,UAAUu7F,aAAe,SAASj1C,GAC9C,MAAM1gD,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAEtC,GAAW,UAAP1gD,GAAkBnE,KAAK66F,aAAe12F,EACtC,OAGJ,MAAM8zF,EAAcj4F,KAAKwgG,aAAar8F,UAE/BnE,KAAKwgG,aAAar8F,GAGzB,MAAMkrK,EAAgBrvK,KAAK2sG,oBACrB2iE,EAAiB,GAEvB,IAAK,MAAMlpK,KAAWipK,EAClBC,EAAevsK,KAAKqD,EAAQo2H,2BAA2Br4H,IAG3DmiB,QAAQ4hF,WAAWonE,GACdrtG,MAAKhzD,IACF,IAAI03I,EAAgB,GAEpB13I,EAAQhI,KAAIgL,GAAUA,EAAOpO,QAAOW,SAAQX,IACpCA,IACA8iJ,EAAgBA,EAAcn2I,OAAO3M,OAI7C8iJ,EAAcniJ,SAAQsrB,IAClB9vB,KAAKwqF,aAAa5iE,KAAKutE,GAAqCrlE,MAI5DmoE,GACAj4F,KAAKwqF,aAAa5iE,KAAKutE,GAAiChxF,EAAI8zF,GAG9C,OAAdj4F,KAAK23F,OACL33F,KAAKkvK,sBAAqB,GAC1BlvK,KAAK0rK,4BAmBrBzE,GAAgB1oK,UAAUm7F,eAAiB,SACnCgf,EACA00D,EACAmC,EACA/3I,EACA+oF,GAIJ,GAAI6sD,IAAYptK,KAAK66F,WACjB,OAGJ,MAAM4B,EAAmBz8F,KAAKwgG,aAAa4sE,GAE3C,GAAI10D,EAMA,OALA14G,KAAKwqF,aAAa5iE,KACdutE,GAA8BsH,EAAkBjlE,EAAQ+oF,QAE5DvgH,KAAK23G,QAKT,MAAM63D,EAAoBxvK,KAAKwgG,aAAa+uE,GAE5CC,EAAkBvrE,cAAcsc,GAEhCvgH,KAAKwqF,aAAa5iE,KACdutE,GAA0CsH,EAAkB+yE,EAAmBh4I,IAOvFyvI,GAAgB1oK,UAAUy7F,mBAAqB,SAASllD,GAEpD90C,KAAKwqF,aAAa5iE,KACdutE,GAAyCn1F,KAAK66F,WAAY/lD,IAGlEmyH,GAAgB1oK,UAAU87F,kBAAoB,SAASx1C,EAAK/P,GACxD,MAAM3wC,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAChCozC,EAAcj4F,KAAK8xB,mBAAmB3tB,GAEvC8zF,IAGLA,EAAY4L,QAAQ/uD,GACpB90C,KAAKwqF,aAAa5iE,KAAKutE,GAAyChxF,EAAI2wC,KAGxEmyH,GAAgB1oK,UAAUw7F,qBAAuB,SAASl1C,EAAKv2B,GAC3D,MAAMnqB,EAAKm6C,GAAAA,QAAAA,mBAA2BuG,GAChCozC,EAAcj4F,KAAK8xB,mBAAmB3tB,GAEvC8zF,GAIDA,EAAYwK,eAAiBn0E,IAIjC2pE,EAAYwK,aAAen0E,EAC3BtuB,KAAKwqF,aAAa5iE,KACdutE,EACAhxF,EACAmqB,KAUR24I,GAAgB1oK,UAAU68F,mBAAqB,SAAStrE,GACpD,GAAIA,EAAMg3D,QAAU9mF,KAAK0gG,cAIrB,YAHA3zE,GAAOtf,KACH,6DAGD,IAAKqiB,EAAMg3D,OAAS9mF,KAAK0gG,cAI5B,YAHA3zE,GAAOtf,KACH,yDAKR,MAAMtJ,EAAK2rB,EAAM4B,mBACXumE,EAAcj4F,KAAK8xB,mBAAmB3tB,GAE5C,IAAK8zF,EAGD,YAFAlrE,GAAO1V,MAAO,gCAA+BlT,KAMjD8zF,EAAY0K,QAAQ5/F,KAAK+sB,GAErB9vB,KAAKuzB,aACLvzB,KAAKuzB,YAAY3C,SAASd,GAG9B,MAAMzJ,EAAUrmB,KAAKwqF,aAErB16D,EAAMhH,iBACFu3E,IACA,IAAMh6E,EAAQuB,KAAKutE,GAA0CrlE,KACjEA,EAAMhH,iBACFu3E,IACA,CAAC7X,EAAY9B,KACS1mF,KAAK8xJ,4BAELprE,GACdrgE,EAAQuB,KACJutE,GACAhxF,EACAqkF,MAKhBniE,EAAQuB,KAAKutE,GAAmCrlE,IAUpDm3I,GAAgB1oK,UAAU09F,eAAiB,SAAS71F,EAASotB,GACrDxzB,KAAKq3F,mBAAqBjxF,IAC1B2mB,GAAOtf,KAAK,iBAEZzN,KAAKq3F,iBAAiB6hC,UAAU1lG,GAChCxzB,KAAKwqF,aAAa5iE,KAAKutE,GAA8Cn1F,KAAKq3F,oBAYlF4vE,GAAgB1oK,UAAU29F,gBAAkB,SAAS91F,EAASqpK,GACtDzvK,KAAKq3F,mBAAqBjxF,IAC1B2mB,GAAOtf,KAAK,wBACZzN,KAAKq3F,iBAAiBu6B,iBAAiB69C,KAU/CxI,GAAgB1oK,UAAU88F,qBAAuB,SAASq0E,GACtD1vK,KAAK08F,kBAAkBl4F,SAAQyzF,IAC3B,MAAMjrB,EAASirB,EAAYv0B,YAE3B,IAAK,IAAIpkE,EAAI,EAAGA,EAAI0tE,EAAOztE,OAAQD,IAC/B,GAAI0tE,EAAO1tE,KAAOowK,EAAc,CAG5Bz3E,EAAY0K,QAAQp1F,OAAOjO,EAAG,GAE9BU,KAAKwqF,aAAa5iE,KACdutE,GAAqCu6E,GAErC1vK,KAAKuzB,aACLvzB,KAAKuzB,YAAY/B,YAAYk+I,GAGjC,SAGT1vK,OAMPinK,GAAgB1oK,UAAUoxK,mBAAqB,SACvC73E,EACA6gC,GAEJ,IAAIi3C,GAEE5vK,KAAKorK,iBAAmBprK,KAAKqrK,wBAA2BnqJ,GAAQkvD,aAAelvD,GAAQw+D,gBACzFkwF,EAAe,CACXp4I,OAAQ,UACRikG,kBAAmB,eACnBxf,SAAU,0CAEPj8G,KAAKq3F,iBAEZu4E,EAAe,CACXp4I,OAAQ,OACRikG,kBAAmB,0BACnBxf,SAAU,qCAENj8G,KAAK6vK,uBACbD,EAAe,CACXp4I,OAAQ,UACRikG,kBAAmB,2BACnBxf,SAAU,kEAEdhpB,GAAWiE,cAActb,GvG34DE,auG84D3Bg0F,EACA5vK,KAAK8vK,oBAAoBh4E,EAAe83E,GAExC5vK,KAAK+vK,uBAAuBj4E,EAAe6gC,IAOnDsuC,GAAgB1oK,UAAUy9F,eAAiB,SACnClE,EACA6gC,EACAvpG,GAEJ,GAAI0oE,EAAchR,MACd9mF,KAAK2vK,mBAAmB73E,EAAe6gC,OACpC,CACH,IAAK34H,KAAKygH,QAAQ3oB,EAAc8a,WAAY,CACxC,MAAMt8D,EAAc,6CASpB,YAPAt2C,KAAK8vK,oBACDh4E,EAAe,CACXtgE,OAAQ,iBACRikG,kBAAmBnlF,EACnB2lE,SAAU3lE,IAKtBt2C,KAAKgwK,uBAAuBl4E,EAAe6gC,EAAavpG,KAOhE63I,GAAgB1oK,UAAUyxK,uBAAyB,SAC3Cl4E,EACA6gC,EACAvpG,GAGJpvB,KAAKs3F,iBAAmBQ,EACxB93F,KAAK23F,KAAKmB,gBAAgB,oBAAsB1pE,EAChDpvB,KAAK8pK,oCAED9pK,KAAKsnK,YACLr0E,GAAW+D,oBACPpb,GvGn/DyB,UuGm/DgB,CAAEoV,KAAK,KAGxD,MAAMwgE,EACAxjD,EAAE2qB,GACCjuH,KAAK,4DACLu4C,KAAK,UAEdjjD,KAAKwqF,aAAa5iE,KACdutE,GACAq8D,GAEJxxJ,KAAK0rK,uBACLz4E,GAAWiE,cAActb,GvGl/DY,4BuGo/DjC,CACIoV,KAAK,EACLntF,MAAOurB,KAGf,IACI0oE,EAAchS,WAAW9lF,KAAK23F,KAAM33F,KAAK+3F,IAAzC,MACO/3F,KAAK4J,QAAQtG,OADpB,CAEI6xH,wBAAyBn1H,KAAKwqG,mBAEpC,MAAOnzF,GAIL,OAHAogB,KAAAA,iBAAsCpgB,QACtC0V,GAAO1V,MAAMA,GAMjBrX,KAAKo4F,kBAAkBugC,EAAa7gC,EAAc9T,gBAElD,MAAM6oB,EAAc7sG,KAAKqtK,yBAEzB,IACIv1E,EAAcm6B,YACV0G,GACA,KAIQ34H,KAAK0gG,eAAiB1gG,KAAKs3F,kBAC3Bt3F,KAAKiwK,wCAGTjwK,KAAKwqF,aAAa5iE,KACdutE,GACA2C,GACC93F,KAAK0gG,eACN1gG,KAAKwqF,aAAa5iE,KACdutE,GACA2C,MAGZzgF,IACIogB,KAAAA,iBAAsCpgB,GACtC0V,GAAO1V,MACH,2CAA4CA,KAEpDw1F,GAIJ7sG,KAAK6rK,0BACE/zE,EAAc9T,eAAemkC,2BAA2BnoH,KAAK6rK,0BAMpE9+I,GAAOtf,KAAK,4CACZzN,KAAK81F,WAAWJ,eACZ11F,KAAKs3F,iBAAiBtT,eACtB,SACJhkF,KAAK81F,WAAW7B,iBAAiBj0F,KAAKs3F,iBAAiBtT,gBACzD,MAAOthF,GACL+0B,KAAAA,iBAAsC/0B,GACtCqqB,GAAO1V,MAAM3U,KAarBukK,GAAgB1oK,UAAU65F,kBAAoB,SAASD,EAAS3yB,GAC5D,IAAI4kE,EAAQ,KACZ,MAAM8lC,EACAliE,EAAE7V,GACCztF,KAAK,iCACLhK,QAEgB,IAArBwvK,EAAU3wK,SACV6qI,EAAQ8lC,EAAU,GAAGjsH,aAAa,QAGlCmmF,EAEApqI,KAAK+3F,IAAI02D,wBAAwB,KAAMrkB,GAGvCpqI,KAAK+3F,IAAI02D,wBAAwBjpF,EAAI,OAgB7CyhG,GAAgB1oK,UAAUuxK,oBAAsB,SACxCh4E,EACAluF,GACAA,GAAWA,EAAQqyG,UACnBxkF,KAAAA,iBAAsC,IAAIhpB,MAAM7E,EAAQqyG,WAI5DnkB,EAAci6B,UACV,MACA16G,IACI0V,GAAOhF,KACH,qEACiC1Q,KACtC,CACCmgB,OAAQ5tB,GAAWA,EAAQ4tB,OAC3BikG,kBAAmB7xH,GAAWA,EAAQ6xH,kBACtCF,sBAAsB,KAclC0rC,GAAgB1oK,UAAU49F,YAAc,SAChCrE,EACA+jC,EACAC,GACJ/uG,GAAOtf,KACF,eAAcouH,OAAqBC,UAChChkC,EAAchR,SAClBgR,IAAkB93F,KAAKs3F,kBACvBt3F,KAAKsnK,YAAa,EAElBr0E,GAAWiE,cACPtb,GvG7nE2B,YuG6nEgB,CAAEoV,KAAK,KAGlDhxF,KAAK81F,aACL91F,KAAK81F,WAAW5B,gBACZl0F,KAAKs3F,iBAAiBtT,gBAC1Bj3D,GAAOtf,KAAK,0BACZzN,KAAK81F,WAAWR,cACZt1F,KAAKs3F,iBAAiBtT,iBAI9BhkF,KAAKs3F,iBAAmB,KAGxBt3F,KAAK+3F,IAAIoE,eACFrE,IAAkB93F,KAAKq3F,kBAGN,YAApBwkC,GAAgD,iBAAfC,GACjC/uG,GAAOtf,KAAK,6BACZwlF,GAAWe,UAAUjS,uBAAuB,CAAEouF,aAAa,KAChC,uBAApBt0C,GACW,eAAfC,GAIH7oC,GAAWe,UAAUjS,uBAAuB,CAAEquF,WAAW,IAE7DpwK,KAAKqwK,mBAELtjJ,GAAO1V,MACH,2CACAygF,EAAc3sC,IACd2sC,EAAc8a,UACdipB,EACAC,IAQZmrC,GAAgB1oK,UAAUo7F,kBAAoB,SAAS7B,GAC9CA,EAAchR,QACf9mF,KAAK23G,QACL33G,KAAKwqF,aAAa5iE,KAAKutE,MAI/B8xE,GAAgB1oK,UAAU4wK,kBAAoB,WAC1C,IAAI9H,GAAuB,EAC3B,MAAM7mE,EAAexgG,KAAK08F,kBAG1B,IAAK,IAAIp9F,EAAI,EAAGA,EAAIkhG,EAAajhG,OAAQD,GAAK,EAC1C,GAAIkhG,EAAalhG,GAAG6kG,eAAgB,CAChCkjE,GAAuB,EACvB,MAGJA,IAAyBrnK,KAAKqnK,uBAC9BrnK,KAAKqnK,qBAAuBA,EAC5BrnK,KAAKwqF,aAAa5iE,KACdutE,EACAkyE,KASZJ,GAAgB1oK,UAAU+xK,gBAAkB,WACxC,OAAOtwK,KAAKqnK,sBAOhBJ,GAAgB1oK,UAAUs8F,SAAW,WACjC,OACI76F,KAAK23F,MAAQ33F,KAAK23F,KAAK8lB,UACjBn/D,GAAAA,QAAAA,mBAA2Bt+C,KAAK23F,KAAK8lB,WACrC,MAGdwpD,GAAgB1oK,UAAUktJ,UAAY,SAASC,EAAOxgE,EAAU/0E,GAC5D,MAAMo6J,EAAiBvwK,KAAK8xJ,0BAExBye,EACAA,EAAe9kB,UAAUC,EAAOxgE,EAAU/0E,GAE1C4W,GAAOhF,KAAK,yCAWpBk/I,GAAgB1oK,UAAU8pK,eAAiB,SAASz+J,GAChD,OAAI5J,KAAK23F,KACE33F,KAAK+nK,iBAAiBM,eAAez+J,GAGzC0c,QAAQzU,OAAO,IAAIpD,MAAM,wCAUpCw4J,GAAgB1oK,UAAUiqK,cAAgB,SAAS3L,GAC/C,OAAI78J,KAAK23F,KACE33F,KAAK+nK,iBAAiBS,cAAc3L,GAGxCv2I,QAAQzU,OAAO,IAAIpD,MAAM,wCAMpCw4J,GAAgB1oK,UAAU0mH,sBAAwB,WAC9C,QAAIjlH,KAAK23F,MACE33F,KAAK23F,KAAKstB,yBAUzBgiD,GAAgB1oK,UAAU2mH,KAAO,SAASx8B,GACtC,OAAI1oF,KAAK23F,KACE33F,KAAK23F,KAAKutB,KAAKx8B,GAGnB,IAAIpiE,SAAQ,CAACC,EAAS1U,KACzBA,EAAO,IAAIpD,MAAM,2CAOzBw4J,GAAgB1oK,UAAU6mH,OAAS,WAC/B,OAAIplH,KAAK23F,KACE33F,KAAK23F,KAAKytB,SAGd,IAAI9+F,SAAQ,CAACC,EAAS1U,KACzBA,EAAO,IAAIpD,MAAM,2CAOzBw4J,GAAgB1oK,UAAUiyK,iBAAmB,WACzC,OAAOxwK,KAAKklH,KAAK,0BAOrB+hD,GAAgB1oK,UAAUkyK,gBAAkBxJ,GAAgB1oK,UAAU6mH,OAKtE6hD,GAAgB1oK,UAAUgnH,eAAiB,WACvC,OAAIvlH,KAAK23F,KACE33F,KAAK23F,KAAK4tB,iBAGd,MAMX0hD,GAAgB1oK,UAAUinH,YAAc,WACpC,OAAIxlH,KAAK23F,KACE33F,KAAK23F,KAAK6tB,cAGd,MAQXyhD,GAAgB1oK,UAAUmyK,mBAAqB,WAC3C,GAAI1wK,KAAK23F,KACL,OAAO33F,KAAK23F,KAAK8tB,gBAYzBwhD,GAAgB1oK,UAAUuzJ,wBAA0B,WAChD,MAAM1rJ,EAAUpG,KAAK0gG,cAAgB1gG,KAAKq3F,iBAAmBr3F,KAAKs3F,iBAElE,OAAOlxF,EAAUA,EAAQ49E,eAAiB,MAW9CijF,GAAgB1oK,UAAUiiI,mBAAqB,WAC3C,MAAM+vC,EAAiBvwK,KAAK8xJ,0BAE5B,OAAOye,EAAiBA,EAAe/vC,qBAAuB,MASlEymC,GAAgB1oK,UAAUoyK,oBAAsB,SAASC,GAChD5wK,KAAKi6F,eAMVj6F,KAAKi7F,iBAAmB21E,EACxB5wK,KAAK23F,KAAKoX,uBAAuB,aAAc,CAC3CjvD,WAAY,CACR2hB,MAAOmvG,EAAOnvG,MACdE,MAAOivG,EAAOjvG,MACd3b,MAAO,2CAEThmD,KAAK23F,KAAKvrC,gBAZZr/B,GAAOhF,KAAM,qCAAoC/nB,KAAK23F,KAAO,GAAK,oBAC9D33F,KAAKi6F,cAAgB,GAAK,qCAkBtCgtE,GAAgB1oK,UAAUsyK,oBAAsB,WAC5C,OAAO7wK,KAAKi7F,kBAMhBgsE,GAAgB1oK,UAAUgvK,kBAAoB,WAC1C,OAAOvtK,KAAK86F,iBAMhBmsE,GAAgB1oK,UAAUivK,kBAAoB,WAC1C,OAAOxtK,KAAK+6F,iBAMhBksE,GAAgB1oK,UAAUkiJ,mBAAqB,WAC3C,OAAOzgJ,KAAK23F,KAAKmB,iBAMrBmuE,GAAgB1oK,UAAUguG,4BAA8B,SAASpqG,EAAM0B,GACnE7D,KAAK0sK,YAAa,qBAAoBvqK,IAAQ,CAAE0B,MAAAA,KAMpDojK,GAAgB1oK,UAAUuyK,+BAAiC,SAAS3uK,GAChEnC,KAAK4sK,cAAe,qBAAoBzqK,KACxCnC,KAAK23F,KAAKvrC,gBASd66G,GAAgB1oK,UAAUwyK,4BAA8B,SAAS5uK,GAC7D,MAAM26D,EAAW98D,KAAK23F,KAAKgmB,QAAQT,MAAMxyG,MAAK4xG,GAC1CA,EAAK7jF,UAAa,qBAAoBt2B,MAG1C,OAAO26D,EAAWA,EAASj5D,WAAQkD,GAWvCkgK,GAAgB1oK,UAAUs4F,aAAe,SACjCm6E,EACAC,GACJ,OAAOjxK,KAAK81F,WAAWe,aAAam6E,EAAiBC,IAUzDhK,GAAgB1oK,UAAUw3F,mBAAqB,WAC3C,OAAO/1F,KAAK81F,WAAWC,sBAS3BkxE,GAAgB1oK,UAAU2yK,eAAiB,SAASphJ,GAAO,MACvD,OAAOA,EAAM+B,UAAN,UAAkB7xB,KAAK8xJ,iCAAvB,aAAkB,EAAgCv/D,aAAaziE,GAASA,EAAMwwH,WASzF2mB,GAAgB1oK,UAAUq1I,eAAiB,SAAS9jH,EAAO6jH,GACvD,MAAM9hH,EAAU/B,EAAM+B,UACtB,IAAItoB,EAAO,KACX,MAAMu9E,EAAQh3D,EAAMg3D,MACdqqF,EAAerqF,EAAQh3D,EAAM4B,mBAAqB,QAClD6+I,EACAzpF,EACI9mF,KAAKq3F,kBAAoBr3F,KAAKq3F,iBAAiBrT,eAC/ChkF,KAAKs3F,kBAAoBt3F,KAAKs3F,iBAAiBtT,eAErDnyD,EAEI0+I,IACAhnK,EAAOgnK,EAAeh+E,aAAaziE,IAGvCvmB,EAAOumB,EAAMwwH,UAEZ3M,EAAUxvI,IAAOoF,GAASgnK,GAI/BvwK,KAAK81F,WAAWzO,4BACZkpF,EACAhnK,EACAsoB,EACAs/I,EACArhJ,EAAM2jH,gBACNE,EAAUxvI,KAUlB8iK,GAAgB1oK,UAAUq4F,mBAAqB,SAAS73F,GACpDk0F,GAAWwD,QAAQ13F,IAUvBkoK,GAAgB1oK,UAAUkiH,QAAU,SAAS0D,GACzC,OAAOnkH,KAAK23F,KAAO33F,KAAK23F,KAAK8oB,QAAQ0D,GAAU,MAMnD8iD,GAAgB1oK,UAAU6yK,+BAAiC,WACvDpxK,KAAKwqF,aAAa5iE,KAAKutE,EACnB4D,IAWRkuE,GAAgB1oK,UAAU8yK,oBAAsB,SAASh3G,EAAItjD,GACzD/W,KAAK+3F,IAAIk4D,mBAAmB51F,EAAItjD,IAQpCkwJ,GAAgB1oK,UAAUktI,yBAA2B,SAAS10H,GAC1D/W,KAAK+3F,IAAI0zC,yBAAyB10H,IAStCkwJ,GAAgB1oK,UAAU+yK,yBAA2B,SAASv6J,GAC1D/W,KAAKqxK,oBAAoB,GAAIt6J,IAiBjCkwJ,GAAgB1oK,UAAUksG,YAAc,SAChC1rG,EACAs7D,EAAK,GACLk3G,GAAyB,GAC7B,MAAMC,SAAqBzyK,EAK3B,GAAoB,WAAhByyK,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACAvxK,KAAKqxK,oBAAoBh3G,EAAIt7D,OAC1B,CACH,IAAI0yK,EAAgB1yK,EAIhBgjH,EAAc,OAElB,GAAoB,WAAhByvD,EAA0B,CAC1BzvD,EAAc,eAGT0vD,EAAcriK,eAAeo5F,MAC9BipE,EAAcjpE,IAAuB,IAGzC,IACIipE,EAAgBxmJ,KAAKF,UAAU0mJ,GACjC,MAAO/uK,GAGL,YAFAqqB,GAAO1V,MAAM,6CAA8C3U,IAM/D23D,EACAr6D,KAAKysK,uBAAuBpyG,EAAIo3G,EAAe1vD,GAG/C/hH,KAAKwsK,gBAAgBiF,EAAe1vD,QAnCxCh1F,GAAO1V,MAAO,kCAAiCm6J,MAyCvDvK,GAAgB1oK,UAAUk0J,wBAA0B,WAChD,OAAOzyJ,KAAK0gG,cACN1gG,KAAK6nK,2BAA6B7nK,KAAK64F,4BASjDouE,GAAgB1oK,UAAU26F,uBAAyB,SAAS9yF,IACnDA,EAAQ0gF,OAAS9mF,KAAK4J,QAAQtG,OAAO62H,oBACtCn6H,KAAKwqF,aAAa5iE,KAAKutE,EAAyC4D,IASxEkuE,GAAgB1oK,UAAUmrK,4BAA8B,SAAStjK,GACzDA,EAAQ0gF,MACR9mF,KAAK6nK,4BAA6B,EAElC7nK,KAAK64F,4BAA6B,EAElCzyF,EAAQ0gF,QAAU9mF,KAAK0gG,eACvB1gG,KAAKwqF,aAAa5iE,KAAKutE,IAS/B8xE,GAAgB1oK,UAAU46F,uBAAyB,SAAS/yF,GAGpDA,EAAQ0gF,OAGRmM,GAAWe,UAAUjS,uBAAuB,CAAEquF,WAAW,IAErDpwK,KAAKq3F,kBACLpE,GAAW+D,oBACPnb,GvGnpFiB,SuGqpFb,CACIo6C,UAAWj2H,KAAKq3F,iBAAiBg6B,eAIjDrxH,KAAKqwK,gBAAgB,qBAAsB,eACpCjqK,GAAWpG,KAAKs3F,mBAAqBlxF,IAC5CpG,KAAKyrK,kBAAoB,IAAI/Y,GAAkB1yJ,MAC/CA,KAAKyrK,kBAAkBprK,MAAM+F,KASrC6gK,GAAgB1oK,UAAUorK,yBAA2B,SAASvjK,GACtDA,EAAQ0gF,MACR9mF,KAAK6nK,4BAA6B,GAElC7nK,KAAK64F,4BAA6B,EAClC74F,KAAKyrK,mBAAqBzrK,KAAKyrK,kBAAkBj+H,UAGjDpnC,EAAQ0gF,QAAU9mF,KAAK0gG,eACvB1gG,KAAKwqF,aAAa5iE,KAAKutE,IAU/B8xE,GAAgB1oK,UAAUwxK,uBAAyB,SAC3Cj4E,EACA6gC,GACJ34H,KAAK6nK,4BAA6B,EAGlC7nK,KAAKq3F,iBAAmBS,EACxB93F,KAAK8pK,oCAEL9pK,KAAKq3F,iBAAiBvR,WAClB9lF,KAAK23F,KACL33F,KAAK+3F,IAFT,MAGW/3F,KAAK4J,QAAQtG,OAHxB,CAIQ6xH,wBAAyBn1H,KAAKwqG,mBAGtCz9E,GAAOtf,KAAK,4CAEZ,IAAIikK,EAAWpzH,GAAAA,QAAAA,mBAA2Bt+C,KAAKq3F,iBAAiBub,WAEhE,MAAM3a,EAAcj4F,KAAKwgG,aAAakxE,GAElCz5E,IACAy5E,EAAWz5E,EAAYuL,cAAgBkuE,GAG3C1xK,KAAK81F,WAAWJ,eACZ11F,KAAKq3F,iBAAiBrT,eACtB0tF,GAEJ,MAAM7kE,EAAc7sG,KAAKsyF,iBAEzBtyF,KAAKq3F,iBAAiB46B,YAClB0G,GACA,KACI5rG,GAAOw4B,MAAM,uCAEbvlD,KAAKwqF,aAAa5iE,KACdutE,GACAn1F,KAAKq3F,qBAEbhgF,IACI0V,GAAO1V,MACH,+CAAgDA,KAExDw1F,IAORo6D,GAAgB1oK,UAAUozK,oBAAsB,WAC5C3xK,KAAK4xK,iBACD,MAAO5xK,KAAKs3F,iBAAiBtT,eAAeghE,oBAOpDiiB,GAAgB1oK,UAAUszK,oBAAsB,WAC5C7xK,KAAK4xK,iBACD,MAAO5xK,KAAKq3F,iBAAiBrT,eAAeghE,oBAUpDiiB,GAAgB1oK,UAAUqzK,iBAAmB,SAASrlB,EAAS9vB,GAC3D,IAAK,MAAM3sG,KAAS2sG,EAChB1vG,GAAOtf,KAAM,iBAAgB8+I,YAAkBz8H,KAC/C9vB,KAAKo7F,mBAAmBtrE,IAWhCm3I,GAAgB1oK,UAAUqrK,4BAA8B,SAChD9xE,GAC0B,OAA1B93F,KAAKq3F,mBAILr3F,KAAK8xK,yBACC9xK,KAAKq3F,iBAAiBi9B,uBAGF,OAA1Bt0H,KAAKs3F,mBACLt3F,KAAK+xK,yBACC/xK,KAAKs3F,iBAAiBg9B,uBAGhC,IAAI3kH,GAAO,EACX,MAAMqiK,EAAmBhyK,KAAK4J,QAAQtG,OAAO0uK,iBAmB7C,GAhBKl6E,EAAchR,MAER9mF,KAAKq3F,mBAAqBS,GACjC/qE,GAAO1V,MAAM,0DAEb1H,GAAO,IACCmoF,EAAcu5B,aACS,iBAArB2gD,GACP1lK,KAAKE,SAAWwlK,IACnBjlJ,GAAOtf,KAAM,+BAA8BukK,SAC3C/+E,GAAWe,UAAUjS,uBAAuB,CAAEouF,aAAa,IAC3DnwK,KAAKqwK,gBAAgB,UAAW,gBAEhC1gK,GAAO,GAZPA,GAAO,GAeNsW,MAAMjmB,KAAK8xK,4BACR7rJ,MAAMjmB,KAAK+xK,0BAA2B,CAC1C,MAAME,EACAjyK,KAAK8xK,yBAA2B9xK,KAAK+xK,yBAE3C9+E,GAAWiE,cvGzuFb,kCuG2uFM,CAAErzF,MAAOouK,IAGbn6E,EAAchR,QAAU9mF,KAAK0gG,eAC7B1gG,KAAKwqF,aAAa5iE,KAAKutE,GAGvBxlF,IAMJ3P,KAAKkyK,eAAc,GAGflyK,KAAKs3F,iBACLt3F,KAAKmyK,yBAELplJ,GAAOtf,KAAK,mDAGhBzN,KAAK6xK,sBAGD7xK,KAAKs3F,kBACLt3F,KAAKiwK,wCAGTljJ,GAAOtf,KAAK,6CACZzN,KAAK81F,WAAW7B,iBAAiBj0F,KAAKq3F,iBAAiBrT,gBAEvDiP,GAAW+D,oBACPnb,GvGj2F8B,cuGm2F1B,CACIo6C,UAAWj2H,KAAKq3F,iBAAiBg6B,iBAajD41C,GAAgB1oK,UAAUsrK,kBAAoB,SAASxnF,EAAa,IAChE,MAAMklE,GAAWh9C,IAAAA,CAAQloB,EAAYriF,KAAKqiF,YAE1CriF,KAAKqiF,WAAaA,EACdklE,IACAvnJ,KAAKwqF,aAAa5iE,KACdutE,GACAn1F,KAAKqiF,YAGa,CAIlB,eAGA,cAGU79E,SAAQC,SACMsC,IAApBs7E,EAAW59E,IACXwuF,GAAWe,UAAUjS,uBAAuB,CACxC,CAACt9E,EAAIwD,QAAQ,IAAK,MAAOo6E,EAAW59E,UAaxDwiK,GAAgB1oK,UAAU6kG,YAAc,SAAS3+F,GAC7C,OAAOzE,KAAKqiF,WAAW59E,IAO3BwiK,GAAgB1oK,UAAU6zK,4BAA8B,WAChDpyK,KAAK0nK,uBACL36I,GAAOtf,KAAK,mCACZie,aAAa1rB,KAAK0nK,sBAClB1nK,KAAK0nK,qBAAuB,OASpCT,GAAgB1oK,UAAU4zK,uBAAyB,WAC/CnyK,KAAKqyK,oBACD,MAAOryK,KAAKs3F,iBAAiBtT,eAAeghE,oBAQpDiiB,GAAgB1oK,UAAU+zK,uBAAyB,WAC/CtyK,KAAKqyK,oBACD,MAAOryK,KAAKq3F,iBAAiBrT,eAAeghE,oBAUpDiiB,GAAgB1oK,UAAU8zK,oBAAsB,SACxCE,EACA91C,GACJ,IAAK,MAAM3sG,KAAS2sG,EAChB1vG,GAAOtf,KAAM,mBAAkB8kK,YAA0BziJ,KACzD9vB,KAAKq7F,qBAAqBvrE,IAQlCm3I,GAAgB1oK,UAAUi0K,qCAAuC,WAC7DzlJ,GAAOtf,KAAK,sDACZzN,KAAKs3F,iBAAiB+jC,wBAAuB,GAAM,GAAMp5D,MACrD,KACIl1C,GAAOtf,KAAK,sDAEhB4J,IACI0V,GAAO1V,MACH,2DACAA,OAWhB4vJ,GAAgB1oK,UAAU2zK,cAAgB,SAASlyE,GAC/C,GAAIhgG,KAAKgxF,MAAQgP,EAAjB,CAMA,GADAhgG,KAAKgxF,IAAMgP,EACPA,EAAW,CACXjzE,GAAOtf,KAAK,wCAIZwlF,GAAWe,UAAUjS,uBAAuB,CACxCquF,WAAW,EACXD,aAAa,IAKjB,MAAM5B,EAAoC,IAApBvuK,KAAK8gG,WAE3B9gG,KAAKq3F,iBACAgkC,wBAAuB,EAAMkzC,GAC7BpiG,OAAM90D,IACH0V,GAAO1V,MAEI,+CAAGk3J,KAAkBl3J,WAGxC0V,GAAOtf,KAAK,mCAIZzN,KAAKs3F,kBACLt3F,KAAK81F,WAAWE,gCACZh2F,KAAKs3F,iBAAiBtT,gBAAiBgc,GAI/ChgG,KAAKonK,YAAc,KAGnBpnK,KAAKwqF,aAAa5iE,KACdutE,GACAn1F,KACAA,KAAKgxF,KACThxF,KAAKwqF,aAAa5iE,KACdutE,GACAn1F,KAAKo8J,0BAGTp8J,KAAKwqF,aAAa5iE,KACd5nB,KAAKyyJ,0BACCt9D,EACAA,QApDNpoE,GAAOw4B,MAAO,8CAA6Cy6C,MA4DnEinE,GAAgB1oK,UAAUk0K,iBAAmB,SAAS7/D,GAElD,GADA5yG,KAAKoyK,8BACDpyK,KAAKq3F,iBAGL,YAFAtqE,GAAO1V,MAAM,gCAKjBrX,KAAK6nK,4BAA6B,EAClC7nK,KAAKq3F,iBACCr3F,KAAKkzF,KAAK/gC,WAAWk9D,OAAOyT,oBAC1B9iI,KAAK23F,KAAK8lB,UACV7K,GACR7lF,GAAOtf,KACH,gCAAiCzN,KAAK23F,KAAK8lB,UAAW7K,GAC1D5yG,KAAK8pK,oCAEL9pK,KAAKq3F,iBAAiBvR,WAClB9lF,KAAK23F,KACL33F,KAAK+3F,IAFT,MAGW/3F,KAAK4J,QAAQtG,OAHxB,CAIQ6xH,wBAAyBn1H,KAAKwqG,mBAGtCz9E,GAAOtf,KAAK,4CAEZ,IAAIikK,EAAWpzH,GAAAA,QAAAA,mBAA2Bt+C,KAAKq3F,iBAAiBub,WAEhE,MAAM3a,EAAcj4F,KAAKwgG,aAAakxE,GAElCz5E,IACAy5E,EAAWz5E,EAAYuL,cAAgBkuE,GAG3C1xK,KAAK81F,WAAWJ,eACZ11F,KAAKq3F,iBAAiBrT,eACtB0tF,GAEJ,MAAM7kE,EAAc7sG,KAAKsyF,iBAEzBtyF,KAAKq3F,iBAAiB2rB,OAAOnW,IAOjCo6D,GAAgB1oK,UAAU0xK,sCAAwC,WAC9DljJ,GAAOtf,KAAK,wDACZzN,KAAKs3F,iBAAiB+jC,wBAAuB,GAAO,GAAOp5D,MACvD,KACIl1C,GAAOtf,KAAK,yDAEhB4J,IACI0V,GAAO1V,MACH,4DACAA,OAWhB4vJ,GAAgB1oK,UAAU2wK,qBAAuB,SAASwD,GACtD,IAAK1yK,KAAKorK,gBAAkBprK,KAAKqrK,wBAA0BnqJ,GAAQkvD,aAAelvD,GAAQw+D,gBAGtF,YAFA3yD,GAAOtf,KAAK,qBAIhB,MAAMklK,EAAQ3yK,KAAK08F,kBACbumE,EAAY0P,EAAMpzK,OAGlBqzK,EAAgB5yK,KAAK6vK,qBAQ3B,IALK+C,GAAiB5yK,KAAK0nK,sBACvB1nK,KAAKoyK,+BAIJpyK,KAAKq3F,kBAAoBu7E,EAAe,CACzC,MAAM5rF,EAAOi8E,GAAa0P,EAAM,GAG1BE,EAAO7yK,KAAK66F,WACZi4E,EAAU9rF,EAAKkZ,QAErB,GAAI2yE,EAAOC,EAKP,YAJA/lJ,GAAOw4B,MACH,2DACqCstH,EAAMC,GAG5C,GAAID,IAASC,EAGhB,YAFA/lJ,GAAO1V,MAAM,kBAAmBw7J,EAAMC,GAK1C,MAAMjuH,EAAMmiC,EAAK2V,SAEjB,GAAI+1E,EAAe,CACf,GAAI1yK,KAAK0nK,qBAGL,YAFA36I,GAAO1V,MAAM,+CAIjB0V,GAAOtf,KACF,wBAAuBo3C,WACpB7kD,KAAK4nK,6BACb5nK,KAAK0nK,qBAAuBn4J,WACxBvP,KAAKyyK,iBAAiBvsK,KAAKlG,KAAM6kD,GACX,IAAtB7kD,KAAK4nK,qBAET76I,GAAOtf,KAAM,wBAAuBo3C,KACpC7kD,KAAKyyK,iBAAiB5tH,QAEnB7kD,KAAKq3F,mBAAqBu7E,IACjC7lJ,GAAOtf,KAAM,uBAAsBzN,KAAKq3F,iBAAiBub,aAGrD5yG,KAAKq3F,iBAAiBg6B,aAAe4xC,EAAY,GACjDhwE,GAAW+D,oBACPnb,GvGlpGwB,kBuGopGhC77E,KAAKqwK,oBAUbpJ,GAAgB1oK,UAAUsxK,mBAAqB,WAC3C,MAAM8C,EAAQ3yK,KAAK08F,kBACbumE,EAAY0P,EAAMpzK,OAClBwzK,OAAmGhsK,IAAtF4rK,EAAMjoK,MAAK/H,GAAwB,gBAAnBA,EAAE6hG,cAAkC7hG,EAAE0hG,WAAWqgC,MAC9EkuC,EAA8B,IAAd3P,IAAoB8P,EAI1C,OAFAhmJ,GAAOw4B,MAAO,mBAAkB09G,kBAA0B8P,QAAiBH,KAEpEA,GAWX3L,GAAgB1oK,UAAU8xK,gBAAkB,SACpC74I,EACAikG,GACJ,IAAKz7H,KAAKq3F,iBAGN,YAFAtqE,GAAO1V,MAAM,iCAKjB,MAAM27J,EAAoBhzK,KAAK0gG,cAG3BsyE,IACIhzK,KAAKs3F,kBACLt3F,KAAKwyK,uCAITxyK,KAAKsyK,0BAITvlJ,GAAOtf,KAAK,4CACZzN,KAAK81F,WAAW5B,gBAAgBl0F,KAAKq3F,iBAAiBrT,gBACtDj3D,GAAOtf,KAAK,yCACZzN,KAAK81F,WAAWR,cAAct1F,KAAKq3F,iBAAiBrT,gBAEpDhkF,KAAKq3F,iBAAiB06B,WAClB,KACIhlG,GAAOtf,KAAK,mCAEhB4J,IAcQmgB,GACAzK,GAAO1V,MACH,iEAC6BA,KAEtC,CACCmgB,OAAQA,GAAkB,UAC1BikG,kBAAmBA,GACO,yBAC1BF,qBAAsBv7H,KAAK23F,MACpB33F,KAAK8xB,mBACJwsB,GAAAA,QAAAA,mBAA2Bt+C,KAAKq3F,iBAAiBub,cAGjE5yG,KAAKq3F,iBAAmB,KAGxBr3F,KAAKkyK,eAAc,GAEfc,IAEIhzK,KAAKs3F,iBACLt3F,KAAK2xK,sBAEL5kJ,GAAOtf,KAAK,mDAWxBw5J,GAAgB1oK,UAAUmiG,YAAc,WACpC,OAAO1gG,KAAKgxF,KAShBi2E,GAAgB1oK,UAAU00K,sBAAwB,WAC9C,OAAIjzK,KAAK0gG,cACE1gG,KAAKq3F,iBAAiBrT,eAAew8C,qBAGzC,MASXymC,GAAgB1oK,UAAU4pH,2BAA6B,SAASC,GAC5D,MAAsB,iBAAXA,GAAuBniG,MAAMmiG,IACpCr7F,GAAO1V,MAAO,iBAAgB+wG,+CAEvB,IAGXpoH,KAAK6rK,yBAA2BzjD,EAGhCpoH,KAAKs3F,kBAAoBt3F,KAAKs3F,iBAAiBtT,eAAemkC,2BAA2BC,GAGzFpoH,KAAK+3F,IAAIowB,2BAA2BC,IAE7B,IAMX6+C,GAAgB1oK,UAAU20K,gBAAkB,WACxC,MAAMP,EAAQ3yK,KAAK08F,kBAGnB,GAAqB,IAAjBi2E,EAAMpzK,OAKN,MAAM,IAAIkP,MACN,kEANgB,CACpB,MAAM41G,EAAUsuD,EAAM,GAAGh2E,SAEzB38F,KAAKyyK,iBAAiBpuD,KAU9B4iD,GAAgB1oK,UAAU40K,eAAiB,WACvCnzK,KAAKqwK,mBAOTpJ,GAAgB1oK,UAAU60K,gBAAkB,WACxC,OAAOpzK,KAAKynK,sBAAsB7gG,YAoBtCqgG,GAAgB1oK,UAAUq9J,uBAAyB,SAASnvB,GACxDzsI,KAAK+pK,uBAAuBnO,uBAAuBnvB,IAWvDw6B,GAAgB1oK,UAAUq8H,2BAA6B,SAASF,GAC5D16H,KAAK+pK,uBAAuBpO,kCAAkCjhC,IAUlEusC,GAAgB1oK,UAAU48H,yBAA2B,SAAST,GAC1D,OAAO16H,KAAKgqK,oBAAoBvN,+BAA+B/hC,IAgBnEusC,GAAgB1oK,UAAUyoK,wBACpB,SAAShB,EAAY13I,GACnB,OAAKtuB,KAAK23F,KAIH33F,KAAK8nK,kBACPd,wBAAwBhB,EAAY13I,GAJ9B,IAAI7f,MAAMw3J,KAY7BgB,GAAgB1oK,UAAUurK,kCAAoC,WAC1D,MAAMnqD,EAAY3/G,KAAK0wK,sBAEnB1wK,KAAK0oK,mCAAsC/oD,GAAgD,OAAnC3/G,KAAK8xJ,4BAIjE7+D,GAAWiE,cAAc3b,GAAsB,SAAU,CACrDokC,UAAAA,EACAxwB,cAAgB,GAAEwwB,KAAa3/G,KAAKwpK,qBAExCxpK,KAAK0oK,kCAAoCt7I,KAAKgC,QAOlD63I,GAAgB1oK,UAAUitK,kCAAoC,WAC1D,MAAM7rD,EAAY3/G,KAAK0wK,qBAElB/wD,GAAc3/G,KAAK0oK,mCAKxBz1E,GAAWiE,cAAc3b,GAAsB,OAAQ,CACnDokC,UAAAA,EACAxwB,cAAgB,GAAEwwB,KAAa3/G,KAAKwpK,kBACpC3pG,MAAO,CACHqrB,SAAU5+E,KAAKC,OAAO6gB,KAAKgC,MAAQpvB,KAAK0oK,mCAAqC,KAC7E2K,KAAMrzK,KAAKmsK,2BAUvBlF,GAAgB1oK,UAAUiuG,sBAAwB,WAC1CxsG,KAAKq3F,kBACLr3F,KAAKmzK,iBAGLnzK,KAAKs3F,kBACLt3F,KAAKs3F,iBAAiBy6B,UAClB,MACA16G,IACI0V,GAAOhF,KAAK,8DAA+D1Q,KAC5E,CACCmgB,OAAQ,UACRikG,kBAAmB,mBACnBE,gBAAgB,EAChBJ,sBAAsB,IAIlCv7H,KAAKkvK,sBAAqB,IAQ9BjI,GAAgB1oK,UAAUisG,cAAgB,WACtC,OAAO3qB,QAAQ7/E,KAAK4oK,gBAAkB5oK,KAAK4oK,eAAev8D,cAS9D46D,GAAgB1oK,UAAUoqK,gBAAkB,WACxC,OAAO79D,GAAc/uC,YAAY/7D,KAAK4J,QAAQtG,SASlD2jK,GAAgB1oK,UAAU+0K,WAAa,SAAS12E,GACvC58F,KAAK2oK,kBAMV3oK,KAAK4oK,eAAe2K,WAAW32E,GAL3B7vE,GAAOhF,KAAK,6DAapBk/I,GAAgB1oK,UAAUi1K,iBAAmB,WACzC,OAAO3zF,QAAQ7/E,KAAK23F,MAAQ33F,KAAK23F,KAAK0tB,WAAWtpD,gBAQrDkrG,GAAgB1oK,UAAUqwK,cAAgB,WACtC,OAAO/uF,QAAQ7/E,KAAK23F,MAAQ33F,KAAK23F,KAAK8f,qBAQ1CwvD,GAAgB1oK,UAAU45G,YAAc,WACpC,OAAIn4G,KAAK23F,MAAQ33F,KAAKi6F,cACXj6F,KAAK23F,KAAK0tB,WAAW1pD,SAGzBr1C,QAAQzU,OACX,IAAIpD,MAAM,yDAQlBw4J,GAAgB1oK,UAAUk1K,aAAe,WACjCzzK,KAAK23F,MAAQ33F,KAAKi6F,cAClBj6F,KAAK23F,KAAK0tB,WAAW9N,UAErBxqF,GAAOhF,KAAM,4BAA2B/nB,KAAK23F,KAAO,GAAK,oBACrD33F,KAAKi6F,cAAgB,GAAK,qCAWtCgtE,GAAgB1oK,UAAUm1K,UAAY,SAASplJ,EAAawpF,GACxD,OAAI93G,KAAK23F,KACE33F,KAAK23F,KAAK0tB,WAAWp8G,KAAKqlB,EAAawpF,GAG3CxxF,QAAQzU,OAAO,IAAIpD,MAAM,gCAOpCw4J,GAAgB1oK,UAAUo1K,gBAAkB,SAASxvK,GAC7CnE,KAAK23F,MACL33F,KAAK23F,KAAK0tB,WAAWzM,WAAWz0G,IASxC8iK,GAAgB1oK,UAAUq1K,mBAAqB,SAASzvK,GAChDnE,KAAK23F,MACL33F,KAAK23F,KAAK0tB,WAAWvM,cAAc30G,IAS3C8iK,GAAgB1oK,UAAUs1K,wBAA0B,WAChD,OAAOh0F,QAAQ7/E,KAAK23F,MAAQ33F,KAAK23F,KAAK2tB,kBAAkBvpD,gBAO5DkrG,GAAgB1oK,UAAUu1K,mBAAqB,SAAS/3F,GAChD/7E,KAAK23F,MAAQ33F,KAAKi6F,gBACdle,IAAcoW,IAAmBpW,IAAcoW,IACnDnyF,KAAK23F,KAAK2tB,kBAAkB3pD,QAAO,EAAMogB,GAEzChvD,GAAOhF,KAAM,mCAAkC/nB,KAAK23F,KAAO,GAAK,oBAC5D33F,KAAKi6F,cAAgB,GAAK,qCAC1Bj6F,KAAK23F,MAAQ33F,KAAKi6F,cAAgB,0BAA4B,OAQ1EgtE,GAAgB1oK,UAAUw1K,oBAAsB,SAASh4F,GACjD/7E,KAAK23F,MAAQ33F,KAAKi6F,gBACdle,IAAcoW,IAAmBpW,IAAcoW,IACnDnyF,KAAK23F,KAAK2tB,kBAAkB3pD,QAAO,EAAOogB,GAE1ChvD,GAAOhF,KAAM,oCAAmC/nB,KAAK23F,KAAO,GAAK,oBAC7D33F,KAAKi6F,cAAgB,GAAK,qCAC1Bj6F,KAAK23F,MAAQ33F,KAAKi6F,cAAgB,0BAA4B,OAU1EgtE,GAAgB1oK,UAAUy1K,oBAAsB,SAASj4F,EAAW53E,GAChE,GAAInE,KAAK23F,MAAQ33F,KAAKi6F,gBACdle,IAAcoW,IAAmBpW,IAAcoW,IAAkB,CAErE,MAAM8F,EAAcj4F,KAAK8xB,mBAAmB3tB,GAE5C,IAAK8zF,EACD,OAGJj4F,KAAK23F,KAAK2tB,kBAAkB/O,QAAQx6B,EAAWkc,EAAY0E,eAE3D5vE,GAAOhF,KAAM,mCAAkC/nB,KAAK23F,KAAO,GAAK,oBAC5D33F,KAAKi6F,cAAgB,GAAK,qCAC1Bj6F,KAAK23F,MAAQ33F,KAAKi6F,cAAgB,0BAA4B,OAU1EgtE,GAAgB1oK,UAAU01K,mBAAqB,SAASl4F,EAAW53E,GAC/D,GAAInE,KAAK23F,MAAQ33F,KAAKi6F,gBACdle,IAAcoW,IAAmBpW,IAAcoW,IAAkB,CAErE,MAAM8F,EAAcj4F,KAAK8xB,mBAAmB3tB,GAE5C,IAAK8zF,EACD,OAGJj4F,KAAK23F,KAAK2tB,kBAAkBzzG,OAAOkqE,EAAWkc,EAAY0E,eAE1D5vE,GAAOhF,KAAM,kCAAiC/nB,KAAK23F,KAAO,GAAK,oBAC3D33F,KAAKi6F,cAAgB,GAAK,qCAC1Bj6F,KAAK23F,MAAQ33F,KAAKi6F,cAAgB,0BAA4B,OC3tH1E4uE,GAAgBtqK,UAAUisD,QAAU,SAAS5gD,EAAU,IACnD5J,KAAKkzF,KAAK1oC,QAAQ5gD,EAAQzF,GAAIyF,EAAQssC,WAU1C2yH,GAAgBtqK,UAAU2sD,OAAS,SAASthD,GACxC5J,KAAKkzF,KAAKhoC,OAAOthD,IAOrBi/J,GAAgBtqK,UAAUuvD,WAAa,YAAYhmD,GAK/C,OAAO9H,KAAKkzF,KAAKplC,cAAchmD,IAQnC+gK,GAAgBtqK,UAAUo+F,OAAS,WAC/B,OAAO38F,KAAKkzF,KAAKyJ,UAOrBksE,GAAgBtqK,UAAU21K,SAAW,SAASvvC,GAC1C3kI,KAAK2kI,MAAQA,GAWjBkkC,GAAgBtqK,UAAU41K,oBAAsB,SAAShyK,EAAMyH,GAC3D,OAAO,IAAIq9J,GAAgB,CACvB9kK,KAAAA,EACAmB,OAAQsG,EACRuoD,WAAYnyD,QASpB6oK,GAAgBtqK,UAAUuqB,iBAAmB,SAASyO,EAAO7jB,GACzD1T,KAAKkzF,KAAKngF,YAAYwkB,EAAO7jB,IAQjCm1J,GAAgBtqK,UAAUyqB,oBAAsB,SAASuO,EAAO7jB,GAC5D1T,KAAKkzF,KAAKv/E,eAAe4jB,EAAO7jB,IAMpCm1J,GAAgBtqK,UAAUkiJ,mBAAqB,WAC3C,OAAOzgJ,KAAKkzF,KAAK4F,iBAUrB+vE,GAAgBtqK,UAAUw7D,WAAa,SAASuqC,EAASmK,GAAS,GAC9DzuG,KAAKkzF,KAAKl8C,KAAK+iB,WAAWuqC,EAASmK,GAAQ,IAU/Co6D,GAAgBtqK,UAAU07D,cAAgB,SAASqqC,EAASmK,GAAS,GACjEzuG,KAAKkzF,KAAKl8C,KAAKijB,cAAcqqC,EAASmK,GAAQ,IAMlDo6D,GAAgBtqK,UAAU61K,QAAU,WAChC,MAAM9/J,EAAOtU,KAAKkzF,KAAK00C,eAEjBysC,EAAW,GAEjBA,EAASvnI,KAAO,IAAI1f,KACpBinJ,EAAS/vJ,IAAM7nB,OAAOgJ,SAAS4d,KAC/BgxJ,EAAS3yF,GAAK/gB,UAAUuR,UAExB,MAAMnoE,EAAM/J,KAAKkzF,KAAK20C,aAQtB,OANI99H,IACAsqK,EAASnhF,KAAOnpF,GAGpBuK,EAAK+/J,SAAWA,EAET//J,GC9KJ,MAAMknB,GAAsB,4BAOtBb,GAAsB,0BAWtB25I,GACP,uCAEOC,GAAsB,yJCxBnC,MAAMC,GAAwB,aAExBC,GAAwB,SA0T9B,OArTA,MAKI71K,cACIoB,KAAKsqI,cAAgB,IAAIpkH,MACzBlmB,KAAK00K,aAAe,GAEpBhvB,GAAI3yI,YACAooF,KAAAA,qBACAj5B,GACIliE,KAAKsqI,cAAc1iH,KACf+sJ,GACAzyG,KACZwjF,GAAI3yI,YACAooF,KAAAA,uBACAj5B,GACIliE,KAAK40K,iBACD50K,KAAKmvI,uBACLjtE,KAGZwjF,GAAI3yI,YACAooF,KAAAA,qBACA05E,GAAe70K,KAAK80K,yBAAyBD,KAIjD70K,KAAK+0K,yBAA2B,IAAIzuJ,SAAQC,IACxC,IAAKo6C,UAAUk0G,YAGX,YAFAtuJ,GAAQ,GAKZ,MAAMjqB,EAAO0D,KAEP8nG,EAAW,GAEjBA,EAAS/kG,KAAK49D,UAAUk0G,YAAYG,MAAM,CAAE7yK,KAAMsyK,KAC7CxyG,MAAKjsC,IACFh2B,KAAK80K,yBAAyB,CAC1B,CAAC3iF,IAAkBnyF,KAAKi1K,sBAAsBj/I,KAElDA,EAAOk/I,SAAW,WACd,IACI54K,EAAKw4K,yBAAyB,CAC1B,CAAC3iF,IAAkB71F,EAAK24K,sBAAsBj1K,QAEpD,MAAOqX,OAKN,KAEV80D,OAAM,KAAM,KAEjB27B,EAAS/kG,KAAK49D,UAAUk0G,YAAYG,MAAM,CAAE7yK,KAAMqyK,KAC7CvyG,MAAKjsC,IACFh2B,KAAK80K,yBAAyB,CAC1B,CAAC3iF,IAAkBnyF,KAAKi1K,sBAAsBj/I,KAElDA,EAAOk/I,SAAW,WACd,IACI54K,EAAKw4K,yBAAyB,CAC1B,CAAC3iF,IAAkB71F,EAAK24K,sBAAsBj1K,QAEpD,MAAOqX,OAKN,KAEV80D,OAAM,KAAM,KAEjB7lD,QAAQhU,IAAIw1F,GAAU7lC,MAAKhzD,GAAWsX,EAAQtX,EAAQoD,OAAM8iK,GAAaA,UAajFF,sBAAsBG,EAAmB,IAIrC,MAAMp/I,EAASo/I,EAAiBhtJ,OAASgtJ,EAAiBp/I,OAE1D,GAAsB,iBAAXA,EACP,MAAM,IAAI5O,UAGd,MA3G0B,YA2GnB4O,EAUX8+I,yBAAyBD,GAEf,CAAE1iF,GAAiBA,IAChBtkF,MAAKrO,GAAQA,KAAQq1K,GAAeA,EAAYr1K,KAAUQ,KAAK00K,aAAal1K,OAGjFQ,KAAK00K,4VAAL,IACO10K,KAAK00K,aACLG,GAEP70K,KAAKsqI,cAAc1iH,KAAK+sJ,GAA6C30K,KAAK00K,eAEtE10K,KAAK00K,aAAaviF,KAAoBnyF,KAAK00K,aAAaviF,MAIxDnyF,KAAKgiE,kBAAiB,UAUlC4yG,iBAAiBS,EAAUnzG,GACvB,MAAMisE,EACAjsE,EAAQx3D,MACNrJ,GAAgB,gBAAXA,EAAE01C,MAA0B11C,EAAEghE,WAAagzG,IAEpDlnC,GACAl7C,GAAWoD,0BACPqvD,GAAIxT,4BAA4B/D,IAQ5CnsE,iBAAiBvyD,GACbi2I,GAAI1jF,iBAAiBvyD,GASzB+/H,wBACI,OAAOkW,GAAIlW,wBAUfN,wBAAwByC,GACpB,OAAO+T,GAAIxW,wBAAwByC,GAUvC2jC,0BAA0B91K,GACtB,OAAO,IAAI8mB,SAAQC,IAGX/mB,KAAQQ,KAAK00K,aACbnuJ,EAAQvmB,KAAK00K,aAAal1K,IAM9BQ,KAAK+0K,yBAAyB9yG,MAAKkzG,IAC/B,IAAKA,EAGD,YAFA5uJ,GAAQ,GAKZ,MAAMuhF,EAAW,GAEjB,OAAQtoG,GACR,KAAK2yF,GACD2V,EAAS/kG,KACL49D,UAAUk0G,YAAYG,MAAM,CACxB7yK,KAAMsyK,MAEd,MACJ,KAAKtiF,GACD2V,EAAS/kG,KACL49D,UAAUk0G,YAAYG,MAAM,CACxB7yK,KAAMqyK,MAEd,MACJ,QACI1sE,EAAS/kG,KACL49D,UAAUk0G,YAAYG,MAAM,CACxB7yK,KAAMsyK,MAEd3sE,EAAS/kG,KACL49D,UAAUk0G,YAAYG,MAAM,CACxB7yK,KAAMqyK,MAIlBluJ,QAAQhU,IAAIw1F,GAAU7lC,MAClBhzD,GAAWsX,EAAQtX,EAAQoD,OAAM+iK,IAC7B,IACI,OAAOp1K,KAAKi1K,sBAAsBG,GACpC,SACE,OAAO,SAGf,IAAM7uJ,GAAQ,WAW9BgvJ,gCACI,QAASr0J,GAAQkvD,aAAelvD,GAAQy+D,gBAQ5CwvD,uBACI,OAAOuW,GAAIvW,uBAWf4C,qBAAqB1vE,GAWjB,OAVyBqjF,GAAI1T,oCAERzyI,OAAS,GAI1BS,KAAK40K,iBACDvyG,EAAUqjF,GAAI1T,qCAGf0T,GAAI3T,qBAAqB1vE,GAQpCv5C,iBAAiByO,EAAO5Q,GACpB3mB,KAAKsqI,cAAcv3H,YAAYwkB,EAAO5Q,GAQ1CqC,oBAAoBuO,EAAO5Q,GACvB3mB,KAAKsqI,cAAc32H,eAAe4jB,EAAO5Q,GAO7C6uJ,UAAUj+I,KAAUzvB,GAChB9H,KAAKsqI,cAAc1iH,KAAK2P,KAAUzvB,KC1TpCilB,IAASmB,EAAAA,EAAAA,wDAwFf,SAASunJ,GAAkB3nC,GACvB,IAAK,MAAMK,KAAUL,EACjBK,EAAOyI,aC7FR,MAAM8+B,GAES,+BAFTA,GAGC,mBAHDA,GAIE,+dCEf,MAAM3oJ,IAASmB,EAAAA,EAAAA,2DASA,MAAMynJ,GAgBjB/2K,YAAYgL,EAAU,IAClB5J,KAAK+zG,SAAL,IACI9lC,SAAU,GACVojD,aAAa,EACbukD,cAAc,EACdC,cAAc,GACXjsK,GASP5J,KAAK2iG,QAAU,GAOf3iG,KAAK81K,gBAAkB,KAGvB91K,KAAKm4D,SAAWn4D,KAAKm4D,SAASjyD,KAAKlG,MACnCA,KAAK+1K,gBAAkB/1K,KAAK+1K,gBAAgB7vK,KAAKlG,MACjDA,KAAKg2K,eAAiBh2K,KAAKg2K,eAAe9vK,KAAKlG,MASnDi2K,aACI,OAAOj2K,KAAK+zG,SAASsQ,QAUzB6xD,eAAeC,GACX,OAAQA,EAAQlzH,KAAK,WACrB,ID/EI,iBCgFAjjD,KAAKo2K,iBAAiBD,GACtB,MAEJ,KAAKT,GACD11K,KAAKq2K,mBAAmBF,GACxB,MAEJ,KAAKT,GACD11K,KAAKs2K,oBAAoBH,GACzB,MAEJ,IDvFY,iBCwFRn2K,KAAKu2K,iBAAiBJ,IAa9B91K,MAAMwsG,EAAc,IACZ7sG,KAAK81K,kBAIT91K,KAAK2iG,QAAU3iG,KAAK2iG,QAAQnyF,OAAOq8F,GAEnC7sG,KAAK81K,gBAAkB91K,KAAKw2K,wBAE5Bx2K,KAAK81K,gBAAgB9yD,OAAOnW,IAShC5gF,OACQjsB,KAAK81K,iBACL91K,KAAK81K,gBAAgB/jD,YAGzB/xH,KAAKs2K,sBAUTE,wBAOI,MAWMC,EAAiB,CAGnBttH,WAAW,EACXkmE,OAAQ,CACJ0C,UAAW,QAEfllE,OAAQ7sD,KAAKg2K,eAIbltJ,iBAAkB,IAAM,QAWtB4tJ,EAAe,IACjBvoG,WAAYs2D,IACTzkI,KAAK+zG,SAAS9lC,UAgCf0oG,EAAW,CACb/7E,oBAAqB,OACrB9B,gBAAiB,GACjBtO,aAAc,CAAE5iE,KApBJ2P,IACZ,OAAQA,GACR,KAAKsgE,KAAAA,sBACL,KAAKA,KAAAA,kBACD73F,KAAKm4D,SAASu9G,GAA0Bn+I,MAiB5CqtF,qBAAsB,KAGX,IAEXX,uBAAwB,OACxB1C,2BAA4B,KAAM,GAiBtCvhH,KAAKo7J,KAAO,IAAI1V,GAVO,CACnB7qD,SAAU,IAAM,IASgB,IAOpC76F,KAAKo7J,KAAKroJ,YACNooF,KAAAA,mBACAn7F,KAAK+1K,iBAGT,MAAMxF,EAAiB,IAAIp9C,QACvBpsH,OACAA,EACA/G,KAAK+zG,SAASsQ,QACdoyD,EACA,CACI9nG,oBAAqB3uE,KAAK+zG,SAAS6hE,aACnC7mG,oBAAqB/uE,KAAK+zG,SAAS8hE,cAEvCa,GACA,EACA12K,KAAK+zG,SAASsd,aASlB,OAFAk/C,EAAezqF,WAAW6wF,EAAU32K,KAAKo7J,KA5HtB,IA8HZmV,EAYXp4G,SAAS6wG,EAAW9jC,EAAU,IAC1BllI,KAAK+zG,SAAS1wC,QAAQrjE,KAAK+zG,SAASsQ,QAAS2kD,EAAW9jC,GAY5D6wC,gBAAgBa,GACZ52K,KAAK2iG,QAAQ5/F,KAAK6zK,GAElB52K,KAAK+zG,SAAS8iE,eAAeD,GAWjCZ,eAAehlH,GACXhxD,KAAK+zG,SAAS+iE,cAAc92K,KAAK+zG,SAASsQ,QAASrzD,GAYvDolH,iBAAiBD,GACRn2K,KAAK81K,gBAMV91K,KAAK81K,gBAAgB58C,UAAUi9C,GAL3BppJ,GAAO1V,MAAM,sDAgBrBg/J,mBAAmBF,GACXn2K,KAAK81K,gBACL/oJ,GAAO1V,MAAM,sDAKjBrX,KAAK81K,gBAAkB91K,KAAKw2K,wBAE5Bx2K,KAAK81K,gBAAgB7jD,YACjBkkD,GACA,SACA,IAAMn2K,KAAKm4D,SACPn4D,KAAK+zG,SAASsQ,QACdqxD,GACA,6BAYZY,sBACIt2K,KAAK2iG,QAAQn+F,SAAQsrB,GAASA,EAAMkyD,YACpChiF,KAAK2iG,QAAU,GAEX3iG,KAAK81K,iBACL91K,KAAK81K,gBAAgBl6C,eAGrB57H,KAAKo7J,OACLp7J,KAAKo7J,KAAKznJ,eACNwnF,KAAAA,mBACAn7F,KAAK+1K,iBAGT/1K,KAAKo7J,KAAK9M,WAYlBioB,iBAAiBJ,GACbn2K,KAAK81K,gBAAgBlkD,iBAAiBukD,+cCpY9C,MAAMppJ,IAASmB,EAAAA,EAAAA,gECJT6oJ,GAAuB,qBACvB1wJ,GAAU,IAAIH,MACpB,IAAI8wJ,IAAe,EACfC,GAAM,KAsHV,UACI9wJ,KAtDG9X,eAAoBzE,GACvB,GAAIotK,GACA,MAAM,IAAIvoK,MAAM,oCAGpB,MAAM,YAAE+2E,EAAF,gBAAeC,EAAf,0BAAgC6N,GAA8B1pF,EAEpE,IAAK47E,IAAgBC,GAAmB6N,EACpC,MAAM,IAAI7kF,MAAM,yBAOpB,aAzEJ,SAAqB7E,GACjB,IAAIsX,GAAQ+9D,gBAIZ,OAAO,IAAI34D,SAAQC,IACf6R,KAAAA,WACIxuB,EAAQygK,0BAA4BvwF,IACxB,GACE,OACI/yE,EACCwf,MA0DrB2wJ,CAAYttK,GAElBqtK,GAAM,IAAIx6K,OAAO0oF,UA1CrB,SAAqBv7E,GACjB,OAAO,IAAI0c,SAAQ,CAACC,EAAS1U,KACzB,MAAMslK,EAAQvtK,EAAQ47E,YAChB4xF,EAAYxtK,EAAQ67E,gBACpBp3D,EAASzkB,EAAQ6/J,cAAgB7/J,EAAQwgK,uBAAyBrwD,GAASX,kBAEjF69D,GAAInxF,WAAWqxF,EAAOC,EAAW/oJ,GAAQ,CAAC2H,EAAQj3B,KAC/B,YAAXi3B,GACAihJ,GAAIpwJ,GAAGkwJ,IAAsB,IAAIjvK,KAC7Bue,GAAQuB,KAAKmvJ,MAAyBjvK,MAE1CkvK,IAAe,EACfzwJ,KAEA1U,EAAO,CACHmkB,OAAAA,EACAj3B,QAAAA,MAGT,KAAM,CAAEs4K,oBAAoB,OAyB5BC,CAAY1tK,IAwCnB2tK,QAxBG,WACH,OAAKP,GAIE,IAAI1wJ,SAAQ,CAACC,EAAS1U,KACzBwU,GAAQQ,GAAGkwJ,IAAsB,CAAC/gJ,EAAQjf,KACvB,YAAXif,EACAzP,EAAQxP,GAERlF,EAAO,CACHmkB,OAAAA,EACAjf,QAAAA,OAMZkgK,GAAIO,qBAhBGlxJ,QAAQzU,OAAO,4CCrG9B,MAAMkb,IAASmB,EAAAA,EAAAA,6CAMA,MAAMupJ,GAIjB74K,cACIoB,KAAK03K,UAAW,EAChB13K,KAAK23K,cAAgB,GACrB33K,KAAK43K,gBAAkB,GAQ3BC,eAAepwK,GACNA,EAAO0pB,kBACRpE,GAAOhF,KAAK,mDAGhB/nB,KAAK23K,cAAc50K,KAAK0E,GAU5BpH,QAEI,GAAIL,KAAK03K,SACL,OAAO13K,KAAK83K,UAAUrwK,OAK1B,GAFAzH,KAAK+0J,cAAgBX,MAEhBp0J,KAAK23K,cAAcp4K,OAGpB,OAFAwtB,GAAOhF,KAAK,8DAEL,KAGX/nB,KAAK03K,UAAW,EAEhB13K,KAAK83K,UAAY93K,KAAK+0J,cAAcgjB,+BAEpC,IAAK,MAAMtwK,KAAUzH,KAAK23K,cAAe,CACrC,MAAMK,EAAYh4K,KAAK+0J,cAAc1rE,wBAAwB5hF,GAE7DuwK,EAAUxtH,QAAQxqD,KAAK83K,WAGvB93K,KAAK43K,gBAAgB70K,KAAKi1K,GAG9B,OAAOh4K,KAAK83K,UAAUrwK,OAQ1BstB,QACI/0B,KAAK03K,UAAW,EAChB13K,KAAK23K,cAAgB,GAGrB,IAAK,MAAMK,KAAah4K,KAAK43K,gBACzBI,EAAUlqH,aAGd9tD,KAAK43K,gBAAkB,GAEnB53K,KAAK+0J,gBACL/0J,KAAK+0J,mBAAgBhuJ,ICjDjC,MAAMgmB,GAAS5C,IAAAA,4BAef,SAAS8tJ,GAAkCruK,GACvC,MAAMk2C,EAAa,CACf,gBACIl2C,EAAQs4D,QAAQzsC,SAAS,SAC7B,gBACI7rB,EAAQs4D,QAAQzsC,SAAS,SAC7B,yBACI7rB,EAAQs4D,QAAQzsC,SAAS,YAOjC,OAJIqqB,EAAWo4H,kBACXp4H,EAAWssC,WAAaxiF,EAAQwiF,YAG7BtsC,EAiCX,SAVA,SAAkC3jD,GAC9B,MACkC,iBAAvBM,OAAO07K,YACR75K,OAAO+jB,OAAO,GAAI5lB,OAAO07K,YAAah8K,GACtCA,EAMd,CAAwC,CAEpCwM,QAAS,cAETkgK,gBAJoC,GAapCuP,uBHlGW,MAeXx5K,YAAYgL,EAAU,IAClB,MAAM,gBACFyuK,GAEAzuK,EADGumI,oXAFP,CAGIvmI,EAHJ,qBAUA5J,KAAK+zG,SAAL,IACI9lC,SAAUoqG,GAAmBA,EAAgBnlF,KAAK/gC,WAAWk9D,OAAO4S,cACjEkO,GAQPnwI,KAAK81K,gBAAkB,KAGvB91K,KAAKs4K,cAAgBt4K,KAAKs4K,cAAcpyK,KAAKlG,MAC7CA,KAAKg2K,eAAiBh2K,KAAKg2K,eAAe9vK,KAAKlG,MAC/CA,KAAK+1K,gBAAkB/1K,KAAK+1K,gBAAgB7vK,KAAKlG,MAiBrDk2K,eAAen3K,GACX,MAAMslH,EAAUtlH,EAAQ47C,KAExB,IAAK0pE,EACD,OAMJ,GAAIrkH,KAAK81K,iBACF91K,KAAK81K,gBAAgBG,eAAiB5xD,EAOzC,YANArkH,KAAKs4K,cACDj0D,EACAqxD,GACA,YAMR,MAAM1kH,EAAKhxD,KAAKu4K,oBAAoBx5K,EAAQuV,KAAK08C,IAC3CmlH,EAAUnlH,GAAMA,EAAGtmD,KAAK,UACxBR,EAASisK,GAAWA,EAAQlzH,KAAK,UAEnC/4C,IAAWwrK,KACX11K,KAAK81K,gBAAkB91K,KAAKw2K,sBAAsBnyD,EAAS,CACvDgN,aAAa,EACbwkD,cAAc,KAMlB71K,KAAK81K,iBACL91K,KAAK81K,gBAAgBI,eAAeC,GAKpCjsK,IAAWwrK,IF3GN,gBE4GFxrK,GACAA,IAAWwrK,IACd11K,KAAKw4K,uBAebn4K,MAAMgkH,EAASxX,EAAc,IACzB7sG,KAAK81K,gBAAkB91K,KAAKw2K,sBAAsBnyD,EAAS,CACvDgN,aAAa,EACbwkD,cAAc,IAGlB71K,KAAK81K,gBAAgBz1K,MAAMwsG,GAQ/B5gF,OACQjsB,KAAK81K,iBACL91K,KAAK81K,gBAAgB7pJ,OAGzBjsB,KAAK81K,gBAAkB,KAW3ByC,oBAAoBE,GAChB,IACI,MAAMC,GAAS,IAAIl1H,WAAYC,gBAAgBg1H,EAAK,YAEpD,OAAOzqE,EAAE0qE,GACX,MAAOh2K,GAGL,OAFAqqB,GAAO1V,MAAM,kDAEN,MAefm/J,sBAAsBnyD,EAASz6G,EAAU,IACrC,IAAKy6G,EACD,MAAM,IAAI51G,MAAM,mDAGpB,MAAMsmH,EAAY,IACd9mD,SAAUjuE,KAAK+zG,SAAS9lC,SACxB5K,QAASrjE,KAAKs4K,cACdzB,eAAgB72K,KAAK+1K,gBACrBe,cAAe92K,KAAKg2K,eACpB3xD,QAAAA,GACGz6G,GAGP,OAAO,IAAI+rK,GAAkB5gD,GAiBjCujD,cAAcj0D,EAAS2kD,EAAW9jC,EAAU,IACxCn4G,GAAO1V,MACH,oCAAqCgtG,EAAS2kD,EAAW9jC,GAE7D,MAAMl0E,GAAKxS,EAAAA,GAAAA,KAAI,CACX6b,GAAIgqD,EACJ7kH,KAAM,QAEL4B,EAAE,SAAU,CACT4kD,MAAO,oBACP97C,OAAQ8+J,IAEX5nK,EAAE,WACF0B,EAAEoiI,GACFh/E,KAELlmD,KAAKg2K,eAAe3xD,EAASrzD,GAEzBhxD,KAAK81K,iBACF91K,KAAK81K,gBAAgBG,eAAiB5xD,GACzCrkH,KAAKw4K,uBAebzC,gBAAgBa,GACZ,IAAK52K,KAAK+zG,SAAS8iE,eAIf,OAHA9pJ,GAAO1V,MAAM,gDACbu/J,EAAiB50F,UAKrB,MAAM22F,EAAU/B,EAAiBnlJ,eACjC,IAAIkqE,EAEAg9E,IACAh9E,EAAY37F,KAAK+zG,SAAS6kE,sBACpBh9E,KAAAA,QAAoBA,KAAAA,QAK9B,MAAMg2C,EAAcglC,EAAiB3lJ,oBAC/B4nJ,EAAmBnzB,GAAIozB,kBACzB,CACI,CACIz2G,SACK,SAAQriE,KAAK81K,gBAAgBG,eAClCl6F,UAAW48F,EAAUxmF,GAAkBA,GACvC21B,WAAY,QACZrgH,OAAQmqI,EACR9hH,MAAO8hH,EAAYnuE,iBAAiB,GACpCk4B,UAAAA,KAIZ37F,KAAK+zG,SAAS8iE,eAAegC,EAAiB,IAWlD7C,eAAe3xD,EAASrzD,GACpB,GAAKhxD,KAAK+zG,SAAS+iE,cAInB,IACI,MAAMiC,GACA,IAAIC,eAAgBC,kBAAkBjoH,EAAG/K,UAAY+K,GAE3DhxD,KAAK+zG,SAAS+iE,cAAczyD,EAAS,CAAErzD,GAAI+nH,IAC7C,MAAOr2K,GACLqqB,GAAO1V,MAAM,mDAUrBmhK,uBACIx4K,KAAKisB,OAELjsB,KAAK+zG,SAASmlE,oBACPl5K,KAAK+zG,SAASmlE,uBG3MzBC,UAAW,CACPx3E,4BAA6BtE,GAC7B+7E,UCzHR,CACI/hK,MAAO,CACHgiK,KAAM,OACN98K,MAAO,QACP+8K,oBAAqB,sBACrBC,oBAAqB,uBAEzB/tC,KAAM,CACFguC,KAAM,OACNl6H,OAAQ,UAEZtpB,OAAQ,CACJ+/E,IAAK,MACLD,GAAI,KACJkb,QAAS,YD4GTyoD,WAAYxT,EACZxnD,oBAAqBC,GAEzBl3F,OAAQ,CACJoK,WAAYujE,EACZhjC,WAAYmzE,EACZo0C,UAAW5lB,EACXhkI,MAAOuwE,EACPz/B,aAAc+zG,EACdhkB,kBAAmBQ,EACnB6H,QAASa,GAEb9kG,OAAQ,CACJnjC,WAAYmnE,EACZ5mC,WAAYozE,EACZz1G,MAAO+qD,GAEX8+F,WAAY,CACRh/F,gBAAeA,IAEnBi/F,UAAWzvJ,IAAAA,OACXy2C,aAAci5G,GACd7lF,UAAWf,GAAWe,UACtB7tE,KAAKvc,EAAU,IACXmwG,GAAS5zF,KAAKvc,EAAQuvG,iBACtBlmB,GAAW9sE,KAAKvc,GAGhBukH,GAAAA,KAAkB,CACdhI,oBAAqBv8G,EAAQu8G,sBAK5B1pH,OAAOq8F,kBACRr8F,OAAOq8F,gBAAkB,KAGU,IAAnClvF,EAAQkwK,yBACR/sJ,GAAOhF,KAAK,kCACZ/nB,KAAKg0F,UAAUhS,WAGfp4E,EAAQmwK,4BACRtiJ,KAAAA,WACIz3B,KAAKg6K,wBAAwB9zK,KAAKlG,OAK1C,MAAMi6K,EAASrwK,EAAQi1G,eAEvB,GAAIo7D,GAAU37K,OAAOiG,KAAK01K,GAAQ16K,OAAS,EAAG,CAC1C,MAAM46F,EAAY,GAElB,IAAK,MAAMl3C,KAAQg3H,EACXA,EAAO7qK,eAAe6zC,KACtBk3C,EAAUl3C,GAAQg3H,EAAOh3H,IAIjCk3C,EAAUh2F,GAAK,kBACf8uF,GAAWwD,QAAQxrE,KAAKF,UAAUovE,IAGtC,GAAIn6F,KAAK2I,QAAS,CACd,MAAMwxF,EAAY,CACdh2F,GAAI,oBACJiD,UAAW,iBACXuB,QAAS3I,KAAK2I,SAGlBsqF,GAAWwD,QAAQxrE,KAAKF,UAAUovE,IAGtC,OAAOurD,GAAIv/H,KAAKvc,IAQpBkoI,wBAAuB,IACZ4T,GAAI5T,0BAWfooC,kBAAiB,IACNx0B,GAAIw0B,oBAGf9rJ,YAAYpB,GACR7C,IAAAA,YAAmB6C,IAWvBmB,gBAAgBnB,EAAO7oB,GACnBgmB,IAAAA,gBAAuB6C,EAAO7oB,IASlCg2K,sBAAsBC,GAClBjwJ,IAAAA,mBAA0BiwJ,IAS9BC,yBAAyBD,GACrBjwJ,IAAAA,sBAA6BiwJ,IAUjCE,oBAAoB1wK,GAChBugB,IAAAA,iBAAwBvgB,IAyC5BkvK,kBAAkBlvK,EAAU,GAAI2wK,GAC5B,IAAIC,GAAmB,EAEvB,MAAM,iCAAEC,EAAF,qBAAoCC,GAAyC9wK,EAAhB+wK,oXAAnE,CAAmF/wK,EAAnF,6DAqBA,OApB6B6wK,IAAoCF,GAEpC70B,GAAIzT,2CAItByoC,GACPj+K,OAAO8S,YAAW,KACTirK,GACDX,GAAAA,UAA4BlF,MA/QR,KAyQ5BkF,GAAAA,UACIlF,GACAzzJ,GAAQw9D,WASXjiF,OAAOq8F,kBACRr8F,OAAOq8F,gBAAkB,IAE7Br8F,OAAOq8F,gBAAgB,2BACjBr8F,OAAOi/F,YAAYtsE,MAElBs2H,GAAIxV,+BAA+ByqC,GACrC14G,MAAK+K,IAWF,GAVAwtG,GAAmB,EAEnB/9K,OAAOq8F,gBAAgB,yBACjBr8F,OAAOi/F,YAAYtsE,MAEzB6jE,GAAWiE,cACPvb,GACI,UACAs8F,GAAkC0C,MAErCj1B,GAAI97I,QAAQiqF,mBACb,IAAK,IAAIv0F,EAAI,EAAGA,EAAI0tE,EAAOztE,OAAQD,IAAK,CACpC,MAAMwwB,EAAQk9C,EAAO1tE,GACfs7K,EAAU9qJ,EAAMmB,oBAElBnB,EAAM0nE,YAAcrF,KACpBc,GAAWqB,gBAAgBsmF,EACvB9qJ,EAAMgtE,cAAc52F,KAAK4pB,IAC7BA,EAAMhH,iBACFu3E,IACA,KACIpN,GAAWwC,eAAemlF,OAO9C,MAAMC,EACAn1B,GAAI1T,oCAEV,GAAI6oC,EACA,IAAK,IAAIv7K,EAAI,EAAGA,EAAI0tE,EAAOztE,OAAQD,IACjB0tE,EAAO1tE,GAEf+1I,+BACFwlC,GAMZ,IAAK,MAAM/qJ,KAASk9C,EACZl9C,EAAMtwB,OAAS2yF,IACQ,YAApBriE,EAAM6rE,WACT37F,KAAK86K,0BAA0BhrJ,EAAMA,MAAO,UAIpD,OAAOk9C,KAEVb,OAAM90D,IAGH,GAFAmjK,GAAmB,EAEfnjK,EAAMlV,OAAS04E,GAA8C,CAI7D,MAAMsf,EAAY,CACdh2F,GAAI,8BACJpF,QAASsY,EAAMtY,SAGnBk0F,GAAWwD,QAAQxrE,KAAKF,UAAUovE,IAElClH,GAAWiE,cACPvb,GACI,UACA,CACInkD,OAAQ,0CAEjB,GAAIngB,EAAMlV,OAAS04E,GAA4B,CAElD,MAAMsf,EAAY,CACdh2F,GAAI,2BACJ6xB,OAAQ3e,EAAMujE,IAAI1Y,SAGtB+wB,GAAWwD,QAAQxrE,KAAKF,UAAUovE,IAElC,MAAMr6C,EACAm4H,GAAkCruK,GAExCk2C,EAAWtoB,OAAS,mBACpBsoB,EAAWoiB,QAAU7qD,EAAMujE,IAAI1Y,QAAQj5D,KAAK,KAC5CgqF,GAAWiE,cACPvb,GAAwB,QAAS77B,QAClC,CAEHmzC,GAAWsD,uBAAuBl/E,GAElC,MAAMyoC,EACAm4H,GAAkCruK,GAExCk2C,EAAWtoB,OAASngB,EAAMlV,KAC1B8wF,GAAWiE,cACPvb,GAAwB,QAAS77B,IAMzC,OAHArjD,OAAOq8F,gBAAgB,yBACjBr8F,OAAOi/F,YAAYtsE,MAElB9I,QAAQzU,OAAOwF,OAoBlC0jK,sBAAqB,CAACC,EAAoBhmB,EAAYR,IAC3CF,GAAgBj1J,OAAO27K,EAAoBhmB,EAAYR,GASlEymB,iBAAgB,IACL,IAAIxD,GAQfyD,qBAAoB,INpcb,IAAI50J,SAAQC,IACfm/H,GAAI1jF,kBAAiBE,IACjB,MAAMi5G,EAAej5G,EAAQ57D,QAAO6nI,GAA0B,eAAhBA,EAAOp3F,OAC/CqkI,EAAqB,GAG3B,IAAK,MAAMC,KAAaF,EAAc,CAClC,MAAMG,EAAgB51B,GAAIxV,+BAA+B,CAAEhuE,QAAS,CAAE,SAClE4uE,YAAauqC,EAAUh5G,WAAYJ,MAAK+K,IAIxC,MAAMl9C,EAAQk9C,EAAO,GACfh8C,EAAiBlB,EAAMmB,oBAO7B,OALAgiE,GAAWqB,gBAAgBtjE,EAAgBlB,EAAMgtE,cAAc52F,KAAK4pB,IACpEA,EAAMhH,iBAAiBu3E,IAAsC,KACzDpN,GAAWwC,eAAezkE,MAGvBlB,KAGXsrJ,EAAmBr4K,KAAKu4K,GAG5Bh1J,QAAQ4hF,WAAWkzE,GAAoBn5G,MAAKs5G,IACxC,MAAMC,EAAqBD,EAAaj1K,QAAO3D,GAAkB,cAAbA,EAAEqzB,SAChDylJ,EAAmBF,EAAaj1K,QAAO3D,GAAkB,aAAbA,EAAEqzB,SAG9Cs3G,EAAmBkuC,EAAmBv0K,KAAItE,GAAKA,EAAEkB,QACjD63K,EAAgBD,EAAiBx0K,KAAItE,GAAKA,EAAEkB,QAElD,IAAK,MAAM2zB,KAAUkkJ,EACjB3uJ,GAAO1V,MAAM,8CAA+CmgB,GAIhE,IAAK,MAAM22G,KAAUb,EACjBa,EAAOtnH,GAAGw5E,IAA4C7X,IAK9CA,EAAa,OACbitF,GAAkBnoC,GAClB/mH,EAAQ,CAAE87C,SAAU8rE,EAAO9rE,SACvBs5G,YAAaxtC,EAAOr+G,MAAMsyC,YAM1C7yD,YAAW,KACPkmK,GAAkBnoC,GAClB/mH,EAAQ,CACJ87C,SAAU,GACVs5G,YAAa,OApEX,cM0dtBnsC,wBAII,OAHAziH,GAAOhF,KAAK,yFAGL/nB,KAAK4gE,aAAa4uE,yBAY7BN,wBAAwByC,GAIpB,OAHA5kH,GAAOhF,KAAK,2FAGL/nB,KAAK4gE,aAAasuE,wBAAwByC,IAUrD4jC,gCACI,OAAOv1K,KAAK4gE,aAAa20G,iCAQ7BqG,uBAAsB,IACX3oF,GAAWW,oBACXxL,GAAoBY,wBAS/BhnB,iBAAiBvyD,GACbsd,GAAOhF,KAAK,oFAEZ/nB,KAAK4gE,aAAaoB,iBAAiBvyD,IAWvCuqK,wBAAwBj7K,EAASoP,EAAQ0tK,EAAQC,EAAOzkK,GACpD0V,GAAO1V,MACF,mBAAkBtY,IAClB,WAAUoP,IACV,SAAQ0tK,IACR,WAAUC,IACX,eAAgBzkK,GACpB47E,GAAW8D,kBAAkB1/E,IASjC0kK,gBAAe,SAAErsE,IACbW,GAAAA,kBAA8B,CAAEX,SAAAA,KAUpCorE,0BAA0BhrJ,EAAOksJ,GACzB,gBAAiBlsJ,GACjBA,EAAMmsJ,YAAcD,EAChBlsJ,EAAMmsJ,cAAgBD,GACtBjvJ,GAAOw4B,MAAM,oCAGjBx4B,GAAOw4B,MAAM,yDAIrB22H,YAneoC,GA2epCC,KAAM,CACFC,SADE,KAEFhkJ,WAFE,KAGFlX,QAAOA,QErlBXm7J,yBAA2B,GAG/B,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBx1K,IAAjBy1K,EACH,OAAOA,EAAatgL,QAGrB,IAAIC,EAASkgL,yBAAyBE,GAAY,CACjDp4K,GAAIo4K,EACJE,QAAQ,EACRvgL,QAAS,IAUV,OANAwgL,oBAAoBH,GAAU99K,KAAKtC,EAAOD,QAASC,EAAQA,EAAOD,QAASogL,qBAG3EngL,EAAOsgL,QAAS,EAGTtgL,EAAOD,QCxBfogL,oBAAoBK,KAAO,GCC3BL,oBAAoBh0K,EAAKnM,IACxB,IAAIygL,EAASzgL,GAAUA,EAAOme,WAC7B,IAAOne,EAAiB,QACxB,IAAM,EAEP,OADAmgL,oBAAoBj7K,EAAEu7K,EAAQ,CAAE17K,EAAG07K,IAC5BA,GCLRN,oBAAoBj7K,EAAI,CAACnF,EAAS2gL,KACjC,IAAI,IAAIp4K,KAAOo4K,EACXP,oBAAoBj6K,EAAEw6K,EAAYp4K,KAAS63K,oBAAoBj6K,EAAEnG,EAASuI,IAC5EnG,OAAO2b,eAAe/d,EAASuI,EAAK,CAAEyV,YAAY,EAAMC,IAAK0iK,EAAWp4K,MCJ3E63K,oBAAoBQ,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO/8K,MAAQ,IAAIqI,SAAS,cAAb,GACd,MAAO3F,GACR,GAAsB,iBAAXjG,OAAqB,OAAOA,QALjB,GCAxB6/K,oBAAoBj6K,EAAI,CAAChE,EAAKi+G,IAAUh+G,OAAOC,UAAU6Q,eAAe3Q,KAAKJ,EAAKi+G,GCClFggE,oBAAoBz5K,EAAK3G,IACH,oBAAXke,QAA0BA,OAAOC,aAC1C/b,OAAO2b,eAAe/d,EAASke,OAAOC,YAAa,CAAExW,MAAO,WAE7DvF,OAAO2b,eAAe/d,EAAS,aAAc,CAAE2H,OAAO,KCLvDy4K,oBAAoBU,IAAO7gL,IAC1BA,EAAO8gL,MAAQ,GACV9gL,EAAO2yG,WAAU3yG,EAAO2yG,SAAW,IACjC3yG,GCAR,IAAI+gL,oBAAsBZ,oBAAoB","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/../@jitsi/js-utils/node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/../@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/../async/lib/async.js","webpack://JitsiMeetJS/../base64-js/index.js","webpack://JitsiMeetJS/../bowser/es5.js","webpack://JitsiMeetJS/../current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/../events/events.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/../jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/../lodash.clonedeep/index.js","webpack://JitsiMeetJS/../lodash.debounce/index.js","webpack://JitsiMeetJS/../lodash.isequal/index.js","webpack://JitsiMeetJS/../sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/../sdp-transform/lib/index.js","webpack://JitsiMeetJS/../sdp-transform/lib/parser.js","webpack://JitsiMeetJS/../sdp-transform/lib/writer.js","webpack://JitsiMeetJS/../sdp/sdp.js","webpack://JitsiMeetJS/../strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/../webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/index.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/md5-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/rng-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/sha1-browser.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v1.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v3.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v35.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v4.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/v5.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/../@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/../@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/../@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./node_modules/uuid/wrapper.mjs","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/CodecSelection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/../@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/runtime/node module decorator","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, function() {\nreturn ","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%s trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=extmap-allow-mixed\n      name: 'extmapAllowMixed',\n      reg: /^(extmap-allow-mixed)/\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // RFC7273\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\n      push:'tsRefClocks',\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n      names: ['clksrc', 'clksrcExt'],\n      format: function (o) {\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\n      }\n    },\n    {\n      // RFC7273\n      // a=mediaclk:direct=963214424\n      name:'mediaClk',\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\n      format: function (o) {\n        var str = 'mediaclk:';\n        str += (o.id != null ? 'id=%s %s' : '%v%s');\n        str += (o.mediaClockValue != null ? '=%s' : '');\n        str += (o.rateNumerator != null ? ' rate=%s' : '');\n        str += (o.rateDenominator != null ? '/%s' : '');\n        return str;\n      }\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // a=content:main\n      name: 'content',\n      reg: /^content:(.+)/,\n      format: 'content:%s'\n    },\n    // BFCP https://tools.ietf.org/html/rfc4583\n    {\n      // a=floorctrl:c-s\n      name: 'bfcpFloorCtrl',\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\n      format: 'floorctrl:%s'\n    },\n    {\n      // a=confid:1\n      name: 'bfcpConfId',\n      reg: /^confid:(\\d+)/,\n      format: 'confid:%s'\n    },\n    {\n      // a=userid:1\n      name: 'bfcpUserId',\n      reg: /^userid:(\\d+)/,\n      format: 'userid:%s'\n    },\n    {\n      // a=floorid:1\n      name: 'bfcpFloorId',\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n      names: ['id', 'mStream'],\n      format: 'floorid:%s mstrm:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseParams = parser.parseParams;\nexports.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = new MediaStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio to the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/* global config */\n\nconst Word = require('../word');\n\nconst audioRecorder = require('./../audioRecorder');\nconst TranscriptionService = require('./AbstractTranscriptionService');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/* global module */\n/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nconst BridgeVideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP: 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS: 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE: 'none'\n};\n\nmodule.exports = BridgeVideoType;\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global module */\n/**\n * Enumeration of the codec mime types\n * @type {{H264: string, OPUS: string, VP8: string, VP9: string}}\n */\nconst CodecMimeType = {\n    /**\n     * The h264 codec mime type.\n     */\n    H264: 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS: 'opus',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8: 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9: 'vp9'\n\n};\n\nmodule.exports = CodecMimeType;\n","/* global module */\n/**\n * Enumeration of the media direction types.\n * @type {{INACTIVE: string, RECVONLY: string, SENDONLY: string, SENDRECV: string}}\n */\nconst MediaDirection = {\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY: 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY: 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV: 'sendrecv'\n};\n\nmodule.exports = MediaDirection;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED: 'rtc.permissions_changed',\n\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channnel.\n     */\n    ENDPOINT_STATS_RECEIVED: 'rtc.endpoint_stats_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS: 'xmpp.video_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED: 'xmpp.connection.restart',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED: 'xmpp.participant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED: 'xmpp.av_moderation.approved',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED: 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED: 'xmpp.av_moderation.received',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED: 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED: 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED: 'xmpp.av_moderation.participant.rejected',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nconst getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || [];\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _bytesToUuid.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    const off = buf && offset || 0;\n    if (typeof value === 'string') value = stringToBytes(value);\n    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) {\n      throw TypeError('value must be an array of bytes');\n    }\n\n    if (!Array.isArray(namespace) || namespace.length !== 16) {\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n    } // Per 4.3\n\n\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || (0, _bytesToUuid.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _bytesToUuid = _interopRequireDefault(require(\"./bytesToUuid.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    const start = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _bytesToUuid.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that the client has been forced to restart by jicofo when the\n * conference was migrated from one bridge to another.\n */\nexport const CONFERENCE_RESTARTED = 'conference.restarted';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference, only approved members are allowed to join.\n */\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\n\n/**\n * Indicates that a connection error is due to denied access to the room,\n * occurred after joining a lobby room and access is denied by the room moderators.\n */\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the media connection has failed.\n */\nexport const ICE_FAILED = 'conference.iceFailed';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the conference unique identifier has been set.\n */\nexport const CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n */\nexport const ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * An event(library-private) fired when a new media session is added to the conference.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\n\n/**\n * An event(library-private) fired when the conference switches the currently active media session.\n * @type {string}\n * @private\n */\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\n\n/**\n * Indicates that the conference had changed to members only enabled/disabled.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running in members only mode.\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\n */\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * Indicates that a message from the local user or from the Prosody backend\n * was received on the data channel.\n */\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n\n/**\n * A new user joined the lobby room.\n */\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\n\n/**\n * A user from the lobby room has been update.\n */\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\n\n/**\n * A user left the lobby room.\n */\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\n\n/**\n * The local participant was approved to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_APPROVED = 'conference.av_moderation.approved';\n\n/**\n * The local participant was blocked to be able to unmute.\n * @param {options} event - {\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_REJECTED = 'conference.av_moderation.rejected';\n\n/**\n * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n * or undefined if that participant has left the meeting.\n *\n * @param {options} event - {\n *     {boolean} enabled,\n *     {MediaType} mediaType,\n *     {JitsiParticipant} actor\n * }.\n */\nexport const AV_MODERATION_CHANGED = 'conference.av_moderation.changed';\n\n/**\n * AV Moderation, report for user being approved to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved';\n\n/**\n * AV Moderation, report for user being blocked to unmute.\n * @param {options} event - {\n *     {JitsiParticipant} participant,\n *     {MediaType} mediaType\n * }.\n */\nexport const AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected';\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\n\n/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * Generic error for screensharing failure.\n */\nexport const SCREENSHARING_GENERIC_ERROR\n    = 'gum.screensharing_generic_error';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog.\n */\nexport const SCREENSHARING_USER_CANCELED\n    = 'gum.screensharing_user_canceled';\n\n\n/**\n * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n */\nexport const TIMEOUT = 'gum.timeout';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\n    = 'User canceled screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\n    = 'Unknown error from screensharing';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TIMEOUT]\n    = 'Could not start media source. Timeout occured!';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function(mediaType) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n\n/**\n * An event carrying performance stats.\n */\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers.js';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron(?:\\s|\\/)([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    } else if (typeof window.JitsiMeetElectron !== 'undefined') {\n        return {\n            name: ELECTRON,\n            version: undefined\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { BrowserDetection } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, i.e., it's either Chrome / Chromium or uses it as its engine,\n     * but doesn't identify as Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium.\n     * - Other browsers which use the Chrome engine, but are detected as Chrome, such as Brave and Vivaldi.\n     * - Browsers which are NOT Chrome but use it as their engine, and have custom detection code: Opera, Electron\n     *   and NW.JS.\n     * This excludes\n     * - Chrome on iOS since it uses WKWebView.\n     */\n    isChromiumBased() {\n        return (this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera())\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        const { userAgent, maxTouchPoints, platform } = navigator;\n\n        return Boolean(userAgent.match(/iP(ad|hone|od)/i))\n            || (maxTouchPoints && maxTouchPoints > 2 && /MacIntel/.test(platform));\n    }\n\n    /**\n     * Checks if the current browser is WebKit based. It's either\n     * Safari or uses WebKit as its engine.\n     *\n     * This includes Chrome and Firefox on iOS\n     *\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n        return this._bowser.isEngine('webkit')\n            && typeof navigator.mediaDevices !== 'undefined'\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\n            && typeof window.RTCRtpTransceiver !== 'undefined'\n            // eslint-disable-next-line no-undef\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return (this.isChromiumBased() && this._getChromiumBasedVersion() >= MIN_REQUIRED_CHROME_VERSION)\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1\n\n            // Disable this on Safari because it is reporting 0.000001 as the audio levels for all\n            // remote audio tracks.\n            && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers except React Native do.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports unified plan.\n     *\n     * @returns {boolean}\n     */\n    supportsUnifiedPlan() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection to the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     * @param {String} options.configParams the set of parameters\n     * to enable/disable certain features in the library. See CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            const configParams = { ...options.configParams };\n\n            if (options.applicationName) {\n                configParams.applicationVersion = `${options.applicationName} (${browser.getName()})`;\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {String} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string) {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value) {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage() {\n        return this.average;\n    }\n}\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger(__filename);\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats) {\n        if (browser.supportsReceiverStats()) {\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\n        }\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                if (browser.supportsReceiverStats()) {\n                    const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                    for (const ssrc in audioLevels) {\n                        if (audioLevels.hasOwnProperty(ssrc)) {\n                            // Use a scaling factor of 2.5 to report the same\n                            // audio levels that getStats reports.\n                            const audioLevel = audioLevels[ssrc] * 2.5;\n\n                            this.eventEmitter.emit(\n                                StatisticsEvents.AUDIO_LEVEL,\n                                this.peerconnection,\n                                Number.parseInt(ssrc, 10),\n                                audioLevel,\n                                false /* isLocal */);\n                        }\n                    }\n                } else {\n                    // Interval updates\n                    this.peerconnection.getStats()\n                        .then(report => {\n                            this.currentAudioLevelsReport = typeof report?.result === 'function'\n                                ? report.result()\n                                : report;\n                            this.processAudioLevelReport();\n                            this.baselineAudioLevelsReport = this.currentAudioLevelsReport;\n                        })\n                        .catch(error => this.errorCallback(error));\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    GlobalOnErrorHandler.callErrorHandler(error);\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let audioCodec;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n    let videoCodec;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n                audioCodec = ssrcStats.codec;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n                videoCodec = ssrcStats.codec;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n                if (audioCodec && videoCodec) {\n                    const codecDesc = {\n                        'audio': audioCodec,\n                        'video': videoCodec\n                    };\n\n                    const userCodecs = codecs[participantId] || {};\n\n                    userCodecs[ssrc] = codecDesc;\n                    codecs[participantId] = userCodecs;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'codec': codecs,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            // Get the resolution and framerate for only remote video sources here. For the local video sources,\n            // 'track' stats will be used since they have the updated resolution based on the simulcast streams\n            // currently being sent. Promise based getStats reports three 'outbound-rtp' streams and there will be\n            // more calculations needed to determine what is the highest resolution stream sent by the client if the\n            // 'outbound-rtp' stats are used.\n            if (now.type === 'inbound-rtp') {\n                const resolution = {\n                    height: now.frameHeight,\n                    width: now.frameWidth\n                };\n                const frameRate = now.framesPerSecond;\n\n                if (resolution.height && resolution.width) {\n                    ssrcStats.setResolution(resolution);\n                }\n                ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC,\n                 * so we what to keep just the type after the '/', audio and video\n                 * keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n            }\n\n        // Use track stats for resolution and framerate of the local video source.\n        // RTCVideoHandlerStats - https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats - https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track' && now.kind === MediaType.VIDEO && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getLocalSSRC(localVideoTracks[0]);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            // Get the number of simulcast streams currently enabled from TPC.\n            const numberOfActiveStreams = this.peerconnection.getActiveSimulcastStreams();\n\n            // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n            frameRate = numberOfActiveStreams ? Math.round(frameRate / numberOfActiveStreams) : 0;\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID,\n        siteID: options.siteID,\n        configParams: options.configParams\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {string} configParams - The set of parameters\n * to enable/disable certain features in the library. See CallStats docs for more info.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function(conference) {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this.options.confID,\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous) => {\n            if (conference.lastDominantSpeaker !== dominant && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous);\n\n                if (previous && previous.length) {\n                    const speakerList = previous.slice(0);\n\n                    // Add the dominant speaker to the top of the list (exclude self).\n                    if (conference.myUserId !== dominant) {\n                        speakerList.splice(0, 0, dominant);\n                    }\n\n                    // Trim the list to the top 5 speakers only.\n                    if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                        speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                    }\n                    conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                }\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n\n/**\n * Indicates that the local audio track is not receiving any audio input from\n * the microphone that is currently selected.\n */\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(`LastN endpoints changed leaving=${leavingLastN}, entering=${enteringLastN} at ${now}`);\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the connection status for all the endpoints since it won't get triggered automatically on\n        // the endpoint that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.refreshConnectionStatusForAll();\n        }\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","\nimport { Strophe } from 'strophe.js';\n\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity, isReplacing, isReplaced) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._features = new Set();\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants replaces another participant\n     * from the meeting.\n     */\n    isReplacing() {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced() {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole) {\n        this._role = newRole;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {String} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing) {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced) {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures() {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature) {\n        return this._features.has(feature);\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures) {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType) {\n        this._botType = newBotType;\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n\n/**\n * Indicates that the display name is required over this connection and need to be supplied when\n * joining the room.\n * There are cases like lobby room where display name is required.\n */\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","/* global __filename, RTCRtpScriptTransform */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     */\n    constructor() {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n        // synchronously load the JS.\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n        const workerBlob\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n        const blobUrl = window.URL.createObjectURL(workerBlob);\n\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\n        this._worker.onerror = e => logger.error(e);\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            participantId,\n            key,\n            keyIndex\n        });\n    }\n}\n","import uuid from './dist/index.js';\nexport const v1 = uuid.v1;\nexport const v3 = uuid.v3;\nexport const v4 = uuid.v4;\nexport const v5 = uuid.v5;\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/* global __filename, Olm */\n\nimport base64js from 'base64-js';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nconst logger = getLogger(__filename);\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init'\n};\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._key = undefined;\n        this._keyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._key = key;\n        this._keyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentKey(key) {\n        this._key = key;\n\n        return this._keyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\n\n            this._idKey = idKeys.curve25519;\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._key !== undefined) {\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\n            keyInfo.keyIndex = this._keyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantId = participant.getId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const olmData = this._getParticipantOlmData(participant);\n                    const uuid = uuidv4();\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKey,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return JSON.parse(data);\n    } catch (e) {\n        return {};\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport debounce from 'lodash.debounce';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\n\nimport E2EEContext from './E2EEContext';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger(__filename);\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        this._conferenceJoined = false;\n        this._enabled = false;\n        this._key = undefined;\n        this._enabling = undefined;\n\n        this._e2eeCtx = new E2EEContext();\n        this._olmAdapter = new OlmAdapter(conference);\n\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n\n        // Participant join / leave operations. Used for key advancement / rotation.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents.CONFERENCE_JOINED,\n            () => {\n                this._conferenceJoined = true;\n            });\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.OLM_ID_KEY_READY,\n            this._onOlmIdKeyReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\n            this._onParticipantE2EEChannelReady.bind(this));\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        return !(config.testing && config.testing.disableE2EE)\n            && (browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform()))\n            && OlmAdapter.isSupported();\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        if (enabled === this._enabled) {\n            return;\n        }\n\n        this._enabling && await this._enabling;\n\n        this._enabling = new Deferred();\n\n        this._enabled = enabled;\n\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            for (const participant of this.conference.getParticipants()) {\n                this._e2eeCtx.cleanup(participant.getId());\n            }\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        this.conference._restartMediaSessions();\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference._getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Publushes our own Olmn id key in presence.\n     * @private\n     */\n    _onOlmIdKeyReady(idKey) {\n        logger.debug(`Olm id key ready: ${idKey}`);\n\n        // Publish it in presence.\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this._enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this._e2eeCtx.cleanup(id);\n\n        if (this._enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this._e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this._enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n\n                this._rotateKey();\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this._enabled) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference._getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {ArrayBuffer} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {CryptoKey} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger(__filename);\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\n     */\n    updateNetworkInfo({ isOnline }) {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline() {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    default as NetworkInfo,\n    NETWORK_INFO_EVENT\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\n\nconst logger = getLogger(__filename);\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection) {\n        this._stropheConn = stropheConnection;\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n\n        this._retryDelay = undefined;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay() {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule() {\n        this._cancelResume();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener\n            = NetworkInfo.addEventListener(\n                NETWORK_INFO_EVENT,\n                ({ isOnline }) => {\n                    if (isOnline) {\n                        this._scheduleResume();\n                    } else {\n                        this._cancelResume();\n                    }\n                });\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    _scheduleResume() {\n        if (this._resumeTimeout) {\n\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3);\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    _cancelResume() {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resumeConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        streamManagement.resume();\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel() {\n        this._cancelResume();\n        this._resumeRetryN = 0;\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n}\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection, stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args) => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\n     * included, which means that the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage.bind(this));\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state, mediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()}, \n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType, jid) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (approved) {\n            const event = removed ? XMPPEvents.AV_MODERATION_REJECTED : XMPPEvents.AV_MODERATION_APPROVED;\n\n            this._xmpp.eventEmitter.emit(event, media);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Leaves the lobby room.\n     * @private\n     */\n    _leaveLobbyRoom() {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n                    return;\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed let's join and leave lobby\n                        this.mainRoom.join(invitePassword);\n\n                        this._leaveLobbyRoom();\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.lobbyRoom.clean();\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this._leaveLobbyRoom();\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    approveAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (memberRoomJid) {\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\n            const msgToSend\n                = $msg({ to: this.mainRoom.roomjid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\n                    .c('invite', { to: jid });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${jid}`, e);\n                });\n        } else {\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n        }\n    }\n}\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage) {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId');\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/* global $, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport Settings from '../settings/Settings';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Whether SIP gateway (jigasi) support is enabled. This is set\n    // based on conference properties received in presence.\n    this.sipGatewayEnabled = false;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if jicofo has jigasi support enabled.\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport AVModeration from './AVModeration';\nimport Lobby from './Lobby';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            if (this.options.billingId) {\n                pres.c('billingid').t(this.options.billingId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n\n                    this.restartByTerminateSupported = properties['support-terminate-restart'] === 'true';\n                    logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\n     * @returns {boolean}\n     */\n    supportsRestartByTerminate() {\n        return this.restartByTerminateSupported;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            nick: Strophe.getResourceFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.log('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            // currently there is a bug in prosody where it handles only the first item\n            // that's why we will send iq per member\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    this.xmpp.connection.sendIQ(\n                        $iq({\n                            to: this.roomjid,\n                            type: 'set' })\n                        .c('query', {\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\n                        .c('item', {\n                            'affiliation': 'member',\n                            'jid': m.jid\n                        }).up().up());\n                }\n            });\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setVideoMute(mute) {\n        this.sendVideoInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    setAudioMute(mute) {\n        this.sendAudioInfoPresence(mute);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        const audioMutedTagName = 'audiomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            audioMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendAudioInfoPresence(mute) {\n        // FIXME resend presence on CONNECTED\n        this.addAudioInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        const videoMutedTagName = 'videomuted';\n\n        // we skip adding it as muted is default value\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\n            return false;\n        }\n\n        return this.addOrReplaceInPresence(\n            videoMutedTagName,\n            {\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute) && this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.joined = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this.clean();\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger('FeatureFlags');\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    /**\n     * Configures the module.\n     *\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\n     */\n    init(flags) {\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\n\n        logger.info(`Source name signaling: ${this._sourceNameSignaling}`);\n    }\n\n    /**\n     * Checks if the source name signaling is enabled.\n     *\n     * @returns {boolean}\n     */\n    isSourceNameSignalingEnabled() {\n        return this._sourceNameSignaling;\n    }\n}\n\nexport default new FeatureFlags();\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n        this.obtainStream = this._createObtainStreamMethod();\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        if (browser.isNWJS()) {\n            return (onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.log('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingFrameRate, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    maxWidth: window.screen.width,\n                                    maxHeight: window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => onSuccess({\n                                stream,\n                                sourceId: streamId,\n                                sourceType: streamType\n                            }), onFailure);\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const { desktopSharingFrameRate } = this.options;\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\n        const audio = this._getAudioConstraints();\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\n        video.frameRate && delete video.frameRate.min;\n\n        const constraints = {\n            video,\n            audio,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorName: error && error.name,\n                    errorMsg: error && error.message,\n                    errorStack: error && error.stack\n                };\n\n                logger.error('getDisplayMedia error', constraints, errorDetails);\n\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n\n                    return;\n                }\n\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    },\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n};\n\nexport default ScreenObtainer;\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferCodec(mline, codecName) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\n     * stripped from the sdp when the passed codecName is H264.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const h264Pts = [];\n        let removePts = [];\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (stripH264HighCodec) {\n                    h264Pts.push(rtp.payload);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\n        if (stripH264HighCodec) {\n            removePts = mLine.fmtp\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/* global $ */\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const mediaSSRCs = {};\n\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    // https://xmpp.org/extensions/xep-0338.html\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n        const parts = line.split(' ');\n        const semantics = parts.shift().substr(8);\n\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n            semantics });\n        for (let j = 0; j < parts.length; j++) {\n            elem.c('content', { name: parts[j] }).up();\n        }\n        elem.up();\n    });\n\n    for (let i = 0; i < this.media.length; i++) {\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let ssrc;\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (mline.media === 'audio' || mline.media === 'video') {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (let j = 0; j < mline.fmt.length; j++) {\n                const rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (let k = 0; k < fmtpParameters.length; k++) {\n                        elem.c('parameter', fmtpParameters[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                    // eslint-disable-next-line max-depth\n                    if (msid) {\n                        elem.c('parameter');\n                        elem.attrs({ name: 'msid' });\n                        elem.attrs({ value: msid });\n                        elem.up();\n                    }\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n\n            for (let j = 0; j < extmapLines.length; j++) {\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\n\n                elem.c('rtp-hdrext', {\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                    uri: extmap.uri,\n                    id: extmap.value\n                });\n\n                // eslint-disable-next-line max-depth\n                if (extmap.hasOwnProperty('direction')) {\n\n                    // eslint-disable-next-line max-depth\n                    switch (extmap.direction) {\n                    case MediaDirection.SENDONLY:\n                        elem.attrs({ senders: 'responder' });\n                        break;\n                    case MediaDirection.RECVONLY:\n                        elem.attrs({ senders: 'initiator' });\n                        break;\n                    case MediaDirection.SENDRECV:\n                        elem.attrs({ senders: 'both' });\n                        break;\n                    case MediaDirection.INACTIVE:\n                        elem.attrs({ senders: 'none' });\n                        break;\n                    }\n                }\n\n                // TODO: handle params\n                elem.up();\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, `a=${MediaDirection.SENDRECV}`, this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.SENDONLY}`, this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.RECVONLY}`, this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, `a=${MediaDirection.INACTIVE}`, this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        const fingerprint = SDPUtil.parseFingerprint(line);\n\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(fingerprint.fingerprint);\n        delete fingerprint.fingerprint;\n\n        const setupLine\n            = SDPUtil.findLine(\n                this.media[mediaindex],\n                'a=setup:',\n                this.session);\n\n        if (setupLine) {\n            fingerprint.setup = setupLine.substr(8);\n        }\n        elem.attrs(fingerprint);\n        elem.up(); // end of fingerprint\n    });\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\n\n    if (iceParameters) {\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(iceParameters);\n\n        // XEP-0176\n        const candidateLines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        candidateLines.forEach(line => { // add any a=candidate lines\n            const candidate = SDPUtil.candidateToJingle(line);\n\n            if (this.failICE) {\n                candidate.ip = '1.1.1.1';\n            }\n            const protocol\n                = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase()\n                    : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            }\n            elem.c('candidate', candidate).up();\n        });\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const feedback = SDPUtil.parseRTCPFB(line);\n\n        if (feedback.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: feedback.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: feedback.type\n            });\n            if (feedback.params.length > 0) {\n                elem.attrs({ 'subtype': feedback.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let sdp = '';\n    const feedbackElementTrrInt\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (feedbackElementTrrInt.length) {\n        sdp += 'a=rtcp-fb:* trr-int ';\n        if (feedbackElementTrrInt.attr('value')) {\n            sdp += feedbackElementTrrInt.attr('value');\n        } else {\n            sdp += '0';\n        }\n        sdp += '\\r\\n';\n    }\n\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    feedbackElements.each((_, fb) => {\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n        if (fb.hasAttribute('subtype')) {\n            sdp += ` ${fb.getAttribute('subtype')}`;\n        }\n        sdp += '\\r\\n';\n    });\n\n    return sdp;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                this.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each((_, content) => {\n        const m = this.jingle2media($(content));\n\n        this.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('>description');\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    let sdp = '';\n    const sctp = transport.find(\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    const media = { media: desc.attr('media') };\n\n    media.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        media.port = '0';\n    }\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        media.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        sdp += `m=application ${media.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            sdp += ` ${streamCount}\\r\\n`;\n        } else {\n            sdp += '\\r\\n';\n        }\n    } else {\n        media.fmt\n            = desc\n                .find('>payload-type')\n                .map((_, payloadType) => payloadType.getAttribute('id'))\n                .get();\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n    }\n\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n\n    // XEP-0176 ICE parameters\n    if (transport.length) {\n        if (transport.attr('ufrag')) {\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n        }\n        if (transport.attr('pwd')) {\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n        }\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\n            sdp += ` ${$(fingerprint).text()}`;\n            sdp += '\\r\\n';\n            if (fingerprint.hasAttribute('setup')) {\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n            }\n        });\n    }\n\n    // XEP-0176 ICE candidates\n    transport.find('>candidate')\n        .each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n    switch (content.attr('senders')) {\n    case 'initiator':\n        sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n        break;\n    case 'responder':\n        sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n        break;\n    case 'none':\n        sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n        break;\n    case 'both':\n        sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n        break;\n    }\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('>rtcp-mux').length) {\n        sdp += 'a=rtcp-mux\\r\\n';\n    }\n\n    desc.find('>payload-type').each((_, payloadType) => {\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n        if ($(payloadType).find('>parameter').length) {\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n            sdp\n                += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + parameter.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            sdp += '\\r\\n';\n        }\n\n        // xep-0293\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n    });\n\n    // xep-0293\n    sdp += this.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    desc\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\n        .each((_, hdrExt) => {\n            sdp\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\n                    hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    desc\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, ssrcGroup) => {\n            const semantics = ssrcGroup.getAttribute('semantics');\n            const ssrcs\n                = $(ssrcGroup)\n                    .find('>source')\n                    .map((__, source) => source.getAttribute('ssrc'))\n                    .get();\n\n            if (ssrcs.length) {\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n        });\n\n    // XEP-0339 handle source attributes\n    desc\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each((_, source) => {\n            const ssrc = source.getAttribute('ssrc');\n\n            $(source)\n                .find('>parameter')\n                .each((__, parameter) => {\n                    const name = parameter.getAttribute('name');\n                    let value = parameter.getAttribute('value');\n\n                    value = SDPUtil.filterSpecialChars(value);\n                    sdp += `a=ssrc:${ssrc} ${name}`;\n                    if (value && value.length) {\n                        sdp += `:${value}`;\n                    }\n                    sdp += '\\r\\n';\n                });\n        });\n\n    return sdp;\n};\n","import FeatureFlags from '../flags/FeatureFlags';\n\nimport SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n            const ssrcLines = mediaSsrc.lines;\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\n                ssrc: mediaSsrc.ssrc\n            });\n\n            // Only MSID attribute is sent\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n            if (msid) {\n                modify.c('parameter');\n                modify.attrs({ name: 'msid' });\n                modify.attrs({ value: msid });\n                modify.up();\n            }\n\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","/* global __filename */\n\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        }\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","export default {\n    /**\n     * Event triggered when the remote party signals it's receive video max frame height.\n     */\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\n};\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","/* global __filename, $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport SDP from '../sdp/SDP';\nimport SDPDiffer from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport SignalingLayerImpl from './SignalingLayerImpl';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the video max frame height value out of the 'content-modify' IQ.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Number|null}\n     */\n    static parseMaxFrameHeight(jingleContents) {\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\n\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Local preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.localRecvMaxFrameHeight = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.videoQuality = options.videoQuality;\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.usesUnifiedPlan = this.usesUnifiedPlan\n            = browser.supportsUnifiedPlan()\n                && (browser.isFirefox()\n                    || browser.isWebKitBased()\n                    || (browser.isChromiumBased()\n\n                        // Provide a way to control the behavior for jvb and p2p connections independently.\n                        && this.isP2P\n                        ? options.p2p?.enableUnifiedOnChrome ?? true\n                        : options.enableUnifiedOnChrome ?? true));\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264)\n                    || (options.videoQuality && options.videoQuality.preferredCodec === CodecMimeType.H264);\n\n            // Disable simulcast for low fps screenshare and enable it for high fps screenshare.\n            // testing.capScreenshareBitrate config.js setting has now been deprecated.\n            pcOptions.capScreenshareBitrate = pcOptions.disableSimulcast\n                || !(typeof options.desktopSharingFrameRate?.max === 'number'\n                    && options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n\n            // add the capScreenshareBitrate to the permanent properties so that it's included with every event that we\n            // send to the analytics backend.\n            Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    const usesTerminateForRestart = !this.options.enableIceRestart\n                        && this.room.supportsRestartByTerminate();\n\n                    if (this.isReconnect || usesTerminateForRestart) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.usesUnifiedPlan && this.isInitiator && browser.isChromiumBased()))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (this.usesUnifiedPlan && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`${this} onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n    }\n\n    /**\n     * Remote preference for receive video max frame height.\n     *\n     * @returns {Number|undefined}\n     */\n    getRemoteRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteRecvMaxFrameHeight;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log(`${this} sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log(`${this} sendIceCandidates ${JSON.stringify(candidates)}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ2(\n            sessionInfo, {\n                /*\n                 * This message will be often sent when there are connectivity\n                 * issues, so make it slightly longer than Prosody's default BOSH\n                 * inactivity timeout of 60 seconds.\n                 */\n                timeout: 65\n            })\n            .catch(this.newJingleErrorHandler(sessionInfo));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    getEndpointId(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(`${this} Unable to generate recvonly SSRC - no peerconnection`);\n        }\n    }\n\n    /**\n     * Returns the video codec configured as the preferred codec on the peerconnection.\n     */\n    getConfiguredVideoCodec() {\n        return this.peerconnection.getConfiguredVideoCodec();\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const localTrack of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\n            }\n\n            Promise.all(addTracks)\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\n                .then(() => {\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\n                    // the transformation chain.\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued invite task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} invite error`, error);\n                } else {\n                    logger.debug(`${this} invite executed - OK`);\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info(`${this} setAnswer - succeeded`);\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\n                    // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\n                    // the local endpoint is the offerer and starts muted.\n                    const remoteSdp = this.peerconnection.remoteDescription.sdp;\n                    const remoteDescription = new RTCSessionDescription({\n                        type: 'offer',\n                        sdp: remoteSdp\n                    });\n\n                    this._responderRenegotiate(remoteDescription);\n                }\n            },\n            error => {\n                logger.error(`${this} setAnswer failed: `, error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        const workFunction = finishedCallback => {\n            const addTracks = [];\n\n            for (const track of localTracks) {\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            Promise.all(addTracks)\n                .then(() => this._renegotiate(newRemoteSdp.raw))\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // #1 Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        //\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                        if (this.isP2P\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\n                            this.sendContentModify();\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        logger.debug(`${this} Queued setOfferAnswerCycle task`);\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                    failure(error);\n                } else {\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\n                    success();\n                }\n            });\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation for the\n     * new codec config to take effect.\n     *\n     * @param {CodecMimeType} preferred the preferred codec.\n     * @param {CodecMimeType} disabled the codec that needs to be disabled.\n     */\n    setVideoCodecs(preferred = null, disabled = null) {\n        const current = this.peerconnection.getConfiguredVideoCodec();\n\n        if (this._assertNotEnded() && preferred !== current) {\n            logger.info(`${this} Switching video codec from ${current} to ${preferred}`);\n            this.peerconnection.setVideoCodecs(preferred, disabled);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate().then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        if (this.options.enableForcedReload) {\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\n\n            this.sendTransportAccept(sdp, success, failure);\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\n\n            return;\n        }\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media or to adjust sender's video constraints.\n     * @private\n     */\n    sendContentModify() {\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\n        const senders = this._localVideoActive ? 'both' : 'none';\n\n        let sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders\n                });\n\n        if (typeof maxFrameHeight !== 'undefined') {\n            sessionModify = sessionModify\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                .t(maxFrameHeight);\n        }\n\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote party.\n     *\n     * @param {Number} maxFrameHeight - the new value to set.\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\n\n        this.localRecvMaxFrameHeight = maxFrameHeight;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this.sendContentModify();\n            }\n        } else {\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        const transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        logger.info(`${this} Sending transport-accept`);\n        logger.debug(transportAccept.tree());\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        const transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        logger.info(`${this} Sending 'transport-reject'`);\n        logger.debug(transportReject.tree());\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the maximum bitrates on the local video track. Bitrate values from\n     * videoQuality settings in config.js will be used for configuring the sender.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderMaxBitrates() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setMaxBitRate();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the resolution constraint on the local camera track.\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\n\n            // RN doesn't support RTCRtpSenders yet, aggresive layer suspension on RN is implemented\n            // by changing the media direction in the SDP. This is applicable to jvb sessions only.\n            if (!this.isP2P && browser.isReactNative() && typeof maxFrameHeight !== 'undefined') {\n                const videoActive = maxFrameHeight > 0;\n\n                return this.setMediaTransferActive(true, videoActive);\n            }\n\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the degradation preference on the video sender. This setting determines if\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n     * @returns {Promise<void>} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoDegradationPreference() {\n        if (this._assertNotEnded()) {\n            return this.peerconnection.setSenderVideoDegradationPreference();\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n        const self = this;\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\n                    !(self.usesUnifiedPlan && self.isP2P)\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of the remote tracks and SSRCs associated with a remote endpoint.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {Promise<JitsiRemoteTrack>} Promise that resolves with the tracks that are removed or error if the\n     * operation fails.\n     */\n    removeRemoteStreamsOnLeave(id) {\n        let remoteTracks = [];\n\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.length) {\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\n\n                remoteTracks = this.peerconnection.removeRemoteTracks(id);\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => {\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\n                        finishCallback();\n                    })\n                    .catch(err => finishCallback(err));\n            } else {\n                finishCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                        resolve(remoteTracks);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`${this} Processing ${logPrefix}`);\n\n            const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\n            // TODO - open a chrome bug and update the comments.\n            const remoteDescription = new RTCSessionDescription({\n                type: 'offer',\n                sdp: newRemoteSdp.raw\n            });\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\n                ? this._responderRenegotiate(remoteDescription)\n                : this._renegotiate(newRemoteSdp.raw);\n\n            promise.then(() => {\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                logger.log(`${this} ${logPrefix} - OK`);\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = this.usesUnifiedPlan\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (this.usesUnifiedPlan) {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        // Remove the ssrcs from the m-line in\n                        // 1. Plan-b mode always.\n                        // 2. Unified mode but only for jvb connection. In p2p mode if the ssrc is removed and added\n                        // back to the same m-line, Chrome/Safari do not render the media even if it being received\n                        // and decoded from the remote peer. The webrtc spec is not clear about m-line re-use and\n                        // the browser vendors have implemented this differently. Currently workaround this by changing\n                        // the media direction, that should be enough for the browser to fire the \"removetrack\" event\n                        // on the associated MediaStream.\n                        if (!this.usesUnifiedPlan || (this.usesUnifiedPlan && !this.isP2P)) {\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n                        }\n\n                        // The current direction of the transceiver for p2p will depend on whether a local sources is\n                        // added or not. It will be 'sendrecv' if the local source is present, 'sendonly' otherwise.\n                        if (this.isP2P) {\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\n\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\n                            });\n\n                        // Jvb connections will have direction set to 'sendonly' when the remote ssrc is present.\n                        } else {\n                            // Change the direction to \"inactive\" always for jvb connection.\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                        }\n                    }\n                });\n            } else {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\n            // a new m-line is added for the new remote sources.\n            if (this.isP2P && this.usesUnifiedPlan) {\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\n\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug(`${this} Renegotiate: creating answer`);\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug(`${this} Renegotiate: setting local description`);\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug(`${this} Renegotiate: creating offer`);\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug(`${this} Renegotiate: setting local description`);\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(`${this} Renegotiate: setting remote description`);\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (!this.usesUnifiedPlan) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        });\n                    }\n\n                    return promise.then(() => {\n                        if (newTrack && newTrack.isVideoTrack()) {\n                            logger.debug(`${this} replaceTrack worker: configuring video stream`);\n\n                            // FIXME set all sender parameters in one go?\n                            // Set the degradation preference on the new video sender.\n                            return this.peerconnection.setSenderVideoDegradationPreference()\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\n                                .then(() => this.peerconnection.setMaxBitRate());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(`${this} - some SSRC were added on ${operationName}`, addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(`${this} - some SSRCs were removed on ${operationName}`, removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track)\n            .then(() => {\n                // Apply the video constraints, max bitrates and degradation preference on\n                // the video sender if needed.\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\n                    return this.setSenderMaxBitrates()\n                        .then(() => this.setSenderVideoDegradationPreference())\n                        .then(() => this.setSenderVideoConstraint());\n                }\n            });\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const operationPromise\n                = isMute\n                    ? tpc.removeTrackMute(track)\n                    : tpc.addTrackUnmute(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\n                        this._renegotiate()\n                            .then(() => {\n                                // The results are ignored, as this check failure is not\n                                // enough to fail the whole operation. It will log\n                                // an error inside.\n                                this._verifyNoSSRCChanged(\n                                    operationName, new SDP(oldLocalSDP));\n                                finishedCallback();\n                            });\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`${this} Queued make ${logVideoStr}, ${logAudioStr} task`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify();\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error(`${this} Make ${logVideoStr}, ${logAudioStr} task failed!`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} Make ${logVideoStr}, ${logAudioStr} task done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n        const newMaxFrameHeight\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\n\n        // frame height is optional in our content-modify protocol\n        if (newMaxFrameHeight) {\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\n            this.eventEmitter.emit(\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(`${this} queued \"content-modify\" task(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} \"content-modify\" failed`, error);\n                } else {\n                    logger.debug(`${this} \"content-modify\" task(video senders=\"${newVideoSenders}\") done`);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info(`${this} Sending source-remove`);\n            logger.debug(remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info(`${this} Sending source-add`);\n            logger.debug(add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/* global $, $build, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner, sourceCompactJson) {\n    const node = $build('source', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        ssrc: sourceCompactJson.s,\n        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceCompactJson.n : undefined\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson) {\n    const node = $build('ssrc-group', {\n        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0',\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nfunction _expandSourcesFromJson(iq, jsonMessageXml) {\n    let json;\n\n    try {\n        json = JSON.parse(jsonMessageXml.textContent);\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs = [];\n            const ownerSources = json.sources[owner];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length && ownerSources[0];\n            const videoSsrcGroups = ownerSources?.length > 1 && ownerSources[1];\n            const audioSources = ownerSources?.length > 2 && ownerSources[2];\n            const audioSsrcGroups = ownerSources?.length > 3 && ownerSources[3];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i]));\n                }\n\n                // Log only the first video ssrc per endpoint.\n                ssrcs.push(videoSources[0]?.s);\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                }\n                ssrcs.push(audioSources[0]?.s);\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq, mediaType) {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    description = $(content).find('description');\n\n    if (description.length) {\n        description = description[0];\n    } else {\n        description = $build('description', {\n            xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str) {\n    if (str === 'f') {\n        return 'FID';\n    } else if (str === 's') {\n        return 'SIM';\n    }\n\n    return null;\n}\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = _expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            if (startMuted?.length) {\n                const audioMuted = startMuted.attr(MediaType.AUDIO);\n                const videoMuted = startMuted.attr(MediaType.VIDEO);\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\n                    JSON.parse(JSON.stringify(pcConfig)),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            const height = $(iq).find('jingle>content[name=\"video\"]>max-frame-height');\n\n            logger.debug(`Received ${action} from ${fromJid} with a max-frame-height=${height?.text()}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace': {\n            logger.info('(TIME) Start transport replace:\\t', now);\n            const transport = $(iq).find('jingle>content>transport');\n            const candidates = _parseIceCandidates(transport);\n            const iceUfrag = $(transport).attr('ufrag');\n            const icePwd = $(transport).attr('pwd');\n            const dtlsFingerprint = $(transport).find('>fingerprint')?.text();\n\n            logger.debug(`Received ${action} from ${fromJid} with iceUfrag=${iceUfrag},`\n            + ` icePwd=${icePwd}, DTLS fingerprint=${dtlsFingerprint}, candidates=${candidates.join(', ')}`);\n\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        }\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            v2Err => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1', v2Err);\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    v1Err => {\n                        logger.warn('getting turn credentials failed', v1Err);\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        const iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password')\n                        || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger(__filename);\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo?.shard\n        });\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        // Disable RTX on Firefox 83 and older versions because of\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1668028\n        if (!(this.options.disableRtx || (browser.isFirefox() && browser.isVersionLessThan(94)))) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox because of a known issue where BWE is halved on every renegotiation.\n        if (!browser.isFirefox() && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'conference_duration') {\n                this.conferenceDurationComponentAddress = identity.name;\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n        });\n\n        if (this.avModerationComponentAddress\n            || this.speakerStatsComponentAddress\n            || this.conferenceDurationComponentAddress) {\n            this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n        }\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, options.customDomain)}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress\n            || from === this.avModerationComponentAddress)) {\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration' && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        }\n\n        return true;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.disabledCodec the codec that needs to be disabled.\n     * @param {boolean} options.enforcePreferredCodec whether codec preference has to be\n     * enforced even when an endpoints that doesn't support the preferred codec joins the call.\n     * Falling back to the standard codec will be skipped when this option is true, endpoints\n     * that do not support the preferred codec may not be able to encode/decode video when this happens.\n     * @param {string} options.jvbCodec the codec that is preferred on jvb connection.\n     * @param {string} options.p2pCodec the codec that is preferred on p2p connection.\n     */\n    constructor(conference, options) {\n        this.conference = conference;\n        this.options = options;\n\n        // VP8 cannot be disabled and it will be the default codec when no preference is set.\n        this.disabledCodec = options.disabledCodec === CodecMimeType.VP8\n            ? undefined\n            : this._getCodecMimeType(options.disabledCodec);\n\n        // Check if the codec values passed are valid.\n        const jvbCodec = this._getCodecMimeType(options.jvbCodec);\n        const p2pCodec = this._getCodecMimeType(options.p2pCodec);\n\n        this.jvbPreferredCodec = jvbCodec && this._isCodecSupported(jvbCodec) ? jvbCodec : CodecMimeType.VP8;\n        this.p2pPreferredCodec = p2pCodec && this._isCodecSupported(p2pCodec) ? p2pCodec : CodecMimeType.VP8;\n        logger.debug(`Codec preferences for the conference are JVB: ${this.jvbPreferredCodec},\n            P2P: ${this.p2pPreferredCodec}`);\n\n        // Do not prefer VP9 on Firefox because of the following bug.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\n        if (browser.isFirefox() && this.jvbPreferredCodec === CodecMimeType.VP9) {\n            this.jvbPreferredCodec = CodecMimeType.VP8;\n        }\n\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            () => this._selectPreferredCodec());\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStared(session));\n    }\n\n    /**\n     * Checks if a given string is a valid video codec mime type.\n     *\n     * @param {string} codec the codec string that needs to be validated.\n     * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n     * @private\n     */\n    _getCodecMimeType(codec) {\n        if (typeof codec === 'string') {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks if the given codec is supported by the browser.\n     *\n     * @param {CodecMimeType} preferredCodec codec to be checked.\n     * @returns {boolean} true if the given codec is supported, false otherwise.\n     * @private\n     */\n    _isCodecSupported(preferredCodec) {\n        // Skip the check on FF and RN because they do not support the getCapabilities API.\n        // It is safe to assume both of them support all the codecs supported by Chrome.\n        if (browser.isFirefox() || browser.isReactNative()) {\n            return true;\n        }\n\n        return window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('video').codecs\n            .some(codec => codec.mimeType.toLowerCase() === `video/${preferredCodec}`);\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents._MEDIA_SESSION_STARTED} event. Codecs need to be\n     * configured on the media session that is newly created.\n     *\n     * @param {JingleSessionPC} mediaSession media session that started.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStared(mediaSession) {\n        const preferredCodec = mediaSession.isP2P ? this.p2pPreferredCodec : this.jvbPreferredCodec;\n        const disabledCodec = this.disabledCodec && this._isCodecSupported(this.disabledCodec)\n            ? this.disabledCodec\n            : null;\n\n        this._selectPreferredCodec(mediaSession, preferredCodec, disabledCodec);\n    }\n\n    /**\n     * Sets the codec on the media session based on the preferred codec setting and the supported codecs\n     * published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     * @param {CodecMimeType} preferredCodec preferred codec.\n     * @param {CodecMimeType} disabledCodec codec that needs to be disabled.\n     */\n    _selectPreferredCodec(mediaSession = null, preferredCodec = null, disabledCodec = null) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n        const currentCodec = preferredCodec ? preferredCodec : this.jvbPreferredCodec;\n        let selectedCodec = currentCodec;\n\n        if (session && !session.isP2P && !this.options.enforcePreferredCodec) {\n            const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n\n            for (const remote of remoteParticipants) {\n                const peerMediaInfo = session.signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n                const peerCodec = peerMediaInfo?.codecType;\n\n                // We do not want Firefox to switch to VP9 because of the following bug.\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=1492500.\n                if (peerCodec\n                    && peerCodec !== currentCodec\n                    && !(browser.isFirefox() && peerCodec === CodecMimeType.VP9)) {\n                    selectedCodec = peerCodec;\n                }\n            }\n        }\n        session && session.setVideoCodecs(selectedCodec, disabledCodec);\n    }\n\n    /**\n     * Returns the preferred codec for the conference. The preferred codec for the JVB media session\n     * is the one that gets published in presence and a comparision is made whenever a participant joins\n     * or leaves the call.\n     *\n     * @returns {CodecMimeType} preferred codec.\n     */\n    getPreferredCodec() {\n        return this.jvbPreferredCodec;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        logger.log(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendNewReceiverVideoConstraintsMessage(constraints) {\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'VideoTypeMessage' message via the bridge channel.\n     *\n     * @param {string} videoType 'camera', 'desktop' or 'none'.\n     */\n    sendVideoTypeMessage(videoType) {\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\n        this._send({\n            colibriClass: 'VideoTypeMessage',\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [] } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\n\n                break;\n            }\n            case 'SenderVideoConstraints': {\n                const videoConstraints = obj.videoConstraints;\n\n                if (videoConstraints) {\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport clonedeep from 'lodash.clonedeep';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport VideoType from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            deviceId: options.micDeviceId,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n\n/**\n * Update known devices.\n *\n * @param {Array<Object>} pds - The new devices.\n * @returns {void}\n *\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\n * a row, which can cause async post devicechange processing to collide.\n */\nfunction updateKnownDevices(pds) {\n    if (compareAvailableMediaDevices(pds)) {\n        onMediaDevicesListChanged(pds);\n    }\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info('list of media devices has changed:', availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        if (browser.isReactNative()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream = undefined; // Unused on React Native.\n\n            this.getStreamID = function({ id }) {\n                // The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n        } else {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        }\n\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\n            ? { optional: [\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true }\n            ] }\n            : {};\n\n        screenObtainer.init(options);\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.slice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        () => this.enumerateDevices(emptyFuncton));\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        () => this.enumerateDevices(emptyFuncton),\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(error);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        updateGrantedPermissions(umDevices, undefined);\n                    }\n\n                    // else {\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\n                    // }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia() {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const constraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, constraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia();\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\n        // Safari.\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    arePermissionsGrantedForAvailableDevices() {\n        return availableDevices.some(device => Boolean(device.label));\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        // Get the resolution from the track itself because it cannot be\n        // certain which resolution webrtc has fallen back to using.\n        this.resolution = track.getSettings().height;\n        this.maxEnabledResolution = resolution;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\n            this._constraints = {\n                height: track.getSettings().height,\n                width: track.getSettings().width\n            };\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\n                    {},\n                    streamOptions,\n                    { constraints: { video: this._constraints } }));\n\n            promise = promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference && this.conference.room) {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            promise = this.setEffect();\n        }\n\n        if (this.conference) {\n            promise = promise.then(() => this.conference.removeTrack(this));\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\n\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Check if a new SDP requests an ICE restart.\n * @param {Object} - the parsed new SDP\n * @param {Object} - the parsed previous SDP\n * @returns {Boolean} - Returns true if an ICE restart is requested otherwise false.\n */\nfunction checkForIceRestart(newDesc, oldDesc) {\n    if (!newDesc || !oldDesc || newDesc.media.length === 0 || oldDesc.media.length === 0) {\n        return false;\n    }\n\n    const newMLine = newDesc.media[0];\n    const oldMLine = oldDesc.media[0];\n\n    return newMLine.iceUfrag !== oldMLine.iceUfrag || newMLine.icePwd !== oldMLine.icePwd;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = (media[type].sources || []).concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const iceRestart = checkForIceRestart(session, currentDesc);\n        const newIceUfrag = session.media[0].iceUfrag;\n        const newIcePwd = session.media[0].icePwd;\n        const newFingerprint = session.media[0].fingerprint;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            // If there are no sources advertised for a media type, add the description if this is the first\n            // remote offer, i.e., no current description was passed. Chrome in Unified plan does not produce\n            // recvonly ssrcs unlike Firefox and Safari.\n            if (!mLine.sources) {\n                if (!currentDesc) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n                }\n\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n                const newMline = clonedeep(mLine);\n\n                newMline.mid = currentDesc.media.length.toString();\n                newMline.direction = 'sendonly';\n                addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                currentDesc.media.push(newMline);\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n            if (iceRestart) {\n                mLine.iceUfrag = newIceUfrag;\n                mLine.icePwd = newIcePwd;\n                mLine.fingerprint = newFingerprint;\n            }\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(`No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = MediaDirection.SENDRECV;\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Returns a string that can be set as the MSID attribute for a source.\n     *\n     * @param {string} mediaType - Media type of the source.\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\n     * @param {string} streamId - Id of the MediaStream associated with the source.\n     * @returns {string|null}\n     */\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\n        if (!(mediaType && trackId)) {\n            logger.warn(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\n\n            return null;\n        }\n        const pcId = this.tpc.id;\n\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\n        // and uses the msid for that.\n        if (streamId === '-' || !streamId) {\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\n        }\n\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        ssrcLine.value\n                            = this._generateMsidAttribute(\n                                mediaSection.mLine?.type,\n                                streamAndTrackIDs[1],\n                                streamAndTrackIDs[0]);\n                    } else {\n                        logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\n        if (!this.tpc.usesUnifiedPlan()) {\n            return;\n        }\n\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\n        const mediaDirection = mediaSection.mLine?.direction;\n\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\n        // a=ssrc line with msid attribute for p2p connection.\n        } else {\n            const msidLine = mediaSection.mLine?.msid;\n            const trackId = msidLine && msidLine.split(' ')[1];\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n\n            for (const source of sources) {\n                const msidExists = mediaSection.ssrcs\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                if (!msidExists) {\n                    const generatedMsid = this._generateMsidAttribute(mediaSection.mLine?.type, trackId);\n\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'msid',\n                        value: generatedMsid\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n            this._injectSourceNames(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n            this._injectSourceNames(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    /**\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _injectSourceNames(mediaSection) {\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\n            return;\n        }\n\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\n        const mediaType = mediaSection.mLine?.type;\n\n        if (!mediaType) {\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\n        }\n\n        for (const source of sources) {\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\n\n            if (!nameExists) {\n                const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                mediaSection.ssrcs.push({\n                    id: source,\n                    attribute: 'name',\n                    value: `${this.localEndpointId}-${firstLetterOfMediaType}0`\n                });\n            }\n        }\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport SDPUtil from './SDPUtil';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`${this.logPrefix} no 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(`${this.logPrefix} no SSRC found for the recvonly video stream!`);\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(`${this.logPrefix} sdp-consistency couldn't parse new primary ssrc`);\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n            }\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param videoBitrates - the bitrates to be configured on the video senders for\n     * different resolutions both in unicast and simulcast mode.\n     */\n    constructor(peerconnection, videoBitrates) {\n        this.pc = peerconnection;\n        this.videoBitrates = videoBitrates.VP8 || videoBitrates;\n\n        /**\n         * The startup configuration for the stream encodings that are applicable to\n         * the video stream when a new sender is created on the peerconnection. The initial\n         * config takes into account the differences in browser's simulcast implementation.\n         *\n         * Encoding parameters:\n         * active - determine the on/off state of a particular encoding.\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\n         *  original resolution of the captured video.\n         */\n        this.localStreamEncodingsConfig = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: this.videoBitrates.standard,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n    }\n\n    /**\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\n     *\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\n     * @returns {RTCRtpTransceiver}\n     */\n    _findTransceiver(mediaType, localTrack = null) {\n        let transceiver = null;\n\n        // Check if the local track has been removed from the peerconnection already.\n        const trackRemoved = !localTrack\n            || (localTrack\n                && browser.doesVideoMuteByStreamRemove()\n                && localTrack.isVideoTrack()\n                && localTrack.isMuted());\n\n        if (trackRemoved) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver?.track?.kind === mediaType);\n        } else if (localTrack) {\n            transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.sender?.track?.id === localTrack.getTrackId());\n        }\n\n        return transceiver;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.localStreamEncodingsConfig;\n        }\n\n        return localTrack.isVideoTrack()\n            ? [ {\n                active: true,\n                maxBitrate: this.videoBitrates.high\n            } ]\n            : [ { active: true } ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc)),\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === MediaType.VIDEO);\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === MediaType.VIDEO && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n\n                    // eslint-disable-next-line camelcase\n                    sdp.media[i].simulcast_03 = undefined;\n                }\n            });\n\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transform.write(sdp)\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer in a p2p connection.\n    * @returns {void}\n    */\n    addTrack(localTrack, isInitiator) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: MediaDirection.SENDRECV,\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n        const transceiver = this._findTransceiver(mediaType);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n        logger.debug(`${this.pc} Adding ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(track);\n    }\n\n    /**\n     * Obtains the current local video track's height constraints based on the\n     * initial stream encodings configuration on the sender and the resolution\n     * of the current local track added to the peerconnection.\n     * @param {MediaStreamTrack} localTrack local video track\n     * @returns {Array[number]} an array containing the resolution heights of\n     * simulcast streams configured on the video sender.\n     */\n    getLocalStreamHeightConstraints(localTrack) {\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\n        if (browser.isReactNative()) {\n            return null;\n        }\n\n        const localVideoHeightConstraints = [];\n\n        // Firefox doesn't return the height of the desktop track, assume a min. height of 720.\n        const { height = 720 } = localTrack.getSettings();\n\n        for (const encoding of this.localStreamEncodingsConfig) {\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\n        }\n\n        return localVideoHeightConstraints;\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this._findTransceiver(mediaType, localTrack);\n\n        if (!transceiver) {\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\n        }\n\n        logger.debug(`${this.pc} Removing ${localTrack}`);\n\n        return transceiver.sender.replaceTrack(null);\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n\n            // Ignore cases when the track is replaced while the device is in a muted state,like\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\n            // do not have a mediastream attached. Replace track will be called again when the device is\n            // unmuted and the track will be replaced on the peerconnection then.\n            if (!stream) {\n                this.pc.localTracks.delete(oldTrack.rtcId);\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                return Promise.resolve();\n            }\n\n            const transceiver = this._findTransceiver(mediaType, oldTrack);\n            const track = newTrack.getTrack();\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                });\n        } else if (oldTrack && !newTrack) {\n            return this.removeTrackMute(oldTrack)\n                .then(() => {\n                    const mediaType = oldTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType);\n\n                    // Change the direction on the transceiver to 'recvonly' so that a 'removetrack'\n                    // is fired on the associated media stream on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.RECVONLY;\n                    }\n\n                    // Remove the old track from the list of local tracks.\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                });\n        } else if (newTrack && !oldTrack) {\n            return this.addTrackUnmute(newTrack)\n                .then(() => {\n                    const mediaType = newTrack.getType();\n                    const transceiver = this._findTransceiver(mediaType, newTrack);\n\n                    // Change the direction on the transceiver back to 'sendrecv' so that a 'track'\n                    // event is fired on the remote peer.\n                    if (transceiver) {\n                        transceiver.direction = MediaDirection.SENDRECV;\n                    }\n\n                    // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\n                    // for the newly added track using SDP munging which happens during the renegotiation.\n                    const promise = browser.usesSdpMungingForSimulcast()\n                        ? Promise.resolve()\n                        : this.setEncodings(newTrack);\n\n                    return promise\n                        .then(() => {\n                            // Add the new track to the list of local tracks.\n                            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n                        });\n                });\n        }\n\n        logger.info(`${this.pc} TPCUtils.replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setAudioTransferActive(active) {\n        this.setMediaTransferActive(MediaType.AUDIO, active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     * @returns {Promise<void>} - resolved when done.\n     */\n    setEncodings(track) {\n        const mediaType = track.getType();\n        const transceiver = this._findTransceiver(mediaType, track);\n        const parameters = transceiver?.sender?.getParameters();\n\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n        if (!parameters?.encodings?.length) {\n            return Promise.resolve();\n        }\n        parameters.encodings = this._getStreamEncodings(track);\n\n        return transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {void}\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = this.pc.getLocalTracks(mediaType);\n\n        logger.info(`${this.pc} ${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer.`);\n        transceivers.forEach((transceiver, idx) => {\n            if (active) {\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\n                if (idx === 0 && localTracks.length) {\n                    transceiver.direction = MediaDirection.SENDRECV;\n                } else {\n                    transceiver.direction = MediaDirection.RECVONLY;\n                }\n            } else {\n                transceiver.direction = MediaDirection.INACTIVE;\n            }\n        });\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {void}\n    */\n    setVideoTransferActive(active) {\n        this.setMediaTransferActive(MediaType.VIDEO, active);\n    }\n\n    /**\n     * Ensures that the resolution of the stream encodings are consistent with the values\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\n     * This should prevent us from overriding the default values if the browser returns\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\n     * @returns {void}\n     */\n    updateEncodingsResolution(parameters) {\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\n            return;\n        }\n        const allEqualEncodings\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\n\n        // Implement the workaround only when all the encodings report the same resolution.\n        if (allEqualEncodings(parameters.encodings)) {\n            parameters.encodings.forEach((encoding, idx) => {\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\n            });\n        }\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { Interop } from '@jitsi/sdp-interop';\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\nimport MediaDirection from '../../service/RTC/MediaDirection';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpConsistency from '../sdp/SdpConsistency';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger(__filename);\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\nconst DESKTOP_SHARE_RATE = 500000;\nconst HD_BITRATE = 2500000;\nconst LD_BITRATE = 200000;\nconst SD_BITRATE = 700000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {string} options.disabledCodec the mime type of the code that should not be negotiated on the peerconnection.\n * @param {string} options.preferredCodec the mime type of the codec that needs to be made the preferred codec for the\n * peerconnection.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {boolean} options.usesUnifiedPlan Indicates if the  browser is running in unified plan mode.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCUtils.RTCPeerConnectionType(pcConfig, safeConstraints);\n\n    // The standard video bitrates are used in Unified plan when switching\n    // between camera/desktop tracks on the same sender.\n    const standardVideoBitrates = {\n        low: LD_BITRATE,\n        standard: SD_BITRATE,\n        high: HD_BITRATE\n    };\n\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\n        ? this.options.videoQuality.maxBitratesVideo\n        : standardVideoBitrates;\n\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if simulcast is turned off and a cap of 500 Kbps is applied on screensharing.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n    * Flag used to indicate if the browser is running in unified  plan mode.\n    */\n    this._usesUnifiedPlan = options.usesUnifiedPlan;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && this._usesUnifiedPlan;\n    this._usesTransceiverCodecPreferences\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: this._usesUnifiedPlan\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraint applied on the video sender.\n     */\n    this.senderVideoMaxHeight = null;\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use track events when browser is running in unified plan mode and stream events in plan-b mode.\n    if (this._usesUnifiedPlan) {\n        this.onTrack = evt => {\n            const stream = evt.streams[0];\n\n            this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n            stream.addEventListener('removetrack', e => {\n                this._remoteTrackRemoved(stream, e.track);\n            });\n        };\n        this.peerconnection.addEventListener('track', this.onTrack);\n    } else {\n        this.peerconnection.onaddstream = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream = event => this._remoteStreamRemoved(event.stream);\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n\n    if (this._usesUnifiedPlan) {\n        return isAddOperation\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\n\n    if (mediaTransferActive) {\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n    }\n\n    return MediaDirection.INACTIVE;\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video track.\n *\n * @returns {JitsiLocalTrack|undefined} - local video track.\n */\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\n    return this.getLocalTracks(MediaType.VIDEO)[0];\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Array<string>} The sdp lines that have the ssrc information.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = [];\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n    const sdp = new SDP(this.remoteDescription.sdp);\n\n    primarySsrcs.forEach((ssrc, idx) => {\n        for (const media of sdp.media) {\n            let lines = '';\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n            if (ssrcLines.length) {\n                if (!removeSsrcInfo[idx]) {\n                    removeSsrcInfo[idx] = '';\n                }\n\n                // Check if there are any FID groups present for the primary ssrc.\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\n\n                if (fidLines.length) {\n                    const secondarySsrc = fidLines[0].split(' ')[2];\n\n                    lines += `${fidLines[0]}\\r\\n`;\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\n                }\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                removeSsrcInfo[idx] += lines;\n            }\n        }\n    });\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function() {\n    const currentCodec = this.getConfiguredVideoCodec();\n\n    return this.videoBitrates[currentCodec.toUpperCase()] || this.videoBitrates;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream added' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} adding remote track for stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = this._usesUnifiedPlan\n        ? new SDP(this.peerconnection.remoteDescription.sdp)\n        : new SDP(this.remoteDescription.sdp);\n    let mediaLines;\n\n    // In unified plan mode, find the matching mline using 'mid' if its availble, otherwise use the\n    // 'msid' attribute of the stream.\n    if (this._usesUnifiedPlan) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No media lines found in remote SDP for remote stream[id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`));\n\n        // Abort\n        return;\n    }\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},type=${mediaType}]`);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\n            + 'deleting the existing track');\n\n        // The exisiting track needs to be removed here. We can get here when Jicofo reverses the order of source-add\n        // and source-remove messages. Ideally, when a remote endpoint changes source, like switching devices, it sends\n        // a source-remove (for old ssrc) followed by a source-add (for new ssrc) and Jicofo then should forward these\n        // two messages to all the other endpoints in the conference in the same order. However, sometimes, these\n        // messages arrive at the client in the reverse order resulting in two remote tracks (of same media type) being\n        // created and in case of video, a black strip (that of the first track which has ended) appears over the live\n        // track obscuring it. Removing the existing track when that happens will fix this issue.\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(`Ignored remote 'stream removed' event for stream[id=${id}]`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\n\n        return;\n    }\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(`${this} Removed track not found for stream[id=${streamId},trackId=${trackId}]`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n    logger.debug(`${this} removed remote tracks[endpoint=${owner},count=${removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * Returns a map with keys msid/mediaType and <tt>TrackSSRCInfo</tt> values.\n * @param {RTCSessionDescription} desc the local description.\n * @return {Map<string,TrackSSRCInfo>}\n */\nTraceablePeerConnection.prototype._extractSSRCMap = function(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid) or mediaType (unfied-plan)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    let media = session.media;\n\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\n    if (this._usesUnifiedPlan) {\n        media = [];\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n            const mLine = session.media.find(m => m.type === mediaType);\n\n            mLine && media.push(mLine);\n        });\n    }\n\n    for (const mLine of media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n\n        let ssrcs = mLine.ssrcs;\n\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\n        ssrcs = this._usesUnifiedPlan\n            ? ssrcs.filter(s => s.attribute === 'cname')\n            : ssrcs.filter(s => s.attribute === 'msid');\n\n        for (const ssrc of ssrcs) {\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\n            const key = this._usesUnifiedPlan ? mLine.type : ssrc.value;\n            const ssrcNumber = ssrc.id;\n            let ssrcInfo = ssrcMap.get(key);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid: key\n                };\n                ssrcMap.set(key, ssrcInfo);\n            }\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n};\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `${MediaDirection.RECVONLY}-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== MediaDirection.SENDRECV) {\n        if (options.startSilent) {\n            audioMedia.direction = MediaDirection.INACTIVE;\n        } else {\n            audioMedia.direction = MediaDirection.SENDRECV;\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia && videoMedia.direction !== MediaDirection.SENDRECV) {\n        videoMedia.direction = MediaDirection.SENDRECV;\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // If the browser is running in unified plan mode and this is a jvb connection,\n        // transform the SDP to Plan B first.\n        if (this._usesUnifiedPlan && !this.isP2P) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else if (!this._usesUnifiedPlan) {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this._usesUnifiedPlan) {\n            if (this.isP2P) {\n                // Adjust the media direction for p2p based on whether a local source has been added.\n                desc = this._adjustRemoteMediaDirection(desc);\n            } else {\n                // If this is a jvb connection, transform the SDP to Plan B first.\n                desc = this.interop.toPlanB(desc);\n                this.trace('getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n            }\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the\n * peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const track = this.getLocalVideoTrack();\n\n    return track && track.videoType === VideoType.DESKTOP;\n};\n\n/**\n * Munges the order of the codecs in the SDP passed based on the preference\n * set through config.js settings. All instances of the specified codec are\n * moved up to the top of the list when it is preferred. The specified codec\n * is deleted from the list if the configuration specifies that the codec be\n * disabled.\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\n    if (!this.codecPreference) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n\n    // Only the m-line that defines the source the browser will be sending should need to change.\n    // This is typically the first m-line with the matching media type.\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\n\n    if (!mLine) {\n        return description;\n    }\n\n    if (this.codecPreference.enable) {\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\n\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\n        // High profile codecs give better quality at the expense of higher load which\n        // we do not want on mobile clients.\n        // Jicofo offers only the baseline code for the jvb connection.\n        // TODO - add check for mobile browsers once js-utils provides that check.\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\n        }\n\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\n        // as soon as the browser switches to VP9.\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\n            const bitrates = this.videoBitrates.VP9 || this.videoBitrates;\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\n\n            // Use only the HD bitrate for now as there is no API available yet for configuring\n            // the bitrates on the individual SVC layers.\n            mLine.bandwidth = [ {\n                type: 'AS',\n                limit\n            } ];\n        } else {\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n            // This is needed on react native clients as react-native-webrtc returns the\n            // SDP that the application passed instead of returning the SDP off the native side.\n            // This line automatically gets cleared on web on every renegotiation.\n            mLine.bandwidth = undefined;\n        }\n    } else {\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Checks if given track belongs to this peerconnection instance.\n *\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.containsTrack = function(track) {\n    if (track.isLocal()) {\n        return this.localTracks.has(track.rtcId);\n    }\n\n    const participantId = track.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`${this} adding ${track}`);\n\n    if (this.localTracks.has(rtcId)) {\n\n        return Promise.reject(new Error(`${track} is already in ${this}`));\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    if (this._usesUnifiedPlan) {\n        try {\n            this.tpcUtils.addTrack(track, isInitiator);\n        } catch (error) {\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\n\n            return Promise.reject(error);\n        }\n    } else {\n        // Use addStream API for the plan-b case.\n        const webrtcStream = track.getOriginalStream();\n\n        if (webrtcStream) {\n            this._addStream(webrtcStream);\n\n        // It's not ok for a track to not have a WebRTC stream if:\n        } else if (!browser.doesVideoMuteByStreamRemove()\n                    || track.isAudioTrack()\n                    || (track.isVideoTrack() && !track.isMuted())) {\n            return Promise.reject(new Error(`${this} no WebRTC stream for track=${track}`));\n        }\n\n        // Muted video tracks do not have WebRTC stream\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n            const simGroup\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n            if (simGroup) {\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\n            }\n            const fidGroups\n                = ssrcInfo.groups.filter(\n                    groupInfo => groupInfo.semantics === 'FID');\n\n            if (fidGroups) {\n                const rtxSsrcMapping = new Map();\n\n                fidGroups.forEach(fidGroup => {\n                    const primarySsrc = fidGroup.ssrcs[0];\n                    const rtxSsrc = fidGroup.ssrcs[1];\n\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n                });\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n            }\n        }\n    }\n    let promiseChain = Promise.resolve();\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox()) {\n        promiseChain = promiseChain.then(() => this.tpcUtils.setEncodings(track));\n    }\n\n    return promiseChain;\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    logger.info(`${this} Adding track=${track} as unmute`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} as unmute - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n\n    this._addStream(webRtcStream);\n\n    return Promise.resolve(true);\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    this.peerconnection.removeStream(mediaStream);\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codec that is configured on the client as the preferred video codec.\n * This takes into account the current order of codecs in the local description sdp.\n *\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\n * video in the local SDP.\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\n    const sdp = this.peerconnection.localDescription?.sdp;\n    const defaultCodec = CodecMimeType.VP8;\n\n    if (!sdp) {\n        return defaultCodec;\n    }\n    const parsedSdp = transform.parse(sdp);\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n    const codec = mLine.rtp[0].codec;\n\n    if (codec) {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSimulcastOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens.\n *\n * @param {CodecMimeType} preferredCodec the preferred codec.\n * @param {CodecMimeType} disabledCodec the codec that needs to be disabled.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(preferredCodec = null, disabledCodec = null) {\n    // If both enable and disable are set, disable settings will prevail.\n    const enable = disabledCodec === null;\n    const mimeType = disabledCodec ? disabledCodec : preferredCodec;\n\n    if (this.codecPreference && (preferredCodec || disabledCodec)) {\n        this.codecPreference.enable = enable;\n        this.codecPreference.mimeType = mimeType;\n    } else if (preferredCodec || disabledCodec) {\n        this.codecPreference = {\n            enable,\n            mediaType: MediaType.VIDEO,\n            mimeType\n        };\n    } else {\n        logger.warn(`${this} Invalid codec settings[preferred=${preferredCodec},disabled=${disabledCodec}],\n            atleast one value is needed`);\n    }\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (this._usesUnifiedPlan) {\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\n\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\n\n            // Renegotiate when SDP is used for simulcast munging or when in p2p mode.\n            .then(() => (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()) || this.isP2P);\n    }\n\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\n\n    let promiseChain = Promise.resolve();\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        promiseChain = this.addTrack(newTrack);\n    }\n\n    return promiseChain.then(() => true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\n * state has changed and renegotiation is required, false if no renegotiation is needed or\n * Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    if (this._usesUnifiedPlan) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n\n    if (webRtcStream) {\n        logger.info(`${this} Removing track=${localTrack} as mute`);\n        this._removeStream(webRtcStream);\n\n        return Promise.resolve(true);\n    }\n\n    logger.error(`${this} removeStreamMute - no WebRTC stream for track=${localTrack}`);\n\n    return Promise.reject('Stream not found');\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {RTCSessionDescription} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO);\n\n    if (audioMedia) {\n        const desiredAudioDirection = this.getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(`${this} Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"audio\" media found in the local description`);\n    }\n\n    const videoMedia = transformer.selectMedia(MediaType.VIDEO);\n\n    if (videoMedia) {\n        const desiredVideoDirection = this.getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(`${this} Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn(`${this} No \"video\" media found in the local description`);\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\n\n        media.direction = hasLocalSource && hasRemoteSource\n            ? MediaDirection.SENDRECV\n            : hasLocalSource\n                ? MediaDirection.RECVONLY\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\n    });\n\n    return new RTCSessionDescription({\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    });\n};\n\n/**\n * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based\n * on values set through config.js, if present.\n *\n * @param {RTCSessionDescription} description that needs to be munged.\n * @returns {RTCSessionDescription} the munged description.\n */\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\n    const { audioQuality } = this.options;\n\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n        return description;\n    }\n\n    const parsedSdp = transform.parse(description.sdp);\n    const mLines = parsedSdp.media;\n\n    for (const mLine of mLines) {\n        if (mLine.type === 'audio') {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n    }\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    localSdp = this._mungeOpus(localSdp);\n\n    if (!this._usesUnifiedPlan) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else if (!this.isP2P) {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js if we are using SDP munging.\n    if (!this._usesTransceiverCodecPreferences) {\n        localSdp = this._mungeCodecOrder(localSdp);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setAudioTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sets the degradation preference on the video sender. This setting determines if\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\n * to 'maintain-resolution' when a desktop track is being shared instead.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\n    if (!this.peerconnection.getSenders) {\n        logger.debug(`${this} Browser does not support RTCRtpSender`);\n\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n    const preference = this._isSharingLowFpsScreen()\n\n        // Prefer resolution for low fps share.\n        ? DEGRADATION_PREFERENCE_DESKTOP\n\n        // Prefer frame-rate for high fps share and camera.\n        : DEGRADATION_PREFERENCE_CAMERA;\n\n    logger.info(`${this} Setting a degradation preference [preference=${preference},track=${localVideoTrack}`);\n    parameters.degradationPreference = preference;\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n * @returns {Promise<void>}\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\n    // For VP9, max bitrate is configured by setting b=AS value in SDP. Browsers do\n    // not yet support setting max bitrates for individual VP9 SVC layers.\n    if (this.getConfiguredVideoCodec() === CodecMimeType.VP9 || !window.RTCRtpSender) {\n        return Promise.resolve();\n    }\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack) {\n        return Promise.resolve();\n    }\n\n    const videoType = localVideoTrack.getVideoType();\n\n    // Apply the maxbitrates on the video track when one of the conditions is met.\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\n    // 2. Track is a low fps desktop track.\n    // 3. The client is running in Unified plan mode (the same sender is re-used for different types\n    // of tracks so bitrates have to be configured whenever the local tracks are replaced).\n    if (!(this.options?.videoQuality?.maxBitratesVideo || this._isSharingLowFpsScreen() || this._usesUnifiedPlan)) {\n        return Promise.resolve();\n    }\n\n    const presenterEnabled = localVideoTrack._originalStream\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                const bitrate = this._isSharingLowFpsScreen()\n\n                    // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on.\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\n                    // if capScreenshareBitrate option is enabled then simulcast is turned off for the stream.\n                    ? presenterEnabled ? HD_BITRATE : DESKTOP_SHARE_RATE\n\n                    // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome, because if simulcast is\n                    // enabled for screen and maxBitrates are set then Chrome will not send the desktop stream.\n                    : videoType === VideoType.DESKTOP && browser.isChromiumBased()\n                        ? undefined\n                        : this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\n\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\n                parameters.encodings[encoding].maxBitrate = bitrate;\n            }\n        }\n    } else {\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\n        let bitrate = this.getTargetVideoBitrates()?.high;\n\n        if (videoType === VideoType.CAMERA) {\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\n            const scaleFactor = this.senderVideoMaxHeight\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\n                : 1;\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\n\n            if (encoding) {\n                logger.info(`${this} Setting max bitrate=${encoding.maxBitrate} bps on track=${localVideoTrack}`);\n                bitrate = encoding.maxBitrate;\n            }\n        }\n        parameters.encodings[0].maxBitrate = bitrate;\n    }\n    this.tpcUtils.updateEncodingsResolution(parameters);\n\n    return videoSender.setParameters(parameters);\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    /* eslint-disable no-param-reassign */\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\n    description = this._mungeOpus(description);\n\n    /* eslint-enable no-param-reassign */\n\n    if (!this._usesUnifiedPlan) {\n        // TODO the focus should squeze or explode the remote simulcast\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\n            this.trace(\n                'setRemoteDescription::postTransform (simulcast)',\n                dumpSDP(description));\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else if (!this.isP2P) {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    }\n\n    // Munge the order of the codecs based on the preferences set through config.js.\n    // eslint-disable-next-line no-param-reassign\n    description = this._mungeCodecOrder(description);\n\n    if (this._usesUnifiedPlan) {\n        // eslint-disable-next-line no-param-reassign\n        description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on\n * the user preferred value. If simulcast is enabled on the peerconection, all the\n * simulcast encodings that have a resolution height lower or equal to the value\n * provided will remain active. For the non-simulcast case, video constraint is\n * applied on the track.\n * @param {number} frameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\n    if (frameHeight < 0) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n\n    // XXX: This is not yet supported on mobile.\n    if (browser.isReactNative()) {\n        return Promise.resolve();\n    }\n\n    // Need to explicitly check for null as 0 is falsy, but a valid value\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\n\n    this.senderVideoMaxHeight = newHeight;\n\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\n    // lib-jitsi-meet.\n    if (newHeight === null) {\n        return Promise.resolve();\n    }\n\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\n\n    const localVideoTrack = this.getLocalVideoTrack();\n\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    if (this.isSimulcastOn()) {\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\n        this.encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\n            .map(height => height <= newHeight);\n\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\n\n        if (newHeight > 0 && ldStreamIndex !== -1) {\n            this.encodingsEnabledState[ldStreamIndex] = true;\n        }\n\n        // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in progress\n        // There is no way to enable or disable simulcast during the call since we are re-using the same sender.\n        // Safari is an exception here since it does not send the desktop stream at all if only the high resolution\n        // stream is enabled.\n        if (this._isSharingLowFpsScreen() && this._usesUnifiedPlan && !browser.isWebKitBased()) {\n            const highResolutionEncoding = browser.isFirefox() ? 0 : this.encodingsEnabledState.length - 1;\n\n            this.encodingsEnabledState = this.encodingsEnabledState\n                .map((encoding, idx) => idx === highResolutionEncoding);\n        }\n\n        for (const encoding in parameters.encodings) {\n            if (parameters.encodings.hasOwnProperty(encoding)) {\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\n            }\n        }\n        this.tpcUtils.updateEncodingsResolution(parameters);\n    } else if (newHeight > 0) {\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\n        parameters.encodings[0].scaleResolutionDownBy\n            = localVideoTrack.videoType === VideoType.DESKTOP || localVideoTrack.resolution <= newHeight\n                ? 1\n                : Math.floor(localVideoTrack.resolution / newHeight);\n        parameters.encodings[0].active = true;\n    } else {\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\n        parameters.encodings[0].active = false;\n    }\n\n    logger.info(`${this} setting max height=${newHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = newHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\n        // the send resolution changes.\n        if (this.isP2P || !this.isSimulcastOn()) {\n            return this.setMaxBitRate();\n        }\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (this._usesUnifiedPlan) {\n        this.tpcUtils.setVideoTransferActive(active);\n\n        // false means no renegotiation up the chain which is not needed in the Unified mode\n        return false;\n    }\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC=${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info(`${this} Clearing primary video SSRC!`);\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this._usesUnifiedPlan && this.peerconnection.removeEventListener('track', this.onTrack);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} RTC._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (!this._usesUnifiedPlan) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            const localVideoTrack = this.getLocalVideoTrack();\n\n            // Configure simulcast for camera tracks and for desktop tracks that need simulcast.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (localVideoTrack?.getVideoType() === VideoType.CAMERA\n                || this._usesUnifiedPlan\n                || !this._isSharingLowFpsScreen())) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            const ssrcMap = this._extractSSRCMap(resultSdp);\n\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (this._usesTransceiverCodecPreferences) {\n        const transceiver = this.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\n\n        if (transceiver) {\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\n            const mimeType = this.codecPreference?.mimeType;\n            const enable = this.codecPreference?.enable;\n\n            if (capabilities && mimeType && enable) {\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\n                });\n            } else if (capabilities && mimeType) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\n            }\n\n            try {\n                transceiver.setCodecPreferences(capabilities);\n            } catch (err) {\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const sourceIdentifier = this._usesUnifiedPlan ? track.getType() : track.storedMSID;\n\n        if (ssrcMap.has(sourceIdentifier)) {\n            const newSSRC = ssrcMap.get(sourceIdentifier);\n\n            if (!newSSRC) {\n                logger.error(`${this} No SSRC found for stream=${sourceIdentifier}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\n                this.localSSRCs.set(track.rtcId, newSSRC);\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`${this} No SSRCs found in the local SDP for track=${track}, stream=${sourceIdentifier}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Returns the number of simulcast streams that are currently enabled on the peerconnection.\n *\n * @returns {number} The number of simulcast streams currently enabled or 1 when simulcast is disabled.\n */\nTraceablePeerConnection.prototype.getActiveSimulcastStreams = function() {\n    let activeStreams = 1;\n\n    if (this.isSimulcastOn() && this.encodingsEnabledState) {\n        activeStreams = this.encodingsEnabledState.filter(stream => Boolean(stream))?.length;\n    } else if (this.isSimulcastOn()) {\n        activeStreams = SIM_LAYER_RIDS.length;\n    }\n\n    return activeStreams;\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`${this} Overwriting local SSRCs for track id=${rtcId}`);\n    }\n\n    // Configure simulcast for camera tracks and desktop tracks that need simulcast.\n    if (this.isSimulcastOn()\n        && (track.getVideoType() === VideoType.CAMERA || !this._isSharingLowFpsScreen())) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\n/**\n * Returns if the peer connection uses Unified plan implementation.\n *\n * @returns {boolean} True if the pc uses Unified plan, false otherwise.\n */\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\n    return this._usesUnifiedPlan;\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport BridgeVideoType from '../../service/RTC/BridgeVideoType';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = null;\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // The default video type assumed by the bridge.\n        this._videoType = BridgeVideoType.NONE;\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (this._selectedEndpoints) {\n                try {\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\n                } catch (error) {\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\n                }\n            }\n            if (typeof this._maxFrameHeight !== 'undefined') {\n                try {\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n            try {\n                this._channel.sendVideoTypeMessage(this._videoType);\n            } catch (error) {\n                logError(error, 'VideoTypeMessage', this._videoType);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n            this._channelOpenListener = null;\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setNewReceiverVideoConstraints(constraints) {\n        this._receiverVideoConstraints = constraints;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets the video type and availability for the local video source.\n     *\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\n     * 'none' for when local video source is muted or removed from the peerconnection.\n     * @returns {void}\n     */\n    setVideoType(videoType) {\n        if (this._videoType !== videoType) {\n            this._videoType = videoType;\n\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendVideoTypeMessage(videoType);\n            }\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the RTX.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        const supportsSdpSemantics = browser.isReactNative()\n            || (browser.isChromiumBased() && !options.usesUnifiedPlan);\n\n        if (supportsSdpSemantics) {\n            logger.debug('WebRTC application is running in plan-b mode');\n            pcConfig.sdpSemantics = 'plan-b';\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns whether available devices have permissions granted\n     * @returns {Boolean}\n     */\n    static arePermissionsGrantedForAvailableDevices() {\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport browser from '../browser';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst VideoType = require('../../service/RTC/VideoType');\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        target: 'high',\n        targetRN: 4000000 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        target: 'high',\n        targetRN: 2500000 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        target: 'standard',\n        targetRN: 900000 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        target: 'standard',\n        targetRN: 500000 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        target: 'low',\n        targetRN: 350000 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        target: 'low',\n        targetRN: 150000 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param videoQualitySettings {Object} the bitrate and codec settings for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, videoQualitySettings) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n    if (simulcastFormat && simulcast && videoQualitySettings.codec === CodecMimeType.VP8) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = simulcastFormat.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            simulcastFormat = kSimulcastFormats.find(f => f.height === targetHeight);\n            if (simulcastFormat) {\n                target += browser.isReactNative()\n                    ? simulcastFormat.targetRN\n                    : videoQualitySettings[simulcastFormat.target];\n            } else {\n                break;\n            }\n        }\n    } else if (simulcastFormat) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = browser.isReactNative()\n            ? simulcastFormat.targetRN\n            : videoQualitySettings[simulcastFormat.target];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        // Listen to local statistics events originating from the RTC module and update the _localStats field.\n        conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                const isSimulcastOn = activeTPC.isSimulcastOn();\n                const videoQualitySettings = activeTPC.getTargetVideoBitrates();\n\n                // Add the codec info as well.\n                videoQualitySettings.codec = activeTPC.getConfiguredVideoCodec();\n\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(isSimulcastOn, resolution, millisSinceStart, videoQualitySettings);\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\n * the internet offline status then the time will start counting after the internet comes back online.\n *\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\n */\nexport default class IceFailedHandling {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed() {\n        const { enableForcedReload, enableIceRestart } = this._conference.options.config;\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\n\n        logger.info('ICE failed,'\n            + ` enableForcedReload: ${enableForcedReload},`\n            + ` enableIceRestart: ${enableIceRestart},`\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\n\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate) || enableForcedReload) {\n            logger.info('ICE failed, but ICE restarts are disabled');\n            const reason = enableForcedReload\n                ? JitsiConferenceErrors.CONFERENCE_RESTARTED\n                : JitsiConferenceErrors.ICE_FAILED;\n\n            this._conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, reason);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info('Sending ICE failed - the connection did not recover, '\n                + `ICE state: ${jvbConnIceState}, `\n                + `use 'session-terminate': ${useTerminateForRestart}`);\n            if (useTerminateForRestart) {\n                this._conference.jvbJingleSession.terminate(\n                    () => {\n                        logger.info('session-terminate for ice restart - done');\n                    },\n                    error => {\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\n                    }, {\n                        reason: 'connectivity-error',\n                        reasonDescription: 'ICE FAILED',\n                        requestRestart: true,\n                        sendSessionTerminate: true\n                    });\n            } else {\n                this._conference.jvbJingleSession.sendIceFailedNotification();\n            }\n        }\n    }\n\n    /**\n     * Starts the task.\n     */\n    start() {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        if (!browser.supportsReceiverStats()) {\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        }\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            if (browser.supportsReceiverStats()) {\n                track.on(\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                    }\n                );\n                track.on(\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    audioLevel => {\n                        this._handleNoAudioInputDetection(audioLevel);\n                        this._handleAudioInputStateChange(audioLevel);\n                    }\n                );\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_HEIGHT_ONSTAGE = 2160;\nconst MAX_HEIGHT_THUMBNAIL = 180;\nconst LASTN_UNLIMITED = -1;\n\n/**\n * This class translates the legacy signaling format between the client and the bridge (that affects bandwidth\n * allocation) to the new format described here https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md\n */\nexport class ReceiverVideoConstraints {\n    /**\n     * Creates a new instance.\n     */\n    constructor() {\n        // Default constraints used for endpoints that are not explicitly included in constraints.\n        // These constraints are used for endpoints that are thumbnails in the stage view.\n        this._defaultConstraints = { 'maxHeight': MAX_HEIGHT_THUMBNAIL };\n\n        // The number of videos requested from the bridge.\n        this._lastN = LASTN_UNLIMITED;\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._receiverVideoConstraints = {\n            constraints: {},\n            defaultConstraints: this.defaultConstraints,\n            lastN: this._lastN,\n            onStageEndpoints: [],\n            selectedEndpoints: this._selectedEndpoints\n        };\n    }\n\n    /**\n     * Returns the receiver video constraints that need to be sent on the bridge channel.\n     */\n    get constraints() {\n        this._receiverVideoConstraints.lastN = this._lastN;\n\n        if (!this._selectedEndpoints.length) {\n            return this._receiverVideoConstraints;\n        }\n\n        // The client is assumed to be in TileView if it has selected more than one endpoint, otherwise it is\n        // assumed to be in StageView.\n        this._receiverVideoConstraints.constraints = {};\n        if (this._selectedEndpoints.length > 1) {\n            /**\n             * Tile view.\n             * Only the default constraints are specified here along with lastN (if it is set).\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'defaultConstraints': { 'maxHeight': 360 }\n             * }\n             */\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n            this._receiverVideoConstraints.onStageEndpoints = [];\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        } else {\n            /**\n             * Stage view.\n             * The participant on stage is specified in onStageEndpoints and a higher maxHeight is specified\n             * for that endpoint while a default maxHeight of 180 is applied to all the other endpoints.\n             * {\n             *  'colibriClass': 'ReceiverVideoConstraints',\n             *  'onStageEndpoints': ['A'],\n             *  'defaultConstraints': { 'maxHeight':  180 },\n             *  'constraints': {\n             *      'A': { 'maxHeight': 720 }\n             *   }\n             * }\n             */\n            this._receiverVideoConstraints.constraints[this._selectedEndpoints[0]] = {\n                'maxHeight': this._maxFrameHeight\n            };\n            this._receiverVideoConstraints.defaultConstraints = this._defaultConstraints;\n            this._receiverVideoConstraints.onStageEndpoints = this._selectedEndpoints;\n            this._receiverVideoConstraints.selectedEndpoints = [];\n        }\n\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Updates the lastN field of the ReceiverVideoConstraints sent to the bridge.\n     *\n     * @param {number} value\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateLastN(value) {\n        const changed = this._lastN !== value;\n\n        if (changed) {\n            this._lastN = value;\n            logger.debug(`Updating ReceiverVideoConstraints lastN(${value})`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the resolution (height requested) in the contraints field of the ReceiverVideoConstraints\n     * sent to the bridge.\n     *\n     * @param {number} maxFrameHeight\n     * @requires {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiveResolution(maxFrameHeight) {\n        const changed = this._maxFrameHeight !== maxFrameHeight;\n\n        if (changed) {\n            this._maxFrameHeight = maxFrameHeight;\n            logger.debug(`Updating receive maxFrameHeight: ${maxFrameHeight}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the receiver constraints sent to the bridge.\n     *\n     * @param {Object} videoConstraints\n     * @returns {boolean} Returns true if the the value has been updated, false otherwise.\n     */\n    updateReceiverVideoConstraints(videoConstraints) {\n        const changed = !isEqual(this._receiverVideoConstraints, videoConstraints);\n\n        if (changed) {\n            this._receiverVideoConstraints = videoConstraints;\n            logger.debug(`Updating ReceiverVideoConstraints ${JSON.stringify(videoConstraints)}`);\n        }\n\n        return changed;\n    }\n\n    /**\n     * Updates the list of selected endpoints.\n     *\n     * @param {Array<string>} ids\n     * @returns {void}\n     */\n    updateSelectedEndpoints(ids) {\n        logger.debug(`Updating selected endpoints: ${JSON.stringify(ids)}`);\n        this._selectedEndpoints = ids;\n    }\n}\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     * @param {RTC} rtc the rtc instance which is responsible for initializing the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this._conference = conference;\n        this._rtc = rtc;\n\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LASTN_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT_ONSTAGE;\n\n        // Enable new receiver constraints by default unless it is explicitly disabled through config.js.\n        const useNewReceiverConstraints = config?.useNewBandwidthAllocationStrategy ?? true;\n\n        if (useNewReceiverConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n            const lastNUpdated = this._receiverVideoConstraints.updateLastN(this._lastN);\n\n            lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        } else {\n            this._rtc.setLastN(this._lastN);\n        }\n\n        // The endpoint IDs of the participants that are currently selected.\n        this._selectedEndpoints = [];\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P || !this._receiverVideoConstraints) {\n            mediaSession.setReceiverVideoConstraint(this._maxFrameHeight);\n        } else {\n            this._receiverVideoConstraints.updateReceiveResolution(this._maxFrameHeight);\n            this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n        }\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected participants in order to always receive video\n     * for this participant (even when last n is enabled).\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._receiverVideoConstraints) {\n            // Filter out the local endpointId from the list of selected endpoints.\n            const remoteEndpointIds = ids.filter(id => id !== this._conference.myUserId());\n            const oldConstraints = JSON.parse(JSON.stringify(this._receiverVideoConstraints.constraints));\n\n            remoteEndpointIds.length && this._receiverVideoConstraints.updateSelectedEndpoints(remoteEndpointIds);\n            const newConstraints = this._receiverVideoConstraints.constraints;\n\n            // Send bridge message only when the constraints change.\n            if (!isEqual(newConstraints, oldConstraints)) {\n                this._rtc.setNewReceiverVideoConstraints(newConstraints);\n            }\n\n            return;\n        }\n        this._rtc.selectEndpoints(ids);\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n\n            if (this._receiverVideoConstraints) {\n                const lastNUpdated = this._receiverVideoConstraints.updateLastN(value);\n\n                // Send out the message on the bridge channel if lastN was updated.\n                lastNUpdated && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n\n                return;\n            }\n            this._rtc.setLastN(value);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference._getMediaSessions()) {\n            if (session.isP2P || !this._receiverVideoConstraints) {\n                maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n            } else {\n                const resolutionUpdated = this._receiverVideoConstraints.updateReceiveResolution(maxFrameHeight);\n\n                resolutionUpdated\n                    && this._rtc.setNewReceiverVideoConstraints(this._receiverVideoConstraints.constraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!this._receiverVideoConstraints) {\n            this._receiverVideoConstraints = new ReceiverVideoConstraints();\n        }\n\n        const constraintsChanged = this._receiverVideoConstraints.updateReceiverVideoConstraints(constraints);\n\n        if (constraintsChanged) {\n            this._lastN = constraints.lastN ?? this._lastN;\n            this._selectedEndpoints = constraints.selectedEndpoints ?? this._selectedEndpoints;\n            this._rtc.setNewReceiverVideoConstraints(constraints);\n\n            const p2pSession = this._conference._getMediaSessions().find(session => session.isP2P);\n\n            if (p2pSession) {\n                let maxFrameHeight = Object.values(constraints.constraints)[0]?.maxHeight;\n\n                if (!maxFrameHeight) {\n                    maxFrameHeight = constraints.defaultConstraints?.maxHeight;\n                }\n                maxFrameHeight && p2pSession.setReceiverVideoConstraint(maxFrameHeight);\n            }\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     * @param {RTC} rtc - the rtc instance that is responsible for sending the messages on the bridge channel.\n     */\n    constructor(conference, rtc) {\n        this.conference = conference;\n        this.layerSuspensionEnabled = conference.options?.config?.enableLayerSuspension ?? true;\n        this.rtc = rtc;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n        this.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            videoConstraints => {\n                // Propagate the sender constraint only if it has changed.\n                if (this._senderVideoConstraints?.idealHeight !== videoConstraints.idealHeight) {\n                    this._senderVideoConstraints = videoConstraints;\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? activeMediaSession.isP2P\n                ? activeMediaSession.getRemoteRecvMaxFrameHeight()\n                : this.layerSuspensionEnabled ? this._senderVideoConstraints?.idealHeight : undefined\n            : undefined;\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as VideoType from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","/* global __filename, $, Promise */\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport { CodecSelection } from './modules/RTC/CodecSelection';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling\n    from './modules/connectivity/IceFailedHandling';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport { ReceiveVideoController } from './modules/qualitycontrol/ReceiveVideoController';\nimport { SendVideoController } from './modules/qualitycontrol/SendVideoController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport BridgeVideoType from './service/RTC/BridgeVideoType';\nimport CodecMimeType from './service/RTC/CodecMimeType';\nimport * as MediaType from './service/RTC/MediaType';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\n * restart logic.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A coference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    if (!options.config.disableAudioLevels) {\n        this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n    }\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    // Get the codec preference settings from config.js.\n    // 'preferH264' and 'disableH264' settings have been deprecated for a while,\n    // 'preferredCodec' and 'disabledCodec' will have precedence over them.\n    const codecSettings = {\n        disabledCodec: config.videoQuality\n            ? config.videoQuality.disabledCodec\n            : config.p2p && config.p2p.disableH264 && CodecMimeType.H264,\n        enforcePreferredCodec: config.videoQuality && config.videoQuality.enforcePreferredCodec,\n        jvbCodec: (config.videoQuality && config.videoQuality.preferredCodec)\n            || (config.preferH264 && CodecMimeType.H264),\n        p2pCodec: config.p2p\n            ? config.p2p.preferredCodec || (config.p2p.preferH264 && CodecMimeType.H264)\n            : CodecMimeType.VP8\n    };\n\n    this.codecSelection = new CodecSelection(this, codecSettings);\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.receiveVideoController = new ReceiveVideoController(this, this.rtc);\n    this.sendVideoController = new SendVideoController(this, this.rtc);\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\n    let enableCallStats = true;\n\n    if (config.testing && config.testing.callStatsThreshold) {\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\n    }\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            siteID: config.siteID,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            enableCallStats,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod,\n            configParams: config.callStatsConfigParams\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats(this);\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec type to presence.\n    this.setLocalParticipantProperty('codecType', this.codecSelection.getPreferredCodec());\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    if (config && config.transcriptionLanguage && config.transcriptionLanguage !== 'en-US') {\n        this.setLocalParticipantProperty('transcription_language', config.transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password, replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n * @private\n */\nJitsiConference.prototype._getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n * @private\n */\nJitsiConference.prototype._getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    this.rtc.setVideoType(videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        // if there is no display name already set, avoid setting an empty one\n        if (!name && !this.room.getFromPresence(nickKey)) {\n            return;\n        }\n\n        this.room.addOrReplaceInPresence(nickKey, {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation. This currently happens only on Firefox.\n    if (track.isVideoTrack() && !browser.doesVideoMuteByStreamRemove()) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Returns the list of local tracks that need to be added to the peerconnection on join.\n * This takes the startAudioMuted/startVideoMuted flags into consideration since we do not\n * want to add the tracks if the user joins the call audio/video muted. The tracks will be\n * added when the user unmutes for the first time.\n * @returns {Array<JitsiLocalTrack>} - list of local tracks that are unmuted.\n */\nJitsiConference.prototype._getInitialLocalTracks = function() {\n    // Always add the audio track on certain platforms:\n    //  * Safari / WebKit: because of a known issue where audio playout doesn't happen\n    //    if the user joins audio and video muted.\n    //  * React Native: after iOS 15, if a user joins muted they won't be able to unmute.\n    return this.getLocalTracks()\n        .filter(track => {\n            const trackType = track.getType();\n\n            if (trackType === MediaType.AUDIO\n                    && (!this.isStartAudioMuted() || browser.isWebKitBased() || browser.isReactNative())) {\n                return true;\n            } else if (trackType === MediaType.VIDEO && !this.isStartVideoMuted()) {\n                return true;\n            }\n\n            return false;\n        });\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrackBelongsToConference) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        const videoTypeTagName = 'videoType';\n\n        // if video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\n        if (newTrack.videoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\n            this.sendCommand(videoTypeTagName, { value: newTrack.videoType });\n        }\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.debug('Add local MediaStream as unmute - no P2P Jingle session started yet');\n    }\n\n    return Promise.allSettled(addAsUnmutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage(track);\n        });\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.allSettled(removeAsMutePromises)\n        .then(() => {\n            // Signal the video type to the bridge.\n            track.isVideoTrack() && this._sendBridgeVideoTypeMessage();\n        });\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.receiveVideoController.selectEndpoints(participantIds);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.receiveVideoController.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.values(this.participants);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.room.myroomjid, role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getJid(), role);\n    }\n};\n\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * FIXME This should NOT be exposed!\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    // Remove the ssrcs from the remote description.\n    const mediaSessions = this._getMediaSessions();\n    const removePromises = [];\n\n    for (const session of mediaSessions) {\n        removePromises.push(session.removeRemoteStreamsOnLeave(id));\n    }\n\n    Promise.allSettled(removePromises)\n        .then(results => {\n            let removedTracks = [];\n\n            results.map(result => result.value).forEach(value => {\n                if (value) {\n                    removedTracks = removedTracks.concat(value);\n                }\n            });\n\n            removedTracks.forEach(track => {\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n            });\n\n            // There can be no participant in case the member that left is focus.\n            if (participant) {\n                this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\n            }\n\n            if (this.room !== null) { // Skip if we have left the room already.\n                this._maybeStartOrStopP2P(true /* triggered by user left event */);\n                this._maybeClearSITimeout();\n            }\n        });\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    // This check which be true when we kick someone else. With the introduction of lobby\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\n    // avoid emitting an event where `undefined` kicked someone.\n    if (actorId === this.myUserId()) {\n        return;\n    }\n\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer);\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) || browser.isFirefox() || browser.isWebKitBased()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(this.room, this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this._getInitialLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                    jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                        jingleSession);\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            localTracks\n        );\n\n        // Enable or disable simulcast for plan-b screensharing based on the capture fps if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    if (wsUrl) {\n        // If the offer contains a websocket use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis.\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        this._delayedIceFailed = new IceFailedHandling(this);\n        this._delayedIceFailed.start(session);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                this.p2pJingleSession);\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.onRemoteTrackAdded(track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n        this._getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc, {\n            ...this.options.config,\n            enableInsertableStreams: this.isE2EEEnabled()\n        });\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled() || this.isP2PTestModeEnabled() || browser.isFirefox() || browser.isWebKitBased()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (typeof maxFps !== 'number' || isNaN(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    this._desktopSharingFrameRate = maxFps;\n\n    // Enable or disable simulcast for plan-b screensharing based on the capture fps.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(maxFps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(maxFps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the\n * following format. The message updates the fields that are present and leaves the\n * rest unchanged on the bridge. Therefore, any field that is not applicable anymore\n * should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedEndpoints': ['A', 'B', 'C'],\n *      'onStageEndpoints': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this.stopP2PSession();\n    }\n\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.terminate(\n            null /* success callback => we don't care */,\n            error => {\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\n            }, {\n                reason: 'success',\n                reasonDescription: 'restart required',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(id);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n","import JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    this.xmpp.caps.addFeature(feature, submit, true);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    this.xmpp.caps.removeFeature(feature, submit, true);\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConnection.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Event emitted when the user granted/blocked a permission for the camera / mic.\n * Used to keep track of the granted permissions on browsers which don't\n * support the Permissions API.\n */\nexport const PERMISSIONS_CHANGED = 'rtc.permissions_changed';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n\nexport const SLOW_GET_USER_MEDIA = 'mediaDevices.slowGetUserMedia';\n","import EventEmitter from 'events';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Statistics from './modules/statistics/statistics';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._permissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this._eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissiions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(browser.isFirefox() || browser.isIosBrowser());\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ },\n            supportsRestartByTerminate: () => false\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import EventEmitter from 'events';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\n\nimport { CALLSTATS_SCRIPT_URL } from './constants';\n\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\nconst emitter = new EventEmitter();\nlet _initialized = false;\nlet api = null;\n\n/**\n * Loads the callstats io script.\n *\n * @returns {Promise<void>}\n */\nfunction _loadScript(options) {\n    if (browser.isReactNative()) {\n        return;\n    }\n\n    return new Promise(resolve => {\n        ScriptUtil.loadScript(\n            options.callStatsCustomScriptUrl || CALLSTATS_SCRIPT_URL,\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ resolve);\n    });\n}\n\n/**\n * Initializes the callstats lib and registers a callback to be invoked\n * when there are 'preCallTestResults'.\n *\n * @typedef PrecallTestOptions\n * @type {Object}\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} statisticsId - The user name to use when initializing callstats.\n * @property {string} statisticsDisplayName - The user display name.\n *\n * @param { PrecallTestOptions} options - The init options.\n * @returns {Promise<void>}\n */\nfunction _initialize(options) {\n    return new Promise((resolve, reject) => {\n        const appId = options.callStatsID;\n        const appSecret = options.callStatsSecret;\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\n\n        api.initialize(appId, appSecret, userId, (status, message) => {\n            if (status === 'success') {\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\n                });\n                _initialized = true;\n                resolve();\n            } else {\n                reject({\n                    status,\n                    message\n                });\n            }\n        }, null, { disablePrecalltest: true });\n    });\n}\n\n/**\n * Loads the callstats script and initializes the library.\n *\n * @param {Function} onResult - The callback to be invoked when results are received.\n * @returns {Promise<void>}\n */\nexport async function init(options) {\n    if (_initialized) {\n        throw new Error('Precall Test already initialized');\n    }\n\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\n\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\n        throw new Error('Callstats is disabled');\n    }\n\n    await _loadScript(options);\n    // eslint-disable-next-line new-cap\n    api = new window.callstats();\n\n    return _initialize(options);\n}\n\n/**\n * Executes a pre call test.\n *\n * @typedef PrecallTestResults\n * @type {Object}\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\n * @property {number} throughput  - The average throughput.\n * @property {number} fractionalLoss - The packet loss.\n * @property {number} rtt - The round trip time.\n * @property {string} provider - It is usually 'callstats'.\n *\n * @returns {Promise<{PrecallTestResults}>}\n */\nexport function execute() {\n    if (!_initialized) {\n        return Promise.reject('uninitialized');\n    }\n\n    return new Promise((resolve, reject) => {\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\n            if (status === 'success') {\n                resolve(payload);\n            } else {\n                reject({\n                    status,\n                    payload\n                });\n            }\n\n        });\n\n        api.makePrecallTest();\n    });\n}\n\nexport default {\n    init,\n    execute\n};\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","/* global __filename */\n\nimport Logger from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport precallTest from './modules/statistics/PrecallTest';\nimport Statistics from './modules/statistics/statistics';\nimport AuthUtil from './modules/util/AuthUtil';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_SLOW_PROMISE_TIMEOUT = 1000;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Configure the feature flags.\n        FeatureFlags.init({\n            sourceNameSignaling: options.sourceNameSignaling\n        });\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {boolean} options.firePermissionPromptIsShownEvent - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param {boolean} options.fireSlowPromiseEvent - if event\n     * JitsiMediaDevicesEvents.USER_MEDIA_SLOW_PROMISE_TIMEOUT should be fired\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @deprecated old firePermissionPromptIsShownEvent\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options = {}, oldfirePermissionPromptIsShownEvent) {\n        let promiseFulfilled = false;\n\n        const { firePermissionPromptIsShownEvent, fireSlowPromiseEvent, ...restOptions } = options;\n        const firePermissionPrompt = firePermissionPromptIsShownEvent || oldfirePermissionPromptIsShownEvent;\n\n        if (firePermissionPrompt && !RTC.arePermissionsGrantedForAvailableDevices()) {\n            JitsiMediaDevices.emitEvent(\n                JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                browser.getName());\n        } else if (fireSlowPromiseEvent) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(JitsiMediaDevicesEvents.SLOW_GET_USER_MEDIA);\n                }\n            }, USER_MEDIA_SLOW_PROMISE_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(restOptions)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(restOptions)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'screensharing_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    precallTest,\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(2809);\n"],"names":["root","factory","exports","module","define","amd","self","ERROR","WINDOW","window","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","process","versions","node","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","split","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint8Array","Uint32Array","Array","isArray","obj","Object","prototype","toString","call","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","constructor","createOutputMethod","outputType","message","Md5","update","createMethod","method","nodeWrap","create","i","length","type","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","this","h0","h1","h2","h3","start","bytes","hBytes","finalized","hashed","first","notString","code","index","charCodeAt","lastByteIndex","hash","finalize","a","b","c","d","bc","da","hex","array","arrayBuffer","base64","v1","v2","v3","base64Str","md5","grammar","v","name","reg","o","names","format","s","u","e","p","z","r","t","push","m","encoding","rate","address","subtype","direction","config","sessionConfig","str","raddr","tcptype","generation","attribute","value","maxMessageSize","params","RegExp","dir2","clksrcExt","id","mediaClockValue","rateNumerator","rateDenominator","keys","forEach","key","parser","require","writer","write","parse","parseParams","parseFmtpConfig","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","toIntIfInt","String","Number","parseReg","location","content","needsBlank","keyLocation","match","rawName","attachProperties","validLine","test","bind","sdp","session","media","filter","l","slice","rtp","fmtp","j","paramReducer","acc","expr","undefined","reduce","map","candidates","parts","component","ip","port","item","substring","stream","scid","paused","formatRegExp","formatStr","args","arguments","len","replace","x","arg","makeLine","Function","n","apply","defaultOuterOrder","defaultInnerOrder","opts","version","mLine","payloads","outerOrder","innerOrder","el","join","transform","transformUtils","parseSsrcs","writeSsrcs","getSsrcAttribute","ssrc","attributeName","ssrcs","ssrcInfo","Simulcast","options","numOfLayers","console","log","ssrcCache","processVideo","action","validateDescription","desc","clearSsrcCache","setSsrcCache","_parseSimLayers","simGroup","ssrcGroups","find","group","semantics","ssrcStr","parseInt","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","ssrcMap","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","values","indexOf","_generateSourceData","primarySsrc","addAssociatedStream","primarySsrcCname","primarySsrcMsid","usesUnifiedPlan","msid","simSsrcs","simSsrc","Math","floor","random","_restoreSimulcast","numSsrcs","numGroups","fidGroup","mungeRemoteDescription","enableConferenceFlag","explodeRemoteSimulcast","sources","order","simulcastSsrcs","cname","relatedGroup","relatedSsrcs","relatedSSRC","splice","simulcastGroup","info","nuke","implodeRemoteSimulcast","invalid","some","assertGoogConference","xGoogleFlag","removeGoogConference","RTCSessionDescription","mungeLocalDescription","source","previous_async","async","only_once","fn","called","Error","noConflict","_toString","_isArray","_each","arr","iterator","_map","results","_keys","k","hasOwnProperty","nextTick","setImmediate","setTimeout","each","callback","completed","done","err","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","concat","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","reverse","foldr","_filter","sort","filterSeries","select","selectSeries","_reject","reject","rejectSeries","_detect","main_callback","result","detect","detectSeries","any","every","all","sortBy","criteria","left","right","auto","tasks","remainingTasks","listeners","addListener","unshift","taskComplete","theCallback","task","taskCallback","safeResults","rkey","requires","abs","ready","listener","removeListener","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","data","waterfall","wrapIterator","next","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","y","concatSeries","whilst","doWhilst","until","doUntil","queue","worker","concurrency","_insert","q","pos","drain","saturated","workers","empty","kill","shift","idle","pause","resume","priorityQueue","_compareTasks","priority","sequence","compare","beg","end","mid","_binarySearch","cargo","payload","working","drained","ts","ds","_console_fn","error","dir","memoize","hasher","queues","memoized","pop","unmemoized","unmemoize","count","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","num","output","defineProperty","enumerable","get","Symbol","toStringTag","__esModule","default","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","max","min","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","chromium","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","configurable","writable","getParser","getResult","_ua","parsedResult","getUA","parseBrowser","browser","describe","getBrowser","getBrowserName","toLowerCase","getBrowserVersion","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","assign","satisfies","isOS","isPlatform","f","isBrowser","compareVersion","substr","isEngine","is","search","versionName","vendor","model","scriptReadyRegex","fullPageUrl","href","pageUrl","scripts","document","getElementsByTagName","supportsScriptReadyState","createElement","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","Infinity","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","stack","skipStackDepth","matches","url","ignoreMessage","round","_nearestExecutingScript","script","eligibleScripts","readyState","src","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","currentExecutingScript","near","far","origin","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","isNaN","EventEmitter","init","once","emitter","Promise","resolve","errorListener","resolver","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","TypeError","_getMaxListeners","_addListener","prepend","events","existing","warning","newListener","emit","warned","w","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","addEventListener","wrapListener","removeEventListener","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","removeAllListeners","rawListeners","eventNames","Logger","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","stringify","someObject","JSON","formatLogMessage","msg","timestamp","prevMessage","prevMessageText","text","_flush","_reschedulePublishInterval","clearTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","consoleTransport","globalTransports","addGlobalTransport","transport","removeGlobalTransport","transportIdx","globalOptions","getCallerInfo","callerInfo","methodName","fileLocation","line","column","logger","level","disableCallerInfo","transports","logPrefixes","Date","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","idLoggers","loggers","curLevel","getLogger","setLogLevelById","setLogLevel","userId","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","now","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","track","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","addTrack","isAudioTrack","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","MediaStream","getAudioTracks","mimeType","ondataavailable","dataEvent","size","removeTrack","isVideoTrack","getParticipantId","recorderToRemove","conference","isLocal","getParticipantById","download","blob","Blob","URL","createObjectURL","body","appendChild","style","click","revokeObjectURL","getRecordingResults","getFileType","wordArray","SphinxService","BEFORE_STATE","RECORDING_STATE","TRANSCRIBING_STATE","FINISHED_STATE","Transcriber","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","transcriber","answer","offset","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","send","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","reset","TranscriptionService","sendRequest","response","verify","formatResponse","audioBlob","Word","sphinxURL","toReturn","includes","getURL","audioFileBlob","request","XMLHttpRequest","onreadystatechange","DONE","status","responseText","open","setRequestHeader","objects","filler","json","getWord","getBeginTime","getEndTime","getTokenAuthUrl","urlPattern","roomName","roleUpgrade","EventEmitterForwarder","dest","forward","srcEvent","handlers","oldOnErrorHandler","onerror","oldOnUnhandledRejection","onunhandledrejection","event","reason","GlobalOnErrorHandler","addHandler","callErrorHandler","errHandler","callUnhandledRejectionHandler","randomInt","randomElement","RandomUtil","randomHexDigit","randomHexString","randomAlphanumStr","ScriptUtil","loadScript","relativeURL","loadCallback","errorCallback","tagName","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","parentNode","insertBefore","integerHash","string","char","pow","generateUsername","CAMERA","DESKTOP","DESKTOP_HIGH_FPS","NONE","ENVIRONMENT","USER","H264","OPUS","VP8","VP9","INACTIVE","RECVONLY","SENDONLY","SENDRECV","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","width","height","IDENTITY_UPDATED","LOCAL_JID","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_RESTARTED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTICIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","AV_MODERATION_APPROVED","AV_MODERATION_REJECTED","AV_MODERATION_RECEIVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","func","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","newValue","getMapData","getValue","isFunction","baseIsNative","has","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","arrayLikeKeys","baseKeys","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","cancel","arrayTag","errorTag","typedArrayTags","freeProcess","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","othLength","seen","arrValue","othIndex","isMasked","resIndex","arrayFilter","baseUnary","isArg","isBuff","isType","SDPUtils","localCName","generateIdentifier","splitLines","trim","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","candidate","foundation","protocol","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","codec","pt","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","kind","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt","global$1","_typeof","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","safe_add","lsw","str2binl","bin","md5_cmn","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","fromCharCode","binl2str","core_sha1","olde","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","validAttribute","validCSS","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNodes","childNode","isTagEqual","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","xmlGenerator","docStrings","ActiveXObject","xmlElement","xmlTextNode","attr","setAttribute","xmlescape","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","getAttribute","cssText","cssAttrs","cssName","cssValue","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","fatal","sourceURL","fileName","lineNumber","debug","serialize","tree","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","ns","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","getTime","Connection","service","_this2","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","_reset","_requests","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","connect","pass","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","_queueData","_send","sendPresence","errback","timeout","_this3","timeoutHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","disconnect","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","condition","plugin","statusChanged","_dataRecv","req","raw","_this6","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","authMessage","attribMatch","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","overrideMimeType","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","sync","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","Strophe$2","$build$2","new_service","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_streamWrap","_onMessage","CLOSED","close","closeString","rawStanza","firstChild","startString","$msg","_identities","_features","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","category","lang","addFeature","var_name","removeFeature","addItem","call_back","success","to","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","getResumeToken","_resumeToken","isSupported","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","property","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","RTCPeerConnection","nativeAddEventListener","nativeEventName","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","delete","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","val","compactObject","isEmptyObject","walkStats","stats","base","resultSet","endsWith","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackIdentifier","trackStat","trackId","shimGetUserMedia","browserDetails","navigator","mediaDevices","constraintsToChrome_","mandatory","optional","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","constraints","audio","remap","video","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","enumerateDevices","then","devices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","constraint","constraintName","getUserMedia","onError","webkitGetUserMedia","origGetUserMedia","cs","getVideoTracks","getTracks","DOMException","shimGetDisplayMedia","getSourceId","getDisplayMedia","sourceId","widthSpecified","heightSpecified","frameRateSpecified","frameRate","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","maxHeight","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","setRemoteDescription","_ontrackpoly","te","getReceivers","Event","transceiver","streams","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","pc","dtmf","_dtmf","createDTMFSender","_pc","getSenders","_senders","origAddTrack","sender","origRemoveTrack","idx","origAddStream","addStream","origRemoveStream","removeStream","RTCRtpSender","origGetSenders","senders","shimGetStats","origGetStats","getStats","selector","onSucc","onErr","fixChromeStats_","standardReport","report","standardStats","localcandidate","remotecandidate","stat","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","RTCRtpReceiver","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","streamId","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","signalingState","alreadyExists","oldStream","nativeMethod","methodObj","origSetLocalDescription","setLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","RTCIceCandidate","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","parseFloat","scaleResolutionDownBy","maxFramerate","getParameters","encodings","setParameters","catch","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","createOffer","finally","shimCreateAnswer","origCreateAnswer","createAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","tracks","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","addIceCandidate","successCallback","failureCallback","promise","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","pcConstraints","iceServers","newIceServers","server","urls","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","offerToReceiveAudio","audioTransceiver","getTransceivers","setDirection","offerToReceiveVideo","videoTransceiver","shimAudioContext","AudioContext","webkitAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","sdpMid","sdpMLineIndex","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","isFirefox","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","createDataChannel","dataChannel","channel","shimConnectionState","checking","iceConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","connectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","adapter","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","userAgent","isSecureContext","RTCIceGatherer","supportsUnifiedPlan","RTCRtpTransceiver","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","byteToHex","buf","bth","_v","_v2","_v3","_v4","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","md5cmn","md5ff","md5gg","md5hh","md5ii","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","wordsToMd5","length8","bytesToWords","getRandomValues","rnds8","msCrypto","ROTL","K","H","N","ceil","M","W","T","_rng","_bytesToUuid","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","_default","hashfunc","generateUUID","namespace","stringToBytes","uuidToBytes","DNS","rnds","_sha","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","DATA_CHANNEL_OPENED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","PARTICIPANT_CONN_STATUS_CHANGED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","CALLSTATS_SCRIPT_URL","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","gum","JitsiTrackErrors","failedConstraintName","minWidth","minHeight","getResolutionFromFailedConstraint","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","CONNECTION_DISCONNECTED","ICE_DURATION","createConferenceEvent","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","JitsiMeetElectron","_detectNWJS","_detectReactNative","product","DummyLocalStorage","_storage","keyName","keyValue","jitsiLocalStorage","super","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","browserInfo","_bowser","Bowser","detectedBrowserInfo","bowser","detectors","_detectChromiumBased","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","isReactNative","getVersion","_checkCondition","checkTree","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","doesVideoMuteByStreamRemove","isChromiumBased","isWebKitBased","isIosBrowser","maxTouchPoints","Boolean","isTwa","matchMedia","_getChromiumBasedVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","getCapabilities","supportsDeviceChangeEvent","ondevicechange","supportsLocalCandidateRttStatistics","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","usesSdpMungingForSimulcast","usesAdapter","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","postMessage","supportsAudioRed","supportsVADDetection","ua","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","wrtcFuncNames","reportType","_fabrics","CallStats","backend","backendInitialized","atLeastOneFabric","defaultInstance","callStatsInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","confID","defaultPC","peerconnection","reportsQueue","errorData","_reportError","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","usageLabel","_error","reportError","theBackend","tryCatchMethods","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","aliasName","userName","callStatsID","callStatsSecret","configParams","applicationName","applicationVersion","siteID","initialize","_initCallback","getWiFiStatsMethod","attachWifiStatsHandler","addresses","devicesData","_reportEvent","conferenceID","overall","comment","sendUserFeedback","mute","tpc","remoteUserID","fabricAttributes","remoteEndpointType","isP2P","endpointType","peer","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","associateStreamWithVideoTag","streamEndpointId","sendDominantSpeakerEvent","sendTerminateEvent","fabricEvent","fabricTerminated","sendIceConnectionFailedEvent","sendCreateOfferFailed","sendCreateAnswerFailed","sendResumeOrHoldEvent","isResume","sendScreenSharingEvent","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","LocalStatsCollector","interval","intervalId","intervalMilis","audioLevel","safeCounterIncrement","number","nextValue","calculateAverage","valueArray","filterPositiveValues","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","setInterval","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","clearInterval","RunningAverage","average","addNext","getAverage","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","duration","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","AUDIO","PRESENTER","VIDEO","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","bitrate","upload","resolution","framerate","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setSpeakerList","startAudioLevelStats","audioLevels","getAudioLevels","processAudioLevelReport","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioCodec","videoCodec","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","isDownloadStream","packetsTotal","packetsLost","getTrackBySSRC","participantId","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","before","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","byteSentStats","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","remoteCandidateId","localUsedCandidate","localCandidateId","localip","conferenceStatsTransport","p2p","localCandidateType","candidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","frameHeight","frameWidth","framesPerSecond","bytesSent","codecId","codecShortType","MediaType","remoteSource","localVideoTracks","getLocalTracks","getLocalSSRC","framesSent","numberOfActiveStreams","getActiveSimulcastStreams","getSsrcByTrackId","_instances","isCallstatsLoaded","_initCallStatsBackend","isBackendInitialized","initBackend","Statistics","xmpp","rtpStatsMap","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","customScriptUrl","loadCallStatsAPI","callsStatsInstances","instances","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","analytics","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","LocalStats","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","performanceObserverStats","JitsiConferenceEvents","removeLongTasksStatsListener","callStats","stopCallStats","tpcId","_stopRemoteStats","stopLocalStats","startCallStats","newInstance","_getAllCallStatsInstances","csInstances","statistics","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","instance","sendMuteEvent","muted","roomJid","sendActiveDeviceListEvent","globalSet","sendGetUserMediaFailed","formatJitsiTrackErrorForCallStats","sendLog","globalSubSet","csPerStats","sendApplicationLog","sendFeedback","rating","reportGlobalError","sendAnalyticsAndLog","eventToLog","sendAnalytics","JitsiConferenceEventManager","xmppListeners","p2pJingleSession","jvbJingleSession","isMuted","getType","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","XMPPEvents","jingleSession","rtc","closeBridgeChannel","participant","setFeatures","offerIq","_setBridgeChannel","actor","mutedByFocusActor","setAudioMute","isMutedByFocus","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","JitsiConferenceErrors","bridgeDown","createBridgeDownEvent","_onConferenceRestarted","_onIceConnectionFailed","createFocusLeftEvent","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","setProperty","onMemberKicked","onSuspendDetected","onMemberJoined","_onMemberBotTypeChanged","onMemberLeft","onDisplayNameChanged","onLocalRoleChanged","isModerator","recorderSession","logObject","getError","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","_status","addPresenceListener","myUserId","startAudioMuted","startVideoMuted","updated","startMutedPolicy","setupRTCListeners","RTCEvents","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","lastDominantSpeaker","roomjid","performance","videoType","VideoType","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","onIncomingCall","onCallAccepted","onTransportInfo","onCallEnded","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","actorJid","actorParticipant","getParticipants","getJid","enabled","setupStatisticsListeners","setAudioLevel","startSilent","_onByteSentStatsReceived","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","ParticipantConnectionStatus","ACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isInLastN","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","_onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","videoTracks","getTracksByMediaType","participantConnectionStatus","createParticipantConnectionStatusEvent","leavingLastN","enteringLastN","rTimer","JitsiParticipant","hidden","statsID","identity","isReplacing","isReplaced","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","getConference","getProperty","jitsiTrack","isWebRTCTrackMuted","oldValue","getStatsID","isHidden","isAudioMuted","_isMediaTypeMuted","getRole","setRole","newRole","setIsReplacing","newIsReplacing","setIsReplaced","newIsReplaced","supportsDTMF","getFeatures","hasFeature","feature","newFeatures","getBotType","_botType","setBotType","newBotType","WRONG_STATE","DISPLAY_NAME_REQUIRED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","Deferred","clearRejectTimeout","_timeout","setRejectTimeout","ms","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","cleanup","operation","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setKey","keyIndex","v4","Listenable","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","_key","_keyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","pId","olmData","_getParticipantOlmData","uuidv4","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentKey","clearParticipantSession","free","clearAllParticipantsSessions","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","lastKey","isEqual","isE2EEEnabled","sendMessage","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","E2EEncryption","_conferenceJoined","_enabled","_enabling","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","testing","disableE2EE","enableEncodedTransformSupport","isEnabled","initSessions","setLocalParticipantProperty","_restartMediaSessions","_generateKey","updateKey","_getMediaSessions","_setupSenderE2EEForTrack","localTracks","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","findReceiverForTrack","findSenderForTrack","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","res","parseDiscoInfo","identities","$","_","Caps","disco","rooms","externalFeatures","emuc","_addChatRoom","_removeChatRoom","submit","external","_generateVersion","_updateRoomWithExternalFeatures","removeFromPresence","children","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","sortedFeatures","generateSha","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","retryDelay","schedule","_cancelResume","_networkOnlineListener","NetworkInfo","_scheduleResume","_resumeTimeout","minDelay","getJitterDelay","_resumeConnection","streamManagement","resumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","XmppConnection","Events","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","OPEN","pingDomain","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","fetch","responseShard","timeLeft","sendUnavailableBeacon","sendBeacon","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","setMembersOnly","disable","lobbyRoom","membersOnlyEnabled","_leaveLobbyRoom","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","nick","isHiddenDomain","botType","members","avatar","clean","isSelfPresence","invitePassword","denyAccess","kick","approveAccess","memberRoomJid","msgToSend","_callStatsUserName","_machineId","externalStorage","callStatsUserName","UsernameGenerator","generateCallStatsUserName","machineId","amDid","jitsiMeetId","_p8","generateJitsiMeetId","createExpBackoffTimer","step","Moderator","Settings","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","attachEvent","isExternalAuthEnabled","isSipGatewayEnabled","onMucMemberLeft","setFocusUserJid","focusJid","focusUserJid","getFocusUserJid","getFocusComponent","focusComponent","hosts","createConferenceIq","machineUID","disableRtx","audioPacketDelay","startBitrate","minBitrate","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","allocateConferenceFocus","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","errorMsg","anonymousdomain","waitMs","retrySec","errorIq","prop","getLoginUrl","urlCallback","_getLoginUrl","popup","urlCb","failureCb","decodeURIComponent","getPopupLoginUrl","logout","logoutUrl","packet2JSON","nodes","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","XMPP","myroomjid","replaceParticipant","presMap","presHandlers","_removeConnListeners","focusMucJid","noBridgeAvailable","moderator","lobby","avModeration","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","deploymentInfo","userRegion","presenceUpdateTime","onConnStatusChanged","fromJoin","billingId","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","hiddenDomain","fromHiddenDomain","presence","xEl","remove","extractIdentityInformation","userInfo","groupInfo","_extractFeatures","_initFocus","memberOfThis","displayJids","restartByTerminateSupported","supportsRestartByTerminate","att","phone","pin","processNode","var","focusFeatures","tagHandlers","elementName","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","subjectText","stamp","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","onPresenceError","lobbyRoomNode","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","formToSubmit","addToPresence","matchingNodes","getFromPresence","removePresenceListener","handlerIdx","mucJid","getMemberRole","peerJid","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","audioMutedTagName","addVideoInfoToPresence","videoMutedTagName","getMediaPresenceInfo","mutedNode","codecTypeNode","videoTypeNode","codecType","isSIPCallingSupported","dial","rayo","hangup","getLobby","getAVModeration","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","onMuteVideo","onMucLeft","doReject","MucConnectionPlugin","isRoomCreated","_sourceNameSignaling","sourceNameSignaling","isSourceNameSignalingEnabled","obtainStream","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingSources","streamType","screenShareAudio","audioConstraints","optionalConstraints","minFrameRate","screen","sourceType","cursor","errorDetails","errorName","errorStack","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","generateSsrc","ssrcLine","parseGroupSsrcs","ssrcGroup","getMedia","getUfrag","ufragLines","preferCodec","codecName","matchingPayloadTypes","payloadTypes","payloadIndex","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","rtxApts","rtxPts","keepPts","MediaDirection","rtcpFb","SDP","mediaI","arrayEquals","array1","array2","equals","SDPDiffer","mySDP","otherSDP","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","availableSsrc","ssrcParameters","sourceName","FeatureFlags","ridLines","rids","ridLine","ridInfo","extmapLines","extmap","transportToJingle","sctpmap","sctpAttrs","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","fromJingle","jingle","groups","contents","jingle2media","streamCount","__","hdrExt","getNewMedia","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","ssrcNum","mediaSsrc","AsyncQueue","_queue","_processQueueTasks","_stopped","finishedCallback","shutdown","PENDING","ENDED","JingleSession","localJid","mediaConstraints","isInitiator","usedrip","dripContainer","initiatorJid","responderJid","JingleSessionState","doInitialize","addIceCandidates","addSources","removeSources","terminate","failure","acceptOffer","_getInitiatorJid","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SignalingLayer","getSSRCOwner","getPeerMediaInfo","owner","SignalingLayerImpl","ssrcOwners","setChatRoom","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","setSSRCOwner","IQ_TIMEOUT","JingleSessionPC","jingleContents","videoContents","maxFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","modificationQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","enableInsertableStreams","videoQuality","forceTurnRelay","enableUnifiedOnChrome","disableSimulcast","abtestSuspendVideo","_abtestSuspendVideoEnabled","preferH264","disableH264","preferredCodec","createPeerConnection","onicecandidate","ev","phase","initiator","sendIceCandidate","onsignalingstatechange","oniceconnectionstatechange","isStable","reconnect","usesTerminateForRestart","enableIceRestart","iceStarted","onconnectionstatechange","icestate","onnegotiationneeded","remoteDescription","workFunction","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","getRemoteRecvMaxFrameHeight","localSDP","ice","jcand","errorMesssage","sendIceCandidates","cands","fingerprintLine","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","iceCandidates","rtcCandidate","iceCandidate","outerHTML","readSsrcInfo","ssrcElement","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","getConfiguredVideoCodec","jingleOffer","setOfferAnswerCycle","sendSessionAccept","addTracks","localTrack","offerSdp","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","setVideoCodecs","preferred","disabled","current","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","originalOffer","clone","newFingerprint","accept","responder","maxFrameHeight","sessionModify","setReceiverVideoConstraint","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","videoActive","setMediaTransferActive","setSenderVideoDegradationPreference","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","remoteTracks","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","removeRemoteTracks","newLocalSDP","isAdd","logPrefix","errMsg","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","addedMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","audioActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","MediaSessionEvents","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","abTesting","enableSuspendVideoTest","_createSourceExtension","sourceCompactJson","_createSsrcGroupExtension","ssrcGroupCompactJson","_expandSourcesFromJson","jsonMessageXml","audioRtpDescription","_getOrCreateRtpDescription","videoRtpDescription","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","_parseIceCandidates","parseCandidates","candidateAttrs","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","onJingle","fromJid","sess","jsonMessages","audioVideoSsrcs","logMessage","endpoint","startMuted","iceUfrag","icePwd","dtlsFingerprint","successTime","newP2PJingleSession","me","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v2Err","v1Res","v1Err","iceservers","dict","credential","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","token","disconnectInProgress","authenticatedUser","trace","errStatusCapture","createConnection","bosh","details","shard_changed","suspend_time","time_since_last_success","JitsiConnectionEvents","JitsiConnectionErrors","_initStrophePlugins","initFeaturesList","enableOpusRed","enableRemb","enableTcc","enableLipSync","getConnection","connectionHandler","credentials","statusStr","_sysMessageHandler","sendDiscoInfo","_resetState","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","conferenceDurationComponentAddress","processLobbyFeatures","fr","region","_onPrivateMessage","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","jsonString","users","created_timestamp","authenticateAndUpgradeRole","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","CodecSelection","disabledCodec","_getCodecMimeType","jvbCodec","p2pCodec","jvbPreferredCodec","_isCodecSupported","p2pPreferredCodec","_selectPreferredCodec","_onMediaSessionStared","mediaSession","currentCodec","selectedCodec","enforcePreferredCodec","remoteParticipants","remote","peerMediaInfo","peerCodec","getPreferredCodec","BridgeChannel","wsUrl","_channel","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","createBridgeChannelClosedEvent","mode","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendSelectedEndpointsMessage","endpointIds","selectedEndpoints","sendReceiverVideoConstraintMessage","maxFrameHeightPixels","sendNewReceiverVideoConstraintsMessage","sendVideoTypeMessage","dominantSpeakerEndpoint","previousSpeakers","active","lastNEndpoints","videoConstraints","jsonObject","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","videoTracksReceived","grantedPermissions","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","rtcUtils","origAttachMediaStream","RTCPeerConnectionType","attachMediaStream","getStreamID","getTrackID","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","umDevices","gumTimeout","timeoutExpired","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","cameraDeviceId","CameraFacingMode","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioTracks","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","googSuspendBelowMinBitrate","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","videoTrack","getVideoType","isLocalAudioTrack","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","RTCUtils","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","getMSID","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","_queueSetMuted","unmute","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","_removeLocalTrackAsMute","_setConference","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","Interop","toPlanB","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","resStr","toUnifiedPlan","currentDesc","iceRestart","newDesc","oldDesc","newMLine","oldMLine","checkForIceRestart","newIceUfrag","newIcePwd","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","resultSdp","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","dumpSSRCGroups","removeGroupsWithSSRC","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLine","toRawSDP","LocalSdpMunger","localEndpointId","_addMutedLocalVideoTracksToSDP","transformer","localVideos","isCamera","isInPeerConnection","isMediaStreamInPc","requiredSSRCs","isSimulcastOn","simulcast","sdpConsistency","cachedPrimarySsrc","primaryCname","rtxModifier","modifyRtxSsrcs2","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","maybeAddMutedLocalVideoTracksToSDP","transformStreamIdentifiers","sessionDesc","audioMLine","_injectSourceNames","firstLetterOfMediaType","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpConsistency","clearVideoSsrcCache","injectRecvOnly","setPrimarySsrc","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","setMute","getSSRC","_setVideoType","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","high","low","standard","_findTransceiver","_getStreamEncodings","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","insertUnifiedPlanSimulcastReceive","simulcast_03","simulcastLine","transceiverInit","getLocalStreamHeightConstraints","localVideoHeightConstraints","localSSRCs","_addedStreams","setEncodings","transceivers","updateEncodingsResolution","HD_BITRATE","TraceablePeerConnection","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_capScreenshareBitrate","_usesUnifiedPlan","_usesTransceiverCodecPreferences","interop","localSdpMunger","getLocalEndpointId","senderVideoMaxHeight","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_getReceiversByEndpointIds","endpoints","getRemoteTracks","remoteTrackIds","getSynchronizationSources","getLocalVideoTrack","endpointTrackMap","mediaTrack","primarySsrcs","fidLines","getTargetVideoBitrates","findTrackById","RTC","isUserStreamById","onaddtrack","onremovetrack","streamAudioTracks","audioTrack","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","_createRemoteTrack","remoteTracksMap","existingTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedTracks","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","_extractSSRCMap","groupsMap","groupSSRCs","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","audioMedia","changed","videoMedia","enforceSendRecv","_adjustRemoteMediaDirection","_isSharingLowFpsScreen","_isSharingScreen","_mungeCodecOrder","codecPreference","bitrates","hdBitrate","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","rtxSsrcMapping","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","defaultCodec","lowFps","findSenderByKind","_ensureSimulcastGroupIsLast","localSdp","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasRemoteSource","_mungeOpus","opusMaxAverageBitrate","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","localVideoTrack","videoSender","preference","degradationPreference","presenterEnabled","scaleFactor","layer","currentDescription","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","normalizePlanB","newHeight","encodingsEnabledState","ldStreamIndex","highResolutionEncoding","sendTones","tones","interToneGap","rtpSender","localAudioTrack","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resolveFn","rejectFn","_processLocalSSRCsMap","handleFailure","eventType","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","newSSRCNum","oldSSRCNum","activeStreams","currNumSsrcs","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","peerConnections","_lastN","_lastNEndpoints","_maxFrameHeight","_selectedEndpoints","_lastNChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","BridgeVideoType","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","setNewReceiverVideoConstraints","setVideoType","selectEndpoints","ids","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","removeLocalTrack","elSelector","sendChannelMessage","setLastN","remoteAudioTracks","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","kSimulcastFormats","layers","targetRN","ConnectionQuality","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","videoQualitySettings","millisSinceStart","simulcastFormat","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_audioLevel","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","DetectionEvents","_handleNoAudioInputDetection","_eventFired","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","clearIntervals","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","createE2eRttEvent","E2ePing","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","getParticipantCount","ReceiverVideoConstraints","_defaultConstraints","defaultConstraints","onStageEndpoints","updateLastN","updateReceiveResolution","updateReceiverVideoConstraints","updateSelectedEndpoints","ReceiveVideoController","_rtc","startLastN","channelLastN","useNewBandwidthAllocationStrategy","remoteEndpointIds","oldConstraints","newConstraints","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","p2pSession","SendVideoController","layerSuspensionEnabled","enableLayerSuspension","_propagateSendMaxFrameHeight","_senderVideoConstraints","idealHeight","_getActiveMediaSession","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","setPreferredSendMaxFrameHeight","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_setSessionID","setStatus","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","AudioOutputProblemDetector","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevels","remoteAudioLevels","localAudioLevelsString","createAudioOutputProblemEvent","AverageStatReport","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","ComponentsVersions","addCommandListener","processVersions","mucResource","getComponentVersion","componentName","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","addStateListener","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","JitsiConference","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","wasStopped","avgRtpStatsN","_audioOutputProblemDetector","speakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","videoSIPGWHandler","recordingManager","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","startRecording","_addSession","_emitSessionUpdate","stopRecording","_createSession","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","JitsiConnection","appID","errType","errorType","errorMessage","createConnectionFailedEvent","ANALYTICS_CONNECTION_DISCONNECTED","resourceCreator","isAuthenticatedUser","codecSettings","codecSelection","_statsCurrentId","statisticsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","receiveVideoController","sendVideoController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","callStatsConfigParams","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","transcriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","_sendBridgeVideoTypeMessage","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getExternalAuthUrl","urlForPopup","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","getTranscriber","localAudioTracks","getTranscriptionStatus","_fireAudioLevelChangeEvent","activeTpc","_fireMuteChangeEvent","actorId","_getInitialLocalTracks","trackType","isStartAudioMuted","isStartVideoMuted","muteHandler","audioLevelHandler","oldTrackBelongsToConference","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","videoTypeTagName","addAsUnmutePromises","removeAsMutePromises","lock","unlock","selectParticipant","selectParticipants","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_updateFeatures","_maybeStartOrStopP2P","updateDTMFSupport","botParticipant","mediaSessions","removePromises","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_suspendMediaTransferForJvbConnection","webSocket","forceJvb121","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","overallFeedback","detailedFeedback","getSsrcByTrack","remoteUserId","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","remoteID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","perf","toggleE2EE","setEnabled","isLobbySupported","disableLobby","joinLobby","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","setToken","initJitsiConference","getLogs","metadata","PERMISSION_PROMPT_IS_SHOWN","SLOW_GET_USER_MEDIA","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","JitsiMediaDevicesEvents","_logOutputDevice","permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","deviceID","isDevicePermissionGranted","isMultipleAudioInputSupported","emitEvent","stopActiveDevices","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","PRECALL_TEST_RESULTS","_initialized","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","getAnalyticsAttributesFromOptions","video_requested","JitsiMeetJS","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","_selfCloseConnection","xml","xmlDom","isVideo","convertVideoToDesktop","jitsiLocalTracks","createLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","oldfirePermissionPromptIsShownEvent","promiseFulfilled","firePermissionPromptIsShownEvent","fireSlowPromiseEvent","restOptions","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","AuthUtil","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","loaded","__webpack_modules__","amdO","getter","definition","g","globalThis","nmd","paths","__webpack_exports__"],"sourceRoot":""}